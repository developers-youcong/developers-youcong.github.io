<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我在M2公司做架构之中台思想与架构体系</title>
      <link href="/2021/10/16/%E6%88%91%E5%9C%A8M2%E5%85%AC%E5%8F%B8%E5%81%9A%E6%9E%B6%E6%9E%84%E4%B9%8B%E4%B8%AD%E5%8F%B0%E6%80%9D%E6%83%B3%E4%B8%8E%E6%9E%B6%E6%9E%84%E4%BD%93%E7%B3%BB/"/>
      <url>/2021/10/16/%E6%88%91%E5%9C%A8M2%E5%85%AC%E5%8F%B8%E5%81%9A%E6%9E%B6%E6%9E%84%E4%B9%8B%E4%B8%AD%E5%8F%B0%E6%80%9D%E6%83%B3%E4%B8%8E%E6%9E%B6%E6%9E%84%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-什么是中台">一、什么是中台?</span></h2><p>“中台”是对传统”软件平台”的升级和加强，通过在企业层面引入新的专业化职能分工、数据唯一性建模等规则；在解决软件行业”重复造轮子”问题的基础上，进一步解决了传统”软件平台”未能解决的”软件平台间职能边界划分问题”及”数据孤岛问题”。</p><p>而我个人的理解如下图所示:<br><a id="more"></a><br><img src="/2021/10/16/我在M2公司做架构之中台思想与架构体系/01.png" alt="图一"></p><p>我对中台的定义是:<br><strong>中台就是为了解决重复造轮子、重复建设、集结多方面资源的一种解决问题的方案(或者可以叫企业级可复用平台解决方案)。</strong></p><h2><span id="二-项目初期为何会提到中台呢">二、项目初期为何会提到中台呢？</span></h2><p>一切源于项目经理的设想。</p><h2><span id="三-为何最后又放弃了中台">三、为何最后又放弃了中台？</span></h2><p><strong>我个人觉得原因可归纳为如下</strong>:</p><ul><li>我们当下的业务场景并不适合中台；</li><li>中台的建设成本很高，一开始弄这个，很容易舍本逐末(对于当初尚未为公司创造盈利的部门而言，很容易折断)。</li></ul><p>而且技术顾问也非常反对并在微信群分享了这篇文章:<br><a href="http://www.cniteyes.com/archives/36885" target="_blank" rel="noopener">“中台”是怎么臭了大街的</a></p><h2><span id="四-我对中台的一些思考">四、我对中台的一些思考</span></h2><ul><li>大公司流传下来的一套管理手段或技术手段不一定适合中小公司，具体情况具体分析，一定要结合实际情况而定；</li><li>好的方案一定要能够落地，不能落地的方案，不能叫好的方案；</li><li>中台的本质是快，快速搭建以及快速验证，目的在于减少或降低试错成本，但对于小公司而言，试错成本很高，一开始就错的话，后面很难纠正，不如一开始求稳第一，快在其次(换句话说，想清楚在做，而不是一开始想都没想直接就开始做了)。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 技术思考与实践 </tag>
            
            <tag> 架构 </tag>
            
            <tag> 职业生涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我在M2公司做架构之三层架构和微服务</title>
      <link href="/2021/10/16/%E6%88%91%E5%9C%A8M2%E5%85%AC%E5%8F%B8%E5%81%9A%E6%9E%B6%E6%9E%84%E4%B9%8B%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E5%92%8C%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
      <url>/2021/10/16/%E6%88%91%E5%9C%A8M2%E5%85%AC%E5%8F%B8%E5%81%9A%E6%9E%B6%E6%9E%84%E4%B9%8B%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E5%92%8C%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>三层架构和微服务是我们公司系统架构1.0最鲜明的特点，由技术顾问最先提出，项目经理两边协调和总体把控，而我主要负责执行以及过程中的问题处理、人员培训等。<br><a id="more"></a></p><p>在Java中，三层架构通常是指数据持久层、业务逻辑层、表现层。</p><p>在没有确定三层架构和微服务这套架构体系之前，经过了如下演变(不想涉及公司太多，故以博客相关进行举例说明)。</p><h2><span id="一-单体统一大杂烩">一、单体统一大杂烩</span></h2><p><img src="/2021/10/16/我在M2公司做架构之三层架构和微服务/01.png" alt="图一"></p><p>相当于一个单体服务，这个单体服务承载着系统所有的功能。<br>但这个单体统一大杂烩架构很快就被驳回了，至于原因，大家可以阅读这篇文章<a href="https://youcongtech.com/2021/04/17/%E4%BB%8E%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E5%88%B0%E5%88%86%E5%B8%83%E5%BC%8F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84%E6%80%9D%E8%80%83/" target="_blank" rel="noopener">从单体架构到分布式微服务架构的思考(告诉大家单体微服务的利与弊)</a>。</p><h2><span id="二-按照粗粒度划分">二、按照粗粒度划分</span></h2><p><img src="/2021/10/16/我在M2公司做架构之三层架构和微服务/02.png" alt="图二"><br>但这个也被驳回了，具体原因我也记不清了。从创业公司的架构演变到教育SaaS公司，基本上都践行这样的按粗粒度划分或者是在此基础上进行部门小组职责划分。</p><h2><span id="三-按照细粒度划分">三、按照细粒度划分</span></h2><p><img src="/2021/10/16/我在M2公司做架构之三层架构和微服务/03.png" alt="图三"><br>相当于在博客微服务的基础上进行再细化，化粗为细。但这个也被驳回了。</p><h2><span id="四-按照岗位职责划分">四、按照岗位职责划分</span></h2><p><img src="/2021/10/16/我在M2公司做架构之三层架构和微服务/04.png" alt="图四"><br>这个被最终采用。被采用的原因之一，由数据建模人员或DBA亲自编写SQL，而对应的开发人员只需负责Web层的参数校验以及业务逻辑层的数据计算或组装以及其它可能的处理即可。而这个最终演变为我们的三层架构和微服务体系。这套三层架构和微服务体系到底对不对呢？放在当时由于一些客观原因，是对的。而后来，主客观因素的变更，三层架构和微服务体系也得随之变动，因为不再适合当前情况了。</p><h2><span id="五-总结">五、总结</span></h2><p>从单体统一大杂烩到按照岗位职责划分，最终我们这套架构体系差不多是这样的:<br><img src="/2021/10/16/我在M2公司做架构之三层架构和微服务/05.png" alt="图五"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术思考与实践 </tag>
            
            <tag> 架构 </tag>
            
            <tag> 职业生涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我在M2公司做架构之二次开发</title>
      <link href="/2021/10/16/%E6%88%91%E5%9C%A8M2%E5%85%AC%E5%8F%B8%E5%81%9A%E6%9E%B6%E6%9E%84%E4%B9%8B%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
      <url>/2021/10/16/%E6%88%91%E5%9C%A8M2%E5%85%AC%E5%8F%B8%E5%81%9A%E6%9E%B6%E6%9E%84%E4%B9%8B%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-如何看开源项目二次开发">一、如何看开源项目二次开发？</span></h2><p>以前在创业公司做开发的时候，那个时候也可以叫半个全栈，我对于开源项目二次开发是极其不喜欢非常讨厌，因为我觉得这些东西都不难，为何就不能自己写呢？还有就是我觉得开源项目二次开发不利于我的成长，毕竟是在人家的基础上开发，太多的受制于人。后来随着经验的慢慢积累(包含教训)，我的看法改变了。<br><strong>过去我的看法可归纳为</strong>:<br><a id="more"></a></p><ul><li>牺牲了我的成长空间，限制了我的成长；</li><li>受制于人，用人家的东西得让人家的套路来。</li></ul><p><strong>如今我的看法可归纳为</strong>:</p><ul><li>提高研发效率，避免重复造轮子的时间浪费；</li><li>提高设计编码能力，认真阅读和理解他人代码，学习他人所长，避免他人所短，让自己每次写代码都比过去写的更好；</li><li>提高问题解决能力，各种奇葩问题不断打磨我解决问题的套路。</li></ul><h2><span id="二-开源项目如何进行二次开发">二、开源项目如何进行二次开发？</span></h2><h3><span id="1是否符合业务的需求">1.是否符合业务的需求</span></h3><p>通常我们要抄袭或者是在该开源项目上进行二次开发，在动手前，最重要的就是确认是否符合我们的需求，如果不符合我们的需求，属于无用功。那么如何确认是否符合业务需求？找产品经理、项目经理进行确认，确认无误后再动手。</p><h3><span id="2能够将开源项目跑起来">2.能够将开源项目跑起来；</span></h3><p>试问要二次开发，如果跑都跑不起来，怎么进行二次开发呢？过去在创业公司参与编程教育项目的开发工作，其中OJ系统我们是基于一些开源项目的二次开发，但在未确认具体的OJ系统二次开发前，我们调研了很多开源项目，当时的经理也给我们团队每人分别指派了任务，其中有一个任务分给我，要我去研究某国外的OJ系统，最后发现这个OJ系统在GitHub上非常不活跃，好几年前了，以及文档匮乏，根本就跑不起来。最后我只得放弃了，经过一系列的调研和实践，我们最终采用了HustOJ作为二次开发的目标。</p><h3><span id="3具备该开源项目所需编程语言的基础">3.具备该开源项目所需编程语言的基础；</span></h3><p>如果不具备该开源项目所需编程语言的基础，你将会非常痛苦。因为二次开发通常是需要改源代码的，起初可能是改一点，但随着需要业务链打通，需要较大的改动，这个改动不是指将对方的完全推翻，而是指在其中加上我们自己的业务逻辑，如果你不具备该开源项目的编程语言基础，报错基本上就能把你给弄”懵逼”。其实，最理想的情况下，最好还是自己所擅长编程语言对应的开源项目，那样的话，学习成本就会较低且问题基本可控。例如曾经在某创业公司做的关于OJ二次开发、VsCode二次开发、EduSoho二次开发，当时我们后端团队基本上具备JS基础，对于VsCode二次开发相对得心应手，但对于EduSoho、HustOJ则显得有点寸步难行，关键在于我们对于PHP不熟。</p><h3><span id="4熟悉该开源项目结构数据库表设计-代码目录结构等">4.熟悉该开源项目结构(数据库表设计、代码目录结构等)</span></h3><p>前面所说具备该开源项目所需编程语言的基础虽然会给我们二次开发造成一些影响，使得我们难以前行，但是呢？如果我们没有熟悉其代码目录结构以及数据库表设计，那么我们的修改将毫无意义，编程语言虽然是一个重要因素，但不是最关键的因素。当时在某创业公司做打通EduSoho、HustOJ与我们自己系统的联通，相当于最小改动原则，EduSoho、HustOJ核心逻辑和大部分代码我们不动，我们从HTTP通信调接口以及数据库中间表关联的方式进行联通，最终两周的时间就把这件事情搞定了，而我成功的因素之一就是事先熟悉EduSoho和HustOJ的项目结构，将这两个开源项目的文档以及主要核心代码都阅读了一遍。</p><h3><span id="5战胜困难的决心和耐心">5.战胜困难的决心和耐心</span></h3><p>战胜困难的决心和耐心非常重要，因为开源项目二次开发的过程中，你会遇到各种各样的奇葩问题，而面对这些奇葩的问题，你必须要自我鼓励给自己打气，同样你也需要耐心，明确真正的问题，最后要有决心解决这个问题。我当初VsCode二次开发做的不是非常好，原因在于遇到问题时我心生胆怯，还没针对问题进行排查，就说自己解决不了。而后在某教育SaaS公司我受到了很多打击以及教训，最后促使我形成了面对问题的方法论，加上近一年多在M2公司的不断实践和总结，使我内心在面对问题时更加强大了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术思考与实践 </tag>
            
            <tag> 架构 </tag>
            
            <tag> 职业生涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我在M2公司做架构之技术选型</title>
      <link href="/2021/10/14/%E6%88%91%E5%9C%A8M2%E5%85%AC%E5%8F%B8%E5%81%9A%E6%9E%B6%E6%9E%84%E4%B9%8B%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/"/>
      <url>/2021/10/14/%E6%88%91%E5%9C%A8M2%E5%85%AC%E5%8F%B8%E5%81%9A%E6%9E%B6%E6%9E%84%E4%B9%8B%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-我们公司所做的产品是属于什么类型">一、我们公司所做的产品是属于什么类型？</span></h2><p>我们公司所做的产品属于针对某一行业的解决方案。而这一解决方案适应国家的<a href="http://www.gov.cn/xinwen/2021-03/13/content_5592681.htm" target="_blank" rel="noopener">十四五规划</a>中的某一项内容。换言之是一套基于大数据分析的SaaS平台。<br><a id="more"></a></p><h2><span id="二-基于产品类型我们所做的技术选型又是怎样的">二、基于产品类型，我们所做的技术选型又是怎样的？</span></h2><p>明确了产品的类型后，作为公司架构的主要负责人和执行人，我是如何进行技术选型的呢？<strong>首先任何的技术选型不能脱离业务这个前提，技术导向业务，避免为了技术而技术这样的情况。</strong></p><p>我个人曾主导某创业公司的技术选型以及参与某教育SaaS公司某一项新产品线的技术选型，对于技术选型方面，经验相对比较丰富。创业公司的技术选型是我当初失败的案例，而某教育SaaS公司的某一项新产品线的技术选型以及当前M2公司的技术选型是我相对成功的案例。</p><p>为了避免我一个人可能有的一叶障目，在阅读了公司业务的需求文档、产品文档、1代的技术文档以及与技术顾问、项目经理和其他成员的沟通前提下，我做出了一个初步的技术选型方案，出了方案后，开了技术评审会，虽然会议上就一些问题有过争论，但最终赞同我提出的技术选型方案，而后，项目非常紧急，需要出一个最小可用性产品能够演示，于是我放弃了从头开始写，项目经理给了一个开源项目参考，于是我花了两天的时间在其基础上开始做各种试验，以确保能够与我们的业务紧密结合且问题可控。毕竟在开源项目基础上二次开发，加入一些我们的东西，要想不出问题，很难，即便遇到问题，也是没办法的事情，不过呢，我很喜欢一次又一次将这些问题解决的感觉。</p><p><strong>最终我们的技术选型方案确定如下:</strong></p><ul><li>Java开发和运行环境:JDK8；</li><li>项目依赖管理:Maven；</li><li>版本控制:Git；</li><li>项目文档管理:SVN；</li><li>分布式框架:SpringCloud+SpringCloud Alibaba；</li><li>微服务框架:SpringBoot；</li><li>接口鉴权:SpringSecurity+OAuth2.0；</li><li>分布式服务注册中心:Nacos；</li><li>缓存数据库:Redis；</li><li>关系型数据库:MySQL；</li><li>接口在线文档管理:Swagger-Bootstrap-UI；</li><li>持久层框架:MyBatis/MyBatis-Plus均采用；</li><li>数据库连接池:Druid；</li><li>第三方工具类库:Hutool；</li><li>限流熔断:Sentinel；</li><li>分库分表:MyCat；</li><li>链路追踪:Zipkin。</li></ul><p>至于为何选择这一套技术方案，我是经过深思熟虑以及综合多方面的意见来考虑的，方法论可参考我写的如下文章:<br><a href="https://youcongtech.com/2021/08/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3SaaS%E4%B9%8B%E6%9E%B6%E6%9E%84%E7%AF%87/" target="_blank" rel="noopener">深入理解SaaS之架构篇</a><br><a href="https://youcongtech.com/2021/04/17/%E4%BB%8E%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E5%88%B0%E5%88%86%E5%B8%83%E5%BC%8F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84%E6%80%9D%E8%80%83/" target="_blank" rel="noopener">从单体架构到分布式微服务架构的思考</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术思考与实践 </tag>
            
            <tag> 架构 </tag>
            
            <tag> 职业生涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目依赖管理混乱问题之解决</title>
      <link href="/2021/10/12/%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E6%B7%B7%E4%B9%B1%E9%97%AE%E9%A2%98%E4%B9%8B%E8%A7%A3%E5%86%B3/"/>
      <url>/2021/10/12/%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E6%B7%B7%E4%B9%B1%E9%97%AE%E9%A2%98%E4%B9%8B%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-项目依赖管理混乱问题的背景">一、项目依赖管理混乱问题的背景</span></h2><p>刚加入公司那会儿，安逸了两周后，一次开会说月底前必须要有一个最小MVP产品可以演示来看，于是从那天以后，整个部门的氛围就开始紧张很多，因为一旦没出来，部门团队就非常有可能面临解散。对于那个时候，公司研发很多规范都没有真正的落实，例如编码规范、开发规范、设计规范、测试规范、运维规范等都是一片模糊。那个时候对于我们团队而言，为了尽早做出一个成品，有些规范可以暂时放弃，因为太过拘束于规范，反而受制于其，这样会造成很多时间上的消耗，而时间对于那个时候我们团队而言非常珍贵。<br><a id="more"></a></p><h2><span id="二-项目依赖管理混乱的原因有哪些">二、项目依赖管理混乱的原因有哪些</span></h2><p>项目依赖管理混乱，主要体现pom.xml。事后我做了一些总结归纳，原因可分为如下:</p><ul><li>技术选型未深入人心(这个未深入人心指的是团队对于技术选型的共识有分歧)；</li><li>每个人都有自己对Maven的理解，没有具体的统一的规范形成约束，导致每个人为了更快实现功能疯狂地引入各式各样的第三方框架包；</li><li>没有深刻地理解Java，仅仅是API的搬运工(虽然我很不愿意承认这一点，但这是事实)；</li><li>主人翁意识缺乏(原因在于研发流程上存在问题，我们无需懂更多具体的业务，只需按部就班的参照数据建模复制SQL以及参照接口文档组装数据即可，因为设计层面上有任何问题或是SQL有任何问题都与我们无关，我们只需实现就行，至于质量上的优劣与我无关)。</li></ul><p>但这些原因存在都有其客观的背景，就像前面所说的那样，如果让每个人都走熟悉业务、梳理业务、相关数据库表设计、编写SQL、编写接口、前后端联调等这样的流程，最终可能会导致那个月东西出不来，最后团队可能就拜拜了。最后只能由最懂业务且来的较早的两个人进行相关的库表设计和sql编写，而我们研发只需参照数据建模复制SQL以及参照接口文档组装数据即可。但这必须只能是短期的，不能是长期的，长期的如此的话会导致很多问题，特别是对于技术人员来说，技术这东西每个人花点时间，基本上都能学会怎么用，但业务上的熟悉和深刻理解是需要时间的，而这个时间的长度是大于技术人员学习技术的时间长度。做技术的朋友都知道一点，<strong>技术仅仅是实现业务的一种方式，一旦离开了业务，技术就成了无本之木、无根之水了。</strong>一旦在一家公司长久的不较为深入的接触业务、熟悉业务、理解业务，那么是很不利的，因为在非技术型公司，一个技术人员如果只会技术，那么他是很容易被替代的。当然了，这里不是宣扬”技术无用论”，相反，我向阐述的一点就是，如果你想在一家公司长久地干下去(三年或三年以上)，那么一定是要懂业务的，不然的话，不仅仅位置上难以提升，薪资也是如此。</p><h2><span id="三-针对这些原因如何切实有效地解决问题">三、针对这些原因，如何切实有效地解决问题</span></h2><p>知道了原因后，我是如何做的呢？我跟项目经理要了一些时间，那些时间主要花在解决历史遗留问题(也可以理解为技术债务)，而其中这个项目遗留问题就是历史遗留问题之一的。我所做的并不复杂，可归纳为如下:</p><ul><li>第一、切分支(小步前进，减少大面积改动造成不可控的危害)；</li><li>第二、从头过项目，理解各个微服务之间的关系；</li><li>第三、在确认理解各个微服务之间的关系后，从大的pom.xml开始统一规范；</li><li>第四、统一了大的pom.xml后，按照微服务之间的关系，从网关到各个微服务的pom.xml依次抽取和移除；</li><li>第五、启动并进行几个接口测试(一次自测)，无问题后，打包发布测试环境；</li><li>第六、登录前台界面系统进行操作(相当于二次自测)；</li><li>第七、告知测试主管让其安排人进行功能测试；</li><li>第八、测试反馈无问题后，合并主分支并发布生产。</li></ul><p>当然了，至今对于Maven的依赖管理，团队部分成员并未深刻理解，而我会Review对应成员的代码，告知其这样的做法是不合理的，并让其纠正。但这样并非问题的根本解决之道，以后仍然会再度重现。我思考了很多，<strong>觉得只有两点或许能根本解决:</strong></p><ul><li>第一、技术评审(部门领导主导，各研发成员参与，用于统一共识)；</li><li>第二、代码Review(好的宣扬，坏的引以为鉴，给写代码的人制造一定的压力，让其不要觉得写了之后就什么都不管了)。</li></ul><p>而这两点是我上家某教育SaaS公司技术部门的多年实践。这两点会促使代码的可读性、可扩展性、可重用性的提高，很容易就达到高内聚低耦合。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《云上朗读者》之归纳总结</title>
      <link href="/2021/10/02/%E3%80%8A%E4%BA%91%E6%9C%97%E8%AF%BB%E8%80%85%E3%80%8B%E4%B9%8B%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/"/>
      <url>/2021/10/02/%E3%80%8A%E4%BA%91%E6%9C%97%E8%AF%BB%E8%80%85%E3%80%8B%E4%B9%8B%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>阅读《云上朗读者》，颇有一些启发，记录相关笔记，归纳为如下。<br><a id="more"></a></p><h2><span id="一-风起云涌后浪潮生">一、风起云涌——后浪潮生</span></h2><h3><span id="1陈琦毕业两年升主管自沉稳而后顾人">1.陈琦:毕业两年升主管，自沉稳而后顾人</span></h3><p>数据可视化。</p><h4><span id="1所有伟大都源于一个勇敢的开始">(1)所有伟大都源于一个勇敢的开始</span></h4><h4><span id="2艺术鉴赏驱动我的技术创新">(2)艺术鉴赏驱动我的技术创新</span></h4><p>从技术上来讲，数据可视化在视觉效果方面会复用游戏界<br>一些成熟的引擎和算法，在故事性、代入感等方面也会向优秀的游戏作品学习借鉴。</p><h4><span id="3以专业度人并心怀感恩">(3)以专业度人，并心怀感恩</span></h4><p>深度沉迷容易形成信息孤岛，切忌盲目自信。一定要<br>多关注前瞻的信息动态、友商和竞品的最新成果、行业宏观的发展情况，积极思考、反推、学习，要清晰地认识到自己的差距。</p><h3><span id="2黄胜蓝学霸的奇葩选择成功不仅靠运气">2.黄胜蓝:学霸的奇葩选择，成功不仅靠运气</span></h3><p>极验验证。</p><h4><span id="1一意孤行的非主流青春">(1)一意孤行的”非主流”青春</span></h4><h4><span id="2用6年改变一件小事">(2)用6年改变一件小事</span></h4><h4><span id="3年轻就是试错的资本">(3)年轻就是试错的资本</span></h4><p>人脉和经验通过常规职业路线也可以获取，但创始人的逻辑思维所带来的认<br>知能力、战略性目光、视野与格局的成长速度，是无法相提并论的。不必过分关注结<br>果，这份经历对于未来已经足够宝贵。</p><h3><span id="3郭旭东怀里橘猫柴犬掌上代码江湖">3.郭旭东:怀里橘猫柴犬，掌上代码江湖</span></h3><p>自研DevOps平台Varian。</p><h4><span id="1自我驱动成就非凡">(1)自我驱动，成就非凡</span></h4><h4><span id="2云原生是未来的趋势">(2)云原生是未来的趋势</span></h4><h4><span id="3退一步海阔天空">(3)退一步海阔天空</span></h4><p>现在国内有很多人在把优秀开源项目的文档翻译成中文文档，同时越来越多的中国人在著名项目中起着重要作用，我们比自己想象得更优秀。克服了接触新事物的本能恐惧之后，就是另一片天地了。</p><h3><span id="4陈旸清华博士的模型信仰">4.陈旸:清华博士的模型信仰</span></h3><h4><span id="1用数据解决问题是核心理念">(1)用数据解决问题是核心理念</span></h4><p>不论学习、工作还是生活，我解决问题的方式始终以自己的价值观为导向。“Using data to solve problems”是我的信仰。我喜欢跳出个人角色，从外部视角去看待问题，寻找规律，然后给出答案。</p><p>在学习这件事上，要面向需求和场景进行选择。每年有大量的优秀模型产生，不能单纯为了学习而学习，而要挑选好轮子，通过代码实现，发挥模型的更大价值。</p><h4><span id="2模型塑造商业价值管理方案降本增效">(2)模型塑造商业价值，管理方案降本增效</span></h4><h4><span id="3立足核心优势发挥最大价值">(3)立足核心优势，发挥最大价值</span></h4><p>我不认为自己算是成功的，失败的案例倒是可以分享。当初自己投了 200 多万<br>想要做鹿班这样的产品，结果没成功，现在还在赚钱还贷款。</p><p><strong>当初的创业热潮吸引了<br>不计其数的企业和创业者，而存活甚微。链条太长和能力以外的决定，务必谨慎。</strong></p><p>当遇到瓶颈，不妨换个维度思考。</p><p>还是建议创业者不要轻易跨界，做自己擅长的事情，链条越短越好。</p><p>专注并发挥自己的核心价值很重要。</p><h2><span id="二-波谲云诡峡谷冲锋">二、波谲云诡——峡谷冲锋</span></h2><h3><span id="1裔隽跨界半生不改赤子之心">1.裔隽:跨界半生，不改赤子之心</span></h3><h4><span id="1投身未知挑战符合我的个性">(1)投身未知，挑战符合我的个性</span></h4><h4><span id="2突破自我保持好奇和危机感">(2)突破自我，保持好奇和危机感</span></h4><p>这个时代的技术发展日新月异，只有不断学习才能防止被淘汰。</p><p>跨界的基础就是不断学习，突破自我。</p><p>不光互联网行业，大家都要拥抱内部和外部的变化，保持好奇心和进取心，改变思维模式，才会不被时代的浪潮抛下。</p><h4><span id="3薪火相传用感性平衡技术思维">(3)薪火相传，用感性平衡技术思维</span></h4><p>诸如哲学、心理学、人类学的内容，无法像理工科知识立马解决问题，但会在你认知世界的过程中帮助丰富世界观。<strong>现在每年都会读几本心理学的新书，这种真正研究人类规律、描述思考过程的学问，可以帮助你认识自己，更好地与世界沟通。</strong></p><p><strong>人生不像代码那样只有 0 和 1、非黑即白，真正的世界和人都是感性的。我很感激心理学，给我提供了更多的视角，也让我离梦想更近。</strong></p><h3><span id="2戚俊可能是最懂架构的投资人">2.戚俊:可能是最懂架构的投资人</span></h3><h4><span id="1前夜难耐曙光难得">(1)前夜难耐，曙光难得</span></h4><h4><span id="2事业与人生的最优解">(2)事业与人生的最优解</span></h4><h4><span id="3从零开始创业者都有连续创业心">(3)从零开始，创业者都有连续创业心</span></h4><p><strong>作为CTO，不仅要专精技术选型，还需要关注<br>企业全局，思考如何能快速实现更高的商业价值，如何利用技术前景与商业模式巧妙地互惠。更需要摸索平衡之道，平衡技术投入产出比，平衡技术价值与研发难度，平衡效率与稳定等。</strong></p><h3><span id="3朱祺小时候我们都想当科学家只有他做到了">3.朱祺:小时候我们都想当科学家，只有他做到了</span></h3><h4><span id="1当爱好成为职业">(1)当爱好成为职业</span></h4><p>大数据本身也是我的业余爱好之一，所以并不会枯燥，也不会计较精力投入问题，我差不多除了睡觉都在研究这些。进行各个行业领域研究的时候，首先想一下自己需要得出的结论目标方向，然后去分析下结论会是什么，没有方向确立的话经常想着想着会偏题，所以目标先明确再去思考其中的过程，最终得出结论。</p><p>在了解生产过程或者业务流程的基础上设计出的算法是有灵魂的。</p><h4><span id="2云计算赋能行业互通">(2)云计算赋能行业互通</span></h4><p>跨界研究，利于开阔眼界和深度思考。</p><h4><span id="3数据驱动时代关注人类需求">(3)数据驱动时代，关注人类需求</span></h4><h3><span id="4黄坤勇于尝试感受世界">4.黄坤:勇于尝试，感受世界</span></h3><h4><span id="1革旧维新引领先锋">(1)革旧维新，引领先锋</span></h4><p>我对新生事物总是比较感兴趣，愿意投入时间和精力去钻研，希望能够把新东西研究透彻。坚持一定的知识广度和某个领域的深度相结合，既有一定的广泛知识基础，又在研究某个具体技术点的时候，愿意深入了解，在这个投入的过程中，经常能够从其他领域获得灵感，触类旁通。关于激励方面，主要还是解决了复杂事情，比较有成就感，也能够自我驱动，自我激励，不断挑战新的目标。</p><p><strong>要做互联网化改造，必须要对业务流、控制流和数据流<br>来进行分离操作，让核心系统尽可能小，只有这样才能够提高并发处理能力，快速完成产品上线，响应业务发展。</strong></p><h4><span id="2未雨绸缪静待时机">(2)未雨绸缪，静待时机</span></h4><p>大数据和人工智能未来在保险行业将有巨大的发展空间，无论是客户获取、核保、理赔、反欺诈还是客户服务方面，都会有广泛的应用空间。保险行业在数字化转型中将广泛应用前沿科技，人工智能、大数据、云计算、移动互联、5G 等前沿科技都将在保险行业获得巨大的发展空间。</p><h2><span id="三-开云见日量级质变">三、开云见日——量级质变</span></h2><h3><span id="1肖修鹏十年磨一剑成就靠谱职业经理人">1.肖修鹏:十年磨一剑，成就靠谱职业经理人</span></h3><h4><span id="1专精客服行业一步一个脚印">(1)专精客服行业，一步一个脚印</span></h4><h4><span id="2人工智能致力于解放人类">(2)人工智能致力于解放人类</span></h4><p>目前AI的定位偏向助手，辅助或替代坐席劳动力，降低和解放坐席的劳动强度和时间。机器来做人不愿意做的简单重复的工作，而人则转向营销分析等更有价值和创造性的东西上。</p><h4><span id="3不止四十不惑人都要耐得住寂寞">(3)不止四十不惑，人都要耐得住寂寞</span></h4><p>初入职场三五年的时候，迷茫很正常，但不能一直没有方向，需要有明确的相对长远的目标，某行业或某领域等。一旦确定，就不要经常更改了，专业领域的精与深是我们的价值所在。</p><p>现在互联网发展到全媒体时代，网红大行其道，影响了很多年轻人的价值观塑造。现实里没什么一夜暴富的机会，想要好好做事、有所成就，必须专注，长期积累，耐得住寂寞。</p><h3><span id="2刘洪峰以术彰道用匠心做技术">2.刘洪峰:以”术”彰”道”，用匠心做技术</span></h3><h4><span id="1曲线救国每一天都在接近梦想">(1)曲线救国，每一天都在接近梦想</span></h4><h4><span id="2放慢节奏匠心出品">(2)放慢节奏，匠心出品</span></h4><h4><span id="3回归初心成为你想成为的样子">(3)回归初心，成为你想成为的样子</span></h4><h3><span id="3黄军雷一往无前热爱成就人生">3.黄军雷:一往无前，热爱成就人生</span></h3><h4><span id="1求知若愚热爱成就非凡">(1)求知若愚，热爱成就非凡</span></h4><p>对我来说，学习是很开心的事情。上学的时候，每搞懂一个知识<br>点的通透感都会让我很愉悦，工作后解决问题时也是如此。当你能力越强大，解决的问题越复杂，所获得的成就感也非比寻常。即使当时痛苦，回想起来留下的都是美好的记忆。经历过几次成功的循环后，就知道眼前的难题又是一次成长历练的机会，就不会只将它视作困难了。因为你知道，翻过这座山，会有更好的风景。</p><h4><span id="2厉兵秣马前置的人生就像开了挂">(2)厉兵秣马，前置的人生就像开了挂</span></h4><p>“Keep looking，don’t settle.”其实也是我人生价值理念的体现，持续探索，不要给自己设限。</p><h4><span id="3领略更广阔的天地">(3)领略更广阔的天地</span></h4><p>首先，无论什么行业，都要有自己擅长的领域，我推荐年轻人走 T 字型能力路线。当你的能力到达足够深度，才能做到触类旁通。很多人在深度不够的时候想通过“面”的方式来解决，其实是没有竞争力的，必须成为至少一个领域的专家。</p><p>其次要有宽阔的视野，站在外部角度才能真正看懂自己所面临的问题，自己工作的价值，对这个社会的意义</p><p>另外有机会也要多出去走走，人生需要一些视野的宽度。</p><h3><span id="4傅奎十年安全路一颗好奇心">4.傅奎:十年安全路，一颗好奇心</span></h3><h4><span id="1误打误撞入行爱不释手">(1)误打误撞入行，爱不释手</span></h4><h4><span id="2以提升安全人员的幸福感为创业使命">(2)以提升安全人员的幸福感为创业使命</span></h4><h4><span id="3尝试跨界协作成就更好的自己">(3)尝试跨界协作，成就更好的自己</span></h4><h4><span id="4与黑灰产斗智斗勇妙趣横生">(4)与“黑灰产”斗智斗勇，妙趣横生</span></h4><h3><span id="5孙琦一名创业者欲火涅槃的自白">5.孙琦:一名创业者欲火涅槃的自白</span></h3><h4><span id="1一个纯粹的技术人">(1)一个纯粹的技术人</span></h4><p>事实证明，技术创业者最大的问题，是过于技术理想化，容易自嗨，而忽略用户真正的需求，再好的技术没有落地场景也是纸上谈兵。</p><h4><span id="2一些技术创业者需要具备的特质">(2)一些技术创业者需要具备的特质</span></h4><ul><li>洞察—深入理解用户需求；</li><li>长远—关注历史；</li><li>广阔—深挖洞、广积粮；</li><li>洒脱—学会断舍离。</li></ul><h3><span id="6田亮坚信大数据的变革力量">6.田亮:坚信大数据的变革力量</span></h3><h4><span id="1兴趣导向职业信心坚定抉择">(1)兴趣导向职业，信心坚定抉择</span></h4><p>以我个人对大数据 10 年的研究来说，大数据变革可以分上下两半场，前 5 年聚焦在云计算基础设施方面，企业级应用从自建到逐步迁云，技术选型上摆脱 IOE 的垄断，有了新的技术思路与选择。后 5 年聚焦在大数据的应用场景上，企业级数据应用不再是大数据变革的目标，而是更多地渗透到人们日常生活中，改变大家的生活方式，甚至未来社会经济发展的模式。</p><h4><span id="2细化受众专注价值">(2)细化受众，专注价值</span></h4><p>我认为未来的社交方向则朝个性化、细分领域的目标发展，“兴趣社交”就符合这个定义。通过情感连线精细垂直的主题圈子，可以避免无聊又混乱的信息噪音，从而得到沉浸式的体验。</p><h4><span id="3定位清晰持续学习">(3)定位清晰，持续学习</span></h4><p>我个人认为大数据开发者从方向与职业规划上大致分成 2*2=4 种人才定位。从方向上讲，大数据领域有平台开发与应用开发两个方向，前者聚焦在基础平台研发环节（平台工程师），后者聚焦在数据业务环节（策略 &amp; 算法工程师）。从职业规划来讲，一种是技术专家线，这类开发者需要对所在领域有着深入的技术储备，了解相关技术原理，追踪前沿技术发展；另一种是技术管理线，该人才定位除了有技术深度还要有广度，包括团队管理能力、敏锐的业务意识以及前瞻性，负责把控项目进度与风险预判、公司技术规划与规范等，属于综合型人才。<br>无论将自己定位于何种类型，唯一的建议是持续性学习。这样的学习不局限于前沿技术跟踪，还要提升产品意识、思维方式、沟通技巧等多个方面。</p><h3><span id="7胡逢迎拥抱创新持续探索">7.胡逢迎:拥抱创新，持续探索</span></h3><h4><span id="1思考点燃理想尝试成就结果">(1)思考点燃理想，尝试成就结果</span></h4><h4><span id="2负重前行每一次转折都弥足珍贵">(2)负重前行，每一次转折都弥足珍贵</span></h4><h4><span id="3与时俱进融会贯通">(3)与时俱进，融会贯通</span></h4><p>个人要善于横向发展，融会贯通，很多东西都是源于生活又高于生活，实际上很多问题结合生活中很浅显的例子就可以引用过来更便于理解，特别是我们视觉上的方式比较直观，可以用简单的模型引用到复杂的逻辑上，这样会理解得更快。</p><h2><span id="四-凌云时刻王者之路">四、凌云时刻:王者之路</span></h2><h3><span id="1周志明职业电竞选手的java大神之路">1.周志明:职业电竞选手的Java大神之路</span></h3><h4><span id="1成长如修炼功到自然成">(1)成长如修炼，功到自然成</span></h4><p>宏观与微观之间融会贯通。人需要经常思考，“做什么”更重要，还是“为什么更重要”，即执行与知行。我个人更偏向于多问为什么，这也是我不愿意离开一线编程工作的原因，希望了解底层基础，效果是如何实现，为什么要这样实现。在对微观具象有了清晰的理解之后，才具备真正完成宏观掌控和抽象的可能。跟学功夫是一样的道理，头三年师傅不教把式，先扫地担水扎马步。练好内功再学招式，才能行云流水，步步生风。</p><p>开放的心态引领未来。</p><p>学会分享，加速成长。</p><p>提升社交圈，看见新世界。</p><p>想办法进入到更高阶层的圈子，了解到更深层次的事物和运转模式，打开视野，能力的提升会有质的飞跃。</p><h4><span id="2专注技术也热衷生活">(2)专注技术，也热衷生活</span></h4><h3><span id="2孙玄玄姐特立独行的架构师">2.孙玄:”玄姐”，特立独行的架构师</span></h3><h4><span id="1重新认识自己扬帆再启航">(1)重新认识自己，扬帆再启航</span></h4><h4><span id="2直击灵魂拷问放弃百万年薪">(2)直击灵魂拷问，放弃百万年薪</span></h4><h4><span id="3成功从来都是一次次的刻意练习">(3)成功从来都是一次次的刻意练习</span></h4><p><strong>内驱力是拉开人与人距离的发动机，也是提升自我最核心的要素。</strong>是否真正想提升自己，欲望和野心有多强烈，就会决定自己能成为怎样的人。在高度自觉的自我驱动下，做正确的事情。</p><h3><span id="3蒋朔淼一个连续创业者的不破不立">3.蒋朔淼:一个连续创业者的不破不立</span></h3><h4><span id="1因为看见所以相信">(1)因为看见，所以相信</span></h4><p><strong>固步自封只会画地为牢，人要努力看见明天。</strong></p><h4><span id="2破山中贼易破心中贼难">(2)破山中贼易，破心中贼难</span></h4><p>以前我的心态是，什么产品有前景就做什么。如今我的想法是，要把产品做好，对社会有所交代。现在我的使命感比任何时候都强，可能是经历了一场思想认知的洗涤，置之死地而后生的通透和坚定吧。</p><h4><span id="3知行合一是一场修行">(3)知行合一是一场修行</span></h4><p><strong>人一定要想清楚自己所做事情的最终追求，创业者首当其冲。它是使命、愿景、价值观，但绝不是定义好一句话给别人看。即使没有这句话，人也应该知道自己正在做什么，以后要怎么做。</strong></p><p>在这里也有一句话送给创业的同行者：“真正想明白”使命、愿景和价值观，贯穿创业始终！愿与诸君共勉。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈系统重构</title>
      <link href="/2021/09/29/%E8%B0%88%E8%B0%88%E7%B3%BB%E7%BB%9F%E9%87%8D%E6%9E%84/"/>
      <url>/2021/09/29/%E8%B0%88%E8%B0%88%E7%B3%BB%E7%BB%9F%E9%87%8D%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>近来公司系统重构，我作为主力军之一，面对系统重构，既兴奋又恐惧。兴奋在于我可以将自己对设计模式、架构模式、编程理念、工作以来的开发教训等运用到系统重构中；恐惧在于我担心这次重构万一不成功岂不是打自己的脸。<br><a id="more"></a><br>关于系统重构，我极其小心，为此我花了近一天的时间阅读了许多重构文章，也仔细回顾自己以前做系统设计和二次开发的教训，力图使这次系统重构能够成功。其实做了以后发现这次系统重构并没有我想象的那么难，也许是如今的我比过去更强大的原因。</p><p><strong>A架构</strong>:数据存取服务-业务逻辑服务-Web接口服务(号称三层架构体系)。</p><p><strong>B架构</strong>:将要改造的，将数据存取服务、业务逻辑服务、Web接口服务合为一个。</p><h2><span id="一-系统重构的背景以及原因有哪些">一、系统重构的背景以及原因有哪些？</span></h2><p>A架构是当前的架构，为了应对未来的需求以及解决当下的一些问题，不得不由A架构演变为B架构。其实A架构从当初的角度出发，也有其有利的地方，只不过唯一不变的是变化，所以必然要演变为B架构。也许B架构早晚有一天也得淘汰，得演变为新的架构。这就是系统重构得背景以及原因。</p><p>关于一些问题，其中比较突出的问题是，按照业务功能分类，从A架构的角度出发居然要有三个微服务(其实一个微服务就能搞定，没有必要写三个)，随着业务不断增加，微服务越来越多，这种多直接导致微服务管理的难度系数上升以及各种不利的连锁反应。</p><h2><span id="二-采用b架构的目的是什么">二、采用B架构的目的是什么？</span></h2><ul><li>让接口开发和接口调试变得更简单，减少不必要的步骤；</li><li>降低服务之间的通信成本；</li><li>减少代码冗余；</li><li>提高代码的可扩展性、增加代码的可读性；</li><li>日志统一，便于问题排查；</li><li>降低服务耦合，更体现职责单一原则。</li></ul><h2><span id="三-从a架构演变为b架构的难点有哪些">三、从A架构演变为B架构的难点有哪些？</span></h2><ul><li>从低层(数据存取服务)到高层(Web接口服务)，需要重写代码，因为演变的过程中需要去除一些冗余；</li><li>演变的过程中确保前端系统不会因为后端系统的重构而发生大的改动或小的改动(前端不能动)；</li><li>需要通读代码，梳理业务，一点点调试，小步前进，需要有耐心，不能粗心大意，考虑尽可能要全面。</li></ul><h2><span id="四-明确了目的和难点你的方案是什么">四、明确了目的和难点，你的方案是什么？</span></h2><p>我的方案很简单，Web接口微服务特别是与前端密切相关的(参数和响应结果)保持不变，数据存取服务相关的XML和Dao进行复用，业务逻辑服务以及数据存取服务部分重写与合并。<br><strong>最终归纳出具体的方案流程如下:</strong></p><ul><li>(1)通读代码，理清业务，梳理流程(三个服务是如何交互的)；</li><li>(2)自顶向下，复用Web接口服务的Controller；</li><li>(3)自底向上，复用数据存取服务的XML以及DAO；</li><li>(4)中间兼容，业务逻辑重写上层Web接口服务的Controller与数据存取服务的XML以及DAO，使其匹配上层Web接口以及下层数据存取；</li><li>(5)完成(1)~(4)后，通过PostMan或集成Swagger这样的接口自动化工具进行测试，确保合并后服务的正常运行；</li><li>(6)提交代码发布开发环境进行前端联调；</li><li>(7)通过在前端系统操作验证，确保合并的最终成功和问题最小化；</li><li>(8)基于(7)成功后，合并到主开发分支并推送。</li></ul><p><strong>主开发分支</strong>:相当于开发人员的正式分支，平时开发人员对于新的功能均在自己分支上开发-接口调试-最后合并到主开发分支并交由运维进行发布，让测试人员进行测试。</p><h2><span id="五-你觉得系统重构最重要的是什么">五、你觉得系统重构最重要的是什么？</span></h2><p>最重要的我认为有这么几点:</p><ul><li>明确重构的目的(为什么要重构)；</li><li>一定要通读相关代码，熟悉业务以及理清楚流程(业务不熟悉，流程不清楚可找相关人员请教)；</li><li>与直属领导进行沟通，沟通具体的方案以及重构优先级(有些功能优先级高，有些功能优先级低)；</li><li>落地方案并在实践中不断调整(具体问题，具体分析、具体解决)；</li><li>要克服畏难情绪并自我激励，因为系统重构会遇到各种各样的奇葩问题，这些问题很容易使你打退堂鼓；</li><li>小步前进，逐步迭代，拒绝贪多(慢即是快，稳妥第一，速度第二)。</li></ul><h2><span id="六-小结">六、小结</span></h2><p>荀子有一篇文章叫《劝学》，其中有一句话我印象很深刻，那就是”君子性非异也，善假于物也”。在系统重构的时候，我没有盲目直接动手，过去盲目的例子太多了，人要学会吸取教训，这样才能不断进步，而是参考前人的经验教训并结合实际情况而落地具体系统重构方案。</p><p>感谢以下博友的文章给了我系统重构一些启发:</p><p><a href="https://blog.csdn.net/zl1zl2zl3/article/details/84657968" target="_blank" rel="noopener">系统重构的十点经验</a></p><p><a href="https://www.cnblogs.com/amap_tech/p/12054393.html" target="_blank" rel="noopener">系统重构的道与术</a></p><p><a href="https://www.cnblogs.com/jensen-lau/p/6504127.html" target="_blank" rel="noopener">遗留系统重构的三个原则</a></p><p><a href="https://migration.ink/" target="_blank" rel="noopener">《系统重构与迁移指南》</a></p><p><a href="https://learnku.com/articles/3670/two-problems-to-be-considered-in-reconfiguration-system" target="_blank" rel="noopener">重构不得不考虑的两个问题</a></p><p><a href="https://www.cnblogs.com/docmao/p/3898388.html" target="_blank" rel="noopener">有关系统重构那些事儿</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 系统重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈Layui</title>
      <link href="/2021/09/25/%E8%B0%88%E8%B0%88Layui/"/>
      <url>/2021/09/25/%E8%B0%88%E8%B0%88Layui/</url>
      
        <content type="html"><![CDATA[<p>今天得知layui官网下线，如下图所示:<br><img src="/2021/09/25/谈谈Layui/01.png" alt="图一"></p><p>我个人还是蛮有感触的，不禁让我想起创业公司的五个产品，分别为智能酒店后台管理系统、智能门锁后台管理系统、资源共享平台、共享洗浴间管理系统、编程教育所涉及icode以及魔改系统等均用到layui这个web框架。<br><a id="more"></a><br>在<a href="https://www.cnblogs.com/youcong/" target="_blank" rel="noopener">挑战者V博客</a>的找找看搜索，发现关于layui的也写了十多篇直接相关的文章。<br>以下是我写的:<br><a href="https://www.cnblogs.com/youcong/p/10667039.html" target="_blank" rel="noopener">layui之日期和时间组件</a><br><a href="https://www.cnblogs.com/youcong/p/10657272.html" target="_blank" rel="noopener">layui之确认框</a><br><a href="https://www.cnblogs.com/youcong/p/10371988.html" target="_blank" rel="noopener">layui关闭弹出层</a><br><a href="https://www.cnblogs.com/youcong/p/9296424.html" target="_blank" rel="noopener">最易懂的layui分页</a><br><a href="https://www.cnblogs.com/youcong/p/8326002.html" target="_blank" rel="noopener">layui前端框架之分页</a><br><a href="https://www.cnblogs.com/youcong/p/11070329.html" target="_blank" rel="noopener">layui如何隐藏弹出层关闭的按钮</a><br><a href="https://www.cnblogs.com/youcong/p/10657263.html" target="_blank" rel="noopener">记一次layui弹框关闭问题</a><br><a href="https://www.cnblogs.com/youcong/p/9325620.html" target="_blank" rel="noopener">layui弹出层之应用实例讲解</a><br><a href="https://www.cnblogs.com/youcong/p/11440639.html" target="_blank" rel="noopener">layui上传文件组件(前后端代码实现)</a><br><a href="https://www.cnblogs.com/youcong/p/11070332.html" target="_blank" rel="noopener">layui如何自定义弹出层关闭事件</a><br><a href="https://www.cnblogs.com/youcong/p/11342366.html" target="_blank" rel="noopener">layui之table.render使用(含后台详细代码实现)</a><br><a href="https://www.cnblogs.com/youcong/p/10575270.html" target="_blank" rel="noopener">Uncaught ReferenceError: layer is not defined</a></p><p>官网的首页有这样一句话:<strong>由职业前端倾情打造，面向全层次的前后端开发者，易上手开源免费的 Web UI 组件库。</strong></p><p>对于过去前后端都做的Java开发人员来说，学习和熟练使用layui Web框架是一件非常容易的事情。而且layui做出来的后台管理系统，也十分美观。包括我在<a href="https://youcongtech.com/2020/10/07/2020%E5%B9%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E5%92%8C%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">2020年的一些思考和总结</a>这篇文章中提到的关于学习的思考，其中里面介绍了我的博客系统，我的博客的后台管理的主要前端框架就是layui，效果图如下:<br><img src="https://youcongtech.com/2020/10/07/2020%E5%B9%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E5%92%8C%E6%80%BB%E7%BB%93/03.png" alt="图二"><br><img src="https://youcongtech.com/2020/10/07/2020%E5%B9%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E5%92%8C%E6%80%BB%E7%BB%93/04.png" alt="图三"></p><p>当时该后台参考的是码云上面的一个开源项目，名字叫<a href="https://gitee.com/thans/layuiAdmin" target="_blank" rel="noopener">layuiAdmin</a></p><p>从这则公告上的这句话:<br><strong>过去五年，layui 有幸被应用在不计其数的 Web 平台，在前端工程化迅速席来的浪潮中，我们仍然感受到一丝来自于 jQuery 的余晖，这是一种带有热量的冰冷（反之亦可）。使命已达，便纵有万般遗憾，更与何人说？！</strong></p><p>我看到了也是一种无奈之举。</p><p><strong>“做Java开发的，如果会jQuery能极大的增加找工作的机会”</strong>。这句话我很有感触，当初能进入创业公司，这一点也是优势。对于不少中小企业而言，用人成本是很高的，如果招一个人既会写后端又会写前端，相当于一份工资做两个职位的事情，何乐而不为呢。我编程的五年里，其中写前端相关的我就写了三年。直到今天，我还有不少同学、朋友位于研发一线，不仅仅要写后端还得写前端。直到今天为止，仍然还有不少公司招Java开发的，要求其不仅仅是写Java，还得写前端，例如下面的招聘要求:<br><img src="/2021/09/25/谈谈Layui/03.png" alt="图四"></p><p>只不过要求的不再是jQuery了，而是目前最为流行的前端三大框架之一的Vue.js。</p><p>向下面这样的岗位招聘:<br><img src="/2021/09/25/谈谈Layui/04.png" alt="图五"></p><p>谈到了熟练掌握HTML、JavaScript以及Ajax，通常涉及到这个，一般进来是维护老系统，很多老系统难以重构，先不说后端，前端均采用jQuery的老版本或者一些老的前端框架之类的。</p><p>我印象比较深的是，我的四家公司的技术经理、技术总监、Leader均会写前端相关的代码。看来也是那个时代要求一个人不仅仅需要写后端，前端也得写，同时还得会运维。</p><p>如今专门化，专门化的好处在于<strong>专业的人做专业的事情</strong>。对于后端而言，学习写前端是一件成本很低的事情，但是写是一方面，如何写好也是需要花一些功夫的。我当初在创业公司的时候，前端写的非常溜，一天时间六七个模块的CRUD相关的就写完了，但是呢，一旦出bug，就很难受，那个时候没有这样的思想，<strong>即通用方法抽取</strong>(也可以叫组件化)。</p><p>layui此次下线，使我不得不意识到一个问题:<strong>技术会持续不断的更新迭代，那些停滞不前或已经不满足潮流的旧技术终将会被无情的淘汰(包括人、公司、行业等)，那么怎样的东西才更有可持续发展的能力，不会随时间的流逝或技术上的更新迭代而被淘汰呢？</strong></p><p>我从招聘网站上找到一些答案，仅供参考，如下所示:</p><ul><li>编程语言不限，我们更看重对工程设计的深刻理解和强大的迁移学习能力。</li><li>具备良好的分析解决问题能力，较完善的逻辑思维框架和全局思维。</li><li>具备良好的沟通表达能力和团队协作能力。</li><li>计算机理论知识扎实。</li><li>对技术有激情，有较强的学习能力与敏锐的技术前瞻性，对新的领域和技术能够快速掌握并应用到实际工作中。</li><li>能深入理解业务需求，分析和发现优化点。</li><li>深入理解和精通某一项编程语言。</li><li>具备优秀的自驱力和探索精神，勇于对系统和需求的不合理提出质疑，并且有能力推动落地。</li></ul><p>我相信能够做到上面8点的人，不会因为技术更新迭代而被淘汰的。而上面8点也是我自己对我自己的要求。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《程序员修炼之道》之前言</title>
      <link href="/2021/09/25/%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E5%89%8D%E8%A8%80/"/>
      <url>/2021/09/25/%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-是什么造就了务实的程序员">一、是什么造就了务实的程序员</span></h2><ul><li>早期的采纳者/快速的适配者；</li><li>好奇；</li><li>批判性的思考者；</li><li>现实主义；</li><li>多面手。<a id="more"></a></li></ul><h3><span id="1早期的采纳者快速的适配者">1.早期的采纳者/快速的适配者</span></h3><p>你对技术和技巧有一种直觉，喜欢尝试。当接触新东西时，你可以很快地掌握它们，并把它们与其他的知识结合起来。你的信心来自经验。</p><h3><span id="2好奇">2.好奇</span></h3><p>你倾向于问问题。这真不错-你怎样做到的？你对那个库有意见吗？总在听人说起的量子计算到底是什么？符号链接是怎么实现的？你热衷于收集各种细微的事实，坚信它们会影响自己多年后的决策。</p><h3><span id="3批判性的思考者">3.批判性的思考者</span></h3><p>你在没有得到证实前很少接受既定的现实。当同事们说”因为就该这么做”，或者供应商承诺会解决所有的问题时，你会闻到挑战的味道。</p><h3><span id="4现实主义">4.现实主义</span></h3><p>你试图理解所面临的每个问题的本质。这种现实主义让你对事情有多困难、需要用多长时间有一个很好的感知。一个过程应该很难，或是需要点时间才能完成，对这些的深刻理解，给了你闻到挑战的味道。</p><h3><span id="5多面手">5.多面手</span></h3><p>你努力熟悉各种技术和环境，并努力跟上新的进展。虽然目前的工作可能要求你在某个专门领域成为行家，但你总是能够进入新的领域，迎接新的挑战。</p><p><strong>我的思考:</strong><br>结合我自身职业经历，这五年来，我身上或多或少也体现上面的五个特征。因为我非常喜欢技术，特别是喜欢尝试新的技术、新的架构模式、新的设计理念等等，但这建立在我已经拥有对应工作经验的前提下，如果没有相应的经验，我很恐惧，因为恐惧来源于未知，特别是刚工作的那一年，不仅仅恐惧生存的问题，也恐惧发展的问题。但当我有了工作经验后，我不断尝试，例如在Java领域内，基于Java的分布式微服务构建等。工作有五年多时间了，我至今仍然认为好奇非常重要，这个重要体现在学习或解决实际问题中不断提问(多问几个为什么)让自己对技术或实际的问题理解更深从而游刃有余。关于批判性的思考者，《黑客与画家》这本书给了我一些启迪，写下了这篇文章<a href="https://youcongtech.com/2021/07/17/%E9%BB%91%E5%AE%A2%E4%BB%B7%E5%80%BC%E8%A7%82%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E6%8E%A2%E7%B4%A2/" target="_blank" rel="noopener">黑客价值观的思考与探索</a>，在我看来，作为一名技术开发者，在做相关的设计如架构设计、数据库设计等等，在自己深入理解的前提下，也要多多询问团队中经验丰富的成员或召集团队大家一起讨论，这有助于让设计更完善更具有落地成功率，同样当领导提出问题的解决方案时，不应盲目执行，一定要深刻理解问题，然后再执行，或者是如果领导的解决问题方案不是特别恰当，应当有理有据的提出自己的看法。再说到现实主义，特别是当产品发布的时间越来越近的时候，这时有一个非常难的功能需要实现，实现的方案有两个，一个是简单，一个是复杂，简单的话会使你代码非常冗余、扩展性非常低、性能也不那么好，复杂的话代码可读性强、高内聚低耦合且性能优，简单方案所花时间短，而复杂的方案则所花时间非常长，这时为了保障产品发布的大局，只能采用简单方案，因为产品发布关系公司的利益，特别是对于创业公司而言，第一个MVP特别重要。最后关于多面手，我做过运维、前端开发、后端开发、测试、项目实施、架构师(半个架构师)等职责，多面手的一个好处让我对产品开发流程有一个全局的视野，同样也有助于我跨部门沟通和快速定位问题和解决问题，但任何事情有利也有弊，什么都会，意味着什么都不精，后期很容易被卡脖子。</p><h2><span id="二-两个提示">二、两个提示</span></h2><h3><span id="1关注你的技艺">1.关注你的技艺</span></h3><p>我们觉得，如果你不关心怎么把软件开发好，那么软件开发领域再也没什么好谈的事情。</p><p><strong>我的思考:</strong><br>作为一名软件开发工程师，虽然说不同的公司，不同的业务，不同的产品，但有一点非常重要，那就是自身的技术能力，技术能力主要体现为如下几点?</p><ul><li>发现问题、定位问题、解决问题的能力；</li><li>理解业务，基于业务进行相应的设计能力；</li><li>针对实际业务场景，使用对应的技术实现能力；</li><li>与人沟通，部门或跨部门协作的能力；</li><li>自我驱动和自我管理的能力；</li><li>不断从工作中或业余时间中学习的能力。</li></ul><p>上述这六点，都是技术能力的体现，无论在大家公司都是可复用、可持续的。我们在实际工作中，自己一定要重视上面六个方面，并想方设法提高它们，千万不能当一天和尚撞一天钟，否则到头来后果很严重。</p><h3><span id="2思考思考你的工作">2.思考!思考你的工作</span></h3><p>为了成为一名务实的程序员，我们要求你在做事的时候，思考一下自己正在做什么。这不是对当前实践做的一次性审计-而是对每天里每一个项目所做的每一个决定进行的批判性评估。不要用自动辅助驾驶系统偷懒，而是要不断地思考，即时地批判自己的工作。IBM公司的座右铭”思考”，实属每个务实程序员的真言。</p><p><strong>我的思考:</strong><br>在阅读上面这句话的时候，我想到了教育SaaS公司的技术经理一次开会对我们说的一句话，这句话我至今印象深刻，<strong>那就是在自己所负责的工作职责内，一定要是那个职责范围内的权威，如果你不是的话，那么你就可以离开这个团队了。</strong>技术经理说这句话的背景是，大家对于产品经理提出需求很少有人去质疑的，例如反驳说你的设计不是合理并给出恰当的理由，以至于那段时间做虚拟货币相关的业务时，错误预估该业务从设计到实现的难度，原本的两周发版一次，因为那一次，耽误了整整一个月之久。那一次给我们团队每个人都上了印象很深的一堂课。我在2020年国庆期间写下了八个思考，其中就有关于对工作上的思考，文章名为<a href="https://youcongtech.com/2020/10/07/2020%E5%B9%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E5%92%8C%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">2020年的一些思考和总结</a>，读者朋友可以读一读。<br><strong>工作中一定要有自己的主见(要有自己的思考)，对于合理的决策，坚决执行，对于不合理的决策，给出意见，进行反馈，在自己所负责的职责范围内，一定要做最权威的那个人。</strong></p><h2><span id="三-务实的个体大型的团队">三、务实的个体，大型的团队</span></h2><p>有些人认为在大型团队或复杂的项目中没有个性的空间。”软件是一门工程学科，”他们说，”如果团队成员个体自行其是，软件就会崩溃。”<br>我们强烈反对这种看法。</p><p><strong>我的思考:</strong><br>创新来源于独特，也可以理解为个性化。如果团队总是大家埋头苦干，守着自己一亩三分地，按时出活，到点下班，遇到难题很难定位就重启，遇到重复工作不思考如何自动化解放自己而是偷懒式的采用CV大法(复制黏贴之类的)，那么长此以往，这个团队是没有活力的，也很难打大仗、打硬仗。我认为个性化的前提不能以牺牲公司及其部门团队的利益，否则那就是团队里的蛀虫或害虫了。总而言之，我是很赞同团队成员的个性化，因为往往个性化能产生创新，创新往往能推动生产力的提高，生存力的提高最终会使公司及团队整体受益。</p><h2><span id="四-这是一个连续的过程">四、这是一个连续的过程</span></h2><p><strong>一则小故事:</strong><br>一位游客在参观英格兰伊顿公学时，询问园丁是如何把草坪修剪得如此完美得。”那很简单，”园丁回答说，”你只要每天早起拂去露水，隔天修剪一次，一周再滚压一次就行了”。”就这些吗?”游客问。”就这些，”园丁回答，”这样做上五百年，你也会有一片漂亮的草坪。”</p><p>伟大的草坪需要每天的点滴护理，伟大的程序员也是如此。</p><p><strong>我的思考:</strong><br>过去我写了很多博客系统或者学习很多技术框架或编程语言，但我本身并未受益太多，反而从某个角度来看，我反受其累。那就是因为我太心急了，总以为事情做完了，我就成长了，非也，例如读技术书，我读完了《Java数据结构与算法》、《架构整洁之道》等这样的书，但我还是所知皮毛，<strong>原因在于任何的事情都是一个循序渐进的过程，读书是需要思考的，思考促使你不断提问，提问有助于深入理解，深入理解便是成长收获。</strong><br>同样在做架构的过程中，架构的演进也是连续的过程，没有一开始就很完美的架构，真正高性能高可用高并发的架构，都是在实际中，一点一滴，慢慢演化的，而非一开始就是如此。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 程序员修炼之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux中文件夹的文件按照时间倒序或者升序排列</title>
      <link href="/2021/09/25/Linux%E4%B8%AD%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E6%96%87%E4%BB%B6%E6%8C%89%E7%85%A7%E6%97%B6%E9%97%B4%E5%80%92%E5%BA%8F%E6%88%96%E8%80%85%E5%8D%87%E5%BA%8F%E6%8E%92%E5%88%97/"/>
      <url>/2021/09/25/Linux%E4%B8%AD%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E6%96%87%E4%BB%B6%E6%8C%89%E7%85%A7%E6%97%B6%E9%97%B4%E5%80%92%E5%BA%8F%E6%88%96%E8%80%85%E5%8D%87%E5%BA%8F%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>应用场景:<br>查询服务器上某个特定文件夹下的文件定时最新生成情况。<br><a id="more"></a></p><h2><span id="核心命令升序">核心命令(升序)</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">命令:ls -lrt</span><br><span class="line">详细解释:</span><br><span class="line"></span><br><span class="line">-l     use a long listing format  以长列表方式显示（详细信息方式）</span><br><span class="line">-t     sort by modification time 按修改时间排序（最新的在最前面）</span><br><span class="line">-r     reverse order while sorting （反序）</span><br></pre></td></tr></table></figure><h2><span id="核心命令降序">核心命令(降序)</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">命令:ls -lt</span><br><span class="line">详细解释:</span><br><span class="line"></span><br><span class="line">-l     use a long listing format  以长列表方式显示（详细信息方式）</span><br><span class="line">-t     sort by modification time 按修改时间排序（最新的在最前面）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈跳槽</title>
      <link href="/2021/09/24/%E8%B0%88%E8%B0%88%E8%B7%B3%E6%A7%BD/"/>
      <url>/2021/09/24/%E8%B0%88%E8%B0%88%E8%B7%B3%E6%A7%BD/</url>
      
        <content type="html"><![CDATA[<p>从2016年8月到迄今为止，我待过不少公司，从外包公司到自主产品公司，从运维到半个架构师兼Java中级开发工程师。至于为什么叫半个架构师？是因为目前公司的技术架构主要是由我负责主导，之所以由我负责主导，原因在于我上家教育SaaS公司分布式的落地实践经验以及我创业公司半分布式和半全栈相关的产品开发经验等。当然了，最关键的不是这个，最关键的是公司领导对我的信任和栽培，也许他们中的一些人，离开了，但我不会忘记这知遇之恩。</p><p>话有些的偏题了，回归正题，谈谈跳槽。跳槽也是离职的一种表现。马云曾说，<strong>“员工离职的原因，林林总总，只有两点最真实，一是钱没给到位，二是受委屈了”</strong>。</p><p>在我的职业生涯上，每次离开一家公司，都多多少少充满着不舍。但人总归是理性的，需要考虑很多现实的因素。现实的因素不仅仅是关于现在，更关系到将来。此文我会谈论如下几个问题:</p><ul><li>为什么要跳槽？跳槽的真正目的是什么？</li><li>跳槽应该规避的不利因素有哪些？<a id="more"></a></li></ul><h2><span id="一-为什么要跳槽跳槽的真正目的是什么">一、为什么要跳槽？跳槽的真正目的是什么？</span></h2><h3><span id="1为什么要跳槽">1.为什么要跳槽？</span></h3><p>在谈论这个问题的时候，我不想在百度或必应搜索这样的问题，我想从我自身职业经历谈论这个问题。</p><p>我当初在外包公司做运维的时候，我之所以待这家公司，原因很简单，因为我自身能力，非常缺乏，但幸运的是遇到了两个小伙伴对我帮助，我飞速成长，但是当我不断进步和成长的同时，但公司给我的薪资待遇仍然非常低，仅仅够我勉强温饱，同时我不想做运维，我想往Java开发这个方向发展，即便这一年里，我利用业余时间不断学习Java相关，但因为没有真正的企业级项目实践经验，很难遇到真正的业务场景问题，所以我无法胜任公司当时Java岗位的要求，我的转岗诉求被驳回。于是我决定离职，<strong>这时的离职理由最主要的原因是我的转岗诉求被驳回，其次就是薪资低</strong>。那个时候对我而言，离开这家公司，我很难找到合适的公司。所以我决定前往北京寻找一个更大的平台，圆我的Java开发梦。</p><p>也许是老天的眷顾，来到北京找到了住的地方后，投了十几份简历，最终我来到了创业公司，这个让我充满传奇经历的地方。<br>关于我在创业公司的经历和收获，可以阅读下面的文章:<br><a href="https://www.cnblogs.com/youcong/p/12153262.html" target="_blank" rel="noopener">创业公司这两年</a><br><a href="https://www.cnblogs.com/youcong/p/10016594.html" target="_blank" rel="noopener">谈谈在创业公司的几点感触</a><br><a href="https://www.cnblogs.com/youcong/p/9862712.html" target="_blank" rel="noopener">作为程序员的思考与反省</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzUxODk0ODQ3Ng==&amp;mid=2247485439&amp;idx=1&amp;sn=201a791086509ae93a29a669e8d402be&amp;chksm=f98054eccef7ddfac7c6b7d30d40b33a1044cc702850cadf1ee2b0a9b3caca551f56779c719b&amp;token=2104650779&amp;lang=zh_CN#rd" target="_blank" rel="noopener">一位北漂在创业公司的两年</a></p><p>离开了创业公司的原因，<strong>我归纳为如下:我想追求更好的发展，更高的薪资。</strong></p><p>创业公司的一年零九个月的经历，我非常感激，因为这使得我，从一个新手Java(没有经历过企业实战的Java开发，都算是新手Java)到半个全栈开发工程师，在创业公司我们团队每个小伙伴都身兼数职，在创业公司，前端开发、后端开发、运维、测试等，我全部都做过。这一定程度上提高了我的技术视野。</p><p>最终，更好的发展和更高的工资都在教育SaaS公司得到了实现，但却使我在一定程度上损失了身体健康。<strong>鱼和熊掌不可兼得，当你想得到一样东西的时候，必然也会失去一些东西，得与失，互相转换。</strong></p><p>但我此时仍然没有意识到一个问题，那就是我每次换一份工作的时候，业务方面都与上一家公司关联性不大。例如从外包公司到创业公司，再从创业公司到教育SaaS。使我每次光有技术上的积累而缺乏业务上的沉淀。这也是后来我为了防止自己安于现状，时不时会去招聘网站上看一些岗位要求，以这些岗位要求为目的进行学习提高自己。举个例子:<br><img src="/2021/09/24/谈谈跳槽/01.png" alt="图一"></p><p>图片中的红色标记就是业务方面的积累体现。这些业务方面的积累是需要时间沉淀的。例如想掌握Linux操作系统和数据库以及sql优化、搜索引擎ES开发经验、领域驱动设计经验、流程编排经验、高并发等是可以通过后天刻意练习实现大部分的。</p><h3><span id="2跳槽的真正目的是什么">2.跳槽的真正目的是什么？</span></h3><p>从我的角度来看，跳槽的真正目的只有一个，<strong>那就是让自己不断成长和进步，当然钱也很重要，但并不是最主要。</strong>这几年来，我买过基金、买过比特币、买过股票，但我似乎忽视了一点，基金的本质就是风险平坦(实际还是股票，只不过不是鸡蛋放在一个篮子里，而是多个鸡蛋，多个篮子，哪怕其中一个篮子破了，也不影响整体)、比特币的本质我觉得就是炒作和投机(也许这句话有失片面，虽然我买了比特币没有亏，盈利了一点点，但也掩盖不了我是一个”韭菜”)、股票的本质虽然有机构或大体量散户的投机成分但归根结底还是公司的盈利能力(公司不断成长和进步，盈利的能力便可持续提升)。对于我而言，每次跳槽实际也是一种投资，我对自己的投资，公司对我的投资。<br>导师常跟我强调一点，<strong>千万不要为了多个两三千块而去跳槽，那样的跳槽价值很低，没有必要。</strong></p><h2><span id="二-跳槽应该规避的不利因素有哪些">二、跳槽应该规避的不利因素有哪些？</span></h2><p>从我所经历的角度出发，可归纳为如下:</p><ul><li>不要因为人际关系处的不好而跳槽(因为你很难确保你下一个或下下个公司不会遇到这样的情况，学会如何处理人际关系)；</li><li>不要因为跟领导产生矛盾而跳槽(人与人之间，哪怕再好的朋友都会产生矛盾，矛盾并不可怕，可怕的是任由矛盾激化而不是相办法对话解决该矛盾)；</li><li>不要因为看到人家跳槽涨薪，自己也想着跳槽涨薪(自己通过跳槽涨薪这种方式也能成功，但是最后你会发现可能没有这个必要)；</li><li>不要因为环境太安逸了，想着出去闯闯而跳槽(即便有这个想法，也要做好充足的准备，否则就是找”虐”)。</li></ul><p>也许有人会这样说，如果不出去闯一闯看一看，那么到了30岁或到不了35岁就会被裁了，因为长期处于一个安逸稳定的环境(舒适圈)，很容易让人退步(温水煮青蛙的故事体现)。</p><p>这的确是一个问题，所以人的职业生涯中需要一个”复业”，这个”复业”会促使你不断成长和进步。例如写博客对我而言就是一个”复业”。<br>关于写博客的好处，我在这篇文章谈论过，感兴趣的朋友可以阅读:</p><p><a href="https://youcongtech.com/2019/05/27/%E8%87%B4%E6%89%80%E6%9C%89%E7%9A%84%E5%BC%80%E5%8F%91%E8%80%85%E4%BB%AC/" target="_blank" rel="noopener">致所有的开发者们</a></p><p>至于如何跳槽才能最优化，我没有相关的经验，故不表述已见，免得误人误己。但我想这篇文章或许能给你带来一些启发:<br><a href="https://youcongtech.com/2021/05/23/%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%AF%B9%E8%B5%9A%E9%92%B1%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E6%91%B8%E7%B4%A2/" target="_blank" rel="noopener">技术人对赚钱的思考与摸索</a></p><p><a href="https://youcongtech.com/2021/07/17/%E9%BB%91%E5%AE%A2%E4%BB%B7%E5%80%BC%E8%A7%82%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E6%8E%A2%E7%B4%A2/" target="_blank" rel="noopener">黑客价值观的思考与探索</a></p><p><a href="https://youcongtech.com/2021/09/04/%E4%B8%AD%E5%9B%BD%E8%B1%A1%E6%A3%8B%E4%B9%8B%E5%90%AF%E5%8F%91/" target="_blank" rel="noopener">中国象棋之启发</a></p><p><a href="https://youcongtech.com/2021/08/06/%E8%82%96%E7%94%B3%E5%85%8B%E7%9A%84%E6%95%91%E8%B5%8E%E4%B9%8B%E6%84%9F%E6%82%9F%E5%85%B3%E9%94%AE%E8%AF%8D/" target="_blank" rel="noopener">肖申克的救赎之感悟关键词</a></p><p><a href="https://youcongtech.com/2020/10/07/2020%E5%B9%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E5%92%8C%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">2020年的一些思考和总结</a></p><p><a href="https://youcongtech.com/2019/05/27/%E8%87%B4%E6%89%80%E6%9C%89%E7%9A%84%E5%BC%80%E5%8F%91%E8%80%85%E4%BB%AC/" target="_blank" rel="noopener">致所有的开发者们</a></p><h2><span id="三-总结">三、总结</span></h2><p>有一句话叫做，”知易行难”。很多事情实际做起来并没有想象中那么美好，肯定会遇到不少困难，但千万不要因为一时的困难而选择放弃，否则成功便会离你远去。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国象棋之启发</title>
      <link href="/2021/09/04/%E4%B8%AD%E5%9B%BD%E8%B1%A1%E6%A3%8B%E4%B9%8B%E5%90%AF%E5%8F%91/"/>
      <url>/2021/09/04/%E4%B8%AD%E5%9B%BD%E8%B1%A1%E6%A3%8B%E4%B9%8B%E5%90%AF%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>中学时期曾读过这样一篇古文,名曰《烂柯经》，<strong>原文如下:</strong><br>博弈之道，贵乎严谨。高者在腹，下者在边，中者占角，此下棋家之常然。法曰:宁输数子，勿失一先。有先而后，有后而先。击左则右视，攻后则瞻前。两生勿断，皆活勿连。阔不可太疏，密不可太促。与其恋子以求生，不若弃子而取势，与其无事而强行，不若因之而自补。彼众我寡，先谋其生。我众彼寡，务张其势。善胜者不争，善阵者不败。善战者不败，善败者不战。夫棋始以正合，终以奇胜。必也，四顾其地，牢不可破，方可出入不意，掩人不备。凡敌无事而自补者，有侵袭之意也。弃小而不就者，有图大之心也。随手而下者，无谋之人也。不思而应者，取败之道也。诗云:”惴惴小心，如临于谷。”</p><p>后来才知此文被收集于一本书中，名字叫《雅玩集:棋经十三篇》，而上面的原文章节名称为合战篇第四。随说这本书以及这篇文章说的是围棋，但在我看来，不论是围棋还是象棋，在很多”道”中往往是相通的。</p><p>中国象棋给了我很多启发，特别是工作多年以后，经历了很多事情，同样也让我回顾了过去十几年所发生的一切。从这个角度来看，中国象棋促使着我不断的回忆往事，同样也复盘往事中的教训，最终的目的只有一个让自己变得更加优秀。一位好友说，”努力让自己发光，对的人才会迎光而来。”</p><p>2021年是一个特别的一年，这一年来，无论是生活或工作，所发生的事情，让我非常深刻，但有些事情，即便现在不发生，将来也会以另外一种形式发生。</p><p>我将中国象棋的启发，归纳为以下几点:<br><a id="more"></a></p><ul><li>明确目标，制定计划；</li><li>主动性思维；</li><li>学会控制自己的情绪，不要在非理智的情况快速决策；</li><li>要有耐心；</li><li>落子无悔；</li><li>尊重敌人并向敌人学习；</li><li>唯一不变的就是变化；</li><li>木桶原理；</li></ul><h2><span id="一-明确目标制定计划">一、明确目标，制定计划</span></h2><p>中国象棋，下棋双方的最终目标在于吃掉对方的将或者帅。哪怕过程中一方比一方损失再多，只要能吃掉对方的将或者帅，都是值得的。<br>在明确这个目标后，无论红棋还是黑棋，便展开自己的布局。这就好比我们明确了一个目标后，便开始为之行动。目标明确了，但通常而言，目标并不是那么容易实现的，需要制定计划，这个计划是否全面或更为详细，依据于目标的难易程度，高难度的目标，需要周全的计划，而且这个周全的计划一定要具备可落地性，不能落地的计划，就不叫计划。<br>从中国象棋来说，我持红棋，有优先权，这个优先权，通常能让我掌握主动权，例如炮走象位(位于中心兵后一步)准备吃掉黑棋中心兵，黑棋通常会出马保住黑棋中心兵，因为中心兵(不论红棋还是黑棋)，关系到全局的形势，主动或被动。<br>从程序员的规划来看，路线有很多，例如:</p><p>初级开发工程师-&gt;中级开发工程师-&gt;高级开发工程师-&gt;技术总监-CTO；</p><p>初级开发工程师-&gt;中级开发工程师-&gt;高级开发工程师-&gt;技术专家；</p><p>初级开发工程师-&gt;中级开发工程师-&gt;高级开发工程师-&gt;技术总监；</p><p>初级开发工程师-&gt;中级开发工程师-&gt;高级开发工程师-&gt;架构师；</p><p>初级开发工程师-&gt;中级开发工程师-&gt;高级开发工程师-&gt;技术经理；</p><p>初级开发工程师-&gt;中级开发工程师-&gt;高级开发工程师-&gt;项目经理；</p><p>但所有的规划都建立在你的目标是什么，例如有的人在成为高级开发工程师以后，就想着加入某个创业公司做技术合伙人；还有的觉得自己不适合写代码转做了项目经理；还有的觉得自己喜欢技术也适合做技术，成为了架构师或技术专家。</p><p>记得我工作第一年的时候，那个时候做运维，因为对运维不熟，我每天下班后回来，就是敲Linux命令，学习一切Linux相关的基础知识。</p><p>后来在某创业公司的时候，特别是在创业公司的第二年，我为了成为能够独挡一面的中级Java研发工程师，不断的学习和积累，不断的写博客总结和分享。</p><p>再后来来到了第三家公司，我的目标是成为独挡一面的高级Java研发工程师，为此我在一些招聘网站上搜索高级Java研发工程师的要求是什么，于是针对相关的简历要求，制定了学习计划，接下来不断地执行这些计划。</p><p>当然了，明确了目标并制定对应的计划，然后执行。这并不是一件轻松的事情。特别对于有工作经验的人来说，当有了工作经验之后，基本上就不需要像刚毕业那会担心因为自己的能力问题找不到对口的工作。<strong>但是对于有工作经验的人来说，虽然不怕找不到工作，但最终还会受制于年龄的增长和能力的增长不成正比(这也是某些招聘岗位上所说工作年限与工作能力不符)，换句话来说，这就是中年危机</strong>。<br><strong>这就要求我们不同的阶段需要明确自己的目标，并制定能够落地(切实可行)的计划，不能落地的计划，是没有意义的。</strong></p><p>最后对于我和任何行业的朋友说一句，<strong>当发觉自己可能退步了或退步了，或者没有目标的时候，感到十分焦虑的时候，可以去招聘网站上看看，找一个比当前岗位要高一级的，看对应的岗位要求，然后根据这些要求进行针对性学习，这便是招聘岗位驱动学习法。</strong>我个人认为这种方法可以降低焦虑和提高自己的学习能力。</p><h2><span id="二-主动性思维">二、主动性思维</span></h2><p>过去下棋的时候，总偏向于先防御消耗对方再伺机找机会进攻，不料每次一开始采取防御，往往最终受制于对方，被对方所掌控，最后被”将死”。这种防御的想法，会让你产生防御性思维，而这种防御性思维往往会使你忘记最终的目标是什么，总会让你陷入保马、保车、保炮、保将等这样的局势，而不是想方设法逆转形势吃掉对方的将军或者打破被动的局势。换言之，假使对方一开始执红棋，展开攻势，黑棋通常会采取防御性策略，但这种策略只是临时的，如果你转变为主动性思维，就能逆转形势，要么处于相持阶段，要么处于进攻阶段。所谓主动性思维就是当陷入不利局面的时候，积极寻找扭转该局面的办法。生活或工作中我们往往会遇到很多问题，例如不好的消费习惯而成为月光族、不好的生活习惯导致身体处于亚健康状态、不好的工作习惯导致工作效率低下等等，要想解决这些问题，必须要让自己从思维上改变，如我要有这个改变的决心，有了决心之后为防止”三天打鱼两天晒网”的假式努力，还要有适合当前情况的计划(所谓适合当前情况的计划，一定要符合当前自身情况，可落地，千万不能好高骛远)。<br>举例子说明:<br>例如，我想通过写博客提高自己多方面的能力(如表达能力、自主学习能力、总结能力等)，那么摆在我面前最直观的问题是怎么写博客，因为我从来没有写过，于是我开始尝试写，从记录自己遇到问题是怎么解决的开始到学习某一项技术框架或编程语言，再到记录平时的阅读书籍的笔记，再到如何深化问题总结自己的方法论等。刚开始我也不知道怎样的频率合适，到底是一天写多少篇，后来决定我一天写多少篇的不是自己主观上想的数字，而是客观上我今天一天遇到了那些问题以及这些问题我是怎么解决的。到后来不知不觉中在博客园平台写了930篇博客文章。<br>这是我博客园的网址:<br><a href="https://www.cnblogs.com/youcong/" target="_blank" rel="noopener">挑战者V博客园</a></p><p>通过这个例子我只想表明一点，<strong>当你想做这件事的时候，一定不能仅仅停留在想上面，一定要想方设法拿出行动来，行动会驱使你产生主动性思维。</strong></p><h2><span id="三-学会控制自己的情绪不要在非理智的情况快速决策">三、学会控制自己的情绪，不要在非理智的情况快速决策</span></h2><p>中国象棋中局势的变化是非常多的，优劣势的转换，也是一瞬间的事，一步走错，敌之优势变为我之优势，我之劣势变为敌之劣势。下棋的过程中，局势优劣对比，下棋的双方时不时会有情绪上的波动，例如我之前在网上和一位朋友下棋，对方走错了一步棋，我抓住了机会吃了炮和马并占据有利的为止，对方顿时由优势转为劣势，而我处于主动一方，我方大部分攻击性棋子如炮、双马、车、兵全部尽入对方领地上，这时我便开始轻敌了，下棋便有些随意，想着要慢慢的将死他，想着将他那边仅剩下的炮、马、两车全部消灭，最后再”将死”他，不料最后人家出奇制胜，引诱我牵制我，最后把我给”将死”了。好好的一盘优势棋最后让我给输了。<br>还有一局是我因为炮马车跟人家换，人家仅仅损失马和车，因为亏了一个炮，让我觉得这把肯定输了，于是想方设法防御，走的每一步不再多想，就目前而言我还有炮、马、车以及双士和双象没被攻破，局势其实并没有那么糟，仍然还有机会赢的，但受到之前的情绪影响导致最后不到五分钟就输了。<br><strong>下象棋最终比拼的是对情绪的控制能力，不因局势优于我方而轻视对手，不因局势劣于我方而方寸大乱。越是不利的局势保持冷静，多思考，通常是有希望翻盘的(这里针对人和人下象棋，不考虑人机对战)。</strong><br>之前写过一篇<a href="https://youcongtech.com/2021/08/08/%E6%95%99%E7%88%B6%E4%B8%89%E9%83%A8%E6%9B%B2%E4%B9%8B%E6%80%9D%E8%80%83/" target="_blank" rel="noopener">教父三部曲之思考</a>，文章内容涉及到这一点。</p><h2><span id="四-要有耐心">四、要有耐心</span></h2><p>下象棋的时候特别是跟老人对弈的时候，要特别有耐心，不能急躁，老人下的慢在于考虑的多，考虑的多往往每一步都隐含着套路，如果一时图快而下，不经意间进入套路中就很难逆转了。过去我时常听到这样一句话，”年轻人，要磨磨性子”，这个”性子”包含耐心。<strong>想象着长跑运动中，刚开始被人超了好几圈，没什么，保持体力，要有耐心，循序渐进，逐步超越，通常就能超越那些刚开始跑的很快超了好几圈的人。</strong>但如果过程中因为对方超了好几圈开始急躁起来的话，然后加速，到最后不仅仅会超越不了前面的人，反而被后来者追上。<br>仔细想来，在博客园写了930篇博客并在其从几百万排名到185名，其实我对这样的排名不看重，当初也没想着能够从几百万排名到现在这个排名，一切都是当初有耐心的坚持，造就这样的成果的。这样的成果在我当初求职找工作的时候起到了不少作用，同样也让我认识不少优秀的博主，在与他们的交流中，我也不断成长。<br>以前我无论是学习某一项技术或者读某一本书时，总希望用最短的时间做完这一件事情，最终虽然成功用短时间做完了这件事情，但是收效甚微。最后也使得我不是很有耐心，以至于在创业公司的时候，遇到难题，总觉得没办法解决，其实当冷静下来，有耐心的，一步步定位问题，最终也是能够解决的。<br>再例如，关于团队中的技术分享，好的分享应该是围绕一个问题，由问题推出很多东西，例如问题背后的原因(直接原因、客观原因等)，解决问题的方式，解决方案的方案，成员提问，特别是提问，提问固然重要，但我认为有耐心地倾听提问者更重要，因为这有助于弄清楚提问者提的问题到底是什么，这样回答起来不至于答非所问。</p><h2><span id="五-落子无悔">五、落子无悔</span></h2><p>有人说:”人生如棋，落子无悔”。但落子真的无悔吗？我看未必。<br>生活中我们有些时候，总会说，如果当初不这样，也就不会造成这样的结果。其实换言之，如果当初我们在做出决策之前，好好想一想，或者找相关的人问一问，综合多方面意见再做决策，就不会造成这样的结果。但是如果是没有意义的。如果说有意义，那么就是把所经历的教训深刻记忆在自己的大脑中，不断回顾和反思，特别是当要做出人生中的重大决策时，一定要想一想之前的教训。<br>在下棋的时候，虽然我时不时也会走错一些棋，但我确保自己不再掉入或者避免掉入类似的坑，或者是当看到套路的苗头时，防微杜渐。<br>在我个人看来，人的一生有些错误是可以犯的，但不能重复犯，以及人的一生有些错误尽量还是不要犯的，因为代价太惨烈了。<br>拿”校园贷”来看，新闻天天报，但免不了有人还会犯这样的错误。21世纪是一个信息化时代，人们能够接触各种各样的信息，早已是”秀才不出门便知天下事”这样的，但人们还是很难抵御各种各样的诱惑，这些诱惑的危害，即便是人尽皆知，但还是有人，有不少人陷入其中。<br>再拿”传销”来看，新闻天天报，但还是有人，有不少人陷入其中。<br><strong>有些时候我在想，人生的确很难尽善尽美，要说没有遗憾，怎么可能，遗憾也是人生的组成部分，但我真的很希望广大的读者朋友们，不要子欲养而亲不待、珍惜和家人相处的每一天、树立良好的消费观不超前消费、树立良好的终身学习观、趁着能够多走走看看这个世界的时候多走走看看等。也许那样，或许能真的落子无悔。</strong></p><h2><span id="六-尊重敌人并向敌人学习">六、尊重敌人并向敌人学习</span></h2><p>中学时期，下象棋的时候，过去我有一种不好的习惯，那就是当处于优势的地位时，会羞辱对方，这种羞辱的方式是，一步步吃掉对面所有的棋子，再将死对方。直到某一天，一个同学跟我说，你这样很不好，不尊重和你下象棋的人，这样最后会造成没人跟我下象棋。从那之后，很少有人跟我下象棋了，直到我向经常跟我下象棋的同学道歉和改掉了这个坏毛病之后，才有人愿意跟我下象棋。但是有些时候我有些输不起，输多了我会发火赌气不跟那个经常赢我的人下棋，但后来一个朋友说，你这样也不行，每一次输了，你要想一想是什么原因导致的，是走所谓的”瞎眼棋”还是轻视了对方或者没多想一想导致的。这便是早期的复盘。我的导师经常跟我说，<strong>定期复盘，复盘的目的不仅仅在于总结经验教训，避免犯类似的错误，同样也是为了从中推陈出新总结出适合自己的套路。</strong>把错误当作老师，向其学习，这也是一种让自己进步的方式。</p><h2><span id="七-唯一不变的就是变化">七、唯一不变的就是变化</span></h2><p>《孙子兵法》之虚实篇有一句话我印象很深刻，”故兵无常势，水无常形，能因敌变化而取胜者，谓之神”。<br>下象棋中，即便是相同的双方下多局棋，每一局都或多或少不一样，答案在一个”变”字，一个”变”字包含着局势的千变万化。不论是红棋还是黑棋，走的每一步，不仅仅要考虑到可能的预期结果，还能考虑不利的结果该怎么样。”变”也是人与人之间下棋的乐趣。<br>在架构演进的过程中，会不经意间暴露出很多问题的，过去一年亲自设计和开发公司的分布式架构体系的过程中，体会很多。<br>下棋的过程，有趣的体现不在于局势的变化，同样也体现着我在不断的进步的时候，我的对手也是在不断的进步，双方的进步让变化更加精彩。<br>以前我下棋的时候，总想着如果每盘棋变化别那么大就好了，这样我就能用同样的套路击败很多对手，但如果真的那样的话，反而会限制我成长，使我丧失对下棋的兴趣。<br>21世纪不仅仅是信息化时代，也是知识经济时代，知识经济的时代不仅仅促使着人们不断学习，学习的目的在于不被时代所淘汰，因为科技不断进步，不断进步改变了人们的生活方式和工作方式，但是呢？如今看来学的越多反而使人更加焦虑，越来越多人焦虑，最终却使得了某些知识付费平台收割了一大堆”韭菜”。<strong>即便唯一的不变是变化，要学会拥抱变化，但我觉得这个世界运作的背后是有很多规律的，把握和运用这些规律，也许就能真正的跳出这盘棋，从更高的地方，俯视着这一切。</strong></p><h2><span id="八-木桶原理">八、木桶原理</span></h2><p>木桶原理又称短板理论，核心内容为:<strong>一只木桶盛水的多少，并不取决于桶壁上最高的那块木块，而恰恰取决于桶壁上最短的那块。</strong><br>在下象棋的时候，我个人擅长使用炮车组合战术进行攻击，而不擅长使用马，马对于我通常是用来防御的。跟熟人下，第一盘或第二盘，基本上两盘大概能摸清对方的路数，到底是擅长使用炮马、炮车、马车等这样的组合战术，但是通常这样是不好的，因为每一盘局势是多变的，如果不能会用炮车马的话，很容易受制于对方。基本上下棋多年的人，一盘进行一半的时候，能够摸清对方的路数，例如前段时间和一个朋友下棋，对方摸清我擅长使用炮车战术，立马逼着跟我换，最后输的很惨，为此我找电脑跟我陪练如何使用马进行攻击的策略，经过一段时间的练习，还是卓有成效的。<br>作为程序员，特别是Java程序员，做的时间越久，越是感受到那些基础知识的重要性，反而觉得那些新的技术，大致了解和学习一下就行，当作开阔视野，基础的东西每回看都不一样，都有不同的感受，哪怕是《Java编程思想》这样的书，特别是面向对象导论这一章节，早几年看的时候很懵逼，不知道说啥，如今看起来颇有启发，后面我会写对应文章专门讲这个的。<br><strong>弥补短板的目的在于未来防止因为短板而受限，很多时候机会摆在面前，但是因为短板的原因，就这样让机会从自己面前大摇大摆的走过。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈跨域</title>
      <link href="/2021/09/01/%E8%B0%88%E8%B0%88%E8%B7%A8%E5%9F%9F/"/>
      <url>/2021/09/01/%E8%B0%88%E8%B0%88%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-什么是跨域">一、什么是跨域？</span></h2><p>浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任意一个不同，都是跨域。<br><a id="more"></a></p><h2><span id="二-为什么会出现跨域">二、为什么会出现跨域？</span></h2><p>以我职业生涯为例，待过的两家公司，均做过JSP相关的项目，所谓的JSP项目就是一个Java项目中既有后端代码，又有前端代码，前端代码的表现形式就是JSP。JSP项目通常不会有跨域的问题，因为前端发起Ajax请求的时候，也是以请求当前域名为主(符合同源策略)。而当后来在创业公司做智能门锁系统的时候，使用微服务框架SpringBoot，然后就遇到跨域这样的问题(因为不符合同源策略)，做智能门锁系统的时候，当时我采用的架构模式是前后端分离，这也是当时技术经理比较推崇的。</p><h2><span id="三-什么是同源策略">三、什么是同源策略？</span></h2><p>同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><h2><span id="四-为什么会有同源策略">四、为什么会有同源策略？</span></h2><p>为了保护用户的隐私信息。我们每浏览一个网站时，不论是以游客身份或者网站用户身份访问网站时，网站或多或少都会涉及到以Cookie的方式存储我们的信息。如果没有同源策略，就意味着资源的访问没有限制，如果没有限制将会非常容易遭到不法分子的网络攻击。</p><h2><span id="五-针对跨域我所遇到的问题以及解决问题的方式">五、针对跨域我所遇到的问题以及解决问题的方式</span></h2><p>下面四个链接是针对跨域的解决方案(从单体到分布式微服务，主要侧重Java):<br><a href="https://www.cnblogs.com/youcong/p/9676433.html" target="_blank" rel="noopener">Spring配置跨域请求</a></p><p><a href="https://www.cnblogs.com/youcong/p/10503088.html" target="_blank" rel="noopener">Springboot实现跨域请求</a></p><p><a href="https://www.cnblogs.com/youcong/p/10544286.html" target="_blank" rel="noopener">express框架之跨域请求</a></p><p><a href="https://youcongtech.com/2020/08/29/SpringCloudGateWay%E4%B9%8B%E7%BD%91%E5%85%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/" target="_blank" rel="noopener">SpringCloudGateWay之网关跨域问题解决</a></p><p>包括最近因为某个需要在Nginx放行资源，减少跨域问题的干扰(同源策略的限制)，在对应的location下配置如下，就能解决(从中我们能看到解决问题的方式一样，只不过表现的形式不一样而已。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#允许跨域请求的域，* 代表所有</span><br><span class="line">add_header &apos;Access-Control-Allow-Origin&apos; *;</span><br><span class="line">#允许请求的header</span><br><span class="line">add_header &apos;Access-Control-Allow-Headers&apos; *;</span><br><span class="line">#允许带上cookie请求</span><br><span class="line">add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</span><br><span class="line">#允许请求的方法，比如 GET,POST,PUT,DELETE</span><br><span class="line">add_header &apos;Access-Control-Allow-Methods&apos; *;</span><br></pre></td></tr></table></figure></p><p>但是换言之，这种方法做法真的好吗？我的答案是未必(通常建议生产环境设置为某个具体的域名而不能仅仅为了省事设置为<em>，主要是从安全的角度考虑)。<br>因为如果是</em>的话意味着任何人都能以某种方式访问你的网站而不受限制，于是便有了诸如Http Basic Auth、session-cookie、token、OAuth1.0/2.0、签名鉴权等鉴权认证的方式。</p><p>本文参考资料:<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="noopener">浏览器的同源策略</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术分享与思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>农民工这个词</title>
      <link href="/2021/08/28/%E5%86%9C%E6%B0%91%E5%B7%A5%E8%BF%99%E4%B8%AA%E8%AF%8D/"/>
      <url>/2021/08/28/%E5%86%9C%E6%B0%91%E5%B7%A5%E8%BF%99%E4%B8%AA%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<p>“农民工”这个词最早见于新闻联播。农民工这个词最频繁出现于两个地方，一个是关于农民工讨薪(针对一些不法商人而言)，另一个就是春运。<br><a id="more"></a></p><p>学生时期的我对于这个词而言，我是没有多大感觉的。大概是因为有家人替自己负重前行吧。</p><p>后来一位老师说，农民是农民，工人是工人，农民工这三个字是字字诛心…..。那堂课老师说了很多，那个时候我感触不多。直到出来工作以后，经历了许多。</p><p>从一名自幼在城市生长的农村人，在怎么融入这个城市并为这个城市做贡献，到头来，得到不过是”农民工”这赤裸裸的烙印。我后来才明白为何父亲和母亲一定要自力更生的做生意，想必他们当年也经历过这样的歧视。</p><p>算起来快五年了，从那个环境跳出来了，为此我付出很大的代价和牺牲。但当我站在高楼大厦上，看着外面的城市风景时，不经感叹当初的牺牲都是值得的，至少换来了一份体面的工作。但体面的工作仍然摆脱不了我还是一名”农民工”，美其名曰”新生代农民工”。</p><p>在我的家乡，或者在很多人的家乡，许多人的父母都希望孩子有一天能够更有出息，出息的体现不仅仅是能够拥有更好的物质生活，还有一个受人尊敬的地位。</p><p>“农民工”这个词，不经意间毁了很多人。对此，作为一个所谓的”新生代农民工”，我不会因此放弃自己的理想与抱负，终有有一天，我会将这个词从我的头上给摘掉，也许代价会很大，我不确定自己能不能扛下来，但是我会去做的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之应用程序框架是实现细节</title>
      <link href="/2021/08/22/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6%E6%98%AF%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/"/>
      <url>/2021/08/22/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6%E6%98%AF%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<p>框架并不等同于系统架构——尽管有些框架确实以此为目标。<br><a id="more"></a></p><h2><span id="一-框架作者">一、框架作者</span></h2><p>大部分框架的作者愿意免费提供自己的工作成果，是因为他们想要帮助整个社群，想要回馈社会。这值得鼓励，但不管这些作者的动机有多么高尚，恐怕也并没有提供针对你个人的最佳方案。即使他们想，也做不到，因为他们并不了解你，也不了解你遇到的问题。</p><p>这些框架作者所了解的都是他们自己遇到的问题，可能还包括亲戚朋友所遇到的。他们创造框架的目的是解决这些问题——而不是解决你遇到的问题。</p><h2><span id="二-单向婚姻">二、单向婚姻</span></h2><p>我们与框架作者之间的关系是非常不对等的。我们要采用某个框架就意味着自己要遵守一大堆约定，但框架作者却完全不需要为我们遵守什么约定。</p><p>换句话说，框架作者想让我们与框架订终身——这相当于我们要对他们的框架做一个巨大而长期的承诺，而在任何情况下框架作者都不会对我们做出同样的承诺。这种婚姻是单向的。我们要承担所有的风险，而框架作者则没有任何风险。</p><h2><span id="三-风险">三、风险</span></h2><p>风险可归纳为如下:</p><ul><li>框架自身的架构设计很多时候并不是特别正确的。框架本身可能经常违背依赖关系原则。</li><li>框架可能会帮助我们实现一些应用程序的早期功能。</li><li>框架本身可能朝着我们不需要的方向演进。</li><li>未来我们可能会想要切换到一个更新、更好的框架上。</li></ul><h2><span id="四-解决方案">四、解决方案</span></h2><p>解决方案是什么呢？<strong>请不要嫁给框架。</strong></p><p>我们可以使用框架——但要时刻警惕，别被它拖住。我们应该将框架作为架构最外圈的一个实现细节来使用，不要让它们进入内圈。</p><p>如果框架要求我们根据它们的基类来创建派生类，就请不要这样做。我们可以创造一些代理类，同时把这些代理类当作业务逻辑的插件来管理。</p><p>另外，不要让框架污染我们的核心代码，应该依据依赖关系原则，将它们当作核心代码的插件来管理。</p><h2><span id="五-不得不接受的依赖">五、不得不接受的依赖</span></h2><p>有一些框架是避免不了使用的。但这应该是你主动选择的结果。你必须明白，如果一旦在项目中引入一个框架，很有可能在整个生命周期中都要依赖于它，不管后来情形怎么变化，这个决定都很难更改了。因此，不应该草率地做出决定。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之Web是实现细节</title>
      <link href="/2021/08/22/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8BWeb%E6%98%AF%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/"/>
      <url>/2021/08/22/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8BWeb%E6%98%AF%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<p>GUI只是一个实现细节。而Web则是GUI的一种，所以也是一个实现细节。作为一名软件架构师，我们需要将这类细节与核心业务逻辑隔离开来。<br><a id="more"></a></p><p>其实我们可以这样考虑这个问题:Web只是一种I/O设备。早在20世纪60年代，我们就已经了解编写设备无关应用程序的重要性。这种独立性的重要性至今仍然没有变化，Web也不例外。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之数据库只是实现细节</title>
      <link href="/2021/08/22/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%AA%E6%98%AF%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/"/>
      <url>/2021/08/22/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%AA%E6%98%AF%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<p>从系统架构的角度来看，数据库并不重要——它只是一个实现细节，在系统架构中并不占据重要角色。如果就数据库与整个给系统架构的关系打个比方，它们之间就好比是门把手和整个房屋架构的关系。<br><a id="more"></a></p><p>从架构架构的角度来看，工具通常是无关紧要的——因为这只是一个底层的实现细节，一种达成目标的手段。一个优秀的架构师是不会让实现细节污染整个系统架构的。</p><h2><span id="一-关系型数据库">一、关系型数据库</span></h2><p>不管关系型数据库的设计多么有智慧，多么精巧，多么符合数学原理，它仍然也只是一种技术。换句话说，它终究只是一种实现细节。</p><h2><span id="二-为什么数据库系统如此流行">二、为什么数据库系统如此流行</span></h2><h3><span id="1为什么数据库系统在软件系统和企业软件领域如此流行oracle-mysql-sql-server这些产品广泛流行的原因是是什么">1.为什么数据库系统在软件系统和企业软件领域如此流行？Oracle、MySQL、SQL Server这些产品广泛流行的原因是是什么？</span></h3><p>答案是硬盘。</p><h2><span id="三-假设硬盘不存在会怎样">三、假设硬盘不存在会怎样</span></h2><p>虽然硬盘现在还是很常见，但其实已经在走下坡路了。很快它们就会和磁带、软盘、CD一样成为历史，RAM正在替代一切。</p><h2><span id="四-实现细节">四、实现细节</span></h2><p>从系统架构的视角来看，真的不应该关心数据在旋转的磁盘表面上以什么样的格式存在。实际上，系统架构应该对磁盘本身的存在完全不关心。</p><h2><span id="五-小结">五、小结</span></h2><p>数据的组织结构，数据的模型，都是系统架构中的重要部分，但是从磁盘上存储/读取数据的机制和手段却没那么重要。关系型数据库强制我们将数据存储成表格并且以SQL访问，主要是为了后者。总而言之，数据本身很重要，但数据库系统仅仅是一个实现细节。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之整洁的嵌入式架构</title>
      <link href="/2021/08/22/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E6%95%B4%E6%B4%81%E7%9A%84%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
      <url>/2021/08/22/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E6%95%B4%E6%B4%81%E7%9A%84%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>Doug观点:<br><strong>虽然软件本身并不会随时间推移而磨损，但硬件及其固件却会随时间推移而过时，随即也需要对软件做相应改动。</strong></p><p>Bob基于Doug观点补充:<br><strong>虽然软件质量本身并不会随时间推移而损耗，但是未妥善管理的硬件依赖和固件依赖却是软件的头号杀手。</strong><br><a id="more"></a></p><p>Bob目前归纳的说法:</p><ul><li>“固件通常被存储在非可变内存设备，例如ROM、ERROM或者闪存中。”</li><li>“固件是直接编程在一个硬件设备上的一组指令或者一段程序。”</li><li>“固件是嵌入在一个硬件中的软件程序。”</li><li>“固件是被写入到只读内存设备中的(ROM）程序活数据。”</li></ul><h2><span id="一-程序适用测试测试">一、”程序适用测试”测试</span></h2><p>为什么这么多嵌入式软件最后都成了固件？看起来，很可能是因为我们在做嵌入式设计时只关注代码是否顺利运行，并不太关心其结构能否撑起一个较长的有效生命周期。Kent Beck描述了软件构建过程中的三个阶段:</p><ul><li>“先让代码工作起来”——如果代码不能工作，就不能产生价值。</li><li>“然后再试图将它变好”——通过对代码进行重构，让我们自己和其他人更好地理解代码，并能按照需求不断地修改代码。</li><li>“最后再试着让它运行得更快”——按照性能提升的”需求”来重构代码。</li></ul><h2><span id="二-目标硬件瓶颈">二、目标硬件瓶颈</span></h2><p>目标硬件瓶颈是嵌入式开发所特有的一个问题，如果我们没有采用某种清晰的架构来设计嵌入式系统的代码结构，就经常会面临只能在目标系统平台上测试代码的难题。如果只能在特定的平台上测试代码，那么这一定会拖慢项目的开发进度。</p><h3><span id="1分层">1.分层</span></h3><p>三层结构设计从高到底:软件、固件、硬件。</p><h3><span id="2硬件是实现细节">2.硬件是实现细节</span></h3><h3><span id="3不要向hal的用户暴露硬件细节">3.不要向HAL的用户暴露硬件细节</span></h3><h3><span id="4处理器是实现细节">4.处理器是实现细节</span></h3><h3><span id="5操作系统是实现细节">5.操作系统是实现细节</span></h3><h3><span id="6面向接口编程与可替代性">6.面向接口编程与可替代性</span></h3><h3><span id="7dry条件性编译命令">7.DRY条件性编译命令</span></h3>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之测试边界</title>
      <link href="/2021/08/22/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E6%B5%8B%E8%AF%95%E8%BE%B9%E7%95%8C/"/>
      <url>/2021/08/22/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E6%B5%8B%E8%AF%95%E8%BE%B9%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-测试也是一种系统组件">一、测试也是一种系统组件</span></h2><p>测试组件通常是一个系统中最独立的组件。系统的正常运行并不需要用到测试组件，用户也不依赖于测试组件。测试组件的存在是为了支持开发过程，而不是运行过程。然而，测试组件仍然是系统中不可或缺的一个组件。事实上，测试组件在许多方面都反映了系统中其他组件所应遵循的设计模式。<br><a id="more"></a></p><h2><span id="二-可测试性设计">二、可测试性设计</span></h2><p>由于测试代码的独立性，以及往往不会被部署到生产环境的特点，开发者常常会在系统设计中忽视测试的重要性，这种做法极为错误的。测试如果没有被集成到系统设计中，往往是非常脆弱的，这种脆弱性会使得系统变得死板，非常难以更改。</p><p>可测试性的关键，在于如何解耦合(弱耦合性)。</p><h2><span id="三-测试专用api">三、测试专用API</span></h2><p>设计这样一个系统的方法之一就是专门为验证业务逻辑的测试创建一个API。<br>这个API应该被授予超级用户权限，允许测试代码可以忽视安全限制，绕过那些成本高昂的资源(例如数据库)，强制将系统设置到某种可测试的状态中。总而言之，该API应该成为用户界面所用到的交互器与接口适配器的一个超集。</p><p>核心为:测试程序与应用程序的代码结构分开。</p><h3><span id="1结构性耦合">1.结构性耦合</span></h3><p>结构性耦合是测试代码所具有的耦合关系中最强大、最阴险的一种形式。假设我们现在有一组测试套件，它针对每个产品类都有一个对应的测试类，每个产品函数都有一个对应的测试函数。显然，该测试套件与应用程序在结构上是紧耦合的。</p><h3><span id="2安全性">2.安全性</span></h3><p>超级权限的测试专用API不能部署到真正的产品系统中，因为那样是非常危险的。因此通常我们将测试专用API及其对应的具体实现放置在一个单独的、可独立部署的组件中。</p><h2><span id="四-小结">四、小结</span></h2><p>测试并不是独立于整个系统之外，恰恰相反，它们是系统的一个重要组成部分。我们需要精心设计这些测试，才能让它们发挥验证系统稳定性和预防问题复发的作用。没有按系统组成部分来设计的测试代码，往往是非常脆弱且难以维护的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之服务:宏观与微观</title>
      <link href="/2021/08/22/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E6%9C%8D%E5%8A%A1-%E5%AE%8F%E8%A7%82%E4%B8%8E%E5%BE%AE%E8%A7%82/"/>
      <url>/2021/08/22/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E6%9C%8D%E5%8A%A1-%E5%AE%8F%E8%A7%82%E4%B8%8E%E5%BE%AE%E8%A7%82/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-面向服务的架构">一、面向服务的架构</span></h2><p>“只要使用了服务，就等于有了一套架构”这种思想。显然是错误的。<br>如前面所说，架构设计的任务就是找到高层策略与低层细节之间的架构边界，同时保证这些边界遵守依赖关系规则。所谓的服务本身只是一种比函数调用方式成本稍高的，分割应用程序行为的一种形式，与系统架构无关。<br><a id="more"></a></p><h2><span id="二-服务所带来的好处">二、服务所带来的好处</span></h2><h3><span id="1解耦合的谬论">1.解耦合的谬论</span></h3><p>很多人认为将系统拆分服务的一个最重要的好处就是让每个服务之间实现强解耦。毕竟，每个服务都是以一个不同的进程来运行的，甚至运行在不同的处理器上。因此，服务之间通常不能访问彼此的变量。其外，服务之间的接口一定是充分定义的。</p><p>从一定程度上来说，这是对的。确实，服务之间的确在变量层面做到了彼此隔离。然而，它们之间还是可能会因为处理器内的共享资源，或者通过网络共享资源而彼此耦合的。另外，任何形式的共享数据行为都会导致强耦合。</p><h3><span id="2独立开发部署的谬论">2.独立开发部署的谬论</span></h3><p>无数历史事实证明，大型系统一样可以采用单体模式，或者组件模式来构建，不一定非得服务化。因此服务化并不是构建大型系统的唯一选择。</p><p>解耦合谬论已经说明拆分服务并不意味着这些服务可以彼此独立开发、部署和运维。如果这些服务之间以数据形式或者行为形式相耦合，那么它们的开发、部署和运维也必须彼此协调来进行。</p><h2><span id="三-运送猫咪的难题">三、运送猫咪的难题</span></h2><p>涉及横跨型变更问题，它是所有的软件系统都要面对的问题，无论是服务化还是非服务化。</p><h2><span id="四-对象化是救星">四、对象化是救星</span></h2><p>通过对SOLID设计原则的仔细考虑，我们应该一开始就设计出一系列多态化的类，以应对将来新功能的扩展需要。</p><h2><span id="五-基于组件的服务">五、基于组件的服务</span></h2><p>服务按照SOLID原则来设计，按照组件结构来部署，这样就可以做到在添加/删除组件时不影响服务中的其他组件。</p><p>每个服务都有自己内部的组件结构，允许以衍生类的方式为其添加新功能。</p><h2><span id="六-横跨型变更">六、横跨型变更</span></h2><p>系统的架构边界事实上并不落在服务之间，而是穿透所有服务，在服务内部以组件的形式存在。</p><p>为了处理这个所有大型系统都会遇到的横跨型变更问题，我们必须在服务内部采用遵守依赖关系原则的组件设计方式。</p><p>服务内部的组件的设计必须符合依赖指向规则。</p><h2><span id="七-小结">七、小结</span></h2><ul><li>服务化可能有助于提升系统的可扩展性和可研发性，但服务本身并不能代表整个系统的架构设计。</li><li>系统的架构是由系统内部的架构边界，以及边界之间的依赖关系所定义的，与系统中各组件之间的调用和通信方式无关。</li><li>一个服务可能是由一个独立组件，以系统架构边界的形式隔开。一个服务也可能由几个组件组成，其中的组件以架构边界的形式互相隔离。</li><li>极端情况下，客户端和服务端甚至可能会由于耦合得过于紧密而不具备系统架构意义上的隔离性。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之Main组件</title>
      <link href="/2021/08/21/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8BMain%E7%BB%84%E4%BB%B6/"/>
      <url>/2021/08/21/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8BMain%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-最细节化的部分">一、最细节化的部分</span></h2><p>Main组件是系统中最细节化的部分，也就是底层的策略，它是整个系统的初始点。在整个系统中，除了操作系统不会再有其他组件依赖于它了。Main组件的任务是创建所有的工厂类、策略类以及其他的全局设施，并最终将系统的控制权转交给最高抽象层的代码来处理。</p><p>Main组件中的依赖关系通常应该由依赖注入框架来注入。在该框架将依赖关系注入到Main组件之后，Main组件就应该可以在不依赖于该框架的情况下自行分配这些依赖关系了。<br><a id="more"></a></p><h2><span id="二-小结">二、小结</span></h2><p>Main组件也可以被视为应用程序的一个插件，这个插件负责设置起始状态、配置信息、加载外部资源，最后将控制权转交给应用程序的其他高层组件。另外，由于Main组件能以插件形式存在于系统中，因此我们可以为一个系统设计多个Main组件，让它们各自对应于不同的配置。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之层次与边界</title>
      <link href="/2021/08/21/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E5%B1%82%E6%AC%A1%E4%B8%8E%E8%BE%B9%E7%95%8C/"/>
      <url>/2021/08/21/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E5%B1%82%E6%AC%A1%E4%B8%8E%E8%BE%B9%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<p>人们通常习惯于将系统分成三个组件:UI、业务逻辑和数据库。对于一些简单系统来说，的确可以这样，但稍复杂一些系统的组件就远远不止三个了。<br><a id="more"></a></p><h2><span id="一-基于文本的冒险游戏hunt-the-wumpus">一、基于文本的冒险游戏:Hunt The Wumpus</span></h2><ul><li>UI与游戏业务逻辑解耦；</li><li>游戏版本可以在不同地区适用不同语言；</li><li>游戏的业务逻辑与UI之间应该采用一种与自然语言无关的API进行通信。</li></ul><h2><span id="二-可否采用整洁架构">二、可否采用整洁架构</span></h2><ul><li>语言并不是UI变更的唯一方向；</li><li>构造一个API让语言部分与通信隔离开；</li><li>API的定义和维护都是由使用方负责，而非实现方；</li><li>数据流分成两路，左侧的数据流关注如何与用户通信，而右侧的数据流关注的是数据持久化。</li></ul><h2><span id="三-交汇数据流">三、交汇数据流</span></h2><p>随着系统的复杂化，组件在架构中自然会分裂出多条数据流。</p><h2><span id="四-数据流的分割">四、数据流的分割</span></h2><p>数据流全部汇聚到一个组件上，但现实情况往往不如人所愿。</p><h2><span id="五-小结">五、小结</span></h2><p>作为架构师，我们必须要小心审视究竟在什么地方才需要设计架构边界。另外，我们还必须弄清楚完全实现这些边界将会带来多大的成本。</p><p>同时，我们也必须要了解如果事先忽略了这些边界，后续再添加会有多么困难，哪怕有覆盖广泛的测试，严加小心的重构也于事无补。</p><p>所以作为架构师，我们应该怎么办？这个问题恐怕没有答案。一方面，就像一些很聪明的人多年来一直告诉我们的那样，不应该将未来的需求抽象化。这就是YAGNI原则:臆想的需求事实上往往是不存在的。这是一句饱含智慧的建议，因为过度的工程设计往往比工程设计不足还要糟糕。但另一方面，如果我们发现自己在某个位置确实需要设置一个架构边界，却又没有事先准备的时候，再添加边界所需要的成本和风险往往是很高的。</p><p>现实就是如此。作为软件架构师，我们必须有一点未卜先知的能力。可归纳为如下:</p><ul><li>仔细权衡成本，哪里需要设计架构边界，以及这些地方需要的是完整的边界还是不完全的边界，还是可以忽略的边界；</li><li>不是一次性的决定，不能再项目开始时就决定好哪里需要设计边界，哪里不需要；</li><li>必须持续观察系统的演进，时刻注意哪里可能需要设计边界，然后仔细观察这些地方会由于不存在边界而出现哪些问题。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国工厂系列之思考归纳</title>
      <link href="/2021/08/18/%E4%B8%AD%E5%9B%BD%E5%B7%A5%E5%8E%82%E7%B3%BB%E5%88%97%E4%B9%8B%E6%80%9D%E8%80%83%E5%BD%92%E7%BA%B3/"/>
      <url>/2021/08/18/%E4%B8%AD%E5%9B%BD%E5%B7%A5%E5%8E%82%E7%B3%BB%E5%88%97%E4%B9%8B%E6%80%9D%E8%80%83%E5%BD%92%E7%BA%B3/</url>
      
        <content type="html"><![CDATA[<p>中国工厂系列纪录片只拍了三集，三集围绕以下内容进行讲述:</p><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxODk0ODQ3Ng==&amp;mid=2247484989&amp;idx=1&amp;sn=bd4c1d19ade467c9e271367822c2d0d8&amp;chksm=f980552ecef7dc38293e23f858e2a616604acd666d8a461dc6561aa2b94151342c98871556a5&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">再见老板</a>；</li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxODk0ODQ3Ng==&amp;mid=2247485160&amp;idx=1&amp;sn=5d10c85e2df1f20f97567cf69308e5dc&amp;chksm=f98055fbcef7dced3d2c98ab120ac8ffdfc3ac1e089fcae54ae449e5b558552555749ca36df2&amp;scene=178&amp;cur_album_id=1805346418614665217#rd" target="_blank" rel="noopener">换帅</a>；</li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxODk0ODQ3Ng==&amp;mid=2247485159&amp;idx=1&amp;sn=64a604de860f54706e2c3ef696dd3101&amp;chksm=f98055f4cef7dce2bfb8bdd32b30ba1f49d3dccffe238c8933092cea8074307e21b2571f11b8&amp;scene=178&amp;cur_album_id=1805346418614665217#rd" target="_blank" rel="noopener">流水线上的战争</a>。</li></ul><p>我个人看了很多遍，每次从中都能有所收获，接下来我进行思考归纳。<br><a id="more"></a></p><h2><span id="一-再见老板">一、再见老板</span></h2><h3><span id="1十年前是员工排着队找工厂而现在所有的工厂去找员工">1.十年前是员工排着队找工厂，而现在，所有的工厂去找员工。</span></h3><p>在我很小的时候，最常听见的一句话就是去广东打工。无论是村里的还是城市里的，只要不再体制内的，去广东打工是一个比较好的出路。也因此不少人达到一定的积累，便因此成为了百万富翁或千万富翁。那个时候有不少人进厂还得托关系，例如某某亲戚在工厂做班长或主管，这时一些人就会送礼托某某让其帮忙疏通关系早日进厂。</p><h3><span id="2究竟是精神上的残疾可怕还是身体上">2.究竟是精神上的残疾可怕，还是身体上？</span></h3><p>答案是都可怕，但要从两者之间选其一，我认为精神上的残疾更可怕。<br>例如纪录片中的小谭时不时就抱怨太累了想回家。而回忆过去我的职业生涯中有一个同事他也是身体上的残疾，小谭看上去是腿瘸了，而我的那个同事整个身体都显得非常不正常，具体是什么原因，从未问过。他非常沉默寡言，写代码方面也不能说很灵光，比别人写的都要慢，理解能力也很差，当初的我刚和他一组时，很嫌弃他，直到一天，来公司拿电脑，当时正是周末，而他一直在那写代码，我很好奇，最初以为他在学习，然后看到他在写业务代码，我问他，周末在家好好休息休息，来公司加班写代码干啥？他回答说，我不是很聪明，工作做的很慢，我想利用周末的时间往前赶赶。正好当天上午也没事，我便陪他一起写代码，帮他写了不少，顺便我们也聊了很多。</p><h3><span id="3现在的年轻人为什么不愿意进厂">3.现在的年轻人为什么不愿意进厂?</span></h3><ul><li><strong>工厂晋升空间小且晋升后工资幅度调整非常有限</strong>；</li><li><strong>屈才</strong>；</li><li><strong>没面子</strong>；</li><li><strong>工作时间长、累、工资低</strong>；</li><li><strong>工厂不是长久之计</strong>。</li></ul><h3><span id="4进厂真的是浪费青春吗">4.进厂真的是浪费青春吗？</span></h3><p>分情况看。工厂的最终归属只能是往上走，即做管理层。<br>想起曾经一位大叔跟我说，那个时候我在某地打暑假工。他跟说，未来，像工厂里很多东西都会被取代，但有一个很难被取代，那就是管理。除了管理层面外，还有就是技术方面。这个与IT也是有相关性的，技术男到了某个层次后，要么选择往技术发展(走技术专家路线)，要么选择往管理层发展，两条路都不容易，前者仅有为数不多的大公司有相应的资源提供(但僧多肉少，不好走)，而后者才是常态。</p><h3><span id="5纪录片中的残疾人为何会有这种心态">5.纪录片中的残疾人为何会有这种心态？</span></h3><p>一般看纪录片或电影、电视剧之类的，都不喜欢看弹幕，这次我打开弹幕看了下，发现很多人都在指责这个人没出息只会抱怨，换言之，为自己的失败找借口。但换个角度来看，纪录片中的小谭说，他以前也想过改变，但后来发现，改变不了，一切都成定局。那么他为什么会有这样的心态呢？我觉得可能的原因有这么几个？</p><ul><li>意志力不坚定；</li><li>身边没有一个导师一样的人引导。</li></ul><p>去年有一个人对我说:天将大任于斯人也，必先苦其心智，劳其筋骨….系列的话，其实意思概括起来很简单，那就是要成就一番事业必须要有过于常人的意志力(也可以理解为毅力)。借用梁启超先生在《论毅力》中的中心论点来说，<strong>“天下古今成败之林，若是其莽然不一途也。要其何以成，何以败？曰:有毅力者成，反是者败。”</strong></p><p>回顾我的职业生涯或是人生不同的阶段，尤其是刚出社会那会儿，有一个导师一样的人指导我的前进路线，帮助我战胜了不少困难，也养成了自主学习的习惯。</p><h3><span id="6记时还是记件好">6.记时还是记件好？</span></h3><p>一分为二来看，对于想偷懒摸鱼的人来说，记时好。对于想赚更多钱的人来说，记件好，因为多劳多得。但有些时候对于一些人可能真的不公平，例如纪录片中得小谭，可能由于残疾，导致动作方面很慢，记件对于他来说就很不公平，他在纪录片中说到，最初他也加班，但是发现加班以后，工资还是那么低，就没加了，如果是计时的话，可能对于他而言就比较公平，但对于其他同事而言就可能不公平，因为他动作慢，通常团队每天都会有任务指标，这个任务指标是需要在团队整体协作并共同努力的情况才可能完成，这也是一些工厂领导为了提防计时员工的偷懒而设置的。</p><h3><span id="7招人难留人也难">7.招人难?留人也难?</span></h3><p>不仅仅是对于工厂。如今各个行业，不少公司都是如此。招人难，难在有不少公司想用最低的成本招聘能为公司带来更多价值的人。留人难，难在画饼充饥只能是一时而不能是一世。</p><h3><span id="8半自动化与全自动化衡量的核心在于成本二字">8.半自动化与全自动化，衡量的核心在于成本二字</span></h3><p>半自动化意味着有机器辅助，但还是需要人力进行处理。全自动化几乎不需要人或者是一两人负责盯机器就行了。拿以前我打暑假工的一个地方，组装某个产品，其实相当于是流水线，但这样的流水线已经在分工厂里推行了机器人进行自动化，但大多数分工厂都还是半自动化，人为主，机器为辅，原因在于成本，机器自动化但每天组装的产品非常有限，不如半自动化。但机器自动化所带来一个直观的改善就是产品质量上提高，比方说，一条线一个小时三百个产品需要组装好，机器人全自动化一个小时能完成两百个，人为的半自动化基本上能超过三百个以上，但是认为的半自动化通常不良品比机器人全自动化要高得多。但对于工厂而言，最重要的就是产品的销量，一定程度上的不良品是可以允许的，所以这个时候半自动化的作用就得到了体现。</p><h3><span id="9读书真的能改变命运吗">9.读书真的能改变命运吗？</span></h3><p>任何事情不是绝对的。这里的读书指的是上学而非阅读。记得曾看一个香港节目叫《穷富翁大作战》，有一期一个叫田北辰的说了一句话，我至今印象还十分深刻，他说，”这个世界正在惩罚不读书的人”。核心表达的就是学历不高，出了社会后，找工作方面受限很多，首先就是学历，学历是工作的敲门砖，没有学历很难。</p><h3><span id="10那些上学成绩不好的人最后的归宿是什么">10.那些上学成绩不好的人，最后的归宿是什么？</span></h3><p>在我身边也有这样的例子，其实包括我自己过去上学的时候，成绩也能说是普普通通，说好吧，也没那么好，说差吧，也还过得去。<br>有些人尽管成绩不好，或者是对学习那些课程丝毫没有兴趣，但他的路仍然很大，因为家庭背景很不错。记得我下铺的一个哥们，高中学业水平考试以后，就没继续参考高考，去了云南，其父在云南开了家具公司，于是他学了家具方面的设计，如今子承父业，成为了家具公司的总经理。</p><p>而另外一些人成绩不好，家庭背景差的，选择范围就很少，如果不继续上大学，哪怕是混个毕业证也好之类的。最后的出路无非是进工厂或是服务员、或是如今新兴的送外卖、快递员等等。但也有些例外，例如曾经一个初中同学小A，他初中还没毕业就放弃了上学，历经十多年的苦难，进过工厂当过学徒，也干过其他行业，最后转销售方面，成为广东那边某公司的销售总监。</p><p>最后归纳一点，上学成绩不好并不代表这个人不行，但出了社会以后，很多东西是要靠自己的努力来不断去争取的，有背景的，一帆风顺，没背景的，尽管路充满荆棘是曲折的，但只要熬过去，前途始终是光明的。</p><h3><span id="11提升学历的重要性">11.提升学历的重要性</span></h3><p>如果你是高中文凭，那么你就得想方设法升到大专；<br>如果你是大专文凭，那么你就得想方设法升到本科；<br>如果你是本科文凭，那么你就得相方设法考对你自己有帮助得证书或者考研。</p><p>一个程序员之路，通常为如下:<br>初级Java开发工程师-&gt;中级Java开发工程师-&gt;高级Java开发工程师(Leader)-&gt;架构师/项目经理-&gt;技术总监</p><p>我们来看看这四个岗位的招聘要求(高级Java开发工程师、架构师、项目经理、技术总监CTO):<br><img src="/2021/08/18/中国工厂系列之思考归纳/01.png" alt="图一"></p><p><img src="/2021/08/18/中国工厂系列之思考归纳/02.png" alt="图二"></p><p><img src="/2021/08/18/中国工厂系列之思考归纳/03.png" alt="图三"></p><p><img src="/2021/08/18/中国工厂系列之思考归纳/04.png" alt="图四"></p><p>从以上来看，大多都有学历上的限制，如果不想被学历上限制的话，要么想尽一切办法往上升，要么想尽一切办法提高各方面的能力，争取能力上能一定程度弥补学历上的缺陷。但能力提高后，也不能忘记提高学历方面的。学历提高意味着能够多一些后路或者是多一些选择的方向。</p><h3><span id="12辞工与感恩之心">12.辞工与感恩之心？</span></h3><p>纪录片中老板家的保姆跟老板产生了一些冲突，于是保姆想要辞职。于是纪录片中的潘总便劝保姆，希望保姆能够留下来。保姆态度十分坚决不愿意留下。于是潘总说，人要有一点感恩之心啊，做生不如做熟。但保姆还是决定要走。<br>关于辞工与感恩之心，从某个角度来看:<br>当一个人什么相关的经验都没有时，公司愿意给其机会培养，当经验丰富以后，这个人势必会为公司带来很大的价值，这时，当这个人能为公司带来更多价值的时候，公司也需要一定程度上为其提高相应的待遇，例如加薪或升职。在我看来，一个人在一家公司，不仅仅是为了给公司创造更多的价值为公司带来盈利，同样也是为了自己，积累相关经验，丰富人生阅历。至于感恩之心，我个人觉得不应该在辞工方面体现，辞工方面以感恩之心来说，无疑是打感情牌，通过这样的感情牌来留人不见得效果多么的好。</p><h2><span id="二-换帅">二、换帅</span></h2><p>改革让每个人必须寻找新的生活方式。新老交替，大浪淘沙，谁能在洗牌过后活下来。</p><h3><span id="1尽管心不死但是身已老">1.尽管心不死，但是身已老</span></h3><p>“尽管心不死，但是身已老”，这是纪录片中谢志对秦泽静说的的一句话。主要反驳秦泽静所说的，希望研发团队能够被谢志关注，而谢志则认为研发团队不适合当前的形势。<br>联想如今，其实很多东西还是有共通之处的。从公司的角度来看，当一个人无法带来更多的价值时，有千万种理由让这个人走。至于所谓的年龄问题，只不过是一种理由或借口。</p><h3><span id="2洗脑术对于提升团队的士气很有帮助">2.洗脑术，对于提升团队的士气很有帮助</span></h3><p>谢志借团建，提高公司销售团队的士气。回顾这些年来，发现一点，特别是公司创始人，对于一家公司的成败特别重要，这个公司创始人而且还必须要擅长一点，那就是洗脑术。例如当年马云带领着阿里巴巴18罗汉创业那样。这里的洗脑术与传销还是有很大的区别，这里的洗脑术关键在于统一团队的思想让大家朝着共同的方向努力前进。对于创业公司而言，特别是初期团队，如果大家对于创业这个事情，思想不一致时，很容易”中道崩殂(走到半路就死了)”。</p><h3><span id="3改革是一种洗牌游戏">3.改革是一种洗牌游戏</span></h3><p>古人云:”一朝天子，一朝臣”。<br>以手机的演变历史来看，从”大哥大”到智能手机，很多东西都在消亡，而很多东西都在诞生。消亡的往往是需要淘汰的，诞生的往往是新的时代的需要。手机不断的变革，手机里的软件，无论是通讯，还是网络搜索，或者是游戏，都需要随之改变，不改变的就会被淘汰，被淘汰的只能消亡。</p><h3><span id="5鱼和熊掌不可兼得">5.鱼和熊掌不可兼得</span></h3><p>谢志的妻子总想着谢志能够多陪伴陪伴她，她觉得赚钱并不是非常重要，陪伴才是最重要的。<br>对于谢志而言，为家人创造一个幸福的未来才是最重要的，这个幸福的未来是需要金钱作为基础支撑的，毕竟上面有父母，下面有三个孩子，两女一男，而且妻子也没有工作。<br>很多时候，鱼和熊掌是不可兼得的，就像工作与生活的平衡，要做到绝对的平衡是不可能的，也非常困难，只能说每个阶段对自己最重要的是什么。</p><h3><span id="6贫贱夫妻百事哀">6.贫贱夫妻百事哀</span></h3><p>纪录片中的彭永辉与哥们在一起喝酒他们说了一些话，归纳如下:</p><ul><li>没进到这家公司之前，我从来不知道什么叫缺钱，进了这家公司之后，我终于知道了什么叫差钱。</li><li>我是结了婚才知道什么叫缺钱。</li><li>作为一个人过来人来说，本来一百块钱没结婚之前当两百块花，结了婚之后，只有二十块花，到了有小孩后，一百块还要负二十块出去花。</li></ul><p>归根到底就是没有好的物质基础支撑的婚姻是很难的，就像前面说到的”鱼和熊掌不可兼得”。假如谢志不是总经理，每个月收入也就七八千，那么谢志的妻子很有可能会经常说他赚钱赚的少埋怨之类的话。因为这就是现实。</p><h2><span id="三-流水线上的战争">三、流水线上的战争</span></h2><h3><span id="1工序卡与一个人做事要凭良心孰优孰劣核心就是制度与人情">1.工序卡与一个人做事要凭良心，孰优孰劣(核心就是制度与人情)？</span></h3><p>一次会议，向安奎向杨总询问:工资计算，现在怎么计算，怎么统计的?<br>杨总回答到:工资计算还不是他们报上来的。<br>向安奎说:为什么呢？按工序卡。<br>杨总说:工序卡，目前我们还没有做到那么细。<br>向安奎说:五金车间，工资计算本身就有问题。工序卡为什么落实不下去？给个理由给我。现在会有一个什么样的问题，第一个，我发了一千张料，出了多少张成品，谁告诉我？损耗多少？<br>有人说:那个从系统查得到。<br>向安奎说:统计是他们说什么就是什么的。<br>有人说:不至于。<br>向安奎说:你问问周兵是不是。<br>周兵说:反正，怎么说呢，一个人做事，凭着自己的良心做事。<br>向安奎说:如果我们光看账面数据，我都不要现场管理人员啦。</p><p>这段对话让我思考良多，对于在创业公司刚刚起步的时候，太多的制度上的约束反而会限制人，但是当创业公司逐步的由四五个人到十几个人，再到上百人，再到上千人这样的，势必要有制度上的约束，否则走不了多远。光靠良心不靠制度，是不行的。这就好像某些资本家光跟员工谈情怀谈理想不谈薪资，纯粹扯蛋。</p><h3><span id="2不适应公司发展的人势必会被淘汰">2.不适应公司发展的人，势必会被淘汰</span></h3><p>纪录片中的周兵在这家企业待了很多年，从初创到现在，但最后还是被向安奎开了。原因很简单，不适应公司发展的人，势必会被淘汰。当一家公司从过去的小作坊到一切正规化流程化的时候，过去的一些做事风格势必会发生改变，不能适应这些改变的人的，很容易给公司带来不利的影响。这些不利的影响，往往能给一家公司带来毁灭性的打击(如果不及时消除的话)。</p><h3><span id="3仁慈是不能将企业做大做强的">3.仁慈是不能将企业做大做强的</span></h3><p>我看到弹幕里面的人都说向安奎冷血无情，居然将陪伴公司一起十几年的伙伴给无情的开了。我只能说那些人太天真。管理者对下属太好太包容，最后会往往会导致事情很难推进。这是很多事情做实事的人都需要当”恶人”，不当”恶人”不行，不当”恶人”是很难成功的，更何况是带领着企业做大做强这样的。所以说，”慈不掌兵”这句话是正确的。衡量优秀将军的标准就是能带领部队打胜仗，打胜仗意味着手下的人能存活过多，同时也能获得更多。对于公司老板而言，最重要的就是企业盈利，企业能够赚更多的钱，什么年终奖或者十五薪、十六薪、旅游度假之类的都能成为现实。</p><h3><span id="4我们只有把这批订单做好才会有下一批订单要不然就没有下一批">4.我们只有把这批订单做好，才会有下一批订单，要不然就没有下一批</span></h3><p>去年我所待的公司也面临这样的局面，如果短暂期限我们不能拿出一个成型的产品来，意味着我们的团队将可能被解散。于是乎，在我们团队共同的努力下成功了，接着经过一系列断断续续的紧张日子，终于有了一些结果，这些结果促使着部门团队从寥寥无几的几个人变成二十多人，接着可能会更多。</p><h3><span id="5要求高了势必会让一些混日子的待不下去">5.要求高了，势必会让一些混日子的待不下去</span></h3><p>工序卡的推行，一方面在于严格把控产品质量，另外一方面防止一些员工偷奸耍滑。工序卡的推行，谁做不好就能找到谁，谁影响了进度，谁就会被问责，这就导致了一些混日子的就待不下去了，同样也暴露了一些管理者的管理上的弊端或任人唯亲，例如周兵在公司与其解除合同的时候，说你们为什么要这么污蔑一个人，我有没有偷又没有抢，还说你们把我开除，冲压车间没有谁做的来，看到时候谁认识谁的亲戚。</p><h3><span id="6谁都不想一辈子做员工">6.谁都不想一辈子做员工</span></h3><p>刘洲所说的几句话，这或许是不少人的自白吧:</p><ul><li>我也不想一辈子做员工啊，而且我老家又是农村的，条件又比较差呀，我也想跟我们老板一样。</li><li>讲前途，也许就是我在这里有前途，但是做得好，学得到，以后重用我就有前途。如果以后不行的话，那就连稀饭都喝不上，所以就是这个样子。</li><li>我觉得我在这里学不了多少，我也不想做了。</li></ul><h3><span id="7事业其实做到最后的是一种担当">7.事业其实做到最后的，是一种担当</span></h3><p>向安奎说:<br>我刚开始出来是很痛苦的，我到顺德的第一梦想，就是找一份月薪1500元的工作。但是找不到。我最开始工作的工资是800元。然后我找工作之前租的那个房子是还没建完的那种，就是钉一个床，睡在里面，蚊子咬得半死的那种，150元一个月。我们是在那种环境下找工作的，然后800元一个月。然后我也工作到2003年。工作到2003年，我的最后一份工作才2500元一个月。<br>事业做到最后，其实是一种担当。有这么多个人跟着呢，你要为他们提供一个更好的工作环境，为他们创造更多的收入和福利，我觉得这是一种担当。这个跟我自己家里有钱多用点，没钱少用点，有很大的区别。因为它是一个庞大的团队，他们后面有涉及到很多家庭，比如我们工厂<br>现在几百个人，几百个人可能就意味着几百个家庭，那么企业做到最后，我觉得就是说，有一帮人，你能对他负责，他能对你负责。</p><p>这段话让我感触良多。</p><h3><span id="8那些工厂的老油条们">8.那些工厂的老油条们</span></h3><p>工厂的老油条们最喜欢的就是捉弄新人和老实人，这帮人用一句话来形容就是”搅屎棍”。</p><h3><span id="9地球离了谁都转">9.地球离了谁都转</span></h3><p>纪录片中那位工人说:如果真的有老员工收一半马上就走，剩下一些新员工在这里，他肯定搞不出来的，他傻的，至少他这一两个月要少很多生意，不黑怎么当老板，不黑你来当。<br>只能说这帮人太拿自己当回事了，地球离了谁都转。</p><h3><span id="10单单只有经验有的时候不管用">10.单单只有经验，有的时候不管用</span></h3><p>向安奎对周兵说，”单单只有经验，有的时候也不管用”。<br>这句话我非常赞同。经验这东西只在一定程度上适用于一些特定场景，并不能适用所有场景。比方说随之技术不断更新，若干年后SpringCloud这样的分布式微服务体系也会随之落后，但唯一不变的可能就是计算机诸如编译原理、TCP/IP、操作系统、计算机网络、数据结构和算法等这些。若干年前是如此，若干年后还是如此。</p><h3><span id="11在城市里面是一定要靠自己的实力去争取去获得一些属于自己的一些东西">11.在城市里面是一定要靠自己的实力去争取，去获得一些属于自己的一些东西</span></h3><p>回想从2016年到现在，算起来有五年了，这五年里，我一直在不断争取着这一切。</p><h3><span id="12人的一生有各种不一样的活法取决于怎样定位自己">12.人的一生有各种不一样的活法，取决于怎样定位自己</span></h3><p>每个人选择不一样，选择不一样，人生的道路也会随之发生变化，假如当初没有从那个环境里跳出来，可能我目前很平庸，没有之后的丰富阅历，但换言之，不同的选择，不同的活法，代价也是不一样的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 纪录片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之不完全边界</title>
      <link href="/2021/08/15/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E4%B8%8D%E5%AE%8C%E5%85%A8%E8%BE%B9%E7%95%8C/"/>
      <url>/2021/08/15/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E4%B8%8D%E5%AE%8C%E5%85%A8%E8%BE%B9%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<p>构建完整的架构边界是一件很耗费成本的事。在这个过程中，需要为系统设计双向的多态边界接口，用于输入和输出的数据结构，以及所有相关的依赖关系管理，以便将系统分割成可独立编译与部署的组件。这里会涉及大量的前期工作，以及大量的后期维护工作。<br><a id="more"></a></p><h2><span id="一-省掉最后一步">一、省掉最后一步</span></h2><p>构建不完全边界的一种方式就是在将系统分割成一系列可以独立编译、独立部署的组件之后，再把它们构建成一个组件。换句话说，在将系统中所有的接口、用于输入/输出的数据格式等每一件事都设置好之后，仍选择将它们统一编译和部署为一个组件。</p><h2><span id="二-单向边界">二、单向边界</span></h2><p>在设计一套完整的系统架构边界时，往往需要用反向接口来维护边界两侧组件的隔离性。而且，维护这种双向的隔离性，通常不会是一次性的工作，它需要我们持续地长期投入资源维护下去。</p><h2><span id="三-门户模式">三、门户模式</span></h2><p>更简单的架构边界设计:采用门户模式。</p><h2><span id="四-小结">四、小结</span></h2><p>每种实现方式都有相应的成本和收益。每种方式都有自己所适用的场景，它们可以被用来充当最终完整架构边界的临时替代品。同时，如果这些边界最终被证明是没有必要存在的，那么也可以被自然降解。</p><p>架构师的职责之一就是预判未来哪里有可能会需要设置架构边界，并决定应该以完全形式还是不完全形式来实现它们。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之展示器和谦卑对象</title>
      <link href="/2021/08/15/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E5%B1%95%E7%A4%BA%E5%99%A8%E5%92%8C%E8%B0%A6%E5%8D%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/08/15/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E5%B1%95%E7%A4%BA%E5%99%A8%E5%92%8C%E8%B0%A6%E5%8D%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-谦卑对象模式">一、谦卑对象模式</span></h2><p>谦卑对象模式最初的设计目的是帮助单元测试的编写者区分容易测试的行为与难以测试的行为，并将它们隔离。其设计思路非常简单，就是将这两类行为拆分成两组模块或类。其中一组模块被称为谦卑组，包含了系统中所有难以测试的行为，而这些行为已经被简化到不能再简化了。另一组则包含了所有不属于谦卑对象的行为。<br><a id="more"></a></p><h2><span id="二-展示器与视图">二、展示器与视图</span></h2><p>视图部分属于难以测试的谦卑对象。这种对象的代码通常应该越简单越好，它只应负责将数据填充到GUI上，而不应该对数据进行任何处理。</p><p>展示器则是可测试的对象。展示器的工作是负责从应用程序中接收数据，然后按视图的需要将这些数据格式化，以便视图将其呈现在屏幕上。</p><h2><span id="三-测试与架构">三、测试与架构</span></h2><p>强大的可测试性是一个架构的设计是否优秀的显著衡量标准之一。谦卑对象模式就是这方面的一个非常好的例子。我们将系统行为分割成可测试和不可测试两部分的过程常常就也定义了系统的架构边界。展示器与视图之间的边界只是多种架构边界中的一种，另外还有许多其他边界。</p><h2><span id="四-数据库网关">四、数据库网关</span></h2><p>对于用例交互器与数据库中间的组件，我们通常称之为数据库网关。这些数据库网关本身是一个多态接口，包含了应用程序在数据库上所要执行的创建、读取、更新、删除等所有操作。</p><p>另外，我们之前说过，SQL不应该出现在用例层的代码中，所以这部分的功能就需要通过网关接口来提供，而这些接口的实现则要由数据库层的类来负责。显然，这些实现也应该都属于谦卑对象，它们应该只利用SQL或其他数据库提供的接口来访问所需要的数据。与之相反，交互器则不属于谦卑对象，因为它们封装的是特定应用场景下的业务逻辑。</p><h2><span id="五-数据映射器">五、数据映射器</span></h2><p>对象关系映射器事实上是压根就不存在的。道理很简单，对象不是数据结构。至少从用户的角度来说，对象内部的数据应该都是私有的，不可见的，用户在通常情况下只能看到对象的公有函数。因此从用户角度来说，对象是一些操作的集合，而不是简单的数据结构体。</p><p>与之相反，数据结构体则是一组公开的数据变量，其中不包含任何行为信息。所以ORM更应该被称为”数据映射器”，因为它们只是将数据从关系型数据库加载到了对应的数据结构中。</p><h2><span id="六-服务监听器">六、服务监听器</span></h2><p>我们的应用程序会将数据加载到简单的数据结构中，并将这些数据结构跨边界传输给那些能够将其格式化并传递其他外部服务的模块。在输入端，服务监听器会负责从服务接口中接收数据，并将其格式化成该应用程序易用的格式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之整洁架构</title>
      <link href="/2021/08/14/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E6%95%B4%E6%B4%81%E6%9E%B6%E6%9E%84/"/>
      <url>/2021/08/14/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E6%95%B4%E6%B4%81%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>过去几十年中，我们曾见证过一系列关于系统架构的想法被提出，列举如下:<br><a id="more"></a></p><ul><li>六边形架构(也称为端口与适配器架构)；</li><li>DCI架构；</li><li>BCE架构。</li></ul><p>虽然这些架构在细节上各有不同，但总体来说非常相似。它们都具有同一个设计目标:按照不同关注点对软件进行切割。也就是说，这些架构都会将软件切割成不同的层，至少有一层是只包含该软件的业务逻辑的，而用户接口、系统接口则属于其他层。</p><p>这些架构设计出来的系统，通常都具有以下特点:</p><ul><li>独立于框架:这些系统的架构并不依赖于某个功能丰富的框架之中的某个函数。框架可以被当成工具来使用，但不需要让系统来适应框架。</li><li>可被测试:这些系统的业务逻辑可以脱离UI、数据库、Web服务以及其他的外部元素来进行测试。</li><li>独立于UI:这些系统的UI变更起来很容易，不需要修改其他的系统部分。</li><li>独立于数据库:我们可以轻易将这些系统使用的Oracle、SQL Server替换成Mongo、BigTable、CouchDB之类的数据库。因为业务逻辑与数据库之间已完成了解耦。</li><li>独立于任何外部机构:这些系统的业务逻辑并不需要知道任何其他外部接口的存在。</li></ul><p>整洁架构:</p><ul><li>最外层:Web、用户界面、外部接口、数据库、设备、框架与驱动程序；</li><li>次外层:网关、控制器、展示器；</li><li>内层:用例、应用级业务逻辑、接口适配器；</li><li>最内层:业务实体、系统级业务逻辑。</li></ul><h2><span id="一-依赖关系规则">一、依赖关系规则</span></h2><p><strong>源码中的依赖关系必须只指向同心圆的内层，即由低层机制指向高层策略。</strong><br>换句话说，就是任何属于内层圆中的代码都不应该牵涉外层圆中的代码，尤其是内层圆中的代码不应该引用外层圆中代码所声明的名字，包括函数、类、变量以及一切其他由命名的软件实体。</p><h2><span id="二-业务实体">二、业务实体</span></h2><p>业务实体这一层封装的是整个系统的关键业务逻辑，一个业务实体既可以是一个带有方法的对象，也可以是一组数据结构和函数的集合。无论如何，只要它能被系统中的其他不同应用复用就可以。</p><h2><span id="三-用例">三、用例</span></h2><p>软件的用例层中通常包含的是特定应用场景下的业务逻辑，这里面封装并实现了整个系统的所有用例。这些用例引导了数据在业务实体之间的流入/流出，并指挥着业务实体利用其中的关键业务逻辑来实现用例的设计目标。</p><h2><span id="四-接口适配器">四、接口适配器</span></h2><p>软件的接口适配器层中通常是一组数据转换器，它们负责将数据从对用例和业务实体而言最方便操作的格式。</p><h2><span id="五-框架与驱动程序">五、框架与驱动程序</span></h2><p>框架与驱动程序层中包含了所有的实现细节。Web是一个实现细节，数据库也是一个实现细节。我们将这些细节放在最外层，这样它们就很难影响到其他层了。</p><h2><span id="六-只有四层吗">六、只有四层吗</span></h2><p>并没有某个规则约定一个系统的架构有且只能有四层。然而，这其中的依赖关系原则是不变的。也就是说，源码层面的依赖关系一定要指向同心圆的内侧。层次越往内，其抽象和策略的层次越高，同时软件的抽象程度就越高，其包含的高层策略就越多。最内层的圆中包含的是最通用、最高层的策略，最外层的圆包含的是最具体的实现细节。</p><h2><span id="七-跨越边界">七、跨越边界</span></h2><p>利用动态多态技术，我们将源码中的依赖关系与控制流的方向进行反转。不管控制流原本的方向如何，我们都可以让它遵守架构的依赖关系规则。</p><h2><span id="八-哪些数据会跨越边界">八、哪些数据会跨越边界</span></h2><p>一般来说，会跨越边界的数据在数据结构上都是很简单的。如果可以的话，我们会尽量采用一些基本的结构体或简单的可传输数据对象。或者直接通过函数调用的参数来传递数据。另外，我们也可以将数据放入哈希表，或整合成某种对象。这里最重要的是这个跨边界传输的对象应该有一个独立、简单的数据结构。总之，不要投机取巧地直接传递业务实体或数据库记录对象。同时，这些传递的数据结构中也不应该存在违反依赖规则的依赖关系。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之尖叫的软件架构</title>
      <link href="/2021/08/14/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E5%B0%96%E5%8F%AB%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/"/>
      <url>/2021/08/14/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E5%B0%96%E5%8F%AB%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-架构设计的主题">一、架构设计的主题</span></h2><p>架构设计不是与框架相关的，这件事不应该是基于框架来完成的。对于我们来说，框架只是一个可用的工具和手段，而不是一个架构所规范的内容。如果我们的架构是基于框架来设计，它就不能基于我们的用例来设计了。<br><a id="more"></a></p><h2><span id="二-架构设计的核心目标">二、架构设计的核心目标</span></h2><p>一个良好的架构设计应该围绕着用例来展开，这样的架构设计可以在脱离框架、工具以及使用环境的情况下完整地描述用例。这就好像一个住宅建筑设计的首要目标应该是满足住宅的使用需求，而不是确保一定要用砖来构建这个房子。架构师应该花费很多精力来确保该架构的设计在满足用例需要的情况下，尽可能地允许用户能自由地选择建筑材料(砖头、石料或者木材)。</p><h2><span id="三-那web呢">三、那Web呢？</span></h2><p>Web不是一种架构，只是一种交付的手段。一种IO设备，这就是它在应用程序的架构设计中的角色。换句话说，应用程序采用Web方式来交付只是一个实现细节，这不应该主导整个项目的结构设计。事实上，关于应该应用程序是否应该以Web形式来交付这件事，它本身就应该是一个被推迟和延后的决策。一个系统应该尽量保持它与交付方式之间的无关性。</p><h2><span id="四-框架是工具而不是生活信条">四、框架是工具而不是生活信条</span></h2><p>我们一定要带着怀疑的态度审视每一个框架。是的，采用框架可能会很有帮助，但采用它们的成本呢？我们一定要懂得权衡如何使用一个框架，如何保护自己。无论如何，我们需要仔细考虑如何保持对系统用例的关注，避免让框架主导我们的架构设计。</p><h2><span id="五-可测试的架构设计">五、可测试的架构设计</span></h2><p>如果系统架构的所有设计都是围绕着用例来展开的，并且在使用框架的问题上保持谨慎的态度，那么我们就应该可以在不依赖任何框架的情况下针对这些用例进行单元测试。另外，我们在运行测试的时候不应该运行Web服务，也不应该需要连接数据库。我们测试的应该只是一个简单的业务实体对象，没有任何与框架、数据库相关的依赖关系。总而言之，我们应该通过用例对象来调度业务实体对象，确保所有的测试都不需要依赖框架。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之业务逻辑</title>
      <link href="/2021/08/14/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91/"/>
      <url>/2021/08/14/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<p>如果我们要将自己的应用程序划分为业务逻辑和插件两部分，就必须更仔细地了解业务逻辑究竟是什么，它到底有几种类型。<br><a id="more"></a><br>严格地讲，业务逻辑就是程序中那些真正用于赚钱或省钱的业务逻辑与过程。更严格地讲，无论这些业务逻辑是在计算机上实现的，还是人工执行的，它们在省钱/赚钱上的作用都是一样的。</p><p>关键业务逻辑和关键业务数据是紧密相关的，所以它们很适合被放在同一个对象中处理。我们将这种对象称为”业务实体”。</p><h2><span id="一-业务实体">一、业务实体</span></h2><p>业务实体实际上就是计算机系统中的一种对象，这种对象中包含了一系列用于操作关键数据的业务逻辑。这些实体对象要么直接包含关键业务数据，要么可以很容易地访问这些数据。业务实体的接口原则则是由那些实现关键业务逻辑、操作关键业务数据的函数组成的。</p><h2><span id="二-用例">二、用例</span></h2><p>并不是所有的业务逻辑都是一个纯粹的业务实体。</p><p>用例本身是一个对象，该对象中包含了一个或多个实现了特定应用情景的业务逻辑函数。除此之外，用例对象中也包含了输入数据、输出数据以及相关业务实体的引用，以方便调用。</p><p>业务实体并不会知道是哪个业务用例在控制它们，这也是依赖反转原则的另一个应用情景。也就是像业务实体这样的高层概念是无须了解像用例这样的低层概念的。反之，低层的业务用例却需要了解高层的业务实体。</p><p>那么，为什么业务实体属于高层概念，而用例属于低层概念呢？因为用例描述的是一个特定的应用情景，这样一来，用例必然会更靠近系统的输入和输出。而业务实体是一个可以适用于多个应用情景的一般化概念，相对地离系统的输入和输出更远。所以，用例依赖于业务实体，而业务实体并不依赖于用例。</p><h2><span id="三-请求和响应模型">三、请求和响应模型</span></h2><p>在通常情况下，用例会接收输入数据，并产生输出数据。但在一个设计良好的架构中，用例对象通常不应该知道数据展现给用户或者其他组件的方式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之策略与层次</title>
      <link href="/2021/08/14/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E7%AD%96%E7%95%A5%E4%B8%8E%E5%B1%82%E6%AC%A1/"/>
      <url>/2021/08/14/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E7%AD%96%E7%95%A5%E4%B8%8E%E5%B1%82%E6%AC%A1/</url>
      
        <content type="html"><![CDATA[<p>本质上，所有的软件系统都是一组策略语句的集合。可以说，计算机程序不过就是一组仔细描述如何将输入转化为输出的策略语句的集合。<br><a id="more"></a></p><p>在大多数非小型系统中，整体业务策略通常都可以被拆解为多组更小的策略语句。一部分策略语句专门用于描述计算部分的业务逻辑，另一部分策略语句则负责描述计算报告的格式。除此之外，可能还会有一些用于描述如何校验输入数据的策略。</p><p>软件架构设计的工作重点之一就是，将这些策略彼此分离，然后将它们按照变更的方式进行重新分组。其中变更原因、时间和层次相同的策略应该被分到同一个组件中。反之，变更原因、时间和层次不同的策略则应该分属于不同的组件。</p><p>架构设计的工作常常需要将组件重排组合成为一个有向无环图。图中的每一个节点代表的是一个拥有相同层次策略的组件，每一条单向链接都代表了一种组件之间的依赖关系，它们将不同级别的组件链接起来。</p><p>在一个设计良好的架构中，依赖关系的方向通常取决于它们所关联的组件层次。一般来说，低层组件被设计为依赖于高层组件。</p><h2><span id="层次">层次</span></h2><p>我们对”层次”是严格按照”输入与输出之间的距离”来定义的。也就是说，一条策略距离系统的输入/输出越远，它所属的层次就越高。而直接管理输入/输出的策略在系统中的层次是最低的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之边界刨析</title>
      <link href="/2021/08/14/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E8%BE%B9%E7%95%8C%E5%88%A8%E6%9E%90/"/>
      <url>/2021/08/14/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E8%BE%B9%E7%95%8C%E5%88%A8%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>一个系统的架构是由一系列软件组件以及它们之间的边界共同定义的。而这些边界有着多种不同的存在形式。<br><a id="more"></a></p><h2><span id="一-跨边界调用">一、跨边界调用</span></h2><p>在运行时，跨边界调用指的是边界线一侧的函数调用另一侧的函数，并同时传递数据的行为。</p><h2><span id="二-令人生畏的单体结构">二、令人生畏的单体结构</span></h2><p>在单体结构中，组件之间的交互一般情况下都只是普通的函数调用，迅速而廉价，这就意味着这种跨源码层次解耦边界的通信会很频繁。</p><p>由于单体结构的部署需要编译所有源码，并且进行静态链接，这就意味着这些系统中的组件一般都会以源码形式交付。</p><h2><span id="三-部署层次的组件">三、部署层次的组件</span></h2><p>系统架构最常见的物理边界形式:动态链接库。这种形式包括.Net的DLL、Java的jar文件、Ruby Gem以及UNIX的共享库等。这种类型的组件在部署时不需要重新编译，因为它们都是以二进制形式或其他等价的可部署形式交付的。这里采用的就是部署层次上的解耦模式。部署这种类型的项目，就是将其所有可部署的单元打包成一个便于操作的文件格式，例如WAR文件，甚至可以只是一个目录(或者文件夹)。</p><h2><span id="四-线程">四、线程</span></h2><p>单体结构和按部署层次划分的组件都可以采用线程模型。当然，线程既不属于架构边界，也不属于部署单元，它们仅仅是一种管理并且调度程序执行的方式。一个线程既可以被包含在单一组件中，也可以横跨多个组件。</p><h2><span id="五-本地进程">五、本地进程</span></h2><p>系统架构还有一个更明显的物理边界形式，那就是本地进程。本地进程一般是由命令行启动或其他等价的系统调用产生的。本地进程往往运行于单个处理器或多核系统的同一组处理器上，但它们拥有各自不同的地址空间。一般来说，现有的内存保护机制会使这些进程无法共享其内存，但它们通常可以用某种独立的内存区域来实现共享。</p><p>每个本地进程都既可以是一个静态链接的单体结构，也可以是一个由动态链接组件组成的程序。在前一种情况下，若干个单体过程会被链接到<br>同一个组件中。而后一种情况下，这些单体过程可以共享同一个动态链接的可部署组件。</p><h2><span id="六-服务">六、服务</span></h2><p>系统架构中最强的边界形式就是服务。一个服务就是一个进程，它们通常由命令行环境或其他等价的系统调用来产生。服务并不依赖于具体的运行位置，两个互相通信的服务既可以处于单一物理处理器或多核系统的同一组处理器上，也可以彼此位于不同的处理器上。服务会始终假设它们之间的通信将全部通过网络进行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之划清边界</title>
      <link href="/2021/08/14/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E5%88%92%E6%B8%85%E8%BE%B9%E7%95%8C/"/>
      <url>/2021/08/14/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E5%88%92%E6%B8%85%E8%BE%B9%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<p>软件架构设计本身就是一门划分边界的艺术。边界的作用是将软件分割成各种元素，以便约束边界两侧之间的依赖关系。其中有一些边界是在项目初期，甚至在编写代码之前，就已经划分好，而其他的边界则是后来才划分的。在项目初期划分这些边界的目的是方便我们尽量将一些决策后进行，并且确保未来这些决策不会对系统的核心业务逻辑产生干扰。<br><a id="more"></a><br>架构师们所追求的目标是最大限度地降低构建和维护一个系统所需的人力资源。</p><p>那么系统最消耗人力的资源是什么呢？答案是系统中存在的耦合(尤其是那些过早做出的、不成熟的决策所导致的耦合)。</p><h2><span id="插件式架构">插件式架构</span></h2><p>事实上，软件开发技术发展的历史就是一个如何想方设法方便地增加插件，从而构建一个可扩展、可维护的系统架构的故事。系统的核心业务逻辑必须和其他组件隔离，保持独立，而这些组件要么是可以去掉的，要么是有多种实现的。</p><p>用户界面如果以插件形式存在的话，那么我们可以用插拔的方式切换很多不同类型的用户界面。可以是基于Web模式的、基于客户端/服务端模式的、基于SOA模式的、基于命令行模式的或者基于其他任何类型的用户界面技术的。数据库也类似。</p><h2><span id="插件式架构的好处">插件式架构的好处</span></h2><p>将系统设计为插件式架构，就等于构建起了一面变更无法逾越的防火墙。换句话说，只要GUI是以插件形式插入系统的业务逻辑中的，那么GUI这边所发生的变更就不会影响系统的业务逻辑。</p><p>所以，边界线也应该沿着系统的变更轴来画。也就是说，位于边界线两侧的组件应该以不同原因、不同速率变化着。</p><p>一个系统的GUI与业务逻辑的变更原因、变更速率显然是不同的，所以二者中间应该有一条边界线。同样的，一个系统的业务逻辑与依赖注入框架之间的变更原因和变更速度也会不同，它们之间也应该画边界线。</p><p><strong>本质上体现单一职责原则(不同的插件做不同的事情，归根结底，每一个插件只专注于一件事情)。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之独立性</title>
      <link href="/2021/08/12/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%80%A7/"/>
      <url>/2021/08/12/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>一个良好的软件架构必须支持以下几点。<br><a id="more"></a></p><ul><li>系统的用例与正常运行。</li><li>系统的维护。</li><li>系统的开发。</li><li>系统的部署。</li></ul><h2><span id="一-用例">一、用例</span></h2><p>一个系统的架构必须能支持其自身的设计意图。也就是说，如果某系统是一个购物车应用，那么该系统的架构就必须非常直观地支持这类应用可能会涉及的所有用例。事实上，这本来就是架构师们首先要关注的问题，也是架构设计过程中的首要工作。软件的架构必须为其用例提供支持。</p><p>一个设计良好的架构在行为上对系统最重要的作用就是明确和显式地反映系统设计意图的行为，使其在架构层面上可见。</p><h2><span id="二-运行">二、运行</span></h2><p>架构在支持系统运行方面扮演着更实际的角色。如果某个系统每秒要处理100000个用户，该系统的架构就必须能支持这种级别的吞吐量和响应时间。同样的，如果某个系统要在毫秒级的时间内完成对大数据仓库的查询，那么该系统的架构也必须能支持这类操作。</p><h2><span id="三-开发">三、开发</span></h2><p><strong>任何一个组织在设计系统时，往往都会复制出一个与该组织内沟通结构相同的系统-康威定律。</strong></p><p>一个由多个不同目标的团队协作开发的系统必须具有相应的软件架构。这样，这些团队才可以各自独立地完成工作，不会彼此干扰。这就需要恰当地将系统切分为一系列隔离良好、可独立开发的组件。然后才能将这些组件分配给不同的团队，各自独立开发。</p><h2><span id="四-部署">四、部署</span></h2><p>一个系统的架构在其部署的便捷性方面起到的作用也是非常大的。设计目标一定是实现”立刻部署”。一个设计良好的架构通常不会依赖于成堆的脚本与配置文件，也不需要用户手动创建一堆”有严格要求”的目录与文件。总而言之，一个设计良好的软件架构可以让系统在构建完成之后立刻就能部署。</p><h2><span id="五-保留可选项">五、保留可选项</span></h2><p>一个设计良好的架构应该通过保留可选项的方式，让系统在任何情况下都能方便地做出必要的变更。</p><h2><span id="六-按层解耦">六、按层解耦</span></h2><p>一个系统可以被解耦成若干个水平分层-UI界面、应用独有的业务逻辑、领域普适的业务逻辑、数据库等。</p><h2><span id="七-用例解耦">七、用例解耦</span></h2><p>如果我们按照变更原因的不同对系统进行解耦，就可以持续地向系统内添加新的用例，而不会影响旧有的用例。如果我们同时对支持这些用例的UI和数据库也进行了分组，那么每个用例使用的就是不同面向的UI与数据库，因此增加新用例就更不太可能会影响旧有的用例了。</p><h2><span id="八-解耦的模式">八、解耦的模式</span></h2><p>SOA(面向服务架构)或微服务可以作为解耦模式的可选项之一。</p><h2><span id="九-开发的独立性">九、开发的独立性</span></h2><p>只要系统按照其水平分层和用例进行了恰当的解耦，整个系统的架构就可以支持多团队开发，不管团队组织形式是分功能开发、分组件开发、分层开发，还是按照别的什么变量分工都可以。</p><h2><span id="十-部署的独立性">十、部署的独立性</span></h2><p>按用例和水平分层的解耦会给系统的部署带来极大的灵活性。如果解耦工作做得好，我们甚至可以在系统运行过程中热切换其各个分层实现和具体用例。</p><h2><span id="十一-重复">十一、重复</span></h2><p>架构师害怕重复，但重复在软件行业里一般来说是一件坏事。有些是真正的重复，有些仅仅是表面的重复。我们所要解决的是真正的重复。</p><h2><span id="十二-再谈解耦模式">十二、再谈解耦模式</span></h2><ul><li>源码层次:我们可以控制源代码模块之间的依赖关系，以此来实现一个模块的变更不会导致其他模式也需要变更或重新编译(例如Ruby Gem)。</li><li>部署层次:我们可以控制部署单元(譬如jar文件、DLL、共享库等)之间的依赖关系，以此来实现一个模块的变更不会导致其他模式的重新构建和部署。</li><li>服务层次:我们可以将组件间的依赖关系降低到数据结构级别，然后仅通过网络数据包来进行通信。</li></ul><p>一个设计良好的架构应该能允许一个系统从单体结构开始，以单一文件的形式部署，然后逐渐成长为一组相互独立的可部署单元，甚至是独立的服务或者微服务。</p><p>一个设计良好的架构应该能保护系统的大部分源码不受变更影响。对整个系统来说，解耦模式也应该是一个可选项。我们再进行大型部署时可以采用一种模式，而在进行小型部署时则可以采用另一种模式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之什么是软件架构</title>
      <link href="/2021/08/11/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E4%BB%80%E4%B9%88%E6%98%AF%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/"/>
      <url>/2021/08/11/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E4%BB%80%E4%B9%88%E6%98%AF%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>软件系统的架构质量是由它的构建者所决定的，软件架构这项工作的实质就是规划如何将系统切分成组件，并安排好组件之间的排列关系，以及组件之间互相通信的方式。<br><a id="more"></a></p><p>而设计软件架构的目的，就是为了在工作中更好地对这些组件进行研发、部署、运行以及维护。</p><p><strong>如果想设计一个便于推进各项工作的系统，其策略就是要在设计中尽可能长时间地保留尽可能多的可选项。</strong></p><p>软件架构设计的主要目标是支撑软件系统的全生命周期，设计良好的架构可以让系统便于理解、易于修改、方便维护，并且能轻视部署。软件架构的终极目标就是最大化程序员的生产力，同时最小化系统的总运营成本。</p><h2><span id="一-开发">一、开发</span></h2><p>一个开发起来很困难的软件系统一般不太可能会由一个长久、健康的生命周期，所以系统架构的作用就是要方便其开发团队对它的开发。</p><h2><span id="二-部署">二、部署</span></h2><p>为了让开发成为有效的工作，软件系统就必须是可部署的。在通常情况下，一个系统的部署成本越高，可用性就越低。因此，实现一键式的轻视部署应该是我们设计软件架构的一个目标。</p><h2><span id="三-运行">三、运行</span></h2><p>软件架构对系统运行的影响远不及它对开发、部署和维护的影响。几乎任何运行问题都可以通过增加硬件的方式来解决，这避免了软件架构的重新设计。</p><h2><span id="四-维护">四、维护</span></h2><p>在软件系统的所有方面中，维护所需的成本是最高的。满足永不停歇的新功能需求，以及修改层出不穷的系统缺陷这些工作将会占去绝大部分的人力资源。</p><p>系统维护的主要成本集中在”探秘”和”风险”这两件事上。其中”探秘”的成本主要来自我们对于现有软件系统的挖掘，目的是确定新增功能或修复问题的最佳位置和最佳方式。而”风险”，则是指当我们进行上述修改时，总是有可能衍生出新的问题，这种可能性就是风险成本。</p><h2><span id="五-保持可选项">五、保持可选项</span></h2><p>基本上，所有的软件系统都可以降解为策略与细节这两种主要元素。策略体现的是软件中所有的业务规则与操作过程，因此它是系统真正的价值所在。</p><p>而细节则是指那些让操作该系统的人、其他系统以及程序员们与策略进行交互，但是又不会影响到策略本身的行为。它们包括I/O设备、数据库、Web系统、服务器、框架、交互协议等。</p><p>软件架构师的目标是创建一种系统形态，该形态会以策略为最基本的元素，并让细节与策略脱离关系，以允许在具体决策过程中推迟或延迟与细节相关的内容。</p><p>如果在开发高层策略时有意地让自己摆脱具体细节的纠缠，我们就可以将与具体实现相关的细节决策推迟或延后，因为越到项目的后期，我们就会拥有越多的信息来做出合理的决策。</p><p><strong>一个优秀的软件架构师应该致力于最大化可选项数量。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教父三部曲之思考</title>
      <link href="/2021/08/08/%E6%95%99%E7%88%B6%E4%B8%89%E9%83%A8%E6%9B%B2%E4%B9%8B%E6%80%9D%E8%80%83/"/>
      <url>/2021/08/08/%E6%95%99%E7%88%B6%E4%B8%89%E9%83%A8%E6%9B%B2%E4%B9%8B%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>教父三部曲常年位居豆瓣Top250排行榜。教父三部曲长达近9个小时。我个人看了不下三遍。也许不少人在看完之后，都会有一个疑惑，这部电影为何被誉为男人们的圣经呢？这里不谈论为何被誉为男人们的圣经，只谈论这部电影带给我一些思考和感悟。<strong>思考与感悟可归纳为如下:</strong><br><a id="more"></a></p><ul><li>学会控制自己的情绪，不要在不理智的情况下做出决定；</li><li>小心和谨慎；</li><li>学会隐藏自己的想法。</li></ul><h2><span id="一-学会控制自己的情绪不要在不理智的情况下做出决定">一、学会控制自己的情绪，不要在不理智的情况下做出决定</span></h2><p><strong>《教父1》中有两个例子的体现:</strong><br>1.桑尼在面对其父维托遭遇了袭击，组织一批人杀死了塔塔基利亚家族的族长的小儿子塔塔基利亚，并攻击了巴西尼家族。</p><p>2.桑尼因其妹妹被妹夫家暴，通过暴力的手段惩罚其妹夫，最后被敌人(巴西尼和塔塔基利亚家族)勾结其妹夫演了一出戏，将桑尼引诱出来，在桑尼路过收费站的时候，被敌人打的全身都是子弹，惨死在收费站。</p><p>从正常人的角度来看，父亲遭遇的攻击或妹妹被别人欺负了，肯定要以牙还牙，将攻击自己父亲的人和欺负自己妹妹的人狠狠的教训一番。<br>但桑尼作为柯里昂家族的接班人(黑手党的太子爷)，面对这些突发情况时，在保持冷静的前提下，做出理性的决策。</p><p>事实上其父维托最初本不应遭遇袭击，原因在于维托与索拉索谈话的过程中，维托实际的态度是拒绝毒品生意，但因为桑尼的插嘴让索拉索形成一个假想，即假如我将维托干掉的话，柯里昂家族由桑尼掌权，毒品生意就能得到柯里昂家族的支持。</p><p>桑尼本不因惨死在收费站，如果他能保持理智，或者不亲自出马，让手下的人去了解情况后再做决策，就不会出现对手吃定他会因为妹妹被妹夫殴打后一定会出来的情况。</p><p>在现实中，我们会遇到形形色色的人，各种各样的情况，人很难在大多数情况下保持理智。</p><p>例如:在工作中，我们有时会因为一些事情而产生离职的念头，又或者是在领导安排工作后，沟通方面存在不畅(<strong>这里的重点不再是着重体现沟通问题，而主要着重体现沟通前的情绪问题，带着良好的情绪去沟通和带着不好的情绪去沟通，结果是截然不同的</strong>)，导致最终事情并不符合预期，因此与领导会产生一些冲突等情况。这种冲突如果不很好的处理，一方面影响工作状态，从而导致工作效率的下降；另一方面由于前者的影响会让领导对此不满，从而让人产生领导刻意刁难自己或者是”整自己”的心理(从领导的角度来看，团队的效率至关重要，如果有人拖后腿，通常情况是会被”请走”的，因为这代表公司的利益，公司所招的每个人都必须为公司带来价值或带来更高的价值，只有这样公司才能越办越好)。</p><p>例如:在生活中，我们有时吃亏上当(被骗子骗钱或者被割”韭菜”)，在吃亏上当之前，家人和朋友劝谏过，但我们没有听，<strong>过来人的意见并不能说全是对的，但是在我们做出重要决策时，尤其是关乎人生中的大事情时，还是很有参考的必要</strong>，这也是老人们常说的”不听老人言，吃亏在眼前”。换言之，当年玩比特币和做一些小规模投资的时候，如果不是导师的劝谏，并且我采纳了他的建议，可能我在技术领域或其它领域的成长肯定没有那么好。</p><h2><span id="二-小心和谨慎">二、小心和谨慎</span></h2><p>教父维托在临终前对麦克说,<strong>“我花了一辈子，才学会了小心。女人和小孩能够粗心大意，但男人不行”。</strong></p><p>在我们中国传统的意识有一部声音认为，”男孩容易粗心大意，而女孩则十分细腻”。</p><p>当我进入社大几年后发现，很多时候并非如此。这个社会的陷阱和诱惑太多，稍不留意，”钱袋子”就会被某个事物弄破，好不容易积攒的资本，最后又回到了解放前。再谈论”枪杆子”，此”枪杆子”非彼枪杆子,这里的枪杆子相当于是人在社会上一种谋生的手段，例如厨师的厨艺、汽修工的汽车修理技术、程序员的编程技能、销售人员的销售技巧、农民的种田技术、建筑工人的建筑技术、管理人员的管理能力等。</p><p>近年来发生不少事情，例如女乘客通过打车软件遭遇不良司机性侵、出租房隐藏监控仪器/酒店偷怕、网贷P2P、期房竟成”烂尾楼”、租房公司破产(租客利益得不到保护，租客和房东都成受害者)、某招聘网站招聘虚假(招聘欺骗)、电信诈骗千变万化、银行存款变保险、公司破产拖欠工资、新式传销等。</p><p>事实上，上面的事情仅仅是冰山一角，虽然国家不断打击这些，但作为国家公民仍然需小心和谨慎。上面所列举的事项无论哪一项都能对国家公民带来极大的伤害(人身伤害、隐私被侵犯、财产伤害等)。</p><p><strong>小心和谨慎不仅仅是防止可能存在的伤害，同样也是为了人生之路走得更稳。</strong>这一点对于一家之主的男人们非常重要，作为一个男人不仅仅要保护自己的父母，也要保护自己的妻儿。</p><h2><span id="三-学会隐藏自己的想法">三、学会隐藏自己的想法</span></h2><p>维托遭遇枪击，很大原因与桑尼在外人面前暴露出自己的想法有关。因此无论是一代教父维托还是二代教父麦克他们都曾说过这样的话，<strong>“不要让别人知道你的想法”。</strong></p><p><strong>我认为学会隐藏自己的想法主要体现在这几个方面？</strong></p><ul><li>基于自己私底下探索的事情不要暴露出来(防止一些不怀好意的人散步一些流言)；</li><li>个人的家庭私事不要透入给外人(防止别有用心的人借此攻击你)；</li><li>不成熟的想法(成熟的想法是指，基于过往你有这方面的经验，这种经验能够经得起推敲，不然的话，一旦说出来，最后伤害的还是自己)。</li></ul><p><strong>注意，这里有个误区，学会隐藏自己的想法并不代表什么都不说。</strong><br>比方说，在工作上某一个事情，你有这方面的经验，可以分享给大家让大家成长进步起来或者是在生活中有比较好的习惯，例如阅读和写作等，也可以分享出去。</p><p><strong>学会隐藏自己的想法分场合，这就是人们常说的，什么场合说什么样的话。</strong></p><p>学会隐藏自己的想法最终的目的是如下几点？</p><ul><li><strong>让幼稚的想法变得成熟且能经得起推敲(不做”伪工作者”或”伪学习者”或”伪专家”)；</strong></li><li><strong>避免世俗一些消极影响(社会上存在这样一类人，看到别人倒霉则幸灾乐祸，看到别人进步则心理不平衡，寻找机会攻击那个人)，让自己更专注于探索(让幼稚的想法变得成熟、让多次尝试走向成功、不断地刻意练习自己等)。</strong></li></ul><p>三代教父，一代有一代的使命，维托白手起家，麦克洗白家族事业、文森特清理对手并壮大家族势力等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>肖申克的救赎之感悟关键词</title>
      <link href="/2021/08/06/%E8%82%96%E7%94%B3%E5%85%8B%E7%9A%84%E6%95%91%E8%B5%8E%E4%B9%8B%E6%84%9F%E6%82%9F%E5%85%B3%E9%94%AE%E8%AF%8D/"/>
      <url>/2021/08/06/%E8%82%96%E7%94%B3%E5%85%8B%E7%9A%84%E6%95%91%E8%B5%8E%E4%B9%8B%E6%84%9F%E6%82%9F%E5%85%B3%E9%94%AE%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<p>不少人阅读或者看电影，都喜欢通过豆瓣进行筛选，例如看电影，不少人喜欢看豆瓣电影Top250里面的，在豆瓣电影Top250中有一部电影常年位居榜首，它就是《肖申克的救赎》，Tracholar曾写下一篇关于肖申克的观后感，我看了后深有感触，如今我在他的基础上谈谈我的感悟。<br><a id="more"></a><br>Tracholar的文章为:<br><a href="https://tracholar.github.io/wiki/book-note/shawshank-redemption.html" target="_blank" rel="noopener">肖申克的救赎</a></p><p>《肖申克的救赎》这部电影给了五点感悟。分别为:</p><ul><li>体制化；</li><li>自由；</li><li>规则；</li><li>知识；</li><li>勇气。</li></ul><h2><span id="一-体制化">一、体制化</span></h2><p>体制化（institutionalized），“体制”可理解为包括某种规则、习惯、意识和氛围的环境，体制化的根源是意识形态，想要避免体制化，就要敢于怀疑，积极论证，保持批判性思维。避免自己被体制化，我们必须勇敢、思想、看和听，创造强化独立的人格(这里引用百度百科)。</p><p>例如老布上吊，老布在肖申克监狱享有较高的地位，坐牢坐了半个多世纪的牢，早已与外面的世界隔离开来，当他假释成功出来以后，在一家超市工作，主要给顾客装东西。最终上吊自杀了。<br>瑞德说，<strong>“这里的高墙很奇怪，刚开始你讨厌它，慢慢地你适应了它，再后来你就离不开它了。这就是体制化。“</strong></p><p>体制化伴随着我们的成长，从学校到社会，我们以为我们脱离了，实际上只不过以一种形式转变为另一种形式，就像能量守恒定律所描述的那样，”能量既不会凭空产生，也不会凭空消失，它只会从一种形式转化为另一种形式，或者从一个物体转移到其它物体，而能量的总量保持不变”。体制化也亦如此。</p><p>创业公司的成功不仅仅在于研发出的产品有多牛逼，关键在于人。人的潜力是无限的，也是无止境的。近来不断思考，当年创业公司为何做了一堆项目，除编程教育外，竟无一个被用户真正的使用(基本上Demo演示)，那个时候我经历的不多，感触的也少，随之不断的学习和与各式各样的人深入交流中，我逐渐明白了一些，创业中好点子固然是重要的，更重要的是好点子如何最终落到实处，落到实处是需要人的，但人往往是有”惰性”的，这就需要管理层面上的制度约束。制度应是不断的演变，以适应于当前情况。长期的不变，容易使人”体制化”，在”体制化”和”个人惰性”的双重出击下，人的创造力、思考力、人格等慢慢的就大众化或奴化(这样的大众化和奴化是非常可怕的)，国家近来为何要打击课外培训机构呢？大家不妨好好思考这个问题。在我看来”考试机器”绝非国家所需要的人才，21世纪或22世纪，国与国之间的较量将会更加激烈，国与国之间的较量，本质上还是核心竞争力，国家的核心竞争力的关键在于科技创新，科技创新的关键在于人才。</p><p>曾经的”体制化”使我放松对自己的要求，上班摸鱼，下班娱乐，持续了一段时间后，退步很大，做事情不是这出问题就是那出问题，如果不是因为我最初为公司项目起步和第一个MVP立下汗马功劳，恐怕早已被开。</p><p>不少朋友可能会关心如何避免体制化，或者是当处于体制化的时候，如何从中走出来。<strong>我的答案就是终身学习观和实践第一。</strong></p><h2><span id="二-自由">二、自由</span></h2><p>Tracholar说，<strong>“人的大半生都是一个监狱”。</strong><br>监狱里的人大都向往着自由。就像如今所流行的一个词”财务自由”，每个人都希望能”财务自由”，为此他们不断的拼命赚钱，加班加点，想方设法的搞钱，于是在2021年初的时候就开始流行的一个词，即深圳女孩。<br>科普一下，”深圳女孩”指的是每次聚会不聊八卦不吹水，喜欢聊如何搞钱的女孩。<br>女孩们都想方设法搞钱，作为男孩更是如此，对于男孩而言，成家立业都不容易，成家即结婚，结婚需要买房子，而房子足以抽空一个家族大半辈子的积蓄，特别是对于农村的孩子而言。遇到好的岳父岳母，能够体恤你的不易，只要你爱他们的女儿并对他们的女儿好就行，房子方面他们也会进行资金上的帮助，至于彩礼只不过是一种形式，男方给女方父母，女方父母最后还是会给女方的(这种可遇不可求)。结婚对于一个男人并不意味着结束一个人的生活那么简单，相反结婚以后需要面对很多。而这很多往往会让人很压抑，觉得没有自由，以至于不少中年男子回家前总喜欢在车里或楼下抽个烟在上去。<br>写的或许有些离题了，但这着重体现了，不管是身在监狱里的囚徒们，还是监狱外的老百姓，无不对自由向往。<br>不经想起我第一年工作的时候，那个时候毫无本事，从运维做起，在没有获得这份工作之前，我到处奔波，面试了几十家公司，投的简历更是五花八门，从专业化到杂乱化，只为”生存”二字。即便最后找到了工作，在工作过程中更是痛苦万分。但当时没有任何的选择，唯一的选择在这里干下去，生存第一，发展第二。当有了工作经验以后，我离职以后，休息了十来天，投了几份简历，一下就有不少公司邀请我面试。当我从创业公司离职后，来到了我人生中的第三家公司，最后从第三家公司到第四家公司。这时我能够感同身受的理解Tracholar说的这句话，”什么是自由？自由是指你可以自己做出选择”。当我拥有较为丰富的研发经验时，我选择的范围便广泛很多。<br>但任何事情并非那么简单，例如在第三家公司时，我就面对一个很难的命题，<strong>“工作和生活如何平衡？”</strong>，高回报的薪资代表着高强度、快节奏的工作。创业公司都没让我感觉这样的强度。虽然在第三家公司不到半年，不过我在这收获还是很多。<br>工作和生活究竟如何平衡？《赢》这本书告诉了我答案，我在第四家公司也就是如今的公司付诸了实践，答案就是，<strong>绝大多数老板都非常愿意协调员工的工作与生活的矛盾，如果你能给他出色的业绩。这里的关键词是”如果”。</strong><br>在关于自由方面，我仍在不断摸索，在不断摸索的同时，深深的验证了一点，<strong>“工作与生活的平衡是一个交易，你和自己之间就所得和所失进行的交易”。</strong></p><h2><span id="三-规则">三、规则</span></h2><p>今年6月份去了一趟魔都，看看一位朋友和故地重游一番。<br>这趟魔都之行收获颇多。魔都给我最深的印象就是秩序。特别是站在东方明珠塔的时候，脚下的玻璃路，能让我清晰地看到房子、车辆、人、树木等一切物，彷佛如上帝的视角，掌控着万事万物的运转。我喜欢这种掌控的感觉。<br>拿《肖申克的救赎》来说，安迪利用规则的漏洞，一方面帮助典狱长洗钱，另一方面让典狱长多年的苦心经营最终做了嫁衣。<br><strong>规则的出发点是为了保护大多数人的利益。但不排除有少部分人会钻规则的漏洞实现自我利益最大化。</strong><br><strong>了解和熟悉规则不仅仅是为了向上，同样也是为了自我保护。</strong><br>今年感触比较深的是某个人影响团队整体利益而被开掉，团队的整体利益实际也是公司规则的一部分，公司的规则主要是维护公司的利益，公司的利益实际也代表公司里千千万万的员工利益。也许这篇文章那个被开的人会看到，从我本人的初心就是，”与人为善就是为己为善”。虽然那个人有损了团队的利益，但从客观上，我也感谢她教会了我一些事情。希望她能吸取这个教训，祝愿她前程似锦。<br>不经意间想起莫言先生曾说的一句话，”有人天生是来爱你的，有人注定要给你上课”。</p><h2><span id="四-知识">四、知识</span></h2><p><strong>知识就是力量，知识改变命运。</strong><br>安迪在狱中待了27年，最终通过挖地道逃了出来，获得了自由。<br>不少人认为是他坚持不放弃，怀揣着希望。我则认为知识在其中起了很大的作用。<br>试问如果安迪没有相应的地质知识，他恐怕很难实施这个”越狱计划”。<br>试问如果安迪没有专业的银行知识，他恐怕很难在监狱里面把图书馆搞起来、与瑞德以及瑞德的朋友交好、搞定三姐妹、典狱长的帮助(虽然这种帮助是以”利用价值”作为前提)。<br><strong>前面谈到的体制化、自由、规则，都是以知识作为基础。</strong><br>破除体制化，离开安逸，需要不断学习，学习有些时候是”反人类的”，这里的”反人类”是指人都喜欢待在自己的舒适圈中，而学习相当于离开舒适圈。<br>实现自由的前提，也是以知识为主，例如财务自由，要实现财务自由需要做很多努力和尝试以及坚持，比方说创业，创业需要创始人不断的学习，创业最痛苦不仅仅是没有工资以及没有周末的加班，还有面对新事物的恐惧以及必须要想方设法战胜恐惧(这就涉及到知识)。<br>了解和熟悉以及到精通规则的前提，也在于知识，安迪最终重获了自由也扳倒了典狱长，莫不与此有关。</p><h2><span id="五-勇气">五、勇气</span></h2><p>我们都说，<strong>勇敢的尝试是成功的一半。</strong><br>试问如果安迪没鼓起勇气勇敢的走到海利面前并说出他能利用他的银行知识帮助海利避税，恐怕就没有后来的典狱长撑腰以及海利帮助其惩罚三姐妹。<br>这些年来也尝试不少，写过一篇对赚钱的思考与摸索，感兴趣的朋友阅读这篇文章:<br><a href="https://youcongtech.com/2021/05/23/%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%AF%B9%E8%B5%9A%E9%92%B1%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E6%91%B8%E7%B4%A2/" target="_blank" rel="noopener">技术人对赚钱的思考与摸索</a><br>也许这些勇敢的尝试称不上多么的成功，但是丰富了我人生的经历以及提高自己的综合素质。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 阅读感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解SaaS之架构篇</title>
      <link href="/2021/08/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3SaaS%E4%B9%8B%E6%9E%B6%E6%9E%84%E7%AF%87/"/>
      <url>/2021/08/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3SaaS%E4%B9%8B%E6%9E%B6%E6%9E%84%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-saas的技术选型从java的角度出发">一、SaaS的技术选型(从Java的角度出发)</span></h2><a id="more"></a><ul><li>分布式网关(GateWay、Zuul、Nginx、Kong)；</li><li>缓存(Redis、MemCached、EhCache)；</li><li>搜索(ElasticSearch、Lucene/Solr)；</li><li>限流熔断(Hystrix、Sentinel)；</li><li>分布式注册中心(Eureka、Nacos、Consul、Etcd、Zookeeper)；</li><li>定时任务以及分布式定时任务(Shedule、Quartz、XXl-Job、Elastic-Job等)；</li><li>分布式事务(Seata、Tx-LCN、ByteTCC)；</li><li>分布式日志系统(ELK)；</li><li>分布式服务权限(OAuth1.0/2.0、JWT、Shiro、Spring Security)；</li><li>应用诊断(Arthas)；</li><li>分布式调用链(SkyWalking+RocketBolt、Zipkin)；</li><li>分布式锁(Redisson)；</li><li>分布式服务流程编排(Coroutine，Akka，Kilim，Flowable，Axon)；</li><li>压测平台(JMeter，LoadRunner)；</li><li>分布式全局主键系统(Redis，Zookeeper，Twitter Snowflake)；</li><li>分布式自动化API文档(Swagger)；</li><li>分库分表中间件(Sharding Sphere，MyCat)；</li><li>消息中间件(RocketMQ，Kafka，ActiveMQ、RabbitMQ);</li><li>分布式缓存(Redis、MongoDB)；</li><li>文件系统(OSS、NFS、FastDFS)；</li><li>RPC(Dubbo、Motan、Thrift、gRPC)；</li><li>构建工具(Maven、Gradle)；</li><li>基础框架(SpringBoot+MyBatis/SpringBoot+MyBatis-Plus、SSM框架(Spring+SpringMVC+MyBatis))；</li><li>前端技术选型(html/css/js三剑客、React.js、Vue.js、Angular.js等)。</li></ul><p>上面的技术选型既可支撑单体应用，也能支撑分布式微服务应用。<br>笔者曾写过一篇关于单体和分布式微服务的思考，感兴趣的朋友可以阅读:<br><a href="https://youcongtech.com/2021/04/17/%E4%BB%8E%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E5%88%B0%E5%88%86%E5%B8%83%E5%BC%8F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84%E6%80%9D%E8%80%83/" target="_blank" rel="noopener">从单体架构到分布式微服务架构的思考</a></p><h2><span id="二-saas系统分级">二、SaaS系统分级</span></h2><p>从”混乱”到”乌托邦”，一共5级。</p><ul><li>0级(混乱):每次新增一个客户，都会新增软件的一个实例。</li><li>1级(受控的混乱):所有客户都运行在软件的同一个版本上，而且任何的定制化都通过修改配置来实现。</li><li>2级(多租户、高层建筑):所有的客户都已经可以在软件的同一个版本上运行了，而且他们都在同一个“实例”上运行。</li><li>3级(多租户、扩建):此时你已经拥有了多租户、单一版本的软件模型。不过你还是可以通过硬件扩展（scale-out）的方式来进行扩充。</li><li>4级(乌托邦):如同第3级，除非你可以找出有效的方式，以在不同的“实例”上运行不同版本的软件。</li></ul><h2><span id="三-saas平台架构分层">三、SaaS平台架构分层</span></h2><p>Saas平台架构需要完成从用户申请链接SaaS到用户对自己购买的功能模块的应用整个过程，用户用起SaaS看似简单快捷，但这个过程却需要SaaS平台架构默默完成的非常复杂的处理过程。通过对SaaS平台架构的了解，可以清晰的分化数据的处理过程，让用户也可以明白saas平台架构处理数据的优势。</p><h3><span id="1呈现层">1.呈现层</span></h3><p>SaaS平台架构的呈现层可以使用的客户端如浏览器或软件客户端。如果是浏览器则需要Web界面技术、交互技术等技术（如：HTMl5技术、CSS3技术、Ajax技术等）的支持，如果是软件客户端则需要远程桌面技术、软件交互技术等技术支持。</p><h3><span id="2调度层">2.调度层</span></h3><p>SaaS平台架构的调度层体现分布式系统的特性之一。调度层首先负责识别并通过AAA认证每个用户请求，然后根据业务处理器的负载、业务特征进行合理的调度。通过应用这样的架构SaaS平台可以横向扩展。此外在存储、缓存等方面为了满足平台的横向扩展需求，调度层也必须具有良好的可扩展性。</p><p><strong>AAA认证解释:</strong><br>AAA是认证（Authentication）、授权（Authorization）和计费（Accounting）的简称，是网络安全中进行访问控制的一种安全管理机制，提供认证、授权和计费三种安全服务。</p><h3><span id="3业务层">3.业务层</span></h3><p>SaaS平台架构的业务层负责接收调度层转发过来的请求，而且还要通过对接受到的请求执行真正的业务逻辑。一般来说业务逻辑的执行使用一台服务器就够了。因此业务层实际是由一排对等的服务器组成的，每台服务器都执行相同的业务逻辑。</p><h3><span id="4数据层">4.数据层</span></h3><p>SaaS平台架构的数据库集群用于处理存储关系性很强并且对事务性要求很高的业务数据，这类数据目前还要用传统的数据库集群技术来解决，SaaS平台架构的数据库集群主要是根据业务特征制定数据拆分方案。同时分布式数据库用于存放海量但关系性不强的数据（如：用户的操作日志等）。</p><h2><span id="四-saas的技术架构核心是多租户">四、SaaS的技术架构核心是多租户</span></h2><h3><span id="1什么是多租户">1.什么是多租户？</span></h3><p>多租户技术或称多重租赁技术，简称SaaS，是一种软件架构技术，是实现如何在多用户环境下（多用户一般是面向企业用户）共用相同的系统或程序组件，并且可确保各用户间数据的隔离性。简单讲：在一台服务器上运行单个应用实例，它为多个租户（客户）提供服务。从定义中我们可以理解：多租户是一种架构，目的是为了让多用户环境下使用同一套程序，且保证用户间数据隔离。那么重点就很浅显易懂了，多租户的重点就是同一套程序下实现多用户数据的隔离。</p><h3><span id="2多租户架构以及数据隔离方案">2.多租户架构以及数据隔离方案</span></h3><p>多租户在数据存储上主要存在三种方案，分别为如下:</p><ul><li>独立数据库；</li><li>共享数据库，独立Schema；</li><li>共享数据库，共享Schema，共享数据表。</li></ul><h4><span id="1独立数据">(1)独立数据</span></h4><p>即一个租户一个数据库，这种方案的用户数据隔离级别最高，安全性最好，但成本较高。</p><ul><li>优点：为不同的租户提供独立的数据库，有助于简化数据模型的扩展设计，满足不同租户的独特需求；如果出现故障，恢复数据比较简单。</li><li>缺点：增多了数据库的安装数量，随之带来维护成本和购置成本的增加。</li></ul><h4><span id="2共享数据库独立schema">(2)共享数据库，独立Schema</span></h4><p>也就是说，共同使用一个数据库，使用表进行数据隔离<br>多个或所有租户共享Database，但是每个租户一个Schema（也可叫做一个user）。底层库比如是：DB2、ORACLE等，一个数据库下可以有多个SCHEMA。</p><ul><li>优点：为安全性要求较高的租户提供了一定程度的逻辑数据隔离，并不是完全隔离；每个数据库可支持更多的租户数量。</li><li>缺点：如果出现故障，数据恢复比较困难，因为恢复数据库将牵涉到其他租户的数据。</li></ul><h4><span id="3共享数据库共享schema共享数据表">(3)共享数据库，共享Schema，共享数据表</span></h4><p>也就是说，共同使用一个数据库一个表，使用字段进行数据隔离<br>即租户共享同一个Database、同一个Schema，但在表中增加TenantID多租户的数据字段。这是共享程度最高、隔离级别最低的模式。<br>简单来讲，即每插入一条数据时都需要有一个客户的标识。这样才能在同一张表中区分出不同客户的数据，这也是我们系统目前用到的(tenant_id)</p><ul><li>优点：三种方案比较，第三种方案的维护和购置成本最低，允许每个数据库支持的租户数量最多。</li><li>缺点：隔离级别最低，安全性最低，需要在设计开发时加大对安全的开发量；数据备份和恢复最困难，需要逐表逐条备份和还原。</li></ul><h3><span id="3多租户架构设计需要考虑因素有哪些">3.多租户架构设计需要考虑因素有哪些？</span></h3><ul><li>成本因素；</li><li>安全因素；</li><li>租户数量；</li><li>技术储备。</li></ul><h4><span id="1成本因素">(1)成本因素</span></h4><p>隔离性越好，设计和实现的难度和成本越高，初始成本越高。共享性越好，同一运营成本下支持的用户越多，运营成本越低。</p><h4><span id="2安全因素">(2)安全因素</span></h4><p>要考虑业务和客户的安全方面的要求。安全性要求越高，越要倾向于隔离。</p><h4><span id="3租户数量">(3)租户数量</span></h4><ul><li>系统要支持多少租户？上百？上千还是上万？可能的租户越多，越倾向于共享。</li><li>平均每个租户要存储数据需要的空间大小。存贮的数据越多，越倾向于隔离。</li><li>每个租户的同时访问系统的最终用户数量。需要支持的越多，越倾向于隔离。</li><li>是否想针对每一租户提供附加的服务，例如数据的备份和恢复等。这方面的需求越多，越倾向于隔离。</li></ul><h4><span id="4技术储备">(4)技术储备</span></h4><p>共享性越高，对技术的要求越高。</p><h3><span id="4常见的架构模式有哪些">4.常见的架构模式有哪些？</span></h3><ul><li>独立服务+独立数据库；</li><li>一套服务+独立数据库；</li><li>一套服务+共享数据库；</li><li>多套服务+独立数据库；</li><li>多套服务+共享数据库。</li></ul><h2><span id="五-我过去参与的创业公司针对saas相关的架构设计是如何设计的">五、我过去参与的创业公司，针对SaaS相关的架构设计是如何设计的？</span></h2><p>从从0到1的设计与开发角度来看，我们所开发的智能酒店+智能门锁以及编程教育平台主要采用架构模式为多套服务+共享数据库。在采用该架构模式的过程中，遇到了很多问题，技术难度也非常大。如果不能战胜这个巨大的困难时，那么我们的产品将会形同烂尾楼似的，越到后面越不行。所幸的是算是成功突破了。在成功突破的这一过程中，使我深刻明白了《劝学》中的一句话，”君子性非异也，善假于物也”。<br><strong>下面进入相关的细节，针对智能酒店+智能门锁系统，我们的多租户架构设计是如何考虑的：</strong></p><ul><li>从成本的角度，我们采用共享数据库，通过租户ID标识，支持更多的客户；</li><li>从安全的角度，共享数据库的隔离性不如独立数据库，安全性主要体现在数据方面，针对不同客户的数据我们采用不同的实时备份策略，以保证系统如果突发故障导致数据丢失，我们能在短时间内恢复数据(涉及大量的运维框架和技术)，让系统正常运行；</li><li>从租户数量的角度来看，我们的租户预计上百万(可能还不止)，我们有一个专门的存储服务器用来保证每个租户存储空间的独立性和完整性，文件存储与数据库存储分离状态，同样为了保证系统的可用性，我们采用的集群模式，通过服务冗余的形式最大程度保证系统服务的可用性；</li><li>从技术储备的角度来看，我们做的不太好，通过后面不断的学习暂时性弥补了一部分，技术储备很重要，当面对业务需求时，采用合适高效的技术方案能够快速实现，让系统早点上线，让客户能尽早使用并给予反馈。</li></ul><p>对我在创业公司经历感兴趣的朋友可以阅读如下文章:<br><a href="https://mp.weixin.qq.com/s?__biz=MzUxODk0ODQ3Ng==&amp;mid=2247485439&amp;idx=1&amp;sn=201a791086509ae93a29a669e8d402be&amp;chksm=f98054eccef7ddfac7c6b7d30d40b33a1044cc702850cadf1ee2b0a9b3caca551f56779c719b&amp;token=2104650779&amp;lang=zh_CN#rd" target="_blank" rel="noopener">一位北漂在创业公司的两年(详细概括，两万多字)</a><br><a href="https://www.cnblogs.com/youcong/p/12153262.html" target="_blank" rel="noopener">创业公司这两年</a><br><a href="https://www.cnblogs.com/youcong/p/10016594.html" target="_blank" rel="noopener">谈谈在创业公司的几点感触</a></p><p>参考资料如下:<br><a href="https://blog.csdn.net/xmtblog/article/details/100588987#:~:text=Saas%E7%B3%BB%E7%BB%9F%E5%88%86%E7%BA%A7%20%EF%BC%9A%20SaaS%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B%E7%9A%845%E4%B8%AA%E7%BA%A7%E5%88%AB%E2%80%94%E2%80%94%E4%BB%8E%E2%80%9C%E6%B7%B7%E4%B9%B1%E2%80%9D%E5%88%B0%E2%80%9C%E4%B9%8C%E6%89%98%E9%82%A6%E2%80%9D%E3%80%82,%E7%AC%AC0%E7%BA%A7%EF%BC%88%E6%B7%B7%E4%B9%B1%EF%BC%89%20%EF%BC%9A%E6%AF%8F%E6%AC%A1%E6%96%B0%E5%A2%9E%E4%B8%80%E4%B8%AA%E5%AE%A2%E6%88%B7%EF%BC%8C%E9%83%BD%E4%BC%9A%E6%96%B0%E5%A2%9E%E8%BD%AF%E4%BB%B6%E7%9A%84%E4%B8%80%E4%B8%AA%E5%AE%9E%E4%BE%8B%E3%80%82%20%E7%AC%AC1%E7%BA%A7%EF%BC%88%E5%8F%97%E6%8E%A7%E7%9A%84%E6%B7%B7%E4%B9%B1%EF%BC%89%20%EF%BC%9A%E6%89%80%E6%9C%89%E5%AE%A2%E6%88%B7%E9%83%BD%E8%BF%90%E8%A1%8C%E5%9C%A8%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%90%8C%E4%B8%80%E4%B8%AA%E7%89%88%E6%9C%AC%E4%B8%8A%EF%BC%8C%E8%80%8C%E4%B8%94%E4%BB%BB%E4%BD%95%E7%9A%84%E5%AE%9A%E5%88%B6%E5%8C%96%E9%83%BD%E9%80%9A%E8%BF%87%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%9D%A5%E5%AE%9E%E7%8E%B0%E3%80%82" target="_blank" rel="noopener">多租户 Saas 系统架构的设计思路</a><br><a href="https://cloud.tencent.com/developer/article/1494339#:~:text=%E5%A4%9A%E7%A7%9F%E6%88%B7%E6%8A%80%E6%9C%AF%E6%88%96%E7%A7%B0%E5%A4%9A%E9%87%8D%E7%A7%9F%E8%B5%81%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%AE%80%E7%A7%B0,SaaS%20%EF%BC%8C%E6%98%AF%E4%B8%80%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%EF%BC%8C%E6%98%AF%E5%AE%9E%E7%8E%B0%E5%A6%82%E4%BD%95%E5%9C%A8%E5%A4%9A%E7%94%A8%E6%88%B7%E7%8E%AF%E5%A2%83%E4%B8%8B%EF%BC%88%E5%A4%9A%E7%94%A8%E6%88%B7%E4%B8%80%E8%88%AC%E6%98%AF%E9%9D%A2%E5%90%91%E4%BC%81%E4%B8%9A%E7%94%A8%E6%88%B7%EF%BC%89%E5%85%B1%E7%94%A8%E7%9B%B8%E5%90%8C%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%88%96%E7%A8%8B%E5%BA%8F%E7%BB%84%E4%BB%B6%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%8F%AF%E7%A1%AE%E4%BF%9D%E5%90%84%E7%94%A8%E6%88%B7%E9%97%B4%E6%95%B0%E6%8D%AE%E7%9A%84%E9%9A%94%E7%A6%BB%E6%80%A7%E3%80%82" target="_blank" rel="noopener">Spring Boot集成Mybatis-Plus多租户架构实战</a><br><a href="https://baike.baidu.com/item/AAA/150315" target="_blank" rel="noopener">AAA 网络安全系统</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> IT领域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解SaaS之业务篇</title>
      <link href="/2021/08/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3SaaS%E4%B9%8B%E4%B8%9A%E5%8A%A1%E7%AF%87/"/>
      <url>/2021/08/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3SaaS%E4%B9%8B%E4%B8%9A%E5%8A%A1%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-什么是saas">一、什么是SaaS?</span></h2><p>SaaS，是Software-as-a-Service的缩写名称，意思为软件即服务，即通过网络提供软件服务。<br><a id="more"></a></p><p>SaaS平台供应商将应用软件统一部署在自己的服务器上，客户可以根据工作实际需求，通过互联网向厂商定购所需的应用软件服务，按定购的服务多少和时间长短向厂商支付费用，并通过互联网获得Saas平台供应商提供的服务。</p><p>SaaS应用软件有免费、付费和增值三种模式。付费通常为“全包”费用，囊括了通常的应用软件许可证费、软件维护费以及技术支持费，将其统一为每个用户的月度租用费。</p><p>SaaS不仅适用于中小型企业，所有规模企业都可以从SaaS中获利。</p><h2><span id="二-saas的演进过程有哪些">二、SaaS的演进过程有哪些？</span></h2><p>主要为4个阶段，<strong>分别为如下:</strong></p><ul><li>终端设备(终端主机)；</li><li>C/S应用(独立服务器)；</li><li>网页托管(服务群)；</li><li>云原生应用(虚拟化)。</li></ul><h3><span id="1终端设备">1.终端设备</span></h3><p>通过远程终端访问集中式的主机机房，来处理或获取业务的信息和数据。现在还能在一些影片中看到这种终端设备的身影。</p><h3><span id="2cs应用">2.C/S应用</span></h3><p>即客户端/服务器的访问模式。通过桌面客户端访问独立服务器，处理或获取业务信息和数据。这是早期开发者和用户在局域网中常用的一种应用架构。</p><h3><span id="3网页托管">3.网页托管</span></h3><p>通过网页托管访问分布式服务器，处理或获取业务信息和数据，也就是所谓ASP（Application Service Provider，应用程序服务提供商）。这时已经出现了诸如多租户、应用共享、订阅收费等形式，有一点SaaS的雏形了。</p><h3><span id="4云原生应用">4.云原生应用</span></h3><p>通过云原生应用，访问由软件定义的、虚拟化的服务器，也就是今天的SaaS模式。</p><h2><span id="三-如何理解saas">三、如何理解SaaS？</span></h2><p><strong>引用一个生动的例子来叙述:</strong><br>以前，每家每户都需要挖一口井解决吃水问题。后来改为集中供水，即由自来水公司供水，用户只要按时缴纳水费，打开水龙头就会有水。这省却了找水和打井的过程，也节省了工程成本。自来水公司的业务模式就变成了“供水即服务”。</p><p>对于软件技术人员而言，SaaS是一种新的应用架构模式，引入了共享单个实例、多租户、权限模式、存储模式和计费模式等概念。</p><p>对于SaaS服务商而言，由于采用与传统软件不同的交付模式和订阅收入模式，SaaS意味着一种全新的商业模式和新的生意机会。</p><p>对于客户而言，SaaS相当于把IT设备、软件和运维服务，全部外包给了SaaS服务商。</p><h2><span id="四-iaas-paas-saas对比分析">四、IaaS、PaaS、SaaS对比分析</span></h2><h3><span id="1基本定义">1.基本定义</span></h3><h4><span id="1基础架构即服务iaas">(1)基础架构即服务(IaaS)</span></h4><p>供应商采用按使用量付费的形式，为客户提供对云端存储、网络、服务器和其他计算资源的访问。</p><h4><span id="2平台即服务paas">(2)平台即服务(PaaS)</span></h4><p>服务提供商支持用户访问基于云的环境，而用户可以在其中构建和交付应用。提供商提供底层的基础架构。</p><h4><span id="3软件即服务">(3)软件即服务</span></h4><p>服务供应商通过互联网提供软件和应用。用户可以订购软件，然后通过Web或供应商API进行访问。</p><h3><span id="2iaas">2.IaaS</span></h3><p>基础架构即服务(IaaS)是一种云计算产品，供应商在其中为用户提供了对存储器、网络和服务器等计算资源的访问权。组织可以在服务提供商的基础架构中使用自己的平台和应用。</p><p><strong>主要功能:</strong></p><ul><li>用户无需直接购买硬件， 而是按需购买 IaaS。</li><li>可根据处理和存储需求扩展基础架构。</li><li>节省企业购买和维护硬件的成本。</li><li>由于数据位于云端，因此不会有单点故障。</li><li>对管理任务启用虚拟化，以便腾出时间来完成其他工作。</li></ul><h3><span id="3paas">3.PaaS</span></h3><p>平台即服务(PaaS)是一种云计算产品，为用户提供可开发、管理和交付应用的云环境。除了存储和其他计算资源外，用户还能够使用一组预构建的工具来开发、定制和测试自己的应用程序。</p><p><strong>主要功能:</strong></p><ul><li>PaaS提供平台和工具，用于在相同的环境中测试、开发和托管应用。</li><li>使组织能够将精力集中于开发，无需担心底层基础架构。</li><li>供应商负责管理安全性、操作系统、服务器软件以及备份。</li><li>促进密切协作，即使团队远程工作也毫不影响。</li></ul><h3><span id="4saas">4.SaaS</span></h3><p>软件即服务(SaaS)是一种云计算产品，为用户提供对基于云的供应商软件的访问权。用户无需在其本地设备上安装应用。相反，应用驻留在远程云网络中，通过Web或API进行访问。通过应用，用户可以存储和分析数据，并可进行项目协作。</p><p><strong>主要功能:</strong></p><ul><li>SaaS供应商通过预订模式向用户提供软件和应用。</li><li>用户不必管理、安装或升级软件，这一切都由SaaS供应商负责。</li><li>数据在云端受到保护，设备故障不会导致数据丢失。</li><li>可根据服务需求对资源用量进行扩展。</li><li>可以全球几乎任何地方，通过任何与互联网连接的设备访问应用。</li></ul><h2><span id="五-国内saas领域发展现状">五、国内SaaS领域发展现状</span></h2><h3><span id="1saas与传统安装部署软件的差异">1.SaaS与传统安装部署软件的差异</span></h3><ul><li>用户使用的SaaS软件，其数据保存在云端；而传统安装部署软件通常部署在购买软件企业的自有服务器上。</li><li>SaaS公司提供的SaaS服务是租用制的；而传统软件往往是客户一次性支付一笔钱”买断”该软件的部分或全部使用权。<br>核心可归纳为:<strong>SaaS的本质是续费，这是与传统安装部署软件的本质差别。</strong></li></ul><h3><span id="2国内saas行业发展情况">2.国内SaaS行业发展情况</span></h3><p>这里引用一篇文章，感兴趣的朋友可通读一遍:<a href="https://new.qq.com/omn/20210113/20210113A0D6TI00.html" target="_blank" rel="noopener">2020年中国企业级SaaS行业发展研究报告</a></p><p><strong>核心摘要为如下:</strong></p><ul><li>中国企业级SaaS发展基础要素仍落后于美国。</li><li>新冠疫情加快了市场教育进程。</li><li>企业级SaaS市场将保持较快速的增长。</li><li>互联网厂商跨界入局带来新机遇。</li></ul><h3><span id="3国内saas发展的阻力">3.国内SaaS发展的阻力</span></h3><p>这里引用《SaaS创业路线图：to B产品、营销、运营方法论及实战案例解读》，<strong>可归纳为以下三个方面:</strong></p><ul><li>“效率提升”类IT产品的需求还没有大规模爆发。</li><li>大部分SaaS公司的产品还不够好。</li><li>中国企业IT采购流程也是一个瓶颈。</li></ul><h2><span id="六-saas公司的商业模式">六、SaaS公司的商业模式</span></h2><p><strong>主要为以下五种:</strong></p><ul><li>传统软件的买断模式(一锤子买卖，口碑好则美名，口碑不好则毁灭性打击，不像年费模式，留有产品改进的余地)；</li><li>年费模式(依赖于客户续费，有利于产品不断改进)；</li><li>消耗模式(按需计费，阿里云就是一个很好的例子)；</li><li>分销售额(与客户公司紧密绑定，客户盈利，收益则高，客户亏损，收益则低；</li><li>产业互联网(美团收购餐饮行业相关的SaaS公司)。</li></ul><h2><span id="七-saas公司的数据价值">七、SaaS公司的数据价值</span></h2><p><strong>数据价值实现的前提，必须遵循以下四个原则:</strong></p><ul><li>能为客户带来更多价值；</li><li>得到客户的正式许可；</li><li>只在客户许可的范围内使用；</li><li>数据安全性。</li></ul><h2><span id="八-saas的本质是续费">八、SaaS的本质是续费</span></h2><p>我觉得过去待的一家教育SaaS公司这块是做的最好的，一年比一年续费率高，从屈指可数的几个人壮大为成千上万人，并在全国主要城市设立分公司。客户的续费，本质上就是认可我们的产品，因为我们的产品能给他们创造更多的利润。</p><h2><span id="九-saas创业的5个阶段和4条主线">九、SaaS创业的5个阶段和4条主线</span></h2><p>SaaS创业5个阶段分别是:</p><ul><li>阶段1:产品创意与商业模式。</li><li>阶段2:产品打磨和商业模式初步验证。</li><li>阶段3:创造销售打法和验证销售团队毛利模型。</li><li>阶段4:扩张期的组织发展。</li><li>阶段5:效率提升。</li></ul><p>每个阶段都有明确的任务。所有toB的SaaS公司不可能跳过这5个阶段。</p><p>而4条主线分别是:</p><ul><li>产品和模式。</li><li>业务。</li><li>团队和文化。</li><li>融资。</li></ul><p>仔细回忆当年在创业公司的经历，基本上走完这5个阶段才算真正的成功，而我们当初仅仅只走完了阶段1和阶段2。4条主线倒是有部分体现。上面5个阶段和4条主线，随便一点都可以写好几万字，由于笔者经验有限，故简要叙述。</p><p>对我在创业公司经历感兴趣的朋友可以阅读以下文章:<br><a href="https://mp.weixin.qq.com/s?__biz=MzUxODk0ODQ3Ng==&amp;mid=2247485439&amp;idx=1&amp;sn=201a791086509ae93a29a669e8d402be&amp;chksm=f98054eccef7ddfac7c6b7d30d40b33a1044cc702850cadf1ee2b0a9b3caca551f56779c719b&amp;token=2104650779&amp;lang=zh_CN#rd" target="_blank" rel="noopener">一位北漂在创业公司的两年(详细概括，两万多字)</a><br><a href="https://www.cnblogs.com/youcong/p/12153262.html" target="_blank" rel="noopener">创业公司这两年</a><br><a href="https://www.cnblogs.com/youcong/p/10016594.html" target="_blank" rel="noopener">谈谈在创业公司的几点感触</a></p><h2><span id="十-总结">十、总结</span></h2><p>曾在<a href="https://youcongtech.com/2020/10/07/2020%E5%B9%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E5%92%8C%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">2020年的一些思考和总结</a>中的对技术的思考，<strong>提到如下核心两点:</strong></p><ul><li>1.业务是基础，产品是蓝图，而技术是将蓝图变成现实的手段；</li><li>2.技术的本质在于解决问题(回顾人类历史，很多技术创新发明都是在某个领域解决了什么样的问题，或者是在多个领域解决类似的问题)。</li></ul><p>今天在上面九点的基础上推出一个新的中心论点:<br><strong>SaaS的本质不仅仅是续费，而是高效地解决某个行业的问题(特定的业务，特定的场景，特定的行业,针对不同的行业，SaaS提供不同的方案，方案的共同点就是高效解决问题)，并迫使该行业相关公司实现”互联网+”，直接或间接的达到续费之目的。</strong></p><p>古人说，大道至简。论点本因是简短有力，如此冗长显得绕口。不过通过写这篇文章，我还是发现一点，不要轻易谈”深入理解”四字，再谈之前还是要多问自己，真的深入了吗？真的理解了吗？</p><p>参考资料如下:<br><a href="https://baike.baidu.com/item/SaaS/6703273" target="_blank" rel="noopener">百度百科之SaaS</a><br><a href="https://zhuanlan.zhihu.com/p/380237101" target="_blank" rel="noopener">终于有人把SaaS讲明白了</a><br><a href="https://www.ibm.com/cn-zh/cloud/learn/iaas-paas-saas" target="_blank" rel="noopener">比较 IaaS、 PaaS 和 SaaS</a><br><a href="https://book.douban.com/subject/35079444/" target="_blank" rel="noopener">SaaS创业路线图：to B产品、营销、运营方法论及实战案例解读</a><br><a href="https://new.qq.com/omn/20210113/20210113A0D6TI00.html" target="_blank" rel="noopener">2020年中国企业级SaaS行业发展研究报告</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> IT领域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xjar加密jar文件</title>
      <link href="/2021/07/22/xjar%E5%8A%A0%E5%AF%86jar%E6%96%87%E4%BB%B6/"/>
      <url>/2021/07/22/xjar%E5%8A%A0%E5%AF%86jar%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-为什么要加密jar文件">一、为什么要加密jar文件？</span></h2><p>解压jar文件可获取该项目的配置文件和源代码，配置文件中通常存有数据库连接、服务应用配置等信息。通常黑客攻入服务器后(获取某个普通用户的账号)，为什么能轻易的绑架数据库，在于通过普通用户解压jar或war文件，从而得到数据库账号实现备份和删库(备份就是为了敲诈勒索)。那么如何防范呢？首先从服务器层面防范，可以阅读这篇文章:<a href="https://youcongtech.com/2021/07/16/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E4%B9%8B%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/" target="_blank" rel="noopener">服务器安全策略之思考与实践</a></p><a id="more"></a><p>加密jar文件就是为了防止黑客解压后获取一些隐秘的信息，从而造成数据库数据泄漏或其它危害影响。</p><h2><span id="二-在java中加密jar有哪些方案">二、在Java中加密jar有哪些方案？</span></h2><p>方案有很多，但此次我要讲的方案之一就是使用xjar框架进行加密。<br>Xjar对应的开源代码地址为(有详细的介绍，故不再赘述):<br><a href="https://github.com/core-lib/xjar" target="_blank" rel="noopener">https://github.com/core-lib/xjar</a></p><h2><span id="三-xjar方案具体实施">三、Xjar方案具体实施</span></h2><h3><span id="1新建项目添加maven依赖">1.新建项目，添加Maven依赖</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 设置 jitpack.io 仓库 --&gt;</span><br><span class="line">&lt;repositories&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">        &lt;id&gt;jitpack.io&lt;/id&gt;</span><br><span class="line">        &lt;url&gt;https://jitpack.io&lt;/url&gt;</span><br><span class="line">    &lt;/repository&gt;</span><br><span class="line">&lt;/repositories&gt;</span><br><span class="line">&lt;!-- 添加 XJar 依赖 --&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.github.core-lib&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;xjar&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.0.2&lt;/version&gt;</span><br><span class="line">        &lt;!-- &lt;scope&gt;test&lt;/scope&gt; --&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3><span id="2执行核心方法即可">2.执行核心方法即可</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        XCryptos.encryption()</span><br><span class="line">                .from(&quot;D:\\test\\jar\\crawler-1.0-SNAPSHOT.jar&quot;)</span><br><span class="line">                .use(&quot;io.xjar&quot;)</span><br><span class="line">                .include(&quot;/io/xjar/**/*.class&quot;)</span><br><span class="line">                .include(&quot;/mapper/**/*Mapper.xml&quot;)</span><br><span class="line">                .exclude(&quot;/static/**/*&quot;)</span><br><span class="line">                .exclude(&quot;/conf/*&quot;)</span><br><span class="line">                .to(&quot;D:\\test\\jar\\test.jar&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之jar包解压后重新压缩命令</title>
      <link href="/2021/07/22/SpringBoot%E4%B9%8Bjar%E5%8C%85%E8%A7%A3%E5%8E%8B%E5%90%8E%E9%87%8D%E6%96%B0%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/07/22/SpringBoot%E4%B9%8Bjar%E5%8C%85%E8%A7%A3%E5%8E%8B%E5%90%8E%E9%87%8D%E6%96%B0%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>核心命令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar cvfM0 xxx.jar jar_path</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar cvfM0 blog.jar *(将当前class文件打成jar包)</span><br></pre></td></tr></table></figure></p><p><strong><br>jar相关命令参数详解:</strong><br>-c  创建一个jar包<br>-t 显示jar中的内容列表<br>-x 解压jar包<br>-u 添加文件到jar包中<br>-f 指定jar包的文件名<br>-v  生成详细的报造，并输出至标准设备<br>-m 指定manifest.mf文件.(manifest.mf文件中可以对jar包及其中的内容作一些一设置)<br>-0 产生jar包时不对其中的内容进行压缩处理<br>-M 不产生所有文件的清单文件(Manifest.mf)。这个参数与忽略掉-m参数的设置<br>-i 为指定的jar文件创建索引文件<br>-C 表示转到相应的目录下执行jar命令,相当于cd到那个目录，然后不带-C执行jar命令</p><p>参考链接:<br><a href="https://www.cnblogs.com/liyanbin/p/6088458.html" target="_blank" rel="noopener">jar命令的用法详解</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次失败的股票投机</title>
      <link href="/2021/07/18/%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%82%A1%E7%A5%A8%E6%8A%95%E6%9C%BA/"/>
      <url>/2021/07/18/%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%82%A1%E7%A5%A8%E6%8A%95%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-为什么要购买股票">一、为什么要购买股票？</span></h2><p>就我而言，购买股票的主要目的是我想在短期内搞一波投机，预期收益达到购买一个iphone11 pro即可。附带着个人学习目的研究一下股票。<br><a id="more"></a></p><h2><span id="二-怎么买股票">二、怎么买股票？</span></h2><p>我是通过平安证券App开户和购买股票。</p><h2><span id="三-我买的股票主要是那些行业">三、我买的股票主要是那些行业？</span></h2><p>前期买银行和医药，银行起起落落的，收益真不高，不过还没亏。而医药使我一下子赚了五千多，于是我将银行股票全部卖出，全部用来买医药。基本上此次运气特别好，之所以说是运气是因为我买这个股票，完全是心血来潮，没有经过任何的研究，当然，这个医药股票，我身边有朋友购买。银行卖出以后，我在一个高点进行投入，然后，医药开始跌了，于是我将之前部分基金卖出的钱，用来作为股票的后备资金，刚开始每天加仓，而后过每一周加两次仓，后来有了一些起色回了点本，开始卖出了一部分，之所以卖出是因为基金的后备资金没有了，刚好股票回本，就卖出了一部分用于填补基金，后来证明这个决定是完全正确的，幸而我采取这种措施，不然的话，真叫亏的裤衩不剩。</p><h2><span id="四-股票上涨和跌落我的心态">四、股票上涨和跌落，我的心态</span></h2><p>股票上涨，我却始终没关心过它为何会上涨。后来股票亏损的一段时间，开始研究这相关的知识。<br>比方说股票为何会涨，与这些因素有关:</p><ul><li>跟着大盘上涨。</li><li>利好兑现。</li><li>部分人提前得到内幕消息，公司发布利好消息，引起股票异动上涨。</li><li>触底反弹，价值修复(与基金是一样的道理，前期跌的很惨，后期总会恢复到前期的水平或超出前期水平，当然了，不适用所有基金)。</li><li>公司成长。</li><li>主力炒作。</li></ul><p>其实炒股方面，要特别关注证券交易所发布消息，而我忽略了这个消息，直接导致了我没有在一个比较合适的点进行抛出(而我那个朋友看到此消息时，已及时抛出，保证已有的胜利果实)，同样我也没意识到该公司某个大股东减持股票意味着什么(特别是频繁的减持)。而我那个时候还想着利用基金定投的思路，面对跌便采取加仓策略，基金中是多个上市公司，风险平躺，即便前期亏损，后期也能起来，这是我定投两年基金的经验。股票采取加仓策略，要分情况，像我这样毫无根据的去加仓，反而越加越跌，根本不知道到底是什么原因导致的跌，最后亏损是必然的，虽然说前期的确是获利的，但凭运气这东西，不可长保，好的运气还是要依赖自身的实力。</p><p>面对上涨，人总会认为自己很聪明，选择了这支股票，有点不可一世，认为自己的判断是无比正确，正如我判断医药肯定能涨于是将银行的卖出全部投医药，最后真的涨了，只能说是运气，到最后，前期赚的全部给吐出来了，最后还赔了一些钱，虽然不多但足以换个华为手机。</p><p>面对下跌，我前期非常兴奋，因为我可以在最低点加仓，到时候到高点卖出，我就能赚大发了，只能说我到底是天真还是愚蠢。最后一直加仓一直跌，我便怀疑这样的加仓策略到底是正确还是错误，不断的跌使我怀疑自己那毫无根源的股票投资策略，到最后为了降低损失，我便卖出，尽最大努力保证本金。</p><h2><span id="五-此次的教训">五、此次的教训</span></h2><h3><span id="1人总是过于高估自己实际所能做到的">1.人总是过于高估自己实际所能做到的</span></h3><p>我当初买股票，我认为我买完之后便去研究这家公司，实际呢？除了看涨就是看跌，和韭菜根本就没有区别，还美其名曰买股票顺带着学习股票相关知识和研究所购买股票的公司。</p><h3><span id="2决定某见事情时这件事情可能会涉及时间和金钱相关的投入务必要做好前期准备换言之不打无准备之杖">2.决定某见事情时，这件事情可能会涉及时间和金钱相关的投入，务必要做好前期准备，换言之，不打无准备之杖</span></h3><p>这次股票投机，完全是自身贪婪的欲望，欲望总时不时腐蚀人的思想，干扰人的意志和判断力，试问，如果我事前做了一定的准备，或者我前期投入不多，仅仅当作试试水，并在这个过程中，研究一些相关问题，虽然说不一定能赚很多钱，但我觉得一定能从中获取很多知识性的收益。</p><h3><span id="3赌徒心理是可怕的">3.赌徒心理是可怕的</span></h3><p>赢了还想赢更多，输了还想回本。这种心理在去年玩一款游戏名叫欢乐斗地主的时候体现过。这次能够及时收住手，也是想起写了这篇文章。<br>感兴趣的朋友可以阅读:<a href="https://mp.weixin.qq.com/s?__biz=MzUxODk0ODQ3Ng==&amp;mid=2247485492&amp;idx=1&amp;sn=5e6acfc325840ffd5376176a66626448&amp;chksm=f9805b27cef7d23154ad778ce23948d3ce178a4098f2343d988105396bf90146c9a47b01f450&amp;token=2086639674&amp;lang=zh_CN#rd" target="_blank" rel="noopener">斗地主心得</a></p><h2><span id="六-我还会买股票吗">六、我还会买股票吗？</span></h2><p>我给的答案是会的，因为股票投资是我个人理财投资的组成部分，它占的比例不一定很高，只不过下次的时候会更理智，做好更充足的准备，而不是像这次那么盲目和无脑决策。有人说，”聪明的人在做某件事的时候，会借鉴以往他(她)人犯下的错误，促使自己不再犯同样的错误；而愚蠢的人总是要撞的头破血流才知道这是错的“。我不是一个聪明的人，世间的聪明人也并不那么多，自认为聪明的，反而被聪明误，而那些看似愚蠢的，往往能大智若愚，这或许是人生游戏的一种乐趣所在吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《西游记与中国古代政治》之归纳总结</title>
      <link href="/2021/07/18/%E8%AF%BB%E3%80%8A%E8%A5%BF%E6%B8%B8%E8%AE%B0%E4%B8%8E%E4%B8%AD%E5%9B%BD%E5%8F%A4%E4%BB%A3%E6%94%BF%E6%B2%BB%E3%80%8B%E4%B9%8B%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/"/>
      <url>/2021/07/18/%E8%AF%BB%E3%80%8A%E8%A5%BF%E6%B8%B8%E8%AE%B0%E4%B8%8E%E4%B8%AD%E5%9B%BD%E5%8F%A4%E4%BB%A3%E6%94%BF%E6%B2%BB%E3%80%8B%E4%B9%8B%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-菩萨与妖精">一、菩萨与妖精</span></h2><ul><li>一部二十四史不过争夺政权的历史。成者为王，败者为寇。王寇悬于成败，成败决于力之大小。</li><li>神仙之力分为两种:一在身体之内，这称为法身，如孙行者的七十二般变化是也。二是物器之中，这称为法宝，如孙行者的如意金箍棒是也。合两者称为法力。在神仙社会法力大小不但可以决定地位高低，且又可以决定生命长短。</li><li>力大者享尽荣华富贵，为仙为佛；力小者不肯蛰居山洞之中，养精炼气，调和龙虎，捉坎填离，则成为妖魔。</li><li>在神仙社会，法力大者位尊，法力小者位低。位尊的因有特别享受，而得长生不老。</li><li>人乎神乎？神乎人乎？神失败则为妖，人成功则为神。</li><li>人类都有生存欲望，人类要维持其生存，必须吃饭穿衣，人类要吃饭穿衣，必须流汗做工。人情无不喜逸而惮劳，一方须吃饭穿衣，他方又不欲流汗做工，于是争夺之事便发生了。如何防止争夺，这是人类设置政府的原因。组织政府的人有防止争夺的责任，他们无惶做工，于是人们不能不供给以衣食资料。这样租税发生了(与孟子之言不谋而合，劳心者治于人，劳力者治于人。治于人者食人，治于人者食人，治人者食于人，天下之通义也。)。<a id="more"></a></li></ul><h2><span id="二-孙行者大乱天空">二、孙行者大乱天空</span></h2><ul><li>在神仙社会，地位之高低以法力为标准，犹如人类社会，贵贱之别应以才之大小为标准(法力大小如何甄别？才之大小如何甄别？)。</li><li>考试之法固然不能甄别才之大小，而既有甄别之法矣，亦足以安慰士人学子。可怜的很，神仙社会，地位高低虽以法力为标准，而甄别法力大小却无一种制度。兼以他们修成不老不死之身，不死，仙位永不出缺，不老，仙官永不退休。</li><li>政治不过”力”而已。最初还是物质上的力，积时既久，人们对”力”发生畏敬情绪，于是物质上的力变为精神上的权威。物质上的力是有限的，精神上的权威则莫测高深(政治之力的主要体现为军事，军事如果失败，人们将怀疑政府的统治力，例如隋炀帝讨伐高丽，大败而归，皇室权威便降低)。</li><li>臣篡君位，在吾国历史上固然不乏其例，然而须有两个条件:一是皇室式微，君主失去权威；二是臣下建立武勋，苟能树奇功于异域，则人望已归，禅让之事更易成功。</li></ul><h2><span id="三-玉帝永保天尊的地位">三、玉帝永保天尊的地位</span></h2><ul><li>在专制时代，人主所恃以维持地位者，在于其有威严。威严生于神秘，有了神秘，臣民对于君主犹如敬神一样，发生了畏敬之念。愚夫愚妇无不畏敬菩萨。菩萨何以有威严？因为菩萨是神秘的。菩萨何以神秘？一因菩萨绝不发言。天何言欤，四时生焉，百物生焉。不言乃所以保存神秘。倘若菩萨能够和人对话，试问吾人对这菩萨将作何种感想？人类所以与其他万物不同者，在人类能够发言。发言过多，由人类观之，必认为与我同类，而失去神秘的性质，万不得已而须发言，亦宜以少言为秒。</li><li>古者天子往往力足以驾御群臣，而威不足以控制阉宦，就是因为前者只见天子衮袍登场，后者常睹天子在宫中玩耍。</li><li>”人主之道，不自计虑”，”使智者尽其虑，而君因以断事”。</li><li>“人主之道，不自操事”，”使贤者效其材，君因而任之”。</li><li>人主不自操事，不自计虑，而能达到有功的目的，必须人主有判断之力，又有决断之心。人主没有判断之力，则他所认以为是者，也许为非；他所认以为非者，也许为是。</li></ul><h2><span id="四-太白金星的姑息政策">四、太白金星的姑息政策</span></h2><ul><li>专制政府的权威是用”力”维持，不能依靠恩情。天子姑息臣下，也许处于恩情；而由方镇看来，必以朝廷为软弱无力。朝廷愈姑息，方镇愈跋扈，这是必然之势。</li><li>国家发生外患或内难之时，倘力不能制，必须一方宽忍，一方准备。只宽忍而不准备，国必亡；只准备而不宽忍，国必危。</li><li>政治以”力”为基础，”力”又需”法”扶持之。</li><li>以力制力乃是政治上的原则，以恩情笼络叛徒，只是姑息，不但不能钳束于人，反将引起更严重的叛乱(唐及五代的历史可为殷鉴)。</li></ul><h2><span id="五-玉帝不留显圣神君在天宫保驾">五、玉帝不留显圣神君在天宫保驾</span></h2><ul><li>玉帝何以不愿提拔小圣，留在天宫保驾呢？固然有些帝王对豪英之士，不肯重用；而欲身死之后，留给儿孙提拔。盖不得志于先帝，而提拔于后主，他将感恩戴德，不会稍萌二心。这是用人之术。</li><li>政之大本，在于刑赏，刑赏不明，政何以成。</li><li>夫势在人臣之位，而由震主之威，名高天下。</li></ul><h2><span id="六-玉帝请如来救驾">六、玉帝请如来救驾</span></h2><ul><li>人类在悲观绝望之时，常常发生神秘心理，而倾向于宗教思想，文化幼稚的民族尤见其然。</li><li>一切宗教不外地上权力反映于人类的头脑之中，由幻想作用而创造出来的东西。</li><li>借用外力以靖内难，乃吾国历史上常简的事，而其结果，莫不引起外寇冯陵。</li></ul><h2><span id="七-卷帘大将失手打破琉璃盏">七、卷帘大将失手打破琉璃盏</span></h2><ul><li>显圣真君立大功而轻赏，卷帘大将犯小过而重刑。刑赏无章，道教没落，理所当然。</li><li>人类每依自己的环境，推测宇宙万物。古代制定法律之权属于天子。天子制定法律每依一己之意，不受任何拘束。</li><li>自齐天大圣大闹天宫之后，玉帝的权威已经减少。玉帝要维持自己的权威，不能不采用恐怖政策，迫令群仙帖服。吾国数千年来，都是君主专制政治，所以古人所想象的天上制度也是玉帝的专制政治。</li><li>人情既唯自己的利害是视，则为政之道自应因人之情。人情所视以为利者莫如赏，人情所视以为害者莫如刑。爱赏而恶刑可以说是人类的天性。政治必须顺乎人性，即须利用人类的利害观念，设赏以奖有功，陈刑以戒有罪，如是天下未有不治。</li></ul><h2><span id="八-唐太宗还魂延寿二十年">八、唐太宗还魂延寿二十年</span></h2><ul><li>善有善报，恶有恶报，这是一切宗教共通的观念。纵在阳世，因果报应亦在若明若昧之间。</li><li>人民的权利，即生命的权利，财产的权利，自由的权利，都是人民经过许多斗争，才能获得的。而既已获得之后，欲使个人权利不受别人侵害，欲使政府不会忘记人民有这权利，又将权利写在文书之上，而成为法律。所以权利之获得是由斗争，法律不过将人民已得的权利，用黑字写在白纸之上而已。所有权制度，身体自由，契约自由，营业自由，思想自由，结社自由都是由人民经过数世纪的斗争，而后获得的。法律所经过的路程不是香花铺路，而是腥血涂地，吾人读欧洲历史，就可知道。</li><li>权利由权利人观之，固然是他的利益，而由侵害人观之，亦必以侵害权利为他的利益。所以权利斗争很难避免，上自国权，下至私权，莫不皆然。</li><li>专制主义是最蔑视私权的。赋税任意增加，没有人反对；徭役任意延长，没有人抗议；出一言而盈廷称圣，发一令四海讴歌，人民养成了盲从的习惯，丧失斗争的精神，一旦遇到外敌来侵，人民亦必萎靡不振，移其过去盲从专制政府者以盲从敌人政府。到了这个时候，政治家方才觉悟，要培养对外民气，必须培养对内民气，亦已晚矣。</li></ul><h2><span id="九-孙行者与紧箍咒">九、孙行者与紧箍咒</span></h2><ul><li>所谓”政治”由吾人观之，不外命令与服从的强制关系，一方有命令的人，他方有服从的人，命令的人得依自己的意志，强制服从的人作为或不作为，这种强制关系何以发生？人类生存于社会之内，固然有连带关系，而同时又互相对立。由于连带关系，便发生了”众人的事”；由于互相对立，又使人们关于众人的事，发生了各种不同的意见。怎样综合各种不同的意见而统一之，乃是维持社会和平的前提。这种统一的意见就是国家的意见，而可以强制人民服从。固然统一的方法随社会的势力关系而不同；或由一人统一，而强制千万人服从；或由少数人统一，而强制多数人服从；或由多数人统一，而强制少数人服从。统一的人虽有多寡之别，而其对于异议的人，能够强制其服从，则为古今政治的共通性质。</li><li>要强制别人服从，”权力”是必要的，所以政治乃以权力为基础；而政府亦不外权力的组织。政府的权力必须委托自然人行使。这个自然人既然掌握权力，难免不滥用权力，以他个人的事宣布为众人的事，租税、徭役，不是用以增加众人的福利，而是用以满足个人的享乐。</li><li>如何控制政府滥用权力，更切实言之，如何控制组织政府的自然人滥用权力，那就需要”紧箍儿”了。</li></ul><h2><span id="十-孙行者劝唐僧收起善心">十、孙行者劝唐僧收起善心</span></h2><ul><li>夫圣人之治国，不恃人之为吾善也，而用其不得为非也。恃人之为吾善也，境内不什数；用人不得为非，一国可使其(引用韩非五十篇《显学)。</li><li>人主治理国务，不依法律，而依道德之说。道德是律己，法律是律人。人主对己，固然要以道德自勉，对人却不能单用道德勉励。</li><li>政之所兴，在顺民心，政之所废，在逆民心。</li><li>唐僧跋履山川，逾越险阻，其有取经的雄心，谁都不能否认。然要实现雄心，必须克服艰难，这个是艰难是现实的，而非念念多心经，就可了事。</li><li>凡人臣之事君也，多以主所好事君。</li><li>古来政治上成功的人往往不讲小节，有时他的行为且与”善”字相反。</li><li>徒”善”不足以为政，小善只足以误国。</li><li>孙行者”穿山洞，入深林，擒魔捉怪，吃尽千辛万苦，积了许多经验，而后劝告唐僧收起善心。取经尚且如此，何况治国平天下。</li></ul><h2><span id="十一-莲花洞二魔念起咒语就可使唤山神土地">十一、莲花洞二魔念起咒语就可使唤山神土地</span></h2><ul><li>古来为人君者无不要求其臣听命，而为人臣者也往往忘记自己是国家的官吏，并非一人一姓的仆妾，以听命为尽忠，一则听命，二亦听命，措置乖方亦听命，诏令违法亦听命。于是又进一步，不问发命令的人是否有权发命令，只要有人发命令，就奉行唯谨，不敢反抗。</li><li>后世人主往往不明此中道理，不希望群臣有独立的人格，以为我既授你以官禄，你就要服从我的命令，命令的形式和实质有否违法，你们不得过问，这是最危险的事。</li><li>盖群臣非依法律服从命令，乃因官爵服从命令，服从与官爵成为连带关系，其结果也，今日人主授我以官爵，我固须对之服从，明日僭主甚至于敌国授我以官爵，我亦须对之服从了。</li><li>天子要求公卿听命，公卿要求百官听命，百官也强迫庶民听命。上至天子，下至百官，皆以自己之言为是，不许下属怀疑。</li><li>盖听命绝不是忠诚，而是阿谀。阿谀的人不识世间有廉耻事，国家兴亡，他们”如失主犬，后主饲之，便复为用”。</li></ul><h2><span id="十二-乌鸡国国王不敢在冥府控告全真怪">十二、乌鸡国国王不敢在冥府控告全真怪</span></h2><ul><li>耶林说：”正义之神一手执衡器，以权正义，一手执宝剑，以实现正义。宝剑而无衡器，不过暴力；衡器而无宝剑，只是有名无实的权力。二者相依相辅，挥动宝剑的威力与运用衡器的技巧能够协调，而后法律才完全见诸实行。”正义之神失掉宝剑，不过表示司法不能执行其判决，而司法本身尚未腐化；倘若失掉衡器，那便是司法作枉法的裁判，正义之神变成了邪恶之神。</li><li>司法不公平，而替天行道的侠客又不存在，人民悲观之极，只有寄希望于十殿阎王。你们恶毒的不要得意吧！生前作威作福，死后要沉沦鬼道，打入十八层地狱。你们积德的不要悲哀吧！生前受尽欺凌，死后得升化仙道或超生富贵之道(这种观念有似于《圣经》所言)。</li><li>伦理一事，西洋学者说到玄之又玄，近于抽象得哲学，吾国学者则对于具体的对象，指示以具体的”为人之道”。现实主义有其利，亦有其弊，利在容易实践，弊在缺乏抽象的知识，而致科学不能发达。因为科学是一种抽象的知识，即用分析的方法，把事物由复杂变为简单，使各种现象的原则能够明了。换言之，科学须无视一切事物的个性，只唯注意其普遍的现象，即个体不视为个体，个人不视为个人，而把它们放在一定的部类种属范畴之中，观察其部类种属范畴的普遍性。</li></ul><h2><span id="十三-孙行者不愿做乌鸡国国王">十三、孙行者不愿做乌鸡国国王</span></h2><ul><li>三代以前，皇帝是为天下服务，世上最辛苦的差事莫如皇帝，所以好逸恶劳的人皆避帝位而不就，许由、务光即其例也。三代以后，天下是为皇帝效劳，皇帝享尽了人世荣华富贵，所以篡夺之事不绝于史。</li><li>皇帝一职，由负责的人观之，乃世上最辛苦的差事；由不负责任的人观之，富有四海，贵为天子，出一言而盈廷称圣，发一令而四海讴歌，天下最快心乐意的事，孰过于此。</li><li>皇帝一职是以全家头颅为担保。他们可以不爱天下，而不能不爱全家的头颅。他们为保全一家头颅，纵令中智之主，亦不能不关心国家的治乱。</li><li>天下者天下人之天下也，我在天下之中不过数万万分之一。利在天下，所得者微；利在一己，所得者大。剥削天下之脂膏，以利自己的一家，天下既非任何人的财产，在上同其利者官官相护，在下受其害者敢怒而不敢言。</li></ul><h2><span id="十四-如意真仙不许孙行者白手来取落胎泉的水">十四、如意真仙不许孙行者白手来取落胎泉的水</span></h2><ul><li>人类对其劳力所生的结果，均欲取得之以作自己的财产，这是人之常情，古今中外莫不相同。劳力与财产在经济上本来有互相作用的关系。财产因劳力而取得，劳力因财产而提供。财产多少可以表示劳力多少，亦往往可以表示能力大小。故在财产之中乃保护有人格观念，凡破财产权的无异于破坏人格权。</li><li>欧洲各国受了罗马法的影响，学者均视所有权为神圣不可侵犯的权利。</li><li>管子有言:”凡治国之道必先富民。民富则易治也，民贫则难治也。奚以知其然耶？民富则安乡重家；安乡重家，则敬上畏罪；敬上畏罪，则易治也。民贫则危乡轻家；危乡轻家，则敢陵上犯禁；陵上犯禁，则难治也。故治国常富，而乱国常贫。是以善为国者，必先富民，而后治之。”</li><li>求富不用劳力，而用强力。不劳而有财产，劳苦终日，财产反有丧失之虞，这是与经济原则相反的。</li></ul><h2><span id="十五-孙行者要求朱紫国国王亲身来迎">十五、孙行者要求朱紫国国王亲身来迎</span></h2><ul><li>乱世臣亦择君，人主固须虚怀下士，收天下之英豪以为己用，纵在平时，君臣之分已定，人主亦宜有礼贤之心。</li><li>古来成大事者不但需要大才，而且需要弘量。固然量弘的未必才大，而才大的必定量弘。</li><li>王安石变法之所以失败，史家谓其刚愎自用。刚愎自用与意志坚强不同，意志坚强出于自信力，刚愎自用又混杂以自卑感。一方因自信而自尊，他方因自卑而怀疑别人轻视。故凡遇到别人攻难，便愤然变色，以为侮辱。此种人物得意还可，一旦挫折，更由自卑感与自尊心的交杂作用，而趋向于刚愎自用。</li><li>大有为之君欲用不世出之才，尚须人主左右没有忌能妒才之人。</li></ul><h2><span id="十六-比丘国国王要取小儿心肝为药引子">十六、比丘国国王要取小儿心肝为药引子</span></h2><ul><li>国家的所有权属于皇帝。所有主对其产业有使用收益处分的权；皇帝对于国家，也可以使用，可以收益，可以处分。但是国家除土地外，尚有人民。人民栖息于土地之上，不能离开土地而生存，所以皇帝不但以死的土地为私有财产，且以活的人民为私有财产。谁为皇帝，谁对于全国人民，就取得了使用收益处分的权。皇帝向人民征敛徭赋而制杀生，无非是这个权力的行使。</li><li>皇帝行使这种权力，须能自己节制，行使过甚，势必引起人民反感，而如孟子所说，”暴其民甚，则身弑国亡，不甚，则身危国削”。</li><li>个人的财产是“物”，使用而不节制，不过害其一家衣食，皇帝的财产尚包括有“人”，使用而不节制，受害者乃人之生命。</li><li>吾国先哲主张仁政，不遗余力，而暴君乃层出不穷，为什么呢？有理想而无办法，知抗暴不知防暴，吾人研究孟子思想，就可知道。生在今日，倘犹取古人之言，断章取义，以为吾国老早就有民主思想，完全是自欺欺人之语。</li></ul><h2><span id="十七-凤仙郡三年亢灾">十七、凤仙郡三年亢灾</span></h2><ul><li>一部二十四史随处都有神权思想。</li><li>专制君主所恃以统一全国者，就是这个神权观念。“天佑吾皇”，你们小民何敢反抗。因此，人们要想革命，亦须利用神权观念。革命以破坏旧的政权而建立新的政权为目的。要想破坏旧的政权，须先推翻旧的神权观念。怎样推翻？假托神怪，以惑乱人心，是最好的办法(刘邦在这点做的非常好)。</li><li>当时科学尚未昌明，凡有大旱，县长为民父母，必于众目共睹之下，跪在烈日之中祈雨。这不是迷信，而是表示与民同艰苦之意。百姓既见县长不避暑热，为民求雨，自可引起他们同情之心，虽欲作乱，而思乱之心亦常为同情之心所压伏。</li></ul><h2><span id="十八-阿傩迦叶向唐僧讨取贿赂">十八、阿傩迦叶向唐僧讨取贿赂</span></h2><ul><li>经不可轻传，亦不可轻取。</li><li>创业之主虽然望治之心甚切，而对于贪墨之臣，又往往认为可靠，而愿寄以腹心之任。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 阅读感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑客价值观的思考与探索</title>
      <link href="/2021/07/17/%E9%BB%91%E5%AE%A2%E4%BB%B7%E5%80%BC%E8%A7%82%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E6%8E%A2%E7%B4%A2/"/>
      <url>/2021/07/17/%E9%BB%91%E5%AE%A2%E4%BB%B7%E5%80%BC%E8%A7%82%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E6%8E%A2%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<p>今年阅读一本书叫《黑客与画家》，该书中提到的黑客的价值观，使我产生了一些思考。<br><a id="more"></a></p><h2><span id="一-使用计算机以及所有有助于了解这个世界本质的事物都不应该受到限制">一、使用计算机以及所有有助于了解这个世界本质的事物都不应该受到限制</span></h2><p>当我看到这句话的时候，我第一想到的就是翻墙。作为技术人翻墙的主要目的是使用Google，一方面通过Google搜索一些技术问题和解决相关技术问题，另一方面获取国外优质的计算机论文相关、某个较为先进的技术理论思想类等。<br>另外从娱乐或社交的目的，可能会用到Youtube以及Facebook、Twitter等之类的。不过就目的而言，国内都已经有了替代品如抖音短视频、快手、微信、新浪微博之类的(这些替代品能满足大多数人的需求)。<br>刚做技术那会儿，不太了解国内为什么有一堵墙阻碍着访问国外的一些技术网站之类的(对于我而言技术网站肯定是无害的)，随着年龄和阅历的增长，我才发现有这一堵墙是好的，因为是为了保护大多数人，国外的很多东西充满着反动性和煽动性，用毛主席一句话来说，”帝国主义亡我之心不死”。现在很多人很容易受到一些言论的影响，听风就是风，听雨就是雨，没有自己的见解，这样的人很容易被人利用。用一句话来概括，”三人成虎”。<br>所以从另外的角度来看，这句话也不完全对(老外说的话，我们要辩证看待)，应该换作为，<strong>“有独立思考且有正确三观的人(我认为正确三观衡量的标准和核心，遵守国家法律和热爱自己的祖国)，使用计算机以及所有有助于了解这个世界本质的事物都不应该受到限制”。</strong></p><h2><span id="二-所有信息应该都是自由的">二、所有信息应该都是自由的</span></h2><p>“所有信息应该都是自由的”。自由是什么？自由可以理解没有任何的限制，也可以理解为它是有条件的限制(例如工作自由、购房自由、旅行自由、财务自由、婚姻自由、恋爱自由等)。<br>那么这里的信息自由指的是什么呢？这里引用维基百科的解释:<br><strong>信息自由又称资讯自由，指的是保护使用网际网路和资讯科技（请参照数位权利）表达意见的自由。资讯自由也涉及对于资讯技术领域的审查，譬如在不受到审查或者是限制下使用网路资料的能力。</strong><br>“所有信息应该都是自由的”，我认为这句话也不全对。还是的得辩证看待。信息过于自由，则会造成信息泛滥(大量得垃圾信息得不到管控，造成的后果非常严重)。我认为信息应该分级掌握，不同的层级掌握不到的信息，类似于金字塔结构，最上层的人通常是能掌握全局的人，掌握全局的人通常有自己的一套思考框架体系，面对众多的信息，总能够从中找到所需的，也能过滤掉那些垃圾信息，防止被垃圾信息影响。换句话说，每一层级，可分门别类，优者可掌握更多的信息，利于探索更多的未知可能，创造出巨大的财富或开创一个新的东西，次优者掌握优者分配下的信息，依此类推，但信息中的一部分都会以公开的形式发布出去，至于每个接收信息者能够从中发现什么，那就各凭本事了，因为信息在这种情况对于每个人都是平等的(例如十四五规划，这是国家未来战略方向，每个人都知道，但要很好的把握住这个方向，须下不少功夫不可例如某个人想要把握住这个机遇，要么是对该行业有长期的观察并储备一定的资金以及有相关的人脉等)。</p><h2><span id="三-不信任权威提倡去中心化">三、不信任权威，提倡去中心化</span></h2><p>“不信任权威，提倡去中心化”。这句话分两个方面理解。</p><h3><span id="1针对不信任权威">1.针对不信任权威</span></h3><p>我个人所理解的是不盲从权威，不盲从权威不等于不尊重权威。不盲从的前提在于有充足的证据表明权威是错的，不盲从权威哪怕权威是对的在质疑和论证的过程中让自己的思考升华。那么我们该如何不盲从权威呢？这个道理是小朋友教我的，也是每个小朋友成长必经过程，那就是凡是多问几个为什么(注意:这里是一个大坑，问为什么的目的，在于弄清问题的根源是什么，知道根源后方便有针对性地去解决问题，不要做杠精无意义的死杠)。</p><h3><span id="2针对提倡去中心化">2.针对提倡去中心化</span></h3><p>那么什么是去中心化？引用百度百科解释:<br><strong>在一个分布有众多节点的系统中，每个节点都具有高度自治的特征。节点之间彼此可以自由连接，形成新的连接单元。任何一个节点都可能成为阶段性的中心，但不具备强制性的中心控制功能。节点与节点之间的影响，会通过网络而形成非线性因果关系。这种开放式、扁平化、平等性的系统现象或结构，我们称之为去中心化。</strong></p><p>核心概述一点为:<br><strong>中心化的目的是，中心决定节点，节点依赖于中心，而去中心化的目的在于任何一个节点都是中心，不存在离开中心就无法生存。</strong></p><p><strong>这一块引发我对技术领域的思考(特别是做架构设计):</strong><br>一位朋友告诉我:”铁打的盘，流水的兵”,公司如此，架构亦如此。<br>这就好比公司架构体系，这个体系是由大大小小很多部门组织构成的，部门组织的构建基础就是人，人在不同的部门发挥不同的作用。但是如果部门过于依赖于一个人的话，那么就会十分危险，因为离不开这个人，意味着受制于这个人，受制于人容易引发一些祸乱。基于这样的情况，这也就是为什么大公司要推行”螺丝钉”人才策略的重要原因，螺丝钉老化了或者坏了，很容易找到新的螺丝钉进行替换。在设计公司技术架构的时候，需要着重考虑一点就是技术不能太冷门，太过冷门，出了问题很难解决是一方面，另外新人来了，熟悉是需要较为很长的过程，这时如果采用行业普遍流行的技术架构时，一方面新旧替换的成本大大降低，另一方面新人进来能够非常快速的熟悉和进入工作状态(最短时间内发挥其作用，促进团队的整体工作效率)。<br>还有一个比较著名的例子，就是淘宝去IOE化运动，I指的是IBM小型机，O指oracle数据库，E指的是EMC2存储设备。淘宝之所以去IOE，我想最大的原因之一与中心化有关，上面这些都是国外的，过于依赖国外的，换言之离开国外就不能运转了，这是极度危险的，别人的终究是靠不住(中国历史就是最好的证明)。</p><h2><span id="四-判断一名黑客的水平应该看他的技术能力而不是看他的学历-年龄或地位等其他标准">四、判断一名黑客的水平应该看他的技术能力，而不是看他的学历、年龄或地位等其他标准</span></h2><p>在我们编程界有一句话,”Talk is cheap. Show me the code”。<br>翻译过来就是，”空说是没有用的，给我看你的代码”。<br>这个世界有太多空说的”专家”，这些专家满嘴胡话，站着说话不腰疼。说的非常好听，但实际做的究竟又多少呢？这让我想起看过的一部电影《一出好戏》，这部电影中的有一个人物我印象比较深刻，即史教授。这个史教授说的话很不着边际，在和平时期即便是满嘴忽悠，仍会有不少信徒，但处于非和平时期完全就处于被吊打的状态。这种人并非毫无优点，相反我认为这样的人，身上有不少优点可以借鉴学习，比方说忽悠能力(也可以说宣传能力、演讲能力等)。对于程序员创业而言，通过写代码的方式构建一个产品并不难，难的就是如何推广出去，在推广的过程中，程序员要非常的厚脸皮，脸皮子弹都打不穿才行，否则很难在这场99%失败以及1%成功的创业大战中获取胜利。<br>不仅仅是对于黑客，对于我们做技术的人，打铁还需自身硬(让自己的技术能力随着时间不断强化)，在这个充满竞争的时代，要提高自己多方面的能力(不仅仅是技术能力，还有其它的非技术能力，人在社会中在不同的场景饰演不同的角色，如何更好的驾驭角色还是需要下一番功夫的，不同的角色要求需具备不同的能力)。</p><h2><span id="五-你可以用计算机创造美和艺术">五、你可以用计算机创造美和艺术</span></h2><p>计算机创造美和艺术这块，从阅读代码的角度来看，好的代码我们称之为诗一样的优雅(从某种程度上看，也是一种美的艺术)。<strong>那么好的代码衡量的标准有哪些呢？如下所示:</strong></p><ul><li>可读性；</li><li>简洁性；</li><li>可维护性；</li><li>可扩展性；</li><li>灵活性；</li><li>可复用性；</li><li>可测试性。</li></ul><p>上面七个很难完全同时做到，能够同时做到的可以称之为特级大师。不过计算机创造的美和艺术，最终表现的形式可以是一个产品(产品能让普通人看得到和摸得着，例如Linux、微信系列产品、VsCodeIDE等。</p><h2><span id="六-计算机使生活更美好">六、计算机使生活更美好</span></h2><p>计算机使生活更美好，我很赞同这句话，它给时代带来了革命性的影响，改变了人们的工作方式和生活方式，提高工作效率和生活质量。具体的表现:通过电脑提高工作效率(OA系统自动统计每个人每月通勤情况)、将现实生活的购物流程搬到网上实现网购、过去的信件交流变为通过IM通讯工具进行面对面文字、语音、视频等交流、排队去火车站买车票或预订车票到网上直接能买或预订、去外面吃饭需要去餐馆到通过手机App直接点外卖送过来即可等。<br>凡是都有两面性，计算机再让我们生活变好的情况，同样也带来了很多不好的，例如互联网信息时代每个人的隐私都或多或少被暴露出去(手机App窃取信息)、低头族、人与人之间的关系变得廉价、诈骗手段不断演化、暴力血腥或色情信息传播变得更简单。</p><p>不过呢，我相信一切都会变得越来越好的(在党成立了100周年的时候，国家一天天强大起来了，中华民族的复兴指日可待)，为了更好的适应这个时代，我将继续努力前行，为了自己的理想而奋斗(个人的梦想即是中华民族梦想的一部分)。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 阅读感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑暗森林法则的思考</title>
      <link href="/2021/07/17/%E9%BB%91%E6%9A%97%E6%A3%AE%E6%9E%97%E6%B3%95%E5%88%99%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2021/07/17/%E9%BB%91%E6%9A%97%E6%A3%AE%E6%9E%97%E6%B3%95%E5%88%99%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>很多年前在某地勤工俭学积累学费的第一桶金时，因为某种机缘接触了《三体》这本书，其中刘慈欣有句话我印象挺深刻的，他说：<strong>“阅读是拓展人生空间的一个主要途径，每本书读是一扇门，通向我们没有涉足的新世界，在阅读中，我们经历了我们本来不可能在有生之年经历的事情，游历了那些我们的肉身永远无法到达的地方，愿大家在阅读中建立美好的生活”。</strong><br><a id="more"></a></p><p>不经意间让我想起在那个艰难的时期，艰难的时期处处引诱着人犯罪，环境十分恶劣，稍不注意，就会被推下万仗深渊，而我在那样的环境居然坚持下来了，我想我最大的原因除了我自己的初心之外，大概还有一个有力的帮手，即阅读，阅读是那个时候的我，精神上的主要支撑。</p><p>《三体》这本书，我读了差不多有三次，第一次是完全读完，第二次读完一半，第三次跳着读，每次读着重点不一样，有的时候是某个灵感启发，有的时候当作看电影，还有的时候就是想安安静静展开一些科幻与现实的联想。下面进入正文。</p><h2><span id="一-什么是黑暗森林法则">一、什么是黑暗森林法则？</span></h2><p>叶文洁提出了两条基本公理:</p><ul><li>生存是文明的第一需要；</li><li>文明的不断增长和扩展，但宇宙中的物质总量基本保持不变。</li></ul><p>猜疑链和技术爆炸是推到出黑暗森林法则的重要条件。于是黑暗森林法则可以概括为如下:<br><strong>宇宙就是一座黑暗森林，每个文明都是带枪的猎人，像幽灵般潜行于林间，轻轻拨开挡树的路枝，竭力不让脚步发出一点声音，连呼吸都必须小心翼翼：他必须小心，因为林中到处都有着与他一样潜行的猎人。如果他发现了别的生命，能做的只有一件事：开枪消灭之。在这片森林中，他人就是地狱，就是永恒的威胁，任何暴露自己存在的生命都将很快被消灭。这就是宇宙文明的图景。</strong></p><p>上面提到的猜疑链可以归纳为:<strong>双方无法判断对方是否为善意文明</strong>。</p><p>借用刘慈欣在《三体2：黑暗森林》中所说的:<br><strong>“文明间的善意和恶意。善和恶这类字眼放到科学中是不严谨的，所以需要对它们的含义加以限制：善意就是指不主动攻击和消灭其他文明，恶意则相反。这是最低的善意了吧。”</strong></p><p><strong>猜疑链较为详细有步骤的概述可以为如下:</strong></p><ul><li>一个文明不能判断另一个文明是善文明还是恶文明。</li><li>一个文明不能判断另一个文明认为本文明是善文明还是恶文明。</li><li>一个文明不能判断另一个文明是否会对本文明发起攻击。</li><li>一个文明无法判断另一个文明对自己是善意或恶意的。</li><li>一个文明无法判断另一个文明认为自己是善意或恶意的。</li><li>一个文明无法判断另一个文明判断自己对它是善意或恶意的。</li></ul><p>技术爆炸则用下面一句话描述:<br><strong>文明进步的速度和加速度不见得是一致的，弱小的文明很可能在短时间内超越强大的文明。可能由内因或者外因（例如宇宙文明的交流）引发。原著中认为人类步入工业革命后短短两百余年巨大的技术飞跃（较于人类物种存在的三百万年与七千余年的文明）即是一例。</strong></p><h2><span id="二-黑暗森林法则与我的思考">二、黑暗森林法则与我的思考</span></h2><p>在过去的时候，我从未特别去意识到一些东西，直到今年特别深有感触。其实也不是没有意识到，而是在于所面临的形势不同，不同的形势需要着重关注的东西不一样，就好比我第一年工作的时候，于最重要的是如何生存下去，当我第二年工作的时候，物质不再为生存而发愁，这时于我最重要的就是提升自己的能力和如何让生活的品质提高….，诸如这样的，不同的阶段，着重关注点不一样。古人云:”与人为善，予己为善”。很多事情想起来容易，做起来难，但如果不突破，很难有所成就。</p><p>近来黑客攻击，让我对黑暗森林法则有了进一步的思考：<br>黑客攻击，我们可以从服务器上通过lsof -i:某个被攻击的端口查看连接进程，通过连接进程我们可以知道它的ip地址，再通过它的ip地址，我们能知道它的所在地，但实际上它的ip地址不一定是真的，只不过是某个代理，又或者黑客可利用某个ip地址，让某个人作为替死鬼。这让我想到了三体中的蓝色空间号与万有引力号动用了引力波宇宙广播广播了三体星系的坐标从而引发黑暗森林法则中其它文明的打击。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 阅读感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器安全策略之思考与实践</title>
      <link href="/2021/07/16/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E4%B9%8B%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
      <url>/2021/07/16/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E4%B9%8B%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>之所以决定写这篇文章，换言之，这篇文章起源于公司自建服务器因为没有开启防火墙被黑客攻击(其中一台公网暴露的情况下)，基于那次有了一些感悟，而后公司的一位女同事的腾讯云服务器因为数据库密码过于简单，数据库被黑客绑架(相当于将库的数据全部清理，最后仅留一下一句话，要xxx比特币赎回…)，这两次黑客的挑衅，让我对服务器安全方面有了更多的感悟。就在今天服务器突然又宕机了，原因还是被黑客攻击了(黑客利用Redis的漏洞进行病毒植入)，我与其作战了一个下午，最初还以为是Redis的原因，最后发现Redis仅仅是表象，再与其更深入地作战过程中，发现其通过Redis的漏洞，安装了两个病毒软件、篡改了ssh密钥、控制了定时任务，一切的目的只为了一个，把你服务器上的所有资源(带宽、CPU、内存等)全部用于挖矿(挖矿是需要巨大的算力)。<br><a id="more"></a></p><p>两次与公司服务器相关的黑客攻击，其实是可以避免的，一次麻痹大意，让黑客有了可乘之机，实在是让人气愤。</p><p>这次服务器安全策略之思考与实践，总体为以下五个部分:</p><ul><li>防火墙；</li><li>用户管理；</li><li>备份管理；</li><li>定时更新系统内核；</li><li>服务管理。</li></ul><p>掌握这五个方面，能应对大多数情况的黑客攻击(与掌握和了解法律知识能在大多数情况维护我们的公民权益是相通的)。</p><h2><span id="一-防火墙">一、防火墙</span></h2><p>防火墙是服务器的第一道防线，虽然不能百分百防护得到，但至少能阻挡大多数黑客的DOS或DDOS以及利用部分开源软件的漏洞进行病毒植入等攻击。这次服务器之所以被黑客植入病毒，在于防火墙的端口被黑客钻了空子，后面会提到针对此如何进行防范。</p><h3><span id="1防火墙设置开机自启动">1.防火墙设置开机自启动</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable firewalld</span><br></pre></td></tr></table></figure><h3><span id="2防火墙常用命令">2.防火墙常用命令</span></h3><h4><span id="1防火墙状态查看开启或关闭">(1)防火墙状态查看(开启或关闭)</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><h4><span id="2开放端口">(2)开放端口</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=端口/tcp</span><br></pre></td></tr></table></figure><h4><span id="3关闭端口">(3)关闭端口</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --remove-port=端口/tcp</span><br></pre></td></tr></table></figure><h4><span id="4防火墙重启">(4)防火墙重启</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h4><span id="5查看防火墙已开放端口">(5)查看防火墙已开放端口</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><p><strong>注意:</strong><br>无论是服务器开放端口还是关闭端口必须要重启防火墙生效，否则无效。</p><h2><span id="二-用户管理">二、用户管理</span></h2><h3><span id="1ssh端口修改">1.ssh端口修改</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>添加一行Port 12593即可，如图所示:<br><img src="/2021/07/16/服务器安全策略之思考与实践/01.png" alt="图一"></p><p>重启sshd:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure></p><p>需要开启防火墙：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=12593/tcp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p><h3><span id="2禁用root远程登录">2.禁用root远程登录</span></h3><p>Ubuntu就是这样设计的，系统安装成功后，不能使用root登录，只能使用系统安装时新建的普通用户来切入到root用户才行，最初我不太理解Ubuntu为什么要这么设计，而后经过一系列的教训后才明白为什么要慎用root或不用root。</p><p>修改配置文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></p><p>添加如下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">找到 # PermitRootLogin yus</span><br><span class="line">改为 PermitRootLogin no</span><br></pre></td></tr></table></figure></p><h3><span id="3创建普通用户授予一定目录的权限">3.创建普通用户授予一定目录的权限</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd blog #添加用户</span><br><span class="line">passwd #重置密码</span><br></pre></td></tr></table></figure><p><strong>例如:</strong><br>我要将我的blog系统部署在Linux上，我按照上面新建blog用户，将blog系统所需的如JDK、Redis、Nacos、MySQL、ES、MongoDB等软件按照一定的规范进行放置。</p><h2><span id="三-备份管理">三、备份管理</span></h2><h3><span id="1数据备份">1.数据备份</span></h3><p>编写服务脚本通过scp命令进行远程传输到备份服务器对应的数据备份<br>目录。<br>核心命令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp  -r sql_月份或天.zip mysql@ip:/home/mysql/backup</span><br></pre></td></tr></table></figure></p><p>数据备份脚本内容可供参考(可以结合上面的scp命令，实现备份到另外的服务器):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">base_dir=/home/blog/sql_script</span><br><span class="line">DATE=$(date +%Y%m%d)</span><br><span class="line">time=$(date &quot;+%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">cd $base_dir</span><br><span class="line">mysqldump -uroot -p123456 --databases wordpress nacos &gt; dump_$DATE.sql</span><br><span class="line"></span><br><span class="line">if [ $? -eq 0 ]</span><br><span class="line">then</span><br><span class="line">  echo &quot;成功备份mysql数据库,当前日期为:&quot;$time &gt;&gt; /home/blog/mysql_dump.log</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">  echo &quot;备份mysql数据库失败:当前日期为:&quot;$time&gt;&gt; /home/blog/mysql_dump.log</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><h3><span id="2程序日志备份">2.程序日志备份</span></h3><p>目前日志主要存储在/home/blog/dev/log目录下。<br>核心命令如下(可写入shell脚本定时执行):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r server_log_月份或天.zip server@ip:/home/server/backup</span><br></pre></td></tr></table></figure></p><h3><span id="3系统日志备份针对服务器所产生的系统日志">3.系统日志备份(针对服务器所产生的系统日志)</span></h3><p>一般日志主要存储在/var/log下。<br>核心命令如下(可写入shell脚本定时执行):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r system_log_月份或天.zip system@ip:/home/system/backup</span><br></pre></td></tr></table></figure></p><p>因为之前经历过数据库被删，总结了相关教训，写下了另外一篇文章，感兴趣的朋友可以阅读:<br><a href="https://youcongtech.com/2021/05/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A2%AB%E5%88%A0%E4%B9%8B%E5%8F%8D%E6%80%9D/" target="_blank" rel="noopener">数据库被删之反思</a></p><h2><span id="四-定期更新系统内核">四、定期更新系统内核</span></h2><p>也许有朋友疑问为什么要定期更新系统内核？<strong>我归纳为如下四点:</strong></p><ul><li>硬件兼容性更好(支持更多的硬件)；</li><li>修复原有内核系统漏洞(有的黑客会以原有系统漏洞来达到攻击服务器的目的)，提升系统稳定性；</li><li>系统将拥有更多的内存(内核部分将不会被交换到虚拟内存中，这也是不少朋友感觉服务器内存虽然16G，实际能用的可能只有12~13G左右)；</li><li>更多的新功能和特性，提高效率，减少运维工作量(站在巨人的肩上)。</li></ul><p><strong>要特别注意一点:</strong><br>要按照实际情况更新系统内核，切不可随意更新，更新前一定要有充足的准备，防止更新以后出现不兼容性问题导致影响巨大(特别是生产环境，要特别小心，可以事先做试验更新确保问题，同时也把坑给踩了)。</p><h3><span id="1更新yum源仓库">1.更新yum源仓库</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure><h3><span id="2启用-elrepo-仓库">2.启用 ELRepo 仓库</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br></pre></td></tr></table></figure><h3><span id="3安装elrepo仓库的yum源">3.安装ELRepo仓库的yum源</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install</span><br><span class="line">https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure><h3><span id="4查询可用的系统内核包">4.查询可用的系统内核包</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot; list available</span><br></pre></td></tr></table></figure><h3><span id="5安装最新版本内核">5.安装最新版本内核</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --enablerepo=elrepo-kernel install kernel-ml</span><br></pre></td></tr></table></figure><h3><span id="6设置新的内核为grub2的默认版本">6.设置新的内核为grub2的默认版本</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub2-set-default 0</span><br></pre></td></tr></table></figure><h3><span id="7生成-grub-配置文件并重启">7.生成 grub 配置文件并重启</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg (必须等待该命令执行完毕后才执行reboot重启服务器)</span><br><span class="line"></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h3><span id="8验证新内核">8.验证新内核</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><h2><span id="五-服务管理">五、服务管理</span></h2><h3><span id="1应用软件">1.应用软件</span></h3><h4><span id="1mysql">(1)MySQL</span></h4><h5><span id="a避免使用默认端口3306">a.避免使用默认端口3306；</span></h5><h5><span id="b如需对外暴露限制ip">b.如需对外暴露，限制IP；</span></h5><h5><span id="c对外连接账户密码设置复杂且做严格库表权限控制">c.对外连接账户，密码设置复杂且做严格库表权限控制；</span></h5><h5><span id="d不使用根用户运行mysql">d.不使用根用户运行MySQL。</span></h5><h4><span id="2redis">(2)Redis</span></h4><h5><span id="a禁止监听公网">a.禁止监听公网；</span></h5><h5><span id="b禁止使用root用户启动">b.禁止使用root用户启动；</span></h5><h5><span id="c限制redis配置文件访问权限chmod-600-redisconf">c.限制Redis配置文件访问权限(chmod 600 redis.conf)</span></h5><h5><span id="d修改默认端口最好不要为6379">d.修改默认端口(最好不要为6379)；</span></h5><h5><span id="e打开保护模式">e.打开保护模式；</span></h5><h5><span id="f开启账号密码认证模式">f.开启账号密码认证模式；</span></h5><h5><span id="g数据加密开启ssl代理">g.数据加密，开启SSL代理。</span></h5><h4><span id="3nginx">(3)Nginx</span></h4><h5><span id="a隐藏版本号防止黑客针对版本漏洞进行攻击">a.隐藏版本号(防止黑客针对版本漏洞进行攻击)；</span></h5><h5><span id="b开启https">b.开启HTTPS；</span></h5><h5><span id="c开启黑白名单">c.开启黑白名单；</span></h5><h5><span id="d添加账号认证一般为basic双重认证的体系">d.添加账号认证(一般为basic，双重认证的体系)；</span></h5><h5><span id="e限制请求方法">e.限制请求方法；</span></h5><h5><span id="f拒绝user-agent和header头设置">f.拒绝User-Agent和Header头设置；</span></h5><h5><span id="g图片防盗链">g.图片防盗链；</span></h5><h5><span id="h控制并发连接数">h.控制并发连接数；</span></h5><h5><span id="i限制缓冲区大小防止缓冲区溢出攻击">i.限制缓冲区大小(防止缓冲区溢出攻击)。</span></h5><h3><span id="2微服务">2.微服务</span></h3><h4><span id="1通过网关代理访问仅暴露网关网关处于公网下一般nginx代理网关网关处于内网">(1)通过网关代理访问，仅暴露网关(网关处于公网下，一般Nginx代理网关，网关处于内网)。</span></h4><h4><span id="2各个微服务处于内网通过注册中心建立联系如涉及集群可通过nginx负载均衡策略实现请求分发">(2)各个微服务处于内网，通过注册中心建立联系，如涉及集群，可通过Nginx负载均衡策略实现请求分发。</span></h4><h2><span id="六-总结">六、总结</span></h2><p>按照上面的原则执行，基本上出问题的概率非常低，此次被黑客攻击，就是因为违背上面的原则导致的(如假定Redis不在公网公开，或者是在公网公开并设置严格的认证模式，或许不会被攻击)，此次攻击已知的病毒为networkservice和sysupdate，可能存在一些未知的病毒，最后系统因为某种原因崩溃，不得不重装。一次又一次的惨痛经历，此文一方面有总结笔者我在服务器安全策略的思考与实践，另外一方面也有算作记录这次惨痛教训，最后一方面希望广大的朋友以此为鉴。再次验证了那句话，<strong>“祸患常积于忽微，而智勇多困于所溺”。</strong></p><p><strong>今年服务器运维的相关总结教训如下:</strong><br><a href="https://youcongtech.com/2021/05/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A2%AB%E5%88%A0%E4%B9%8B%E5%8F%8D%E6%80%9D/" target="_blank" rel="noopener">数据库被删之反思</a><br><a href="https://youcongtech.com/2021/01/05/ssh%E9%97%AE%E9%A2%98%E4%B9%8B%E5%A4%8D%E7%9B%98/" target="_blank" rel="noopener">ssh问题之复盘</a><br><a href="https://youcongtech.com/2021/01/04/Linux%E8%AE%BE%E5%A4%87%E4%B8%8A%E6%B2%A1%E6%9C%89%E7%A9%BA%E9%97%B4%E4%B9%8B%E5%A4%8D%E7%9B%98/" target="_blank" rel="noopener">Linux设备上没有空间之复盘</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术思考与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx代理下载文件出现失败问题之解决</title>
      <link href="/2021/07/15/Nginx%E4%BB%A3%E7%90%86%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%87%BA%E7%8E%B0%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E4%B9%8B%E8%A7%A3%E5%86%B3/"/>
      <url>/2021/07/15/Nginx%E4%BB%A3%E7%90%86%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%87%BA%E7%8E%B0%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E4%B9%8B%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>今日发现某个代理出现下载文件失败问题，相当于点击下载，直接提示下载失败，需要点击继续才能成功，基于这个问题我搜索查找了一下，最后发现是代理配置的有问题，这是原来的问题配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /file &#123;</span><br><span class="line">          proxy_pass http://127.0.0.1:8080/files;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>解决问题的配置如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location /file &#123;</span><br><span class="line">          proxy_pass http://127.0.0.1:8080/report;</span><br><span class="line">          proxy_redirect default;</span><br><span class="line">          proxy_buffering off;</span><br><span class="line">          proxy_send_timeout 90;</span><br><span class="line">          proxy_read_timeout 90;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将本地jar包放入maven仓库</title>
      <link href="/2021/07/15/%E5%B0%86%E6%9C%AC%E5%9C%B0jar%E5%8C%85%E6%94%BE%E5%85%A5maven%E4%BB%93%E5%BA%93/"/>
      <url>/2021/07/15/%E5%B0%86%E6%9C%AC%E5%9C%B0jar%E5%8C%85%E6%94%BE%E5%85%A5maven%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>因为业务需要，需要引入非Maven的jar，项目中使用Maven来管理依赖包，如今非Maven依赖的jar该如何引入呢？很简单，执行如下命令，将jar变为本地Maven仓库的依赖即可：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -Dfile=blog-mail-1.0.0.jar -DgroupId=com.blog -DartifactId=mail -Dversion=1.0.0 -Dpackaging=jar</span><br></pre></td></tr></table></figure></p><p><strong>参数详解:</strong><br>Dfile：相当于普通的jar包文件。<br>Dgroup：项目组织标识符，相当于Java包结构。<br>DartfactId：项目唯一标识符，相当于项目名称。<br>Dversion：版本号。<br>Dpackaging：打包类型(war或者jar等)。</p><p>打包完毕后，去对应的Maven仓库目录找到pom.xml坐标，然后引入到项目中的pom.xml即可，如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.blog&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;blog.mail&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>参考资料如下:<br><a href="https://blog.csdn.net/tobeng/article/details/80703753" target="_blank" rel="noopener">将本地jar包放入maven仓库</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之文件生成和内容写入</title>
      <link href="/2021/07/15/Java%E4%B9%8B%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90%E5%92%8C%E5%86%85%E5%AE%B9%E5%86%99%E5%85%A5/"/>
      <url>/2021/07/15/Java%E4%B9%8B%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90%E5%92%8C%E5%86%85%E5%AE%B9%E5%86%99%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>很久以前曾写过这样一篇文章:<br><a href="https://blog.csdn.net/zhouzhiwengang/article/details/89031914" target="_blank" rel="noopener">Java之创建文件并写入数据</a></p><p>今天这篇文章算是进化版的，还是说Java之文件生成和内容写入，只不过用的API不一样。<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileWriter;</span><br><span class="line"></span><br><span class="line">public class FileUtil &#123;</span><br><span class="line"></span><br><span class="line">    public static void generateHtml() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String fileName = &quot;test.html&quot;;</span><br><span class="line">            String path = &quot;D://usr//template//&quot;;</span><br><span class="line">            FileWriter fw = new FileWriter(path + fileName, false);</span><br><span class="line">            // FileWriter 如果文件名 的文件不存在，先创建再读写;存在的话直接追加写,关键字true表示追加</span><br><span class="line">            String originalLine = &quot;&lt;h1&gt;Blog-专属&lt;/h1&gt;&quot;;</span><br><span class="line">            //写入内容</span><br><span class="line">            fw.write(originalLine);</span><br><span class="line">            // 关闭写文件</span><br><span class="line">            fw.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        generateHtml();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集成Itext实现HTML转PDF</title>
      <link href="/2021/07/15/Java%E9%9B%86%E6%88%90Itext%E5%AE%9E%E7%8E%B0HTML%E8%BD%ACPDF/"/>
      <url>/2021/07/15/Java%E9%9B%86%E6%88%90Itext%E5%AE%9E%E7%8E%B0HTML%E8%BD%ACPDF/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-导入maven依赖">一、导入Maven依赖</span></h2><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--集成itext --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.itextpdf&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;itextpdf&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;5.5.13&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.itextpdf.tool&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;xmlworker&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;5.5.13&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.itextpdf&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;itext-asian&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;5.2.0&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2><span id="二-核心类">二、核心类</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">public class HtmlTransPDF &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @throws</span><br><span class="line">     * @Title: htmlTransPdf</span><br><span class="line">     * @Description: html 转 pdf ,简单字符和数字</span><br><span class="line">     * @param: @param inputStream</span><br><span class="line">     * @param: @param outputStream</span><br><span class="line">     * @return: void</span><br><span class="line">     */</span><br><span class="line">    public static void htmlTransPdf(InputStream inputStream, OutputStream outputStream) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Document document = new Document();</span><br><span class="line">            // 为该Document创建一个Writer实例</span><br><span class="line">            PdfWriter pdfwriter = PdfWriter.getInstance(document,</span><br><span class="line">                    outputStream);</span><br><span class="line">            pdfwriter.setViewerPreferences(PdfWriter.HideToolbar);</span><br><span class="line">            // 打开当前的document</span><br><span class="line">            document.open();</span><br><span class="line">            XMLWorkerHelper.getInstance().parseXHtml(pdfwriter, document, inputStream);</span><br><span class="line">            document.close();</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @throws</span><br><span class="line">     * @Title: htmlTransPdfChinese</span><br><span class="line">     * @Description: html 转 pdf, 简单中文</span><br><span class="line">     * @param: @param pdfFile</span><br><span class="line">     * @param: @param content</span><br><span class="line">     * @return: void</span><br><span class="line">     */</span><br><span class="line">    public static void htmlTransPdfChinese(String pdfFile, String content) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Document document = new Document();</span><br><span class="line">            // 为该Document创建一个Writer实例</span><br><span class="line">            PdfWriter pdfwriter = PdfWriter.getInstance(document,</span><br><span class="line">                    new FileOutputStream(pdfFile));</span><br><span class="line">            pdfwriter.setViewerPreferences(PdfWriter.HideToolbar);</span><br><span class="line">            // 打开当前的document</span><br><span class="line">            document.open();</span><br><span class="line">            XMLWorkerHelper.getInstance().parseXHtml(pdfwriter, document, new ByteArrayInputStream(content.getBytes(&quot;Utf-8&quot;)), Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">            document.close();</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="三-测试">三、测试</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        String htmlPath = &quot;D:\\usr\\template\\test.html&quot;;</span><br><span class="line">        String pdfPath = &quot;D:\\usr\\template\\test.pdf&quot;;</span><br><span class="line">        String content = &quot;&quot;;</span><br><span class="line">        File htmlFile = new File(htmlPath);</span><br><span class="line">        File pdfFile = new File(pdfPath);</span><br><span class="line">        if(htmlFile.exists())&#123;</span><br><span class="line">            if(!pdfFile.exists())&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    pdfFile.createNewFile();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    // TODO Auto-generated catch block</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // 开始读取html 文件内容</span><br><span class="line">            BufferedReader br;</span><br><span class="line">            try &#123;</span><br><span class="line">                br = new BufferedReader(new InputStreamReader(</span><br><span class="line">                        new FileInputStream(htmlFile), &quot;UTF-8&quot;));</span><br><span class="line">                String row = &quot;&quot;;</span><br><span class="line">                while ((row = br.readLine()) != null) &#123;</span><br><span class="line">                    // System.out.println(t);</span><br><span class="line">                    content += row;</span><br><span class="line">                &#125;</span><br><span class="line">                HtmlTransPDF.htmlTransPdfChinese(pdfPath, content);</span><br><span class="line">            &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">                // TODO Auto-generated catch block</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">                // TODO Auto-generated catch block</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                // TODO Auto-generated catch block</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>参考资料:<br><a href="https://blog.csdn.net/zhouzhiwengang/article/details/89031914" target="_blank" rel="noopener">Java Itext 实现HTML 转换PDF</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我对低代码的理解</title>
      <link href="/2021/06/28/%E6%88%91%E5%AF%B9%E4%BD%8E%E4%BB%A3%E7%A0%81%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2021/06/28/%E6%88%91%E5%AF%B9%E4%BD%8E%E4%BB%A3%E7%A0%81%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-什么是低代码它的特征有哪些愿景是什么">一、什么是低代码?它的特征有哪些？愿景是什么？</span></h2><p>简单来讲，低代码(Low Code)就是一种可视化搭建系统，从字面意思来讲，一是可视化；二是少写代码。 无代码(No Code)同样从字面上来理解，一是可视化，二是不写代码。<br><a id="more"></a></p><p><strong>低代码的特征如下:</strong></p><ul><li>可视化IDE：一种用于可视化定义应用程序的UI，工作流和数据模型，并在必要时添加手写代码的环境。</li><li>各种后端或服务的连接器：自动处理数据结构，存储和检索。</li><li>应用程序生命周期管理器：用于在测试，登台和生产中构建，调试，部署和维护应用程序的自动化工具。</li><li>跨平台。</li><li>所见即所得。</li></ul><p><strong>愿景如下:</strong></p><ul><li>让技术人员开发应用更简单。</li><li>让不懂代码的业务人员也能开发应用。</li></ul><h2><span id="二-低代码火爆的背景">二、低代码火爆的背景</span></h2><h3><span id="1社会-经济因素">1.社会、经济因素</span></h3><p>2020年的疫情冲击不容忽视，它挑战了很多企业原有的商业模式、协作模式，数字化经济的繁荣、信息化需求的激增，造成程序员供需失衡。</p><h3><span id="2技术因素">2.技术因素</span></h3><p>云计算技术的成熟、移动化的趋势等，为低代码2.0提供了技术基础。万维网出现前夕，计算机网络是一座座孤岛，互联网打破了这些孤岛。同样，如今的信息孤岛、云端孤岛屡见不鲜，曾经的低代码作为开发工具也只是在构建孤岛。但”低代码+云”的想象力将不止于此，如果能形成”互联、共生的生态”，它有可能会打破当前应用与应用，企业与企业，开发者与开发者之间的孤岛，大大提高代码复用率，进而引发一次效率的飞跃。</p><h3><span id="3环境因素">3.环境因素</span></h3><p>国外低代码平台成功商业化，国内”互联网+”、”数智化转型”风口等都是催化因子。</p><h2><span id="三-低代码的利与弊分别有哪些">三、低代码的利与弊，分别有哪些？</span></h2><h3><span id="1低代码的利">1.低代码的利</span></h3><ul><li>更快的软件开发速度；</li><li>敏捷度提高；</li><li>更好的用户体验；</li><li>保持核心竞争力的同时，完成更多工作。</li></ul><h3><span id="2低代码的弊">2.低代码的弊</span></h3><ul><li>安全性与可靠性(由于是拖拉拽生成的代码无法保证代码的安全性和可靠性)；</li><li>有限集成(不能很好的适应业务的变化和发展，例如需要集成新的东西时，新的东西某些组件可能与现有组件冲突等)；</li><li>自定义功能(个性化定制的局限性)。</li></ul><h2><span id="四-现有的低代码平台有哪些国内和国外">四、现有的低代码平台有哪些(国内和国外)？</span></h2><ul><li><a href="https://www.jiandaoyun.com/" target="_blank" rel="noopener">简道云</a></li><li><a href="https://www.mingdao.com/home.htm" target="_blank" rel="noopener">明道云</a></li><li><a href="https://www.ivx.cn/" target="_blank" rel="noopener">IVX</a></li><li><a href="https://www.actionsoft.com.cn/" target="_blank" rel="noopener">炎黄盈动</a></li><li><a href="https://www.aliwork.com/" target="_blank" rel="noopener">宜搭</a></li><li><a href="https://powerapps.microsoft.com/zh-cn/" target="_blank" rel="noopener">微软-Power Apps</a></li><li><a href="https://developers.google.com/appmaker?hl=id" target="_blank" rel="noopener">Google-App Maker</a></li><li><a href="https://www.mendix.com/zh/" target="_blank" rel="noopener">Mendix</a></li><li><a href="https://www.outsystems.com/" target="_blank" rel="noopener">OutSystems</a></li></ul><h2><span id="五-我与低代码的两次正面接触">五、我与低代码的两次正面接触</span></h2><p>最早的接触是在某外包公司做项目实施的时候，通过拖拉拽的形式生成一个又一个子系统(这个时候体现低代码的”无代码”)。<br>而后到了某创业公司，为了提高开发效率使用一些开源项目的代码生成器(这个时候体现低代码的”少写代码”)。<br>当时开源代码的代码生成器采用过jeecg、mybatis-plus-generator、renren-generator、jeesite4等。</p><h2><span id="六-我对低代码的思考">六、我对低代码的思考</span></h2><p>低代码的初衷是通过复用性来提高开发效率，这个初衷是很好的，但在实际落地过程中仍然会存在不少问题。</p><ul><li><p><strong>产生很多垃圾代码</strong>(MyBatis的代码生成器生成一堆CRUD，但每次还得改很多东西，这也是我那个时候在做门锁系统时，放弃使用MyBatis的代码生成器转而使用MyBatis-Plus的代码生成器的重要原因之一)。</p></li><li><p><strong>定制化很有限</strong>(例如一个专门做电商相关低代码平台，这时客户突然有一个新的需求，即增加一个云上课平台，基于原有的低代码平台进行扩展可能会有很多问题，不仅仅是短时间内做不做的出来的问题，还有就是做出来以后的兼容性问题等)。</p></li><li><p><strong>平台依赖性</strong>(对于一些公司而言，不想过于依赖于平台，受制于平台，这也间接的解释为什么我们要开发一个属于自己的操作系统(鸿蒙系统的诞生))。</p></li></ul><p>本文参考资料如下:<br><a href="https://zhuanlan.zhihu.com/p/351174365" target="_blank" rel="noopener">深入看透低代码</a><br><a href="https://zhuanlan.zhihu.com/p/361926149" target="_blank" rel="noopener">开发工程师为什么要使用低代码平台？</a><br><a href="https://zhuanlan.zhihu.com/p/349415091" target="_blank" rel="noopener">盘点 | 有哪些好用的低代码开发平台？</a><br><a href="https://blog.csdn.net/zhuzhoulin/article/details/114680747" target="_blank" rel="noopener">低代码开发平台建设步骤及思考</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术思考与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杨二前辈给我的几点启发</title>
      <link href="/2021/06/27/%E6%9D%A8%E4%BA%8C%E5%89%8D%E8%BE%88%E7%BB%99%E6%88%91%E7%9A%84%E5%87%A0%E7%82%B9%E5%90%AF%E5%8F%91/"/>
      <url>/2021/06/27/%E6%9D%A8%E4%BA%8C%E5%89%8D%E8%BE%88%E7%BB%99%E6%88%91%E7%9A%84%E5%87%A0%E7%82%B9%E5%90%AF%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>因为某种机缘与杨二前辈近距离的接触，杨二前辈一些分享给了我以下几点启发。<br><a id="more"></a></p><h2><span id="一-编程来源于现实开源的项目idea">一、编程来源于现实(开源的项目Idea)</span></h2><p>这些年我也写了不少开源项目如blog-job、blog-cxf、mybatis-plus-tutorial、DroolsSpringBootExample、blog-springcloud-pro-demo、jfinal-task-sys、AlgorithmOfhomework、SmallDemo、DesignPatternLeanring、SpringBoot-Learning、SymfonyLearning、ThinkPHPLearning、blog-manage-system、acs-login、vscode-extension-dev、Metronic_Template等18个开源项目，除此之外还有几十个闭源项目，这些闭源项目有的是来自于一些开源项目的灵感，有的是基于已有的开源项目进行二次开发，还有的是基于生活中的如我的记账后台和记账小程序以及工作中的json在线格式化、SQL格式化、解密和加密等。</p><p>杨二前辈也写了不少有趣的开源项目，感兴趣的朋友可以访问如下地址:<br><a href="https://yangerxiao.com/works" target="_blank" rel="noopener">https://yangerxiao.com/works</a></p><p>下面图中是我部分闭源项目：<br><img src="/2021/06/27/杨二前辈给我的几点启发/01.png" alt="图一"></p><h2><span id="二-自主创作提高了能力">二、自主创作提高了能力</span></h2><p>杨二前辈认为自主创作可以提高如下几个能力？</p><ul><li>沉淀开发流程；</li><li>扩展技术视野；</li><li>锻炼产品思维。</li></ul><p>我个人非常赞同如上三点，因为正是因为业余时间不断编码折腾，在创业公司的时候，我基于过去业余折腾的经验，把运维部署与监控实现脚本化用来提高效率，因为公司产品需要的缘故，接触了PHP和Python等相关的开源项目，对于接触较为陌生的编程语言领域，每个人或多或少都会有点恐惧，但我不恐惧，因为在业余早已折腾这相关的，至于锻炼产品思维这大概是我那个时候的硬伤，写出来的东西只管实现就行，而不从用户的角度考虑易用性和美观，以至于时不时就返工重写(那个时候在创业公司的时候，前后端以及运维都做)。</p><p>从创业公司到B2B零售，再由B2B零售到教育Saas，最后从教育SaaS到现在，流程、视野、产品思维等形成的复利深刻着影响着我。</p><h2><span id="三-如何成为独立开发者">三、如何成为独立开发者</span></h2><p>杨二前辈认为如下三点:</p><ul><li>兴趣使然；</li><li>不设限；</li><li>积累与坚持。</li></ul><p>其实我能从一名后端开发人员到半个全栈(H5、小程序、PC端、后端API、测试、运维等)，仔细想来与上面三点不无关系。</p><p>兴趣很重要，我喜欢阅读各种各样的书籍，每天上下班的地铁以及睡前我都会阅读，阅读于我而言，既是一种兴趣，也是生活方式的一种体现。同样，当某种灵感产生，如编码灵感，我会持续专注的写好几个小时，有的时候不经意间就通宵了，写作也是如此。但是这些最终都离不开一点，那就是持之以恒的坚持，长久的坚持会形成复利，这种复利就是积累。</p><h2><span id="四-总结">四、总结</span></h2><p>我问了杨二前辈一个问题，为什么我写了一百多个开源或闭源的项目，都称不上成功呢？因为这一百多个开源或闭源的项目，有的形同烂尾楼，有的勉强过去，还有的做事做一半，再有的就是在人家已有的基础上增加几点新功能搞一些创新。杨二前辈怎么回答的，我记不清了，但后来我想了想，也许写开源或闭源项目的结果让我很不满意，但是在这个过程中我还是学到了不少，我想这或许是一种另类成功吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫与反爬虫策略思考</title>
      <link href="/2021/06/27/%E7%88%AC%E8%99%AB%E4%B8%8E%E5%8F%8D%E7%88%AC%E8%99%AB%E7%AD%96%E7%95%A5%E6%80%9D%E8%80%83/"/>
      <url>/2021/06/27/%E7%88%AC%E8%99%AB%E4%B8%8E%E5%8F%8D%E7%88%AC%E8%99%AB%E7%AD%96%E7%95%A5%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-爬虫的定义">一、爬虫的定义</span></h2><p>爬虫是一个模拟人类请求网站行为的程序。可以自动请求网页、并将数据抓取下来，然后使用一定的规则提取有价值的数据。<br><a id="more"></a></p><h2><span id="二-我与爬虫">二、我与爬虫</span></h2><p>我与爬虫最早的接触是通过Python编写相关的爬虫，爬取一些小说网站，而后我的博客系统最早千万级数据主要来源于数据爬虫和一些内容网站API等，再后来因业务需要再度使用爬虫进行数据抓取。这是我与爬虫直接接触的三个场景。</p><h2><span id="三-爬虫的本质是什么">三、爬虫的本质是什么</span></h2><p>有博友认为:爬虫的本质是网络请求和数据处理。我认为很对，网络请求基于HTTP协议，数据处理基于DOM解析(在基于DOM解析前提下，直接获取符合当前需要的元素)。</p><h2><span id="四-爬虫的策略有哪些">四、爬虫的策略有哪些</span></h2><h3><span id="1深度优先遍历策略">1.深度优先遍历策略</span></h3><p>深度优先遍历策略是指网络爬虫会从起始页开始，一个链接一个链接跟踪下去，处理完这条线路的链接之后，在再转入下一个起始页，继续跟踪链接。</p><h3><span id="2广度优先遍历策略">2.广度优先遍历策略</span></h3><p>广度优先策略是按照树的层次进行搜索，如果此层没有搜索完成，不会进入下一层搜索。即首先完成一个层次的搜索，其次在进行下一层次，也称之为分层处理。</p><h3><span id="3部分pagerank的策略">3.部分PageRank的策略</span></h3><p>PageRank算法的思想：对于已经下载的网页，连同待抓取URL队列的URL，形成网页集合，计算每个页面的PageRank值（PageRank算法参考：PageRank算法 - 从原理到实现），计算完之后，将待抓取队列中的URL按照网页级别的值的大小排列，并按照顺序依次抓取网址页面。</p><h3><span id="4opic策略策略">4.OPIC策略策略</span></h3><p>基本思路：在算法开始前，给所有页面一个相同的初始现金（现金）当下载了某个页面P之后，将P的现金分摊给所有从P中分析出的链接，并且将P的现金清空。对于待抓取URL队列中的所有页面按照现金数进行排序。<br>与PageRank的的的的区别在于：PageRank的的的每次需要迭代计算，而OPIC策略不需要迭代过程所以计算速度远远快与PageRank的的的，适合实时计算使用。</p><h3><span id="5大站优先策略">5.大站优先策略</span></h3><p>以网站为单位来选题网页重要性，对于待爬取URL队列中的网页，根据所属网站归类，如果哪个网站等待下载的页面最多，则优先下载这些链接，其本质思想倾向于优先下载大型网站。因为大型网站往往包含更多的页面。鉴于大型网站往往是著名企业的内容，其网页质量一般较高，所以这个思路虽然简单，但是有一定依据。实验表明这个算法效果也要略优先于宽度优先遍历策略。</p><p>上面这五个策略在实际中，我或多或少都接触过，但那个时候我却不知道这些。</p><h2><span id="五-基于java可供选择的爬虫框架有哪些">五、基于Java，可供选择的爬虫框架有哪些</span></h2><p><strong>以下七个可供选择:</strong></p><ul><li>JSOUP；</li><li>WebMagic；</li><li>Crawler4j；</li><li>Gecco；</li><li>Spiderman；</li><li>Heritrix；</li><li>WebController。</li></ul><p>就我个人看，我比较倾向于JSOUP，因为它更接近于原生，原生的东西不会掺杂太多七七八八的，除JSOUP外的六个还是太重量级的，而且有部分早已停止更新，难以适应如今的需求。</p><p>之前适应WebMagic爬取某些网站的数据，直接被挡回来了，原因是WebMagic代码里的问题，具体详情可参考这篇文章:<a href="https://youcongtech.com/2021/06/03/java%E4%BD%BF%E7%94%A8jsoup%E6%97%B6%E7%BB%95%E8%BF%87https%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/" target="_blank" rel="noopener">java使用jsoup时绕过https证书验证</a></p><h2><span id="六-爬虫需要遵守法律程序员要学会保护好自己">六、爬虫需要遵守法律，程序员要学会保护好自己</span></h2><p>2019年05月28日国家网信办发布的《数据安全管理办法（征求意见稿）》中，拟通过行政法规的形式，对爬虫的使用进行限制：</p><ul><li>第十六条 网络运营者采取自动化手段访问收集网站数据，不得妨碍网站正常运行；此类行为严重影响网站运行，如自动化访问收集流量超过网站日均流量三分之一，网站要求停止自动化访问收集时，应当停止。</li></ul><p>具体可阅读这篇文章:<br><a href="https://zhuanlan.zhihu.com/p/66997586#:~:text=%E5%9C%A82019%E5%B9%B405%E6%9C%8828%E6%97%A5%E5%9B%BD%E5%AE%B6%E7%BD%91%E4%BF%A1%E5%8A%9E%E5%8F%91%E5%B8%83%E7%9A%84%E3%80%8A%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E5%8A%9E%E6%B3%95%EF%BC%88%E5%BE%81%E6%B1%82%E6%84%8F%E8%A7%81%E7%A8%BF%EF%BC%89%E3%80%8B%E4%B8%AD%EF%BC%8C%E6%8B%9F%E9%80%9A%E8%BF%87%E8%A1%8C%E6%94%BF%E6%B3%95%E8%A7%84%E7%9A%84%E5%BD%A2%E5%BC%8F%EF%BC%8C%E5%AF%B9%E7%88%AC%E8%99%AB%E7%9A%84%E4%BD%BF%E7%94%A8%E8%BF%9B%E8%A1%8C%E9%99%90%E5%88%B6%EF%BC%9A.%20%E7%AC%AC%E5%8D%81%E5%85%AD%E6%9D%A1%20%E7%BD%91%E7%BB%9C%E8%BF%90%E8%90%A5%E8%80%85%E9%87%87%E5%8F%96%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%8B%E6%AE%B5%E8%AE%BF%E9%97%AE%E6%94%B6%E9%9B%86%E7%BD%91%E7%AB%99%E6%95%B0%E6%8D%AE%EF%BC%8C%E4%B8%8D%E5%BE%97%E5%A6%A8%E7%A2%8D%E7%BD%91%E7%AB%99%E6%AD%A3%E5%B8%B8%E8%BF%90%E8%A1%8C%EF%BC%9B%E6%AD%A4%E7%B1%BB%E8%A1%8C%E4%B8%BA%E4%B8%A5%E9%87%8D%E5%BD%B1%E5%93%8D%E7%BD%91%E7%AB%99%E8%BF%90%E8%A1%8C%EF%BC%8C%E5%A6%82%E8%87%AA%E5%8A%A8%E5%8C%96%E8%AE%BF%E9%97%AE%E6%94%B6%E9%9B%86%E6%B5%81%E9%87%8F%E8%B6%85%E8%BF%87%E7%BD%91%E7%AB%99%E6%97%A5%E5%9D%87%E6%B5%81%E9%87%8F%E4%B8%89%E5%88%86%E4%B9%8B%E4%B8%80%EF%BC%8C%E7%BD%91%E7%AB%99%E8%A6%81%E6%B1%82%E5%81%9C%E6%AD%A2%E8%87%AA%E5%8A%A8%E5%8C%96%E8%AE%BF%E9%97%AE%E6%94%B6%E9%9B%86%E6%97%B6%EF%BC%8C%E5%BA%94%E5%BD%93%E5%81%9C%E6%AD%A2%E3%80%82.,%E5%9B%BD%E5%AE%B6%E4%BA%92%E8%81%94%E7%BD%91%E4%BF%A1%E6%81%AF%E5%8A%9E%E5%85%AC%E5%AE%A4%E5%85%B3%E4%BA%8E%E3%80%8A%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E5%8A%9E%E6%B3%95%EF%BC%88%E5%BE%81%E6%B1%82%E6%84%8F%E8%A7%81%E7%A8%BF%EF%BC%89%E3%80%8B%E5%85%AC%E5%BC%80%E5%BE%81%E6%B1%82%E6%84%8F%E8%A7%81%E7%9A%84%E9%80%9A%E7%9F%A5-%E4%B8%AD%E5%85%B1%E4%B8%AD%E5%A4%AE%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%92%8C%E4%BF%A1%E6%81%AF%E5%8C%96%E5%A7%94%E5%91%98%E4%BC%9A%E5%8A%9E%E5%85%AC%E5%AE%A4%20%E2%80%8Bwww.cac.gov.cn.%20%E6%AD%A4%E5%89%8D%EF%BC%8C%E6%AD%A3%E5%A5%BD%E6%96%B0%E5%8D%8E%E7%A4%BE%E7%9A%84%E6%8A%A5%E9%81%93%E4%BA%86%E4%B8%80%E5%AE%B6%E5%A4%A7%E8%82%86%E9%80%9A%E8%BF%87%E7%88%AC%E8%99%AB%E8%8E%B7%E5%8F%96%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%9A%84%E6%A1%88%E4%BE%8B%EF%BC%9A.%20%E5%8C%97%E4%BA%AC%E8%AD%A6%E6%96%B9%E8%BF%91%E6%9C%9F%E7%A0%B4%E8%8E%B7%E5%A4%87%E5%8F%97%E5%85%B3%E6%B3%A8%E7%9A%84%E5%B7%A7%E8%BE%BE%E7%A7%91%E6%8A%80%E9%9D%9E%E6%B3%95%E8%8E%B7%E5%8F%96%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E6%A1%88%E3%80%82." target="_blank" rel="noopener">爬虫的法律红线</a></p><p>总而言之，数据爬虫不要影响网站运营者的正常运营，所爬取的数据应该是该网站公开的(而非绕过鉴权抓取的)，所爬取的数据未经许可不得用于商业用途。</p><h2><span id="七-反爬虫的策略有哪些">七、反爬虫的策略有哪些</span></h2><h3><span id="1基于ip反爬虫ip限制频次">1.基于IP反爬虫(IP限制频次)</span></h3><h3><span id="2通过header反爬虫user-agent-referer检测">2.通过Header反爬虫(User-Agent + Referer检测)</span></h3><h3><span id="3基于用户行为反爬虫">3.基于用户行为反爬虫</span></h3><h3><span id="4动态页面反爬虫">4.动态页面反爬虫</span></h3><h3><span id="5cookie限制登录限制">5.Cookie限制(登录限制)；</span></h3><h3><span id="6验证码限制">6.验证码限制；</span></h3><h3><span id="7js加密通过js加密请求参数-解密加密的数据来反爬">7.js加密(通过js加密请求参数、解密加密的数据来反爬)；</span></h3><h3><span id="8css偏移反爬虫css偏移反爬虫指的是利用css样式将乱序的文字排版为人类正常阅读的顺序">8.CSS偏移反爬虫(CSS偏移反爬虫指的是利用CSS样式将乱序的文字，排版为人类正常阅读的顺序)。</span></h3><p>这些反爬策略在各大网站上都有体现，如豆瓣、美团、Boss直聘、淘宝、蔚蓝地图、拉勾等。</p><h2><span id="八-总结">八、总结</span></h2><p>《孙子兵法》有云，故兵无常势力，水无常形。爬虫的技术不断演变，反爬虫策略也应与时俱进。不要妄想着一套不变的东西能够永久的适应当下的发展(近来在做架构相关的设计，深有体会)。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库时间与系统时间不同步问题之解决</title>
      <link href="/2021/06/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%B6%E9%97%B4%E4%B8%8E%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E4%B8%8D%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98%E4%B9%8B%E8%A7%A3%E5%86%B3/"/>
      <url>/2021/06/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%B6%E9%97%B4%E4%B8%8E%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E4%B8%8D%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98%E4%B9%8B%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>一般在阿里云、华为云、腾讯云、百度云等云计算厂商购买服务器，很少会出现数据库时间与系统时间不同步问题。如果是自建服务器，就很有可能遇到这样的问题，应该是半年前，我就遇到这样的问题，最后通过如下命令解决(在MySQL终端执行):<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set global time_zone = &apos;+08:00&apos;</span><br><span class="line">set time_zone = &apos;+08:00&apos;;</span><br><span class="line">select SYSDATE()。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之利用mail和sendmail发送邮件</title>
      <link href="/2021/06/20/Linux%E4%B9%8B%E5%88%A9%E7%94%A8mail%E5%92%8Csendmail%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
      <url>/2021/06/20/Linux%E4%B9%8B%E5%88%A9%E7%94%A8mail%E5%92%8Csendmail%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>对于Linux，邮件发送的主要应用场景为告警，一旦某个服务或软件挂掉，通过邮件的形式通知相关人员(运维或其它)，让其第一时间迅速解决该问题。</p><a id="more"></a><h2><span id="一-安装mailx和sendmail">一、安装mailx和sendmail</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mailx sendmail</span><br></pre></td></tr></table></figure><h2><span id="二-修改配置文件vim-etcmailrc并添加如下内容">二、修改配置文件(vim /etc/mail.rc)，并添加如下内容</span></h2><p><strong>这里以163邮箱为例</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set from=xxx@163.com #发信人邮箱</span><br><span class="line">set smtp=smtp.163.com # 163 smtp</span><br><span class="line">set smtp-auth-user=xxx@163.com #接收人邮箱</span><br><span class="line">set smtp-auth-password=ABCDEFG #授权码(授权码不等于邮箱密码)</span><br><span class="line">set smtp-auth=login #认证方式</span><br></pre></td></tr></table></figure></p><h2><span id="三-启动sendmail">三、启动sendmail</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start sendmail</span><br></pre></td></tr></table></figure><h2><span id="四-通过mail发送邮件">四、通过mail发送邮件</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;邮件内容&apos; | mail -s &apos;邮件标题&apos; 收件人邮箱</span><br><span class="line">或</span><br><span class="line">mail -s &apos;邮件标题&apos; 收件人邮箱 &lt; 邮件内容.txt</span><br><span class="line">示例：</span><br><span class="line">echo &apos;hello world&apos; | mail -s &apos;hello world&apos; xxxxxxxxxxx@163.com</span><br></pre></td></tr></table></figure><h2><span id="五-邮箱发送原理图">五、邮箱发送原理图</span></h2><p>理解原理，能更好的看清事物本质。<br><img src="https://img-blog.csdnimg.cn/20181209152449164.png" alt=""><br><strong>简要概括:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MUA：Mail User Agent，邮件用户代理，用来编写，收发邮件</span><br><span class="line">MTA：Mail Transfer Agent，邮件传输代理，将邮件传输到正确目的地</span><br><span class="line">MDA：Mail Delivery Agent，邮件分发代理，将邮件分发到正确目的用户</span><br></pre></td></tr></table></figure></p><p>本文主要参考资料如下:<br><a href="https://blog.csdn.net/u012219371/article/details/84929028" target="_blank" rel="noopener">linux利用mail和sendmail发送邮件</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysqld: error while loading shared libraries: libaio.so.1</title>
      <link href="/2021/06/20/mysqld-error-while-loading-shared-libraries-libaio-so-1/"/>
      <url>/2021/06/20/mysqld-error-while-loading-shared-libraries-libaio-so-1/</url>
      
        <content type="html"><![CDATA[<p>CentOS7.x版本初始化MySQL,出现如下错误:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld: error while loading shared libraries: libaio.so.1:cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>原因是因为:新的服务器没有安装所需依赖导致的。</p><p>解决办法，执行如下命令，安装所需依赖即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y libaio</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下word转pdf中文乱码问题</title>
      <link href="/2021/06/20/Linux%E4%B8%8Bword%E8%BD%ACpdf%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2021/06/20/Linux%E4%B8%8Bword%E8%BD%ACpdf%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>最近遇到一个问题，word下载正常，word转pdf后下载出现乱码(如果是本地windos则没有问题，如果是Linux上直接显示乱码)。</p><p>最后通过搜索找到了原因:<br>原因之所以Windows不会有乱码在于C:\Windows\Fonts(有windows丰富的字体库，而Linux很缺乏)。</p><p>其实早在很久以前搭建WordPress站点的时候就遇到这样的乱码问题，那个时候也是将Windows的字体库上传解决的。</p><p><strong>解决问题步骤如下:</strong><br><a id="more"></a></p><h4><span id="1上传windows字体库所有文件到linux上">1.上传windows字体库所有文件到Linux上</span></h4><p>将C:\Windows\Fonts全部上传，上传的方式可以在git bash终端敲scp命令，也可以采用Xftp或WinScp等工具。</p><p><strong>注意:</strong><br>上传前，需要在/usr/share/fonts/建一个新的目录，名字叫winFonts(mkdir winFonts)。</p><h4><span id="2生成字体索引文件执行两条命令">2.生成字体索引文件(执行两条命令)</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkfontscale</span><br><span class="line">sudo mkfontdir</span><br></pre></td></tr></table></figure><h4><span id="3更新字体缓存">3.更新字体缓存</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fc-cache -fv</span><br></pre></td></tr></table></figure><h4><span id="4重启服务器">4.重启服务器</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>按照上述步骤成功解决了问题。Linux环境为CentOS7.x，亲试有效。<br>主要参考这位朋友的文章:<br><a href="https://blog.csdn.net/qq_40102178/article/details/100738793" target="_blank" rel="noopener">Linux下word转pdf中文乱码问题</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库设计之思考</title>
      <link href="/2021/06/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E4%B9%8B%E6%80%9D%E8%80%83/"/>
      <url>/2021/06/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E4%B9%8B%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>去年的时候写了一篇文章叫<a href="https://www.cnblogs.com/youcong/p/12963752.html" target="_blank" rel="noopener">Java程序员的两项通用能力</a>，这篇文章我提到对于Java程序员而言很重要的两项通用能力(从编程的角度出发)，一是熟练掌握并深入理解Java编程语言，二是数据库。关于深入理解Java编程语言，后续我会有一个专门的wiki来讲这方面的东西，今天主要讲数据库设计方面的。<strong>我个人认为数据库设计是”互联网软件三高架构体系(高并发、高可用、高性能)”的根基</strong><br><a id="more"></a></p><h2><span id="一-为什么说数据库设计是互联网软件三高架构体系的根基">一、为什么说数据库设计是”互联网软件三高架构体系”的根基？</span></h2><p>以我这四年多做的SaaS应用为例，都离不开一个共性，即数据的存储和处理，而数据的存储就涉及到数据库。而数据记录会存储在对应的表中，而表又是数据库中的一个组成部分(表由表名、表的字段、表的记录等构成)。自下而上看，一个良好的数据库设计，是由良好的数据表设计决定的，而一个良好的数据表设计，<strong>它能够有效地达到”三降”目的:</strong></p><ul><li>(1)降低存储成本；</li><li>(2)降低计算成本；</li><li>(2)降低维护成本。</li></ul><p>而”三降”对于”互联网三高架构体系”又显得至关重要。所以我认为数据库设计是”互联网软件三高架构体系”的根基，没有这个根基，一切皆为空中楼阁。</p><h2><span id="二-数据库设计需要考虑哪些方面">二、数据库设计需要考虑哪些方面？</span></h2><h3><span id="1业务层面">1.业务层面</span></h3><p>从业务层面出发，数据库的设计必须围绕业务层面进行思考，自顶而下。这里的业务层面，主要是需求层面，弄清楚客户的需求(与自己单干做外包的原理一样)，我在这篇文章提到过<a href="https://youcongtech.com/2021/05/23/%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%AF%B9%E8%B5%9A%E9%92%B1%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E6%91%B8%E7%B4%A2/" target="_blank" rel="noopener">技术人对赚钱的思考与摸索</a><br>，其中一些文字，我用图片表示:<br><img src="/2021/06/06/数据库设计之思考/01.png" alt="图一"><br>我认为在做数据库设计的思考，有以下这么两点，可以借鉴:</p><ul><li>项目一定要调研很细，分清哪些能做，哪些不能做(不确定的不做，需求不明确的不做)；</li><li>调研需求前，列一个问题清单，面对面与客户沟通时，把所有疑问抛给客户(需求不明确或需求疑问得不到解答，直接慧导致很多无用功)。</li></ul><h3><span id="2架构层面">2.架构层面</span></h3><p>有人说，IT架构其实是计算、网络、存储。其中数据库就是存储的主要代表。<br>数据库架构也有四个原则(与互联网三高体系有一定关系):</p><ul><li>高可用；</li><li>高性能；</li><li>一致性；</li><li>扩展性。</li></ul><p>从架构层面上看，常见的方案有如下:</p><ul><li>主备架构(主库提供读写服务，备库冗余做故障转移)；</li><li>双主架构(两个主库同时提供服务，负载均衡)；</li><li>主从架构(一主多从，读写分离)；</li><li>双主+主从架构(具备双主+主从的特点)。</li></ul><p>但每种方案都需要考虑实际情况，能否落地是关键，不能落地的方案都是”空中楼阁”。这里的实际情况指成本高低、与目前的业务是否匹配等。</p><h3><span id="3规范层面">3.规范层面</span></h3><h4><span id="1阿里巴巴java开发手册终极版130">(1)阿里巴巴Java开发手册终极版(1.3.0)</span></h4><p>这里我仅仅列举三个，分别为建表规约、索引规约、SQL规约(这三个非常重要)。</p><h5><span id="a建表规约">a.建表规约</span></h5><h6><span id="表达是与否概念的字段必须使用-is_xxx-的方式命名数据类型是-unsigned-tinyint1-表示是0-表示否">表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint（1 表示是，0 表示否）。</span></h6><p>说明：任何字段如果为非负数，必须是 unsigned。<br>注意：POJO 类中的任何布尔类型的变量，都不要加 is 前缀，所以，需要在<resultmap>设置从 is_xxx 到<br>Xxx 的映射关系。数据库表示是与否的值，使用 tinyint 类型，坚持 is_xxx 的命名方式是为了明确其取值含义与取值范围。</resultmap></p><h6><span id="表名-字段名必须使用小写字母或数字禁止出现数字开头禁止两个下划线中间只出现数字-数据库字段名的修改代价很大因为无法进行预发布所以字段名称需要慎重考虑">表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</span></h6><p>说明：MySQL 在 Windows 下不区分大小写，但在 Linux 下默认是区分大小写。因此，数据库名、表名、<br>字段名，都不允许出现任何大写字母，避免节外生枝。</p><h6><span id="表名不使用复数名词">表名不使用复数名词。</span></h6><p>说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。</p><h6><span id="禁用保留字如-desc-range-match-delayed-等请参考-mysql-官方保留字">禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。</span></h6><h6><span id="主键索引名为-pk_字段名唯一索引名为-uk_字段名普通索引名则为-idx_字段名">主键索引名为 pk_字段名；唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。</span></h6><p>说明：pk_ 即 primary key；uk_ 即 unique key；idx_ 即 index 的简称。</p><h6><span id="小数类型为-decimal禁止使用-float-和-double">小数类型为 decimal，禁止使用 float 和 double。</span></h6><p>说明：在存储的时候，float 和 double 都存在精度损失的问题，很可能在比较值的时候，得到不正确的<br>结果。如果存储的数据范围超过 decimal的范围，建议将数据拆成整数和小数并分开存储。</p><h6><span id="如果存储的字符串长度几乎相等使用-char-定长字符串类型">如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</span></h6><h6><span id="varchar是可变长字符串不预先分配存储空间长度不要超过-5000如果存储长度大于此值定义字段类型为-text独立出来一张表用主键来对应避免影响其它字段索引效率">varchar是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</span></h6><h6><span id="表必备三字段id-create_time-update_time">表必备三字段：id, create_time, update_time。</span></h6><p>说明：其中 id 必为主键，类型为 bigint unsigned、单表时自增、步长为 1。create_time, update_time<br>的类型均为 datetime 类型，前者现在时表示主动式创建，后者过去分词表示被动式更新。</p><h6><span id="表的命名最好是遵循业务名称_表的作用">表的命名最好是遵循“业务名称_表的作用”。</span></h6><h6><span id="库名与应用名称尽量一致">库名与应用名称尽量一致。</span></h6><h6><span id="如果修改字段含义或对字段表示的状态追加时需要及时更新字段注释">如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。</span></h6><h6><span id="字段允许适当冗余以提高查询性能但必须考虑数据一致-冗余字段应遵循">字段允许适当冗余，以提高查询性能，但必须考虑数据一致。冗余字段应遵循：</span></h6><ul><li>1） 不是频繁修改的字段。</li><li>2） 不是唯一索引的字段。</li><li>3） 不是 varchar 超长字段，更不能是 text 字段。</li></ul><h6><span id="单表行数超过-500-万行或者单表容量超过-2gb才推荐进行分库分表">单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。</span></h6><p>说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</p><h6><span id="合适的字符存储长度不但节约数据库表空间-节约索引存储更重要的是提升检索速度">合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。</span></h6><h5><span id="b索引规约">b.索引规约</span></h5><h6><span id="业务上具有唯一特性的字段即使是组合字段也必须建成唯一索引">业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。</span></h6><p>说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，<br>即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</p><h6><span id="超过三个表禁止-join-需要-join-的字段数据类型保持绝对一致多表关联查询时保证被关联的字段需要有索引">超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致；多表关联查询时，保证被关联的字段需要有索引。</span></h6><p>说明：即使双表 join 也要注意表索引、SQL 性能。</p><h6><span id="在-varchar-字段上建立索引时必须指定索引长度没必要对全字段建立索引根据实际文本区分度决定索引长度">在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度。</span></h6><p>说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90%以上，可以使用 count(distinct left(列名,索引长度))/count(*)的区分度来确定。</p><h6><span id="页面搜索严禁左模糊或者全模糊如果需要请走搜索引擎来解决">页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。</span></h6><p>说明：索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p><h6><span id="如果有-order-by-的场景请注意利用索引的有序性-order-by-最后的字段是组合索引的一部分并且放在索引组合顺序的最后避免出现-file_sort-的情况影响查询性能">如果有 order by 的场景，请注意利用索引的有序性。order by 最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现 file_sort 的情况，影响查询性能。</span></h6><h6><span id="利用覆盖索引来进行查询操作避免回表">利用覆盖索引来进行查询操作，避免回表。</span></h6><p>说明：如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗？目录浏览一下就好，这<br>个目录就是起到覆盖索引的作用。</p><h6><span id="利用延迟关联或者子查询优化超多分页场景">利用延迟关联或者子查询优化超多分页场景。</span></h6><p>说明：MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回 N 行，那当<br>offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL<br>改写。</p><h6><span id="sql-性能优化的目标至少要达到-range-级别要求是-ref-级别如果可以是-consts最好">SQL 性能优化的目标：至少要达到 range 级别，要求是 ref 级别，如果可以是 consts最好。</span></h6><p>说明：</p><ul><li>1） consts 单表中最多只有一个匹配行（主键或者唯一索引），在优化阶段即可读取到数据。</li><li>2） ref 指的是使用普通的索引（normal index）。</li><li>3） range 对索引进行范围检索。</li></ul><h6><span id="建组合索引的时候区分度最高的在最左边">建组合索引的时候，区分度最高的在最左边。</span></h6><p>说明：存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如：where c&gt;? and d=?<br>那么即使 c 的区分度更高，也必须把 d 放在索引的最前列，即建立组合索引 idx_d_c。</p><h6><span id="防止因字段类型不同造成的隐式转换导致索引失效">防止因字段类型不同造成的隐式转换，导致索引失效。</span></h6><h6><span id="创建索引时避免有如下极端误解">创建索引时避免有如下极端误解：</span></h6><ul><li>1） 索引宁滥勿缺。认为一个查询就需要建一个索引。</li><li>2） 吝啬索引的创建。认为索引会消耗空间、严重拖慢记录的更新以及行的新增速度。</li><li>3） 抵制惟一索引。认为惟一索引一律需要在应用层通过“先查后插”方式解决。</li></ul><h5><span id="csql语句">c.SQL语句</span></h5><h6><span id="不要使用-count列名或-count常量来替代-countcount是-sql92-定义的标准统计行数的语法跟数据库无关跟-null-和非-null-无关">不要使用 count(列名)或 count(常量)来替代 count(<em>)，count(</em>)是 SQL92 定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。</span></h6><p>说明：count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。</p><h6><span id="countdistinct-col-计算该列除-null-之外的不重复行数注意-countdistinct-col1col2-如果其中一列全为-null那么即使另一列有不同的值也返回为-0">count(distinct col) 计算该列除 NULL 之外的不重复行数，注意 count(distinct col1,col2) 如果其中一列全为 NULL，那么即使另一列有不同的值，也返回为 0。</span></h6><h6><span id="当某一列的值全是-null-时countcol的返回结果为-0但-sumcol的返回结果为null因此使用-sum时需注意-npe-问题">当某一列的值全是 NULL 时，count(col)的返回结果为 0，但 sum(col)的返回结果为NULL，因此使用 sum()时需注意 NPE 问题。</span></h6><h6><span id="使用-isnull来判断是否为-null-值">使用 ISNULL()来判断是否为 NULL 值。</span></h6><p>说明：NULL 与任何值的直接比较都为 NULL。<br>1） NULL&lt;&gt;NULL 的返回结果是 NULL，而不是 false。<br>2） NULL=NULL 的返回结果是 NULL，而不是 true。<br>3） NULL&lt;&gt;1 的返回结果是 NULL，而不是 true。</p><h6><span id="代码中写分页查询逻辑时若-count-为-0-应直接返回避免执行后面的分页语句">代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。</span></h6><h6><span id="不得使用外键与级联一切外键概念必须在应用层解决">不得使用外键与级联，一切外键概念必须在应用层解决。</span></h6><p>说明：（概念解释）学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学<br>生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于单机<br>低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库<br>的插入速度。</p><h6><span id="禁止使用存储过程存储过程难以调试和扩展更没有移植性">禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</span></h6><h6><span id="数据订正特别是删除或修改记录操作时要先-select避免出现误删除确认无误才能执行更新语句">数据订正（特别是删除或修改记录操作）时，要先 select，避免出现误删除，确认无误才能执行更新语句。</span></h6><h6><span id="对于数据库中表记录的查询和变更只要涉及多个表都需要在列名前加表的别名或表名进行限定">对于数据库中表记录的查询和变更，只要涉及多个表，都需要在列名前加表的别名（或表名）进行限定。</span></h6><p>说明：对多表进行查询记录、更新记录、删除记录时，如果对操作列没有限定表的别名（或表名），并且操作列在多个表中存在时，就会抛异常。</p><h6><span id="sql-语句中表的别名前加-as并且以-t1-t2-t3-的顺序依次命名">SQL 语句中表的别名前加 as，并且以 t1、t2、t3、…的顺序依次命名。</span></h6><p>说明：</p><ul><li>1）别名可以是表的简称，或者是依照表在 SQL 语句中出现的顺序，以 t1、t2、t3 的方式命名。</li><li>2）别名前加 as 使别名更容易识别。</li></ul><h6><span id="in-操作能避免则避免若实在避免不了需要仔细评估-in-后边的集合元素数量控制在-1000-个之内">in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控制在 1000 个之内。</span></h6><h6><span id="因国际化需要所有的字符存储与表示均采用-utf8-字符集那么字符计数方法需要注意">因国际化需要，所有的字符存储与表示，均采用 utf8 字符集，那么字符计数方法需要注意。</span></h6><p>说明：<br> SELECT LENGTH(“轻松工作”)； 返回为 12<br> SELECT CHARACTER_LENGTH(“轻松工作”)； 返回为 4<br> 如果需要存储表情，那么选择 utf8mb4 来进行存储，注意它与 utf8 编码的区别。</p><h6><span id="truncate-table-比-delete-速度快且使用的系统和事务日志资源少但-truncate无事务且不触发-trigger有可能造成事故故不建议在开发代码中使用此语句">TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE无事务且不触发 trigger，有可能造成事故，故不建议在开发代码中使用此语句。</span></h6><p>说明：TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。</p><h4><span id="2各博友总结概要">(2)各博友总结概要</span></h4><h5><span id="a没有完美的数据库设计只有符合业务的数据库设计">a.没有完美的数据库设计，只有符合业务的数据库设计</span></h5><h5><span id="b在遵守数据库设计三大范式的同时也要考虑用户体验">b.在遵守数据库设计三大范式的同时，也要考虑用户体验</span></h5><h5><span id="c数据库设计时必须要做的两件事情需求分析-考虑需求可能的变更">c.数据库设计时必须要做的两件事情(需求分析、考虑需求可能的变更)</span></h5><h5><span id="d数据库设计注意事项">d.数据库设计注意事项</span></h5><ul><li>用户输入不能作为主键；</li><li>凡是有业务意义的不能作为主键；</li><li>除非是确定非空字段，其他允许为空(约束简单原则)；</li><li>不能缺少时间或日期字段，并预留备注字段；</li><li>业务时效性；</li><li>数据采集(宁滥勿缺)；</li><li>预先计划(考虑用户误操作，非物理删除与物理删除)。</li></ul><h5><span id="e字段是否允许为空结合业务思考">e.字段是否允许为空(结合业务思考)</span></h5><h5><span id="f表增加字段不要采用drop-table或create-table最好用alter保留原来的数据">f.表增加字段不要采用drop table或create table，最好用alter(保留原来的数据)。</span></h5><h5><span id="g多表操作必须使用事务">g.多表操作必须使用事务</span></h5><h5><span id="h数据库命名">h.数据库命名</span></h5><ul><li>使用名词作为表名；</li><li>相关表采用统一的前缀。</li></ul><h5><span id="i字段的命名">i.字段的命名</span></h5><ul><li>根据动词被动形式+描述性后缀；</li><li>时间区分当前和未来；</li><li>使用第三人称复数；</li><li>区分单数和复数。</li></ul><h5><span id="j充分利用工具">j.充分利用工具</span></h5><ul><li>Power Design；</li><li>Navicat Data Modeler。</li></ul><h5><span id="k获取数据模式手册">k.获取数据模式手册</span></h5><h5><span id="l做新的数据库设计时要记住过去的教训古为今鉴">l.做新的数据库设计时，要记住过去的教训，古为今鉴</span></h5><h5><span id="m在物理实践之前进行逻辑实现">m.在物理实践之前进行逻辑实现</span></h5><h5><span id="n创建数据字典和er图表">n.创建数据字典和ER图表</span></h5><h5><span id="o有意义的字段命名">o.有意义的字段命名</span></h5><h5><span id="p标准化和数据驱动">p.标准化和数据驱动</span></h5><h5><span id="q标准化不能过头">q.标准化不能过头</span></h5><h5><span id="r小心保留字">r.小心保留字</span></h5><h5><span id="s仔细选择数字类型">s.仔细选择数字类型</span></h5><h5><span id="t避免使用触发器">t.避免使用触发器</span></h5><h5><span id="u文本字段留足量">u.文本字段留足量</span></h5><h5><span id="v采用视图">v.采用视图</span></h5><h5><span id="w用存储过程让系统做活">w.用存储过程让系统做活</span></h5><h5><span id="x创建模式">x.创建模式</span></h5><h5><span id="y报表技巧">y.报表技巧</span></h5><h5><span id="z检查各种变化">z.检查各种变化</span></h5><h4><span id="3我对规范层面的感受">(3)我对规范层面的感受</span></h4><p>从外包公司到至今，越来越体会到规范化的重要意义。从数据库设计到编码，简直是一部血泪史。当年在某创业公司的时候，除了写代码随意之外，对于数据库设计更是随意，为了功能更好实现，给数据库对应的表不断增加字段，最终造成大量冗余，数据库字段冗余，对应的Java代码也是如此。而后到某教育Saas公司才明白数据表不可轻易加字段，需要从整体全局考虑，而不是单单从自身功能实现难易考虑。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计思考与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BASE理论之思考</title>
      <link href="/2021/06/03/BASE%E7%90%86%E8%AE%BA%E4%B9%8B%E6%80%9D%E8%80%83/"/>
      <url>/2021/06/03/BASE%E7%90%86%E8%AE%BA%E4%B9%8B%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-什么是base理论">一、什么是BASE理论？</span></h2><p>BASE理论是对CAP中一致性和可用性权衡的结果，它的核心思想是：<strong>即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。</strong><br><a id="more"></a></p><p><strong>BASE理论包含如下三个元素:</strong></p><ul><li>BA:基本可用；</li><li>S:软状态，状态可以在一段时间内不同步；</li><li>E:最终一致性，在一定的时间窗口内，最终数据达成一致即可。</li></ul><h3><span id="1什么是基本可用">1.什么是基本可用？</span></h3><p><strong>举例说明:</strong><br>以曾经做过的OJ系统为例，OJ系统一般宕机的原因，主要是很多学员在相同的某个时间段统一提交。那么什么时候大多学员会统一提交呢？<br>一般刷题的时候，时间不确定，有的人喜欢上午刷题，有的人喜欢晚上刷题。基本上OJ是能够承载着不确定时间的提交。问题提到大多学员会在什么时候统一提交，答案是考试，考试有一定的时间规定，例如120分钟或150分钟等，超过时间规定范围视为放弃考试，一般考试会提交10分钟内交卷，而这个10分钟承载着大量的学员提交，而这个大量提交不亚于电商秒杀商品。大量的学员提交，会造成系统一度假死状态，即不能正常对外提供服务，通常我们的做法是弹性伸缩，所谓弹性伸缩就是每到考试的时候，服务器会自动根据学员提交的情况来决定是否创建更多的实例，通过创建更多的实例来平衡服务压力。但有些时候并不是创建更多的实例就能应对的，例如12306抢票，全国人民抢票回家，针对这样的场景，不仅仅是加机器来横向扩容保证服务可用，还得服务将降级处理，所谓服务降级分为两个层面，一个是延迟服务，另一个是暂停目前用不到的服务把资源给优先级高的服务，以此来达到服务基本可用的目的。</p><h3><span id="2什么是软状态">2.什么是软状态？</span></h3><p><strong>举例说明:</strong><br>以批量导入大量的历史数据为例，成千上万的Excel文件，里面装有上亿的数据，针对这些数据，系统使用人员在导入数据的过程中，总希望导入一个能够马上得到实时反馈(成功了多少，失败了多少，失败的原因是什么)，但从实际中来看，几百万条数据插入到数据库，肯定会消耗数据库资源，一定程度上降低数据库性能，使得其它应用服务受到一定程度上的影响。以我上家公司的解决办法就是延迟插入，首先用户在导入数据的时候，我们会马上提示，数据正在导入中，导入成功后会给该用户发送手机短信或者是邮件，但其实数据正在导入中并没有马上导入，而是进入到一个数据导入任务队列中，排队执行，先进先出，当执行到该任务时，数据任务导入队列会集中多个服务器进行数据导入，分批次导入，这样一来效率高的多。当然了，这样一来，用户不能马上看到数据，但这在一定程度上提高了系统整体可用性，避免因为数据导入而影响对外的正常服务，正好符合软状态，即数据状态可以在一段时间内不同步。</p><h3><span id="3什么是最终一致性">3.什么是最终一致性？</span></h3><p><strong>举例说明:</strong><br>以很久以前我写的一个博客爬虫为例，博客爬虫分别是有三个，一个思否爬虫，一个是CSDN爬虫，最后是博客园爬虫，三个系统均是一个小的SpringBoot微服务，我的主服务仍然是博客系统，爬虫数据抓取并实时入库，会在一定程度上导致我的主博客系统访问缓慢，原因是因为爬虫应用抓取数据并实时入库，性能在数据库上，后来我想了一个办法将爬虫数据库放在阿里云的RDS上，每当晚上的23点到第二天的5点，这个时间段，爬虫会将爬虫数据库上面的数据迁移到我的主博客系统上。<br>以此来保证数据的最终一致性，也就是我不一定要数据马上入库能看到效果，我可以允许一定的延迟时间，只要最终某个时间段我能看到大量的数据即可，当时做这个的目的在于那个时候研究数据库SQL优化，在研究SQL优化层面，我需要造一批数据，但我不喜欢假数据，于是通过爬虫抓取一些真实的数据，这些真实的数据主要为我个人服务，一方面作为学习的素材，另外一方面可以基于真实的内容做一些数据分析。</p><h2><span id="二-为什么会产生base理论">二、为什么会产生BASE理论？</span></h2><p>新的理论的产生总是为了改进和完善旧有的理论，但本质上仍然变化不大(这也是左耳朵耗子为什么着重说要注重基本功，也包括我的导师以及老J也曾说过多次)。<br><strong>例如:</strong><br>从单体应用到分布式微服务应用、从CAP理论到BASE理论、从前后端不分离到前后分离等，就很好的说明了这一点。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分布式理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAP理论之思考</title>
      <link href="/2021/06/03/CAP%E7%90%86%E8%AE%BA%E4%B9%8B%E6%80%9D%E8%80%83/"/>
      <url>/2021/06/03/CAP%E7%90%86%E8%AE%BA%E4%B9%8B%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>分布式系统的最大难点就是各个节点如何保持一致。最近我在工作中就遇到这样的问题，不同节点之间，彼此通过API，进行通信，交互数据，但有些服务节点存在延迟等问题，导致我看到的并不是实时的数据，以及系统更新时，更新A服务，间接影响到B服务，而B服务受到影响后，C服务随之受到影响，以此类推。对于公司技术架构平台设计者之一的我而言，虽然采用一些临时性措施解决了这些问题，但我不得不深入的去思考分布式一些本质上的东西，因为很多问题不从根本上弄清楚并解决，后面只会以一种或多种不同的状态存在着。搞清楚理论并带着直面的问题思考，或许能找到解决问题的最佳方式。</p><a id="more"></a><h2><span id="一-什么是cap理论引用维基百科解释">一、什么是CAP理论(引用维基百科解释)？</span></h2><p>在理论计算机科学中，CAP理论，又被称作布鲁尔定理，它指出对于一个分布式计算系统来说，<strong>不可能同时满足以下三点：</strong></p><ul><li>一致性(等同于所有节点访问同一份最新的数据副本）；</li><li>可用性(每次请求都能获取到非错的响应——但是不保证获取的数据为最新数据)；</li><li>分区容错性(以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择)。</li></ul><p>C对应的是一致性，A对应的是可用性，P对应的是分区容错性。</p><h2><span id="二-为什么说c-a-p只可同时满足两点而不能三者兼顾呢">二、为什么说C、A、P只可同时满足两点，而不能三者兼顾呢？</span></h2><p>一致性、可用性，分区容错性，分区容错性是一致性和可用性的前提。<br>这里我引用《分布式服务架构:原理、设计与实战》来解释为什么不能三者兼顾，该书是这样概括:<br><strong>CAP原理证明，任何分布式系统只可满足以上两点，无法三者兼顾。由于关系型数据库是单节点无复制的，因此不具有分区容错性，但是具有一致性和可用性，而分布式的服务化系统都需要满足分区容忍性，那么我们必须在一致性和可用性之间进行权衡。如果在网络上有消息丢失，也就是出现了网络分区，则复制操作可能会被延后，如果这时我们的使用方等待复制完成再返回，则可能导致有限时间内无法返回，就失去了可用性；而如果使用方不等待复制完成，而在主分片写完后直接返回，则具有了可用性，但是失去了一致性。</strong></p><h2><span id="三-c-a-p究竟该如何取舍">三、C、A、P究竟该如何取舍？</span></h2><p>从我个人的角度来看，并结合目前的情况，分区容错性和可用性于我们目前是最重要的，数据上我们可以允许有一定或部分的延迟。A和P是适合我们目前的情况。</p><h2><span id="四-那么如何实现a和p呢即如何实现可用性和分区容错性">四、那么如何实现A和P呢？即如何实现可用性和分区容错性？</span></h2><p>最直接的方式就是分布式(分布式中的每个节点都需要集群，通过集群的冗余极大的保证可用性，不同节点的职责保证系统的稳定性)，综合利用多台服务器提高整体性能，这个性能包括提高容错率、提高并发处理能力、各个节点的服务器计算能力等。<br>之前写过一篇文章<a href="https://youcongtech.com/2021/04/17/%E4%BB%8E%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E5%88%B0%E5%88%86%E5%B8%83%E5%BC%8F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84%E6%80%9D%E8%80%83/" target="_blank" rel="noopener">《从单体架构到分布式微服务架构的思考》</a>或许让大家对分布式应用系统有一定的理解。</p><h2><span id="五-总结">五、总结</span></h2><p>近来遇到了很多问题，让我不得不更深入地学习与思考，在不断深入地学习与思考以及实践过程中，摸索出适合公司的分布式架构体系，但这并不是一件很容易的事情，面对着很多突发情况和问题，我需要保持冷静，并积极寻找问题解决的办法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分布式理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb之Response文件下载(中文编码问题)</title>
      <link href="/2021/06/03/JavaWeb%E4%B9%8BResponse%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2021/06/03/JavaWeb%E4%B9%8BResponse%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>很久以前遇到过这样的问题，最近再次遇到，做个记录。<br><a id="more"></a><br><strong>核心代码如下(这里采用Excel导出是EasyPoi):</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/downloadPost&quot;)</span><br><span class="line">   public void downloadPost(HttpServletResponse response) &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           Workbook workbook = ExcelExportUtil.exportExcel(new ExportParams(&quot;博客园文章数据&quot;, &quot;博客园文章数据&quot;),</span><br><span class="line">                   PostExcelEntity.class, postService.selectBasePostDataList());</span><br><span class="line">           // 指定下载的文件名--设置响应头</span><br><span class="line">           response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + URLEncoder.encode(&quot;博客园文章数据.xls&quot;, &quot;UTF-8&quot;));</span><br><span class="line">           response.setContentType(&quot;application/vnd.ms-excel;charset=UTF-8&quot;);</span><br><span class="line">           response.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);</span><br><span class="line">           response.setHeader(&quot;Cache-Control&quot;, &quot;no-cache&quot;);</span><br><span class="line">           response.setDateHeader(&quot;Expires&quot;, 0);</span><br><span class="line">           // 写出数据输出流到页面</span><br><span class="line">           OutputStream output = response.getOutputStream();</span><br><span class="line">           BufferedOutputStream bufferedOutPut = new BufferedOutputStream(output);</span><br><span class="line">           workbook.write(bufferedOutPut);</span><br><span class="line">           bufferedOutPut.flush();</span><br><span class="line">           bufferedOutPut.close();</span><br><span class="line">           output.close();</span><br><span class="line">       &#125; catch (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java使用jsoup时绕过https证书验证</title>
      <link href="/2021/06/03/java%E4%BD%BF%E7%94%A8jsoup%E6%97%B6%E7%BB%95%E8%BF%87https%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/"/>
      <url>/2021/06/03/java%E4%BD%BF%E7%94%A8jsoup%E6%97%B6%E7%BB%95%E8%BF%87https%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<p><strong>详细错误信息:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SunCertPathBuilderException: unable to find valid certification path to requested target</span><br></pre></td></tr></table></figure></p><p><strong>问题原因:</strong><br>爬相关数据，因该网站有SSL加密，故无法爬取。</p><p><strong>问题解决之核心代码:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 绕过HTTPS验证</span><br><span class="line">    */</span><br><span class="line">   static public void initTSL() &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           SSLContext context = SSLContext.getInstance(&quot;TLS&quot;);</span><br><span class="line">           context.init(null, new X509TrustManager[]&#123;new X509TrustManager() &#123;</span><br><span class="line">               @Override</span><br><span class="line">               public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               @Override</span><br><span class="line">               public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               @Override</span><br><span class="line">               public X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">                   return new X509Certificate[0];</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;&#125;, new SecureRandom());</span><br><span class="line">           HttpsURLConnection.setDefaultSSLSocketFactory(context.getSocketFactory());</span><br><span class="line">       &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">       &#125; catch (KeyManagementException e) &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下删除当前目录及子目录下的所有.txt文件</title>
      <link href="/2021/06/03/Linux%E4%B8%8B%E5%88%A0%E9%99%A4%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E5%8F%8A%E5%AD%90%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89-txt%E6%96%87%E4%BB%B6/"/>
      <url>/2021/06/03/Linux%E4%B8%8B%E5%88%A0%E9%99%A4%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E5%8F%8A%E5%AD%90%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89-txt%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>因为某种应用场景我需要将特定目录下的txt文件进行清理，核心命令如下:<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find 目录 -name &apos;*.txt&apos; -type f -print -exec rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure></p><p>例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /home/tech/data_log -name &apos;*.txt&apos; -type f -print -exec rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure></p><p>这样就能将data_log目录下的所有txt进行删除。当然了，不仅仅是txt文件，还可以是其它的文件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术人对赚钱的思考与摸索</title>
      <link href="/2021/05/23/%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%AF%B9%E8%B5%9A%E9%92%B1%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E6%91%B8%E7%B4%A2/"/>
      <url>/2021/05/23/%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%AF%B9%E8%B5%9A%E9%92%B1%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E6%91%B8%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<p>从2018年6月到目前为止，我一直在为一个目标而前进，即如何让自己的未来发展更好顺带着赚更多的钱。为此我做了很多尝试，有过成功，也有过失败，于是便有了这篇文章《技术人对赚钱的思考与摸索》。<br><strong>本文主要内容为如下:</strong></p><ul><li>自媒体；</li><li>网站；</li><li>外包接私活；</li><li>在线课程；</li><li>开源项目；</li><li>网店；</li><li>写作；</li><li>投资理财；</li><li>升职加薪；</li><li>创业。</li></ul><a id="more"></a><h2><span id="一-自媒体">一、自媒体</span></h2><p>自媒体主要体现是公众号，我于2018年8月底开通公众号(公众号换了两个名字，开始叫ChallengerTech，后来叫youcongtech)。截至目前为止，公众号的粉丝已经有一千多粉丝。中间因为一些意外断断续续出现停更，不过好在它为我也创了不少收入，收入类别为广告、付费文章、读者打赏等，收入每月在100到300这个区间范围内(如果每月文章写的多的话，会超过这个区间范围的最大值)，这笔收入的主要应用范围交通、话费、基金定投、小礼物、一顿丰盛实惠的大餐等。<br>公众号运营时间算起来有两年零九个月(以2018年8月底开通时间来说)，做到目前的情况，说不上多么成功，更谈不上失败，但教训还是有的。<strong>教训总结如下:</strong></p><ul><li><strong>(1)文章排版</strong>(早期排版太过难看)；</li><li><strong>(2)轻视推广</strong>(不重视其他平台引流和推广手段)；</li><li><strong>(3)时不时断更</strong>(断更频率高)；</li><li><strong>(4)没有明确的专注点</strong>(换言之定位是什么，写的太杂，有时搬运他人文章时也搬运的太杂等)。<br>前两者即(1)和(2)造成粉丝原始积累有限，后两者(3)和(4)造成用户留存率低，四者结合就是我公众号运营了两年多仍然仅仅只有一千多粉丝的重要原因。</li></ul><p>2019年的时候，所在创业公司主要方向转向教育，做编程教育相关，在这期间接触了VsCode这个开源项目以及VsCode中文社区的开创者韩骏(当初关于VsCode的二次开发以及插件开发向其请教了不少问题，基本上都得到了答案或是解决问题的思路等)。<br>韩骏的微信公众号主要为两个，一个是玩转VsCode，另一个是HJ说。他的公众号运营到现在已经有两年零五个月了，从现在看来，他运营成功的原因，<strong>我归纳为如下:</strong></p><ul><li>(1)<strong>明确定位</strong>(技术相关如VsCode、编程开发等)；</li><li>(2)<strong>重视早期推广</strong>(知乎引流、微信群推广等，他本人在知乎上回答问题很积极)；</li><li>(3)<strong>个人影响力</strong>(很多有名的头衔如微软亚太科技有限公司-软件工程师、一个应用比较广的VsCode插件开源作者、VsCode中文社区的开创者等)；</li><li>(4)<strong>断更频率低</strong>(与我的公众号相比，他的公众号更新很频繁，到了一定的粉丝量，逐渐开始互推以及接一些商业广告等)。</li></ul><h2><span id="二-网站">二、网站</span></h2><p>在个人网站上我主要尝试的方向主要是个人博客，就目前看来个人博客做的还是相对不错。我的两个主流博客分别为如下:<br>一个是博客园(平台性质):<br><a href="https://www.cnblogs.com/youcong/" target="_blank" rel="noopener">https://www.cnblogs.com/youcong/</a><br>另一个是GitHub Hexo(自建性质):<br><a href="https://youcongtech.com/" target="_blank" rel="noopener">https://youcongtech.com/</a></p><p>效果图分别为如下:<br><img src="/2021/05/23/技术人对赚钱的思考与摸索/01.png" alt="图一"><br><img src="/2021/05/23/技术人对赚钱的思考与摸索/02.png" alt="图二"></p><p>关于个人博客的好处，我在这篇文章<a href="https://www.cnblogs.com/youcong/p/10933433.html" target="_blank" rel="noopener">致所有的开发者们</a>已较为详细地阐述了，不再赘述。</p><p>个人网站以博客性质为例，虽然目前未给我带来金钱上的直接收益，但是它的价值远非金钱所能衡量，这是我个人对于博客网站思考与探索。<br>最近登录了我的另外一个邮箱，有不少国外的广告商看了我的博客，想要在我的博客挂广告，邮箱内容如图所示(这是其中之一):<br><img src="/2021/05/23/技术人对赚钱的思考与摸索/03.png" alt="图三"></p><p>除了博客之外我还探索了一条路线，偏工具性质，类似于这些:<br><img src="/2021/05/23/技术人对赚钱的思考与摸索/04.png" alt="图四"><br><img src="/2021/05/23/技术人对赚钱的思考与摸索/05.png" alt="图五"><br>工具性质的网站，普遍以广告收入为主(类似一些非付费视频内容网站，收入主要为广告，我一同学的朋友公司就是属于这种性质)。<br>工具性质网站我目前做的和json.cn网站很相似，我当初做这个的出发点主要是担心在这些网站上黏贴json数据并格式化(数据可能被网站存储，有泄密的隐患)，其次是为了研究这些功能实现过程和提高自己技术能力(借此机会深度研究一些第三方库或Java本身的实现机制)，最后就是为了通过广告来创造”睡后收入”。</p><h2><span id="三-外包接私活">三、外包接私活</span></h2><p>我职业生涯中的第一家公司主要盈利来源就是外包，销售负责在各个外包平台找客户，公司盈利相对可观。<br>我前教育SaaS公司身边一个做前端的同事，她姐夫和姐姐平时业余时间(周末或下班以后)就去外包私活网站上看看有什么单可接，但因为并非开公司，有的比较大的私活接不了需要有公司外壳(公司与公司之间的合同签订与公司对公账号打款)。<br>去年有三个月处于自由职业者状态(为了确保社保不断，社保挂在其它公司)，那三个月探索了很多，其中就有通过外包接私活，去不了不少外包接私活网站看了看，也参与不少竞标，最终联系我的寥寥无几，外包接私活持续了半个月，不见任何起色，可能是我过往项目经历写的不够详细还是技术栈方面单一的缘故(主要偏Java)，不过通过这半个月的经历也认识到了我的技术沉淀还不够，还需要不断磨练提升，这半个月算是了解一些外包网站平台和外包私活的市场竞争情况。<br><strong>外包接私活注意事项归纳如下(一位前辈总结的):</strong></p><ul><li>项目一定要调研得很细，分清哪些能做，哪些不能做(不确定的不做，需求不明确的不做)；</li><li>项目必须有预付款，不然不接；</li><li>项目谈好价格再做(千万不要还没谈好就做)，细分每个功能点，做完对应的功能点给多少钱(每个功能点开发-结束时间以及验证日期和交款日期，最好都确定)；</li><li>明确质量标准(质量标准无法界定的，不要接，主要防止最后交付的时候，在钱上推诿扯皮)；</li><li>最终成功，一手交钱，一手交货(钱全部到位后，相关源代码和文档才能全部交付出去)；</li><li>调研需求前，列一个问题清单，面对面与客户沟通时把所有疑问抛给客户(需求不明确或需求疑问得不到解答直接会导致很多无用功)；</li><li>一定要签合同；</li><li>工期不能定的太死，一定要留有余地(主要防止一些突发意外和风险)；</li><li>不要过分压榨自己，也不要允许别人压榨自己(很多发布需求的人普遍压低价格，例如码市某一个发布需求的人，需求如下:仿做一个和省呗上架一模一样的后台，且钱仅给一万)，不要打价格战，价格战最终损害的只会是自己以及这个行业。</li></ul><h2><span id="四-在线课程">四、在线课程</span></h2><p>在线课程是我一直想尝试过的，但还没落到实处做。<br>在线课程分为三个方面:</p><ul><li>音频；</li><li>视频；</li><li>文字。</li></ul><p>例子有很多(以上三方面排列组合的体现)，如下所示:</p><h3><span id="1csdn程序员研修院">1.CSDN程序员研修院</span></h3><p><img src="/2021/05/23/技术人对赚钱的思考与摸索/06.png" alt="图六"></p><h3><span id="2知乎live">2.知乎Live</span></h3><p><img src="/2021/05/23/技术人对赚钱的思考与摸索/07.png" alt="图七"></p><h3><span id="3掘金小册">3.掘金小册</span></h3><p><img src="/2021/05/23/技术人对赚钱的思考与摸索/08.png" alt="图八"></p><h3><span id="4思否编程">4.思否编程</span></h3><p><img src="/2021/05/23/技术人对赚钱的思考与摸索/09.png" alt="图九"></p><h3><span id="5极客时间">5.极客时间</span></h3><p><img src="/2021/05/23/技术人对赚钱的思考与摸索/10.png" alt="图十"></p><h3><span id="6混沌大学">6.混沌大学</span></h3><p><img src="/2021/05/23/技术人对赚钱的思考与摸索/11.png" alt="图十一"></p><p>以上六个网站以及网站对应的App，大家或多或少都接触过。</p><h2><span id="五-开源项目">五、开源项目</span></h2><p>做开源项目也是一件非常有收益的事情，这个收益具体体现为这么几个方面:</p><ul><li>第一、技术能力的提升；</li><li>第二、影响力的提升；</li><li>第三、创造非工作收入。</li></ul><p>开源项目做的非常成功的例子不胜枚举，这里我仅列举接触过的(太多了，仅列举部分):</p><ul><li>SpringCloud；</li><li>SpringBoot；</li><li>Linux；</li><li>ElasticSearch；</li><li>WordPress；</li><li>Tomcat；</li><li>Spring-Framework；</li><li>MyBatis；</li></ul><p>有不少国内开源项目是以上面为基础衍生出来的。</p><h3><span id="1开源项目是如何盈利的">1.开源项目是如何盈利的？</span></h3><p>常见的盈利模式一共七种，分别为如下:</p><ul><li><strong>多种产品线</strong>(如MySQL分为开源版本和商业版、Jeesite4分为社区版/免费版和个人版本以及专业版等)；</li><li><strong>技术服务型</strong>(例如JBoss，应用服务器完全免费，主要盈利是通过技术文档、培训、二次开发支持等技术服务来获得收入)；</li><li><strong>应用服务托管</strong>(如阿里云RDS云数据库、腾讯云的对象存储等)；</li><li><strong>软硬件一体化</strong>(IBM和惠普等服务器供应商巨头，通过捆绑免费的 Linux操作系统销售硬件服务器，除此之外，还有Windows)；</li><li><strong>附属品</strong>(关于开源项目的深入浅出应用层面相关的介绍和例子说明，通常表现形式为书籍出版)；</li><li><strong>品牌战略、服务至上</strong>(例如Nginx、Redis、MongoDB等)；</li><li><strong>市场策略</strong>(如Vue.js、layui、WordPress、VsCode等)。</li></ul><h3><span id="2作为个人如何通过开源项目实现盈利">2.作为个人如何通过开源项目实现盈利？</span></h3><p>也许这样的提问太过功利化，但从我个人的角度来看，做开源的项目的出发点最好不要以赚钱为目的，不然的话会很痛苦的，最好是以解决某一类场景的问题、个人多年研发经验的总结性、对于某一类开源项目的优化和完善、个人的理想、个人的学习等，围绕这五个目的来做开源项目，是能可持续并长期坚持下去的，最后赚钱就是水到渠成的事情。<br>这样的例子有:MyBatis-Plus、Hutool、Jpress、JavaGuide、Vue.js、t-io等。</p><h3><span id="3开源项目商业化的搭配有哪些">3.开源项目商业化的搭配有哪些？</span></h3><ul><li>免费软件+商业硬件；</li><li>免费知识+收费书籍(培训)；</li><li>免费程序+收费实施；</li><li>免费社区版+收费商业版；</li><li>开源软件+收费企业版；</li><li>免费软件+收费专业服务。</li></ul><p>以WordPress为例，我觉得WordPress在开源项目商业化做的非常不错，值得学习，一方面与时俱进(兼容微信生态等)，另一方面通过插件实现盈利(主题插件、功能插件等)。</p><h3><span id="4如何长期地坚持做开源项目">4.如何长期地坚持做开源项目？</span></h3><p>前面我提到过，长期坚持做开源项目，需要确定一个方向，确定了方向并制定计划，踏踏实实的执行就能长期坚持下去。<strong>方向总结性概括如下:</strong></p><ul><li>工具型(如EasyPoi、Hutool、jeewx-boot等)；</li><li>特定领域型(如操作系统鸿蒙、物联网GuiLite、自动驾驶/无人驾驶apollo、建站型WordPress等)；</li><li>学习型(如JavaGuide)；</li><li>框架型(如SpringBoot、SpringCloud、Jeecg、Jeesite4、Guns、人人开源、若衣、Jfinal、Vue.js、React.js等)；</li><li>优化型(如MyBatis-Plus、t-io等)；</li><li>产品型(如悟空CRM、mall商城、领课教育、禅道等)。</li></ul><p>确定了方向后，接下来就是规划时间，制定计划，一步步往下做。最后的结果一定要有一个1.0版，不管好与不好，没有一个开源项目从一开始就能做的非常完美，都是一步步慢慢演化。</p><p>我目前自己做的属于闭源项目(GitHub私有，后续时机到了就会开源)，效果图如下:<br><img src="https://youcongtech.com/2020/10/07/2020%E5%B9%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E5%92%8C%E6%80%BB%E7%BB%93/04.png" alt="图十二"></p><p>我的开源项目主要的方向为产品型(包含我过去框架型经验的沉淀)。</p><p>之所以要写这个开源项目，答案在这篇文章(本文就不再赘述):<br><a href="https://www.cnblogs.com/youcong/p/13779683.html" target="_blank" rel="noopener">2020年的一些思考和总结</a></p><h2><span id="六-网店">六、网店</span></h2><p>网店的话，在2020年1月份的时候，我在网上开了一个小书店，刚刚登录看了下，至今无任何书籍销售出去，当时开书店，没有做任何的推广，只当作一次新鲜的尝试(我从来没有在网上开过店)，这件事情告诉了我，<strong>“人的精力是有限的，无法把所有的都做了，只能一段时期专注于一件事情，这样才能做好或者是即便没有做好，也没关系，花费的时间仍然不会白费，至少积累了经验，失败的经验是为成功做铺垫”。</strong></p><h2><span id="七-写作">七、写作</span></h2><p>写作是我认为工作这几年最有价值的事情之一，这样的价值是无法用金钱来衡量的。在基金投资中涉及到一个词叫”复利”，”复利”被巴菲特誉为”世界的第八大奇迹”。<br>网站，特别是内容网站的基础和核心就是内容以及内容质量，内容多表示网站的东西较为丰富，内容质量高意味着核心竞争力强。不少内容网站运营到现在，能存活的，寥寥无几，博客园属于技术类的内容网站，它没有CSDN的多样化，UI上也没有思否好看，但很多人遇到技术上的问题或者是学习，都喜欢访问博客园，因为博客园网站的技术内容和质量上相对其它两个平台要丰富和高的多。但从盈利类别来看，CSDN以及思否或许要比博客园赚钱的多。<br>在写作这块，除了博客园之外，我自己还创作过两个作品，一个是我在纵横网平台写的小说，另外一个是在思否上写的专栏。<br>小说就不方便透露了(请读者朋友理解)，思否写的专栏地址如下:<br><a href="https://segmentfault.com/blog/mybatis-plus" target="_blank" rel="noopener">https://segmentfault.com/blog/mybatis-plus</a></p><h2><span id="八-投资理财">八、投资理财</span></h2><p>投资理财可以进行拆分，拆分为投资和理财，投资主要指我个人对于学习方面的投入，这一点我自认为做的还不错，一直不断在充电，理财方面的话，开源节流是主要的手段，同时了拿一小部分资金玩玩股票、基金等之类的。</p><p>关于基金定投我写了一篇这样的文章，记录我基金定投的经历，感兴趣的朋友可以看看:<br><a href="https://mp.weixin.qq.com/s?__biz=MzUxODk0ODQ3Ng==&amp;mid=2247485546&amp;idx=1&amp;sn=c8036893c0e3fddf7250aca8df322478&amp;chksm=f9805b79cef7d26ffdd64d1650227aade538e2dd6c553d079ecb1141002c3d6c0d84343cded0&amp;token=2104650779&amp;lang=zh_CN#rd" target="_blank" rel="noopener">基金定投经历</a></p><h2><span id="九-升职加薪">九、升职加薪</span></h2><p>升职加薪是职场人士主要获取更多的钱以及自我/团队肯定的一种方式。但升职加薪并不是一件很容易的事情，《赢》这本书给出了一些方法(这里引用Tracholar WiKi部分内容):</p><ul><li>没有捷径。</li><li>一定的运气。</li><li>更有效的办法是拓展你的工作范围,采取大胆和超出期望的行动。不要只做哪些期望之内的事。</li><li>最大的敌人是自己,不要在自己的组织里面当刺儿头。</li><li>寻找导师向其学习；</li><li>要保持积极向上,并感染他人。技能固然重要,但理想更为关键。</li><li>不要惧怕挫折。</li><li>要有晋升的欲望。</li></ul><p>其实不管最终能否获得升职加薪，最关键的就是有成长空间和不断进步。<br>去年国庆假期的最后一天，我就写了这么一篇文章:<br><a href="https://www.cnblogs.com/youcong/p/13779683.html" target="_blank" rel="noopener">2020年的一些思考和总结</a><br>这篇文章主要的内容为八个思考，分别是技术、学习、工作、理财、学习周报、健康、职业生涯、沟通等，其中我对工作的思考或许对大家可能有所帮助。</p><h2><span id="十-创业">十、创业</span></h2><p>创业是一个非常艰难的事情，太多的变化和不确定性，但如果成功了，财富将以几何级增长，是实现财务自由的有效手段之一，高风险意味着高回报。<br>我2017年12月中旬加入了一家创业公司，在这家创业公司我不断成长和进步，由一名初级Java开发变为中级Java开发，一年零九个月的时间做了三个领域的东西，分别为物联网领域、电商领域、编程教育领域等。<br>对我在创业公司感兴趣的朋友可以阅读下面的文章:<br><a href="https://www.cnblogs.com/youcong/p/12153262.html" target="_blank" rel="noopener"><strong>创业公司这两年</strong><br>(简要概括，篇幅不是很长)</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxODk0ODQ3Ng==&amp;mid=2247485439&amp;idx=1&amp;sn=201a791086509ae93a29a669e8d402be&amp;chksm=f98054eccef7ddfac7c6b7d30d40b33a1044cc702850cadf1ee2b0a9b3caca551f56779c719b&amp;token=2104650779&amp;lang=zh_CN#rd" target="_blank" rel="noopener"><strong>一位北漂在创业公司的两年</strong>(详细概括，两万多字)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 职业生涯思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot单文件与多文件上传</title>
      <link href="/2021/05/23/SpringBoot%E5%8D%95%E6%96%87%E4%BB%B6%E4%B8%8E%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2021/05/23/SpringBoot%E5%8D%95%E6%96%87%E4%BB%B6%E4%B8%8E%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>本次例子不基于第三方存储(如七牛云对象存储、阿里云对象存储、腾讯云对象存储等)，仅基于本地存储。</p><p>单文件上传主要应用场景如上传头像、特定文件转换、授权文件验证等。<br>多文件上传主要应用场景如批量Excel文件数据录入等。<br>本文主要内容如下:</p><ul><li>公共文件存储代码；</li><li>单文件上传代码；</li><li>多文件上传代码。</li></ul><a id="more"></a><h2><span id="一-公共文件存储代码">一、公共文件存储代码</span></h2><h3><span id="1fileuploadutilsjava">1.FileUploadUtils.java</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.util.file;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description: 文件上传工具类</span><br><span class="line"> * @author: youcong</span><br><span class="line"> * @time: 2020/9/28 11:34</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import com.springcloud.blog.admin.exception.file.FileNameLengthLimitExceededException;</span><br><span class="line">import com.springcloud.blog.admin.exception.file.FileSizeLimitExceededException;</span><br><span class="line">import com.springcloud.blog.admin.exception.file.InvalidExtensionException;</span><br><span class="line">import com.springcloud.blog.admin.util.DateUtils;</span><br><span class="line">import com.springcloud.blog.admin.util.IdUtils;</span><br><span class="line">import com.springcloud.blog.admin.util.StringUtils;</span><br><span class="line">import org.apache.commons.fileupload.FileUploadBase;</span><br><span class="line">import org.apache.commons.io.FilenameUtils;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class FileUploadUtils &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 默认大小 50M</span><br><span class="line">     */</span><br><span class="line">    public static final long DEFAULT_MAX_SIZE = 50 * 1024 * 1024;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 默认的文件名最大长度 100</span><br><span class="line">     */</span><br><span class="line">    public static final int DEFAULT_FILE_NAME_LENGTH = 100;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 默认上传的地址</span><br><span class="line">     */</span><br><span class="line">    private static String defaultBaseDir = &quot;D://test//&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 资源映射路径 前缀</span><br><span class="line">     */</span><br><span class="line">    public static String resource_prefix = &quot;D://test//&quot;;</span><br><span class="line"></span><br><span class="line">    public static void setDefaultBaseDir(String defaultBaseDir) &#123;</span><br><span class="line">        FileUploadUtils.defaultBaseDir = defaultBaseDir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String getDefaultBaseDir() &#123;</span><br><span class="line">        return defaultBaseDir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 以默认配置进行文件上传</span><br><span class="line">     *</span><br><span class="line">     * @param file 上传的文件</span><br><span class="line">     * @return 文件名称</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static final String upload(MultipartFile file) throws IOException &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return upload(getDefaultBaseDir(), file, MimeTypeUtils.DEFAULT_ALLOWED_EXTENSION);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new IOException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 文件上传</span><br><span class="line">     *</span><br><span class="line">     * @param baseDir          相对应用的基目录</span><br><span class="line">     * @param file             上传的文件</span><br><span class="line">     * @param allowedExtension 上传文件类型</span><br><span class="line">     * @return 返回上传成功的文件名</span><br><span class="line">     * @throws FileSizeLimitExceededException       如果超出最大大小</span><br><span class="line">     * @throws FileNameLengthLimitExceededException 文件名太长</span><br><span class="line">     * @throws IOException                          比如读写文件出错时</span><br><span class="line">     * @throws InvalidExtensionException            文件校验异常</span><br><span class="line">     */</span><br><span class="line">    public static final String upload(String baseDir, MultipartFile file, String[] allowedExtension)</span><br><span class="line">            throws FileUploadBase.FileSizeLimitExceededException, IOException, FileNameLengthLimitExceededException,</span><br><span class="line">            InvalidExtensionException &#123;</span><br><span class="line">        int fileNamelength = file.getOriginalFilename().length();</span><br><span class="line">        if (fileNamelength &gt; FileUploadUtils.DEFAULT_FILE_NAME_LENGTH) &#123;</span><br><span class="line">            throw new FileNameLengthLimitExceededException(FileUploadUtils.DEFAULT_FILE_NAME_LENGTH);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        assertAllowed(file, allowedExtension);</span><br><span class="line"></span><br><span class="line">        String fileName = extractFilename(file);</span><br><span class="line"></span><br><span class="line">        File desc = getAbsoluteFile(baseDir, fileName);</span><br><span class="line">        file.transferTo(desc);</span><br><span class="line">        String pathFileName = getPathFileName(baseDir, fileName);</span><br><span class="line">        return pathFileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 编码文件名</span><br><span class="line">     */</span><br><span class="line">    public static final String extractFilename(MultipartFile file) &#123;</span><br><span class="line">        String fileName = file.getOriginalFilename();</span><br><span class="line">        String extension = getExtension(file);</span><br><span class="line">        fileName = DateUtils.datePath() + &quot;/&quot; + IdUtils.fastUUID() + &quot;.&quot; + extension;</span><br><span class="line">        return fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static final File getAbsoluteFile(String uploadDir, String fileName) throws IOException &#123;</span><br><span class="line">        File desc = new File(uploadDir + File.separator + fileName);</span><br><span class="line"></span><br><span class="line">        if (!desc.getParentFile().exists()) &#123;</span><br><span class="line">            desc.getParentFile().mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        if (!desc.exists()) &#123;</span><br><span class="line">            desc.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">        return desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static final String getPathFileName(String uploadDir, String fileName) throws IOException &#123;</span><br><span class="line">        int dirLastIndex = defaultBaseDir.length() + 1;</span><br><span class="line">        String currentDir = StringUtils.substring(uploadDir, dirLastIndex);</span><br><span class="line">        String pathFileName = resource_prefix + &quot;/&quot; + currentDir + &quot;/&quot; + fileName;</span><br><span class="line">        return pathFileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 文件大小校验</span><br><span class="line">     *</span><br><span class="line">     * @param file 上传的文件</span><br><span class="line">     * @return</span><br><span class="line">     * @throws FileSizeLimitExceededException 如果超出最大大小</span><br><span class="line">     * @throws InvalidExtensionException</span><br><span class="line">     */</span><br><span class="line">    public static final void assertAllowed(MultipartFile file, String[] allowedExtension)</span><br><span class="line">            throws FileSizeLimitExceededException, InvalidExtensionException &#123;</span><br><span class="line">        long size = file.getSize();</span><br><span class="line">        if (DEFAULT_MAX_SIZE != -1 &amp;&amp; size &gt; DEFAULT_MAX_SIZE) &#123;</span><br><span class="line">            throw new FileSizeLimitExceededException(DEFAULT_MAX_SIZE / 1024 / 1024);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String fileName = file.getOriginalFilename();</span><br><span class="line">        String extension = getExtension(file);</span><br><span class="line">        if (allowedExtension != null &amp;&amp; !isAllowedExtension(extension, allowedExtension)) &#123;</span><br><span class="line">            if (allowedExtension == MimeTypeUtils.IMAGE_EXTENSION) &#123;</span><br><span class="line">                throw new InvalidExtensionException.InvalidImageExtensionException(allowedExtension, extension,</span><br><span class="line">                        fileName);</span><br><span class="line">            &#125; else if (allowedExtension == MimeTypeUtils.FLASH_EXTENSION) &#123;</span><br><span class="line">                throw new InvalidExtensionException.InvalidFlashExtensionException(allowedExtension, extension,</span><br><span class="line">                        fileName);</span><br><span class="line">            &#125; else if (allowedExtension == MimeTypeUtils.MEDIA_EXTENSION) &#123;</span><br><span class="line">                throw new InvalidExtensionException.InvalidMediaExtensionException(allowedExtension, extension,</span><br><span class="line">                        fileName);</span><br><span class="line">            &#125; else if (allowedExtension == MimeTypeUtils.VIDEO_EXTENSION) &#123;</span><br><span class="line">                throw new InvalidExtensionException.InvalidVideoExtensionException(allowedExtension, extension,</span><br><span class="line">                        fileName);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                throw new InvalidExtensionException(allowedExtension, extension, fileName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断MIME类型是否是允许的MIME类型</span><br><span class="line">     *</span><br><span class="line">     * @param extension</span><br><span class="line">     * @param allowedExtension</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static final boolean isAllowedExtension(String extension, String[] allowedExtension) &#123;</span><br><span class="line">        for (String str : allowedExtension) &#123;</span><br><span class="line">            if (str.equalsIgnoreCase(extension)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取文件名的后缀</span><br><span class="line">     *</span><br><span class="line">     * @param file 表单文件</span><br><span class="line">     * @return 后缀名</span><br><span class="line">     */</span><br><span class="line">    public static final String getExtension(MultipartFile file) &#123;</span><br><span class="line">        String extension = FilenameUtils.getExtension(file.getOriginalFilename());</span><br><span class="line">        if (StringUtils.isEmpty(extension)) &#123;</span><br><span class="line">            extension = MimeTypeUtils.getExtension(file.getContentType());</span><br><span class="line">        &#125;</span><br><span class="line">        return extension;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="2fileutilsjava">2.FileUtils.java</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.util.file;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 文件处理工具类</span><br><span class="line"> *</span><br><span class="line"> * @author youcong</span><br><span class="line"> */</span><br><span class="line">public class FileUtils extends org.apache.commons.io.FileUtils &#123;</span><br><span class="line">    public static String FILENAME_PATTERN = &quot;[a-zA-Z0-9_\\-\\|\\.\\u4e00-\\u9fa5]+&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 输出指定文件的byte数组</span><br><span class="line">     *</span><br><span class="line">     * @param filePath 文件路径</span><br><span class="line">     * @param os       输出流</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static void writeBytes(String filePath, OutputStream os) throws IOException &#123;</span><br><span class="line">        FileInputStream fis = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            File file = new File(filePath);</span><br><span class="line">            if (!file.exists()) &#123;</span><br><span class="line">                throw new FileNotFoundException(filePath);</span><br><span class="line">            &#125;</span><br><span class="line">            fis = new FileInputStream(file);</span><br><span class="line">            byte[] b = new byte[1024];</span><br><span class="line">            int length;</span><br><span class="line">            while ((length = fis.read(b)) &gt; 0) &#123;</span><br><span class="line">                os.write(b, 0, length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw e;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (os != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; catch (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (fis != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; catch (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除文件</span><br><span class="line">     *</span><br><span class="line">     * @param filePath 文件</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static boolean deleteFile(String filePath) &#123;</span><br><span class="line">        boolean flag = false;</span><br><span class="line">        File file = new File(filePath);</span><br><span class="line">        // 路径为文件且不为空则进行删除</span><br><span class="line">        if (file.isFile() &amp;&amp; file.exists()) &#123;</span><br><span class="line">            file.delete();</span><br><span class="line">            flag = true;</span><br><span class="line">        &#125;</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 文件名称验证</span><br><span class="line">     *</span><br><span class="line">     * @param filename 文件名称</span><br><span class="line">     * @return true 正常 false 非法</span><br><span class="line">     */</span><br><span class="line">    public static boolean isValidFilename(String filename) &#123;</span><br><span class="line">        return filename.matches(FILENAME_PATTERN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 下载文件名重新编码</span><br><span class="line">     *</span><br><span class="line">     * @param request  请求对象</span><br><span class="line">     * @param fileName 文件名</span><br><span class="line">     * @return 编码后的文件名</span><br><span class="line">     */</span><br><span class="line">    public static String setFileDownloadHeader(HttpServletRequest request, String fileName)</span><br><span class="line">            throws UnsupportedEncodingException &#123;</span><br><span class="line">        final String agent = request.getHeader(&quot;USER-AGENT&quot;);</span><br><span class="line">        String filename = fileName;</span><br><span class="line">        if (agent.contains(&quot;MSIE&quot;)) &#123;</span><br><span class="line">            // IE浏览器</span><br><span class="line">            filename = URLEncoder.encode(filename, &quot;utf-8&quot;);</span><br><span class="line">            filename = filename.replace(&quot;+&quot;, &quot; &quot;);</span><br><span class="line">        &#125; else if (agent.contains(&quot;Firefox&quot;)) &#123;</span><br><span class="line">            // 火狐浏览器</span><br><span class="line">            filename = new String(fileName.getBytes(), &quot;ISO8859-1&quot;);</span><br><span class="line">        &#125; else if (agent.contains(&quot;Chrome&quot;)) &#123;</span><br><span class="line">            // google浏览器</span><br><span class="line">            filename = URLEncoder.encode(filename, &quot;utf-8&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 其它浏览器</span><br><span class="line">            filename = URLEncoder.encode(filename, &quot;utf-8&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return filename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="3mimetypeutilsjava">3.MimeTypeUtils.java</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.util.file;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:</span><br><span class="line"> * @author: youcong</span><br><span class="line"> * @time: 2020/9/28 11:37</span><br><span class="line"> */</span><br><span class="line">public class MimeTypeUtils &#123;</span><br><span class="line">    public static final String IMAGE_PNG = &quot;image/png&quot;;</span><br><span class="line"></span><br><span class="line">    public static final String IMAGE_JPG = &quot;image/jpg&quot;;</span><br><span class="line"></span><br><span class="line">    public static final String IMAGE_JPEG = &quot;image/jpeg&quot;;</span><br><span class="line"></span><br><span class="line">    public static final String IMAGE_BMP = &quot;image/bmp&quot;;</span><br><span class="line"></span><br><span class="line">    public static final String IMAGE_GIF = &quot;image/gif&quot;;</span><br><span class="line"></span><br><span class="line">    public static final String[] IMAGE_EXTENSION = &#123;&quot;bmp&quot;, &quot;gif&quot;, &quot;jpg&quot;, &quot;jpeg&quot;, &quot;png&quot;&#125;;</span><br><span class="line"></span><br><span class="line">    public static final String[] FLASH_EXTENSION = &#123;&quot;swf&quot;, &quot;flv&quot;&#125;;</span><br><span class="line"></span><br><span class="line">    public static final String[] MEDIA_EXTENSION = &#123;&quot;swf&quot;, &quot;flv&quot;, &quot;mp3&quot;, &quot;wav&quot;, &quot;wma&quot;, &quot;wmv&quot;, &quot;mid&quot;, &quot;avi&quot;, &quot;mpg&quot;,</span><br><span class="line">            &quot;asf&quot;, &quot;rm&quot;, &quot;rmvb&quot;&#125;;</span><br><span class="line"></span><br><span class="line">    public static final String[] VIDEO_EXTENSION = &#123;&quot;mp4&quot;, &quot;avi&quot;, &quot;rmvb&quot;&#125;;</span><br><span class="line"></span><br><span class="line">    public static final String[] DEFAULT_ALLOWED_EXTENSION = &#123;</span><br><span class="line">            // 图片</span><br><span class="line">            &quot;bmp&quot;, &quot;gif&quot;, &quot;jpg&quot;, &quot;jpeg&quot;, &quot;png&quot;,</span><br><span class="line">            // word excel powerpoint</span><br><span class="line">            &quot;doc&quot;, &quot;docx&quot;, &quot;xls&quot;, &quot;xlsx&quot;, &quot;ppt&quot;, &quot;pptx&quot;, &quot;html&quot;, &quot;htm&quot;, &quot;txt&quot;,</span><br><span class="line">            // 压缩文件</span><br><span class="line">            &quot;rar&quot;, &quot;zip&quot;, &quot;gz&quot;, &quot;bz2&quot;,</span><br><span class="line">            // 视频格式</span><br><span class="line">            &quot;mp4&quot;, &quot;avi&quot;, &quot;rmvb&quot;,</span><br><span class="line">            // pdf</span><br><span class="line">            &quot;pdf&quot;&#125;;</span><br><span class="line"></span><br><span class="line">    public static String getExtension(String prefix) &#123;</span><br><span class="line">        switch (prefix) &#123;</span><br><span class="line">            case IMAGE_PNG:</span><br><span class="line">                return &quot;png&quot;;</span><br><span class="line">            case IMAGE_JPG:</span><br><span class="line">                return &quot;jpg&quot;;</span><br><span class="line">            case IMAGE_JPEG:</span><br><span class="line">                return &quot;jpeg&quot;;</span><br><span class="line">            case IMAGE_BMP:</span><br><span class="line">                return &quot;bmp&quot;;</span><br><span class="line">            case IMAGE_GIF:</span><br><span class="line">                return &quot;gif&quot;;</span><br><span class="line">            default:</span><br><span class="line">                return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="4fileexceptionjava">4.FileException.java</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.exception.file;</span><br><span class="line"></span><br><span class="line">import com.springcloud.blog.admin.exception.BaseException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description: 文件信息异常类</span><br><span class="line"> * @author: youcong</span><br><span class="line"> * @time: 2020/9/28 11:41</span><br><span class="line"> */</span><br><span class="line">public class FileException extends BaseException &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    public FileException(String code, Object[] args) &#123;</span><br><span class="line">        super(&quot;file&quot;, code, args, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="5filenamelengthlimitexceededexceptionjava">5.FileNameLengthLimitExceededException.java</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.exception.file;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:文件名称超长限制异常类</span><br><span class="line"> * @author: youcong</span><br><span class="line"> * @time: 2020/9/28 11:41</span><br><span class="line"> */</span><br><span class="line">public class FileNameLengthLimitExceededException extends FileException &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    public FileNameLengthLimitExceededException(int defaultFileNameLength) &#123;</span><br><span class="line">        super(&quot;upload.filename.exceed.length&quot;, new Object[]&#123;defaultFileNameLength&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="6filesizelimitexceededexceptionjava">6.FileSizeLimitExceededException.java</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.exception.file;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description: 文件名大小限制异常类</span><br><span class="line"> * @author: youcong</span><br><span class="line"> * @time: 2020/9/28 11:42</span><br><span class="line"> */</span><br><span class="line">public class FileSizeLimitExceededException extends FileException &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    public FileSizeLimitExceededException(long defaultMaxSize) &#123;</span><br><span class="line">        super(&quot;upload.exceed.maxSize&quot;, new Object[]&#123;defaultMaxSize&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="7invalidextensionexceptionjava">7.InvalidExtensionException.java</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.exception.file;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description: 文件上传错误异常类</span><br><span class="line"> * @author: youcong</span><br><span class="line"> * @time: 2020/9/28 11:42</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import org.apache.commons.fileupload.FileUploadException;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class InvalidExtensionException extends FileUploadException &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    private String[] allowedExtension;</span><br><span class="line">    private String extension;</span><br><span class="line">    private String filename;</span><br><span class="line"></span><br><span class="line">    public InvalidExtensionException(String[] allowedExtension, String extension, String filename) &#123;</span><br><span class="line">        super(&quot;filename : [&quot; + filename + &quot;], extension : [&quot; + extension + &quot;], allowed extension : [&quot; + Arrays.toString(allowedExtension) + &quot;]&quot;);</span><br><span class="line">        this.allowedExtension = allowedExtension;</span><br><span class="line">        this.extension = extension;</span><br><span class="line">        this.filename = filename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String[] getAllowedExtension() &#123;</span><br><span class="line">        return allowedExtension;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getExtension() &#123;</span><br><span class="line">        return extension;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getFilename() &#123;</span><br><span class="line">        return filename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class InvalidImageExtensionException extends InvalidExtensionException &#123;</span><br><span class="line">        private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">        public InvalidImageExtensionException(String[] allowedExtension, String extension, String filename) &#123;</span><br><span class="line">            super(allowedExtension, extension, filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class InvalidFlashExtensionException extends InvalidExtensionException &#123;</span><br><span class="line">        private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">        public InvalidFlashExtensionException(String[] allowedExtension, String extension, String filename) &#123;</span><br><span class="line">            super(allowedExtension, extension, filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class InvalidMediaExtensionException extends InvalidExtensionException &#123;</span><br><span class="line">        private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">        public InvalidMediaExtensionException(String[] allowedExtension, String extension, String filename) &#123;</span><br><span class="line">            super(allowedExtension, extension, filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class InvalidVideoExtensionException extends InvalidExtensionException &#123;</span><br><span class="line">        private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">        public InvalidVideoExtensionException(String[] allowedExtension, String extension, String filename) &#123;</span><br><span class="line">            super(allowedExtension, extension, filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="8baseexceptionjava">8.BaseException.java</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.exception;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 基础异常</span><br><span class="line"> *</span><br><span class="line"> * @author youcong</span><br><span class="line"> */</span><br><span class="line">public class BaseException extends RuntimeException &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 所属模块</span><br><span class="line">     */</span><br><span class="line">    private String module;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 错误码</span><br><span class="line">     */</span><br><span class="line">    private String code;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 错误码对应的参数</span><br><span class="line">     */</span><br><span class="line">    private Object[] args;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 错误消息</span><br><span class="line">     */</span><br><span class="line">    private String defaultMessage;</span><br><span class="line"></span><br><span class="line">    public BaseException(String module, String code, Object[] args, String defaultMessage) &#123;</span><br><span class="line">        this.module = module;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.args = args;</span><br><span class="line">        this.defaultMessage = defaultMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BaseException(String module, String code, Object[] args) &#123;</span><br><span class="line">        this(module, code, args, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BaseException(String module, String defaultMessage) &#123;</span><br><span class="line">        this(module, null, null, defaultMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BaseException(String code, Object[] args) &#123;</span><br><span class="line">        this(null, code, args, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BaseException(String defaultMessage) &#123;</span><br><span class="line">        this(null, null, null, defaultMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getModule() &#123;</span><br><span class="line">        return module;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object[] getArgs() &#123;</span><br><span class="line">        return args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDefaultMessage() &#123;</span><br><span class="line">        return defaultMessage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="二-单文件上传代码">二、单文件上传代码</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/post/uploadFile&quot;)</span><br><span class="line">@ApiOperation(&quot;文章上传特色图片&quot;)</span><br><span class="line">public ResponseBaseDTO&lt;String&gt; uploadFile(@RequestParam(&quot;file&quot;) MultipartFile file) &#123;</span><br><span class="line">    logger.info(&quot;/post/uploadFile&quot;);</span><br><span class="line">    try &#123;</span><br><span class="line"></span><br><span class="line">        String fileUrl = FileUploadUtils.upload(file);</span><br><span class="line">        if (fileUrl != null) &#123;</span><br><span class="line">            return ResponseBaseDTO.createSuccResp(fileUrl);</span><br><span class="line">        &#125;</span><br><span class="line">        return ResponseBaseDTO.createFailResp(fileUrl);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        logger.error(&quot;/post/uploadFile&quot;, e);</span><br><span class="line">        return ResponseBaseDTO.createFailResp(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="三-多文件上传代码">三、多文件上传代码</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/batchImportsUsers&quot;)</span><br><span class="line">@ApiOperation(&quot;批量导入用户数据小时&quot;)</span><br><span class="line">public ResponseBaseDTO&lt;String&gt; batchImportsUsers(MultipartFile[] uploadFiles) &#123;</span><br><span class="line">    if (uploadFiles.length &gt; 0) &#123;</span><br><span class="line">        for (int i = 0; i &lt; uploadFiles.length; i++) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                importUserExcelData(uploadFiles[i]);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ResponseBaseDTO.createSuccResp();</span><br><span class="line">    &#125;</span><br><span class="line">    return ResponseBaseDTO.createFailResp(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板引擎的思考</title>
      <link href="/2021/05/23/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2021/05/23/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-什么是模板引擎">一、什么是模板引擎？</span></h2><p>模板引擎是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的文档<br>(模板文件和数据通过模板引擎生成一个HTML代码)。<br><img src="https://upload-images.jianshu.io/upload_images/8707272-8346cf5c4b91b284.png?imageMogr2/auto-orient/strip|imageView2/2/w/871/format/webp" alt=""><br><a id="more"></a></p><h2><span id="二-为什么要使用模板引擎">二、为什么要使用模板引擎？</span></h2><p><strong>这里分为两个方面解释:</strong><br>第一个方面，以Java为例，那个时候前后端分离的思想还未到现在如此普及，后端开发人员一般都要身兼数职，一般除了写后端代码之外，还得写前端代码，为了提高开发人员的效率，通常在后端项目会引入模板引擎，最常见的就是jsp、freemarker等。<br>第二个方面，代码生成器，例如若衣、人人开源、Jeesite4、Jeecg等开源项目均带有代码生成器，代码生成器的原理就是基于模板引擎，将公共的东西转换为模板，减去人工手动复制和编写的成本，提高研发效率，一般来说，这种方式适用于另类的前后端分离(后端代码+前端代码仍然在一块，只不过后端做专注与业务数据处理，前端仅仅是渲染)。</p><h2><span id="三-模板引擎的优缺点有哪些">三、模板引擎的优缺点有哪些？</span></h2><p>Java中常用的模板引擎分别为JSP、FreeMarker、Velocity、Thymeleaf等。</p><h3><span id="1jsp">1.JSP</span></h3><h4><span id="1优点">(1)优点</span></h4><ul><li>功能强大可编写Java代码；</li><li>支持JSP标签；</li><li>支持表达式语言；</li><li>官方标准，用户群广，丰富的第三方jsp标签库；</li><li>性能良好。jsp编译成class文件执行，有很好的性能表现。</li></ul><h4><span id="2缺点">(2)缺点</span></h4><p>一旦使用不当会很容易破坏MVC结构。</p><h3><span id="2freemarker">2.FreeMarker</span></h3><h4><span id="1优点">(1)优点</span></h4><ul><li>不能编写Java代码，可实现严格的MVC模式；</li><li>对JSP标签支持良好；</li><li>内置大量常用功能；</li><li>宏定义(类似jsp标签)非常方便；</li><li>使用表达式语言。</li></ul><h4><span id="2缺点">(2)缺点</span></h4><ul><li>非官方标准；</li><li>用户群体和第三方标签库没有jsp多。</li></ul><h3><span id="3velocity">3.Velocity</span></h3><h4><span id="1优点">(1)优点</span></h4><ul><li>不能编写Java代码，可实现严格的MVC模式；</li><li>性能良好；</li><li>使用表达式语言。</li></ul><h4><span id="2缺点">(2)缺点</span></h4><ul><li>非官方标准；</li><li>用户群体和第三方标签库没有jsp多；</li><li>对jsp标签支持不友好。</li></ul><h3><span id="4thymeleaf">4.Thymeleaf</span></h3><h4><span id="1优点">(1)优点</span></h4><ul><li>静态html嵌入标签属性，浏览器可以直接打开模板文件，便于前后端联调；</li><li>springboot官方推荐方案。</li></ul><h4><span id="2缺点">(2)缺点</span></h4><ul><li>模板必须符合xml规范。</li></ul><p>上面的四种模板引擎我均使用过，在创业公司做的第一个智能酒店管理系统就是采用jsp作为模板引擎，对我在创业公司经历感兴趣的朋友或者打算创业以及已经创业的朋友都可以读读这篇文章:<br><a href="https://mp.weixin.qq.com/s?__biz=MzUxODk0ODQ3Ng==&amp;mid=2247485439&amp;idx=1&amp;sn=201a791086509ae93a29a669e8d402be&amp;chksm=f98054eccef7ddfac7c6b7d30d40b33a1044cc702850cadf1ee2b0a9b3caca551f56779c719b&amp;token=1979555451&amp;lang=zh_CN#rd" target="_blank" rel="noopener">一位北漂在创业公司的两年</a></p><p>至于freemarker以及volocity、thymeleaf均在我个人博客系统中实践过。</p><h2><span id="四-模板引擎的应用场景有哪些">四、模板引擎的应用场景有哪些？</span></h2><ul><li>代码生成器(源代码生成)；</li><li>Web应用开发。</li></ul><h2><span id="五-总结">五、总结</span></h2><p>无论技术怎么演变，新的诞生，旧的逐渐消亡，但其本质还是不变。<br>如Java中的Jsp、Vecotiy、Freemarker、Thymeleaf和前端三大流行框架中的Vue.js、React.js、Angular.js，它们最终的本质均为HTML-DOM(超文本标记语言-文档对象模型）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术思考与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库被删之反思</title>
      <link href="/2021/05/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A2%AB%E5%88%A0%E4%B9%8B%E5%8F%8D%E6%80%9D/"/>
      <url>/2021/05/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A2%AB%E5%88%A0%E4%B9%8B%E5%8F%8D%E6%80%9D/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-数据库为什么会被删">一、数据库为什么会被删？</span></h2><p>同事小L最近负责整理数据库初始化脚本，在导出演示环境的数据库脚本后，在另外的服务器上执行该数据库脚本，最后由于操作的时候打开的窗口过多，没有注意到环境，当时他打开了很多窗口，有演示环境，也有自己试验环境，也有开发环境，一堆窗口，最后执行的时候发现执行错了，将演示环境给干掉了，演示环境有我们大量的数据，主要用于给客户演示用的，数据非常重要。</p><a id="more"></a><h2><span id="二-数据库被删后第一时间采取的措施是什么">二、数据库被删后，第一时间采取的措施是什么？</span></h2><p>数据库被删后，第一时间采取的措施是想办法恢复，但由于binlog未开启以及定时备份数据库脚本也没有，最后无法恢复，只得经理采取一些措施来解决这个问题了。</p><h2><span id="三-我的反思以及从中发现存在哪些问题">三、我的反思以及从中发现存在哪些问题？</span></h2><p>虽然说直接责任人并不是我，但我对此也有一定的间接责任。<br>这次删库事件我发现最大的问题就是数据库安全策略做的不够全面。数据库安全策略包含物理安全、访问控制、数据备份等。</p><h3><span id="1物理安全">1.物理安全</span></h3><p>物理安全是安全防范的基本，主要是指保证数据库服务器、数据库所在环境、相关网络的物理安全性。</p><h3><span id="2访问控制">2.访问控制</span></h3><p>访问控制是基本安全性的核心。它包括了帐号管理、密码策略、权限控制、用户认证等方面，主要是从与帐号相关的方面来维护数据库的安全性。</p><h3><span id="3数据备份">3.数据备份</span></h3><p>定期的进行数据备份是减少数据损失的有效手段，能让数据库遭到破坏(恶意或者误操作)后，恢复数据资源。这也是数据库安全策略的一个重要部分。</p><p>这次问题主要出在访问控制和数据备份上面。访问控制没有做好，导致开发人员人人都能对演示环境(演示环境等同于生产环境)、测试环境、开发环境的数据库进行库的CRUD以及库中的表CRUD等。通常来说，数据库以及数据库中的表以及具体字段不能随意进行添加、删除、修改等，特别是对于等同于生产环境的演示环境。</p><p>访问控制只是数据库安全策略的一种手段，但这种手段还需与数据备份相结合，才能称的上是双重保障。</p><h2><span id="四-针对发现的问题我的解决办法是什么">四、针对发现的问题我的解决办法是什么？</span></h2><p>针对访问控制层面，我的解决办法是:<br>以演示环境(等同于生产环境)为例，<strong>限制数据库为内网访问且对应的用户只能访问所授权的数据库</strong>，命令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON 数据库名称.* TO &apos;数据库特定用户&apos;@&apos;192.168.52.317&apos; IDENTIFIED BY &apos;数据库特定用户密码&apos; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">EXIT;</span><br></pre></td></tr></table></figure></p><p>如果其它微服务需要连接该数据库但又处于不同的服务器环境下，也可通过上面ip进行控制，只不过需要新建对应的用户。</p><p>因为一些需求可能需要公网访问该数据库，也可以采取上面的措施进行，目的是为了更精细化的控制权限。</p><p>也许有人觉得敲命令来控制似乎很麻烦，别担心，有一个工具就已经替我们解决了这个问题(数据库访问控制)，那就是phpmyadmin。<br>关于Linux配置安装phpmyadmin，可以参考我写的如下文章:<br><a href="https://www.cnblogs.com/youcong/p/8645001.html" target="_blank" rel="noopener">Ubuntu16.04下安装配置phpmyadmin</a><br><a href="https://www.cnblogs.com/youcong/p/10703478.html" target="_blank" rel="noopener">nginx上配置phpmyadmin</a><br><a href="https://www.cnblogs.com/youcong/p/9240603.html" target="_blank" rel="noopener">centos7之安装wordpress（虽然是安装wordpress，不过这里用到的是在phpmyadmin里建库以及添加用户授权等）</a></p><p>针对数据备份层面，我的解决办法是两个:<br>第一个，<strong>定期备份</strong>，脚本自动化备份(需结合定时任务)，感兴趣的朋友可以阅读我的这篇文章:<a href="https://www.cnblogs.com/youcong/p/9240618.html" target="_blank" rel="noopener">mysql常用备份命令和shell备份脚本</a><br>，<br>为防止万一加一个定期打包备份的sql脚本并远程传输到另外一台服务器上面，关于远程压缩传输文件可以参考我的这篇文章:<br><a href="https://www.cnblogs.com/youcong/p/10809056.html" target="_blank" rel="noopener">Linux远程传输文件免密码</a><br><a href="https://www.cnblogs.com/youcong/p/9762451.html" target="_blank" rel="noopener">Linux关于压缩和解压缩实例</a><br>。<br>第二个，<strong>实时备份</strong>，从数据库本身入手，开启binlog。<br>在my.conf配置如下即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 开启binlog</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">server-id=1</span><br><span class="line">binlog_format=ROW</span><br></pre></td></tr></table></figure></p><p>修改完配置记得重启mysql。<br>登录mysql查看binlog是否开启，执行如下命令即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;log_%&apos;;</span><br></pre></td></tr></table></figure></p><p>效果图如下(说明binlog已开启):<br><img src="/2021/05/22/数据库被删之反思/01.png" alt=""></p><p>就目前来说，我已经落地了两个，一个是实时备份(开启binlog)，另外一个是定时备份(结合脚本和定时任务)。</p><h2><span id="五-总结">五、总结</span></h2><p>不经意间想起了欧阳修写的《五代史伶官传序》其中有一句我印象很深刻，”夫祸患常积于忽微，而智勇多困于所溺”。在此之前已经就有了一个前车之鉴，一位Java同事的阿里云服务器因数据库密码过于简单被黑客绑架(需要花比特币才能赎回)，当时针对此我采取了一些措施，但措施并不全面，这次删库事件或许就是来自之前的警告。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式配置中心之思考</title>
      <link href="/2021/05/22/%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%B9%8B%E6%80%9D%E8%80%83/"/>
      <url>/2021/05/22/%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%B9%8B%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-为什么需要分布式配置中心它能解决什么问题">一、为什么需要分布式配置中心？它能解决什么问题？</span></h2><p>从解决问题层面进行切入，它能解决配置混乱难管理的问题。<br><a id="more"></a></p><p>过去传统式开发，一个SSM框架开发的单体应用通常会有如下配置:</p><ul><li>spring-mybatis.xml；</li><li>spring-mvc.xml；</li><li>mybatis.xml；</li><li>web.xml；</li><li>jdbc.properties；</li><li>log4j.properties；</li><li>spring-redis.xml；</li><li>spring-mongodb.xml；</li><li>mapper目录下有若干xml。</li></ul><p>当这个单体应用因为某种原因(新来的架构师按照微服务的方式进行重构以及拆分(逐步开展)、项目经理为了新的需求-新建项目(一般老项目不能轻易动，保险起见)等)，这个时候就涉及到一个问题，新的项目目录结构与原来的可能一致，但配置文件基本上相同，这时将老项目的配置文件复制到新的项目，除非新的项目采取新的技术，否则仍然按照之前老项目的规范来，这个场景相信不少的朋友都遇到过。假如是两三个项目还好，如果这时要拆分为七八个甚至二十个，那么这样的工作将非常繁琐，同时维护上会很困难(稍不留神漏掉一个，最后一上线发现数据不对，原来连的还是开发环境的数据库，这时只得重新部署)。由此看来，分布式配置中心的主要作用<strong>在于对配置文件的统一管理，减少重复性工作，提高整体研发团队的效率(开发、测试、运维等)</strong>。<br>除此外统一管理体现的好处有<strong>安全性</strong>(可采用某种加密的方式进行关键配置数据加密，同时过去配置在代码里，如果代码被人反编译破解就可能导致密码之类的东西被泄漏等)、<strong>时效性</strong>(从两个方面来说，第一个方面是修改后重启才能生效，第二个是当时修改即刻生效)。<br>归纳地概括，因为多个项目场景中面临配置文件过于分散、修改追根溯源困难、环境容易搞混、代码与配置文件耦合等问题，我们需要分布式配置中心，而分布式配置中心恰好就能解决这样的问题。</p><h2><span id="二-分布式配置中心在实际中会面临哪些问题">二、分布式配置中心在实际中会面临哪些问题？</span></h2><p>以Nacos为例，目前我使用Nacos作为分布式服务注册中心，而Nacos恰好集成了分布式配置管理。Nacos中的配置管理，就是管理配置文件的，而这些配置文件内容存储在MySQL。如果MySQL遭遇一些意外如磁盘空间满了、黑客攻击、连接过多、低效率的SQL导致内存消耗极大等，那么Nacos也会处于挂掉或死机状态(停止服务)等，这样也会直接导致一些微服务处理故障，虽然不在一个服务器上或者是连接的业务数据库不一样，但共同点都是读取Nacos统一管理下的配置。<em>针对这样的问题一般从三个方面入手:</em></p><ul><li>第一个方面，运维从监控策略(提前预警，做好应对)、服务器安全策略(防止攻击)、服务可用性策略(包含集群)等；</li><li>第二个方面，开发从写代码入手，遵守规范(代码规范)，逻辑严谨(程序逻辑考虑较为全面)，合理调用API(明白每个API的优缺点，进行合理组装，避免性能瓶颈)等；</li><li>第三个方面，测试从性能测试入手，模拟多人使用或非法攻击的场景等。</li></ul><p>上面列举的仅仅是配置中心在实际落中面临的重大问题之一，除此之外还有就是如何规范管理配置(因为并不是所有的配置都需要放到配置中心进行统一管理，如果所有的微服务配置均放到分布式配置中心来管理，那么也会面临一个大问题就是如何管理好这些配置，一旦管理不好，就可能变成了体力劳动，违背了分布式配置中心的初衷)。</p><p>在提到规范管理之前，回到一个问题上，这个问题是究竟什么样的配置文件应该放在分布式配置中心？<br>我的回答是<strong>通用性配置</strong>，以我博客为例，application-dev.yml配置内容(我将jwt和鉴权、ribbon、hystrix等通用性配置放入了Nacos的配置管理):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># JWT配置</span><br><span class="line">jwt:</span><br><span class="line">  # 密匙KEY</span><br><span class="line">  secret: JWTSecret</span><br><span class="line">  # HeaderKEY</span><br><span class="line">  tokenHeader: Authorization</span><br><span class="line">  # Token前缀字符</span><br><span class="line">  tokenPrefix: challenger-</span><br><span class="line">  # 过期时间 单位秒 1天后过期=86400 7天后过期=604800</span><br><span class="line">  expiration: 86400</span><br><span class="line">  # 配置不需要认证的接口</span><br><span class="line">  antMatchers: /login/**,/user/register,/api-doc/**,/login/**,/favicon.ico,/doc.html,/webjars/**,/swagger-resources,/v2/api-docs/**,/druid/**,/cnblogs/**,/user/**</span><br><span class="line">  # 有效时间</span><br><span class="line">  validTime: 7</span><br><span class="line">ribbon:</span><br><span class="line">  okhttp:</span><br><span class="line">    enabled: true #</span><br><span class="line">  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule # 默认为；轮询，这里改为随机</span><br><span class="line">  ConnectTimeout: 5000 # 连接超时时间(ms)</span><br><span class="line">  ReadTimeout: 5000 # 通信超时时间(ms)</span><br><span class="line">hystrix:</span><br><span class="line">  enabled: true</span><br><span class="line">  command:</span><br><span class="line">    default:</span><br><span class="line">      execution:</span><br><span class="line">        isolation:</span><br><span class="line">          thread:</span><br><span class="line">            timeoutInMilliseconds: 6000 #</span><br></pre></td></tr></table></figure></p><p>那么在规范性方面该如何落地？这与公司的实际情况有关，每家公司的业务、研发团队的综合素质等均存在差异性，而在规范性上就需要找到适合该公司研发团队的。但适合很难，都是从坑坑洼洼中摸索出来的。</p><p><em>以我个人经验来看(结合近来的坑)，从以下入手:</em></p><ul><li><strong>通用性配置管理</strong>，公共通用性配置文件和业务通用性配置文件，放入分布式配置中心进行管理；</li><li><strong>分类配置管理</strong>，不同环境(dev、test、prod)放入不同的分布式配置中心进行管理；</li><li><strong>差异性配置管理</strong>，差异性配置文件放入具体的微服务项目，衡量差异性的标准是该配置只在此处用到，其它微服务均不涉及。</li></ul><h2><span id="三-分布式配置中心的技术选型">三、分布式配置中心的技术选型</span></h2><p>关于这一方面，我特别查阅了相关资料，有博友将分布式配置中心的技术选型归纳为如下:</p><ul><li>Disconf；</li><li>Spring Cloud Config；</li><li>Apollo；</li><li>Nacos。</li></ul><p>目前用的比较多的，一个是SpringCloud Config，相当于是SpringCloud原生自带，不过该分布式配置中心的存储主要为SVN和Git，也有部分人采用本地存储的方式(存储在某个服务器上)，另一个是Apollo，然后就是Nacos，至于Disconf早就不维护了，相当于落伍，GitHub如图:<br><img src="/2021/05/22/分布式配置中心之思考/02.png" alt=""></p><p>对于早就不维护的，一般技术选型不考虑，关于技术选型需要考虑哪些东西，感兴趣的朋友可以阅读我的这篇文章:<br><a href="https://youcongtech.com/2021/04/17/%E4%BB%8E%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E5%88%B0%E5%88%86%E5%B8%83%E5%BC%8F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84%E6%80%9D%E8%80%83/" target="_blank" rel="noopener">从单体架构到分布式微服务架构的思考</a></p><h2><span id="四-springcloud-alibaba之分布式配置中心整合以nacos作为分布式配置中心">四、SpringCloud Alibaba之分布式配置中心整合(以Nacos作为分布式配置中心)</span></h2><h3><span id="1添加maven依赖">1.添加Maven依赖</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- SpringCloud Ailibaba Nacos Config --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3><span id="2bootstrapyml配置">2.bootstrap.yml配置</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cloud:</span><br><span class="line">   nacos:</span><br><span class="line">     discovery:</span><br><span class="line">       # 服务注册地址</span><br><span class="line">       server-addr: 127.0.0.1:8848</span><br><span class="line">     config:</span><br><span class="line">       # 配置中心地址</span><br><span class="line">       server-addr: 127.0.0.1:8848</span><br><span class="line">       # 配置文件格式</span><br><span class="line">       file-extension: yml</span><br><span class="line">       # 共享配置</span><br><span class="line">       shared-dataids: application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span><br></pre></td></tr></table></figure><h3><span id="3例子">3.例子</span></h3><h4><span id="1通过nacos新建一个配置文件">(1)通过nacos新建一个配置文件</span></h4><p><img src="/2021/05/22/分布式配置中心之思考/01.png" alt=""></p><h4><span id="2bootstrapyml配置">(2)bootstrap.yml配置</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cloud:</span><br><span class="line">   nacos:</span><br><span class="line">     discovery:</span><br><span class="line">       # 服务注册地址</span><br><span class="line">       server-addr: 127.0.0.1:8848</span><br><span class="line">     config:</span><br><span class="line">       # 配置中心地址</span><br><span class="line">       server-addr: 127.0.0.1:8848</span><br><span class="line">       # 配置文件格式</span><br><span class="line">       file-extension: yml</span><br><span class="line">       # 共享配置</span><br><span class="line">       shared-dataids: blog.properties,application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span><br></pre></td></tr></table></figure><h4><span id="3代码读取">(3)代码读取</span></h4><h5><span id="aenvironment读取">a.Environment读取</span></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private Environment env</span><br><span class="line"></span><br><span class="line">env.getProperty(&quot;api_url&quot;)</span><br></pre></td></tr></table></figure><h5><span id="b注解读取">b.注解读取</span></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Value(&quot;$&#123;api_url&#125;&quot;)</span><br><span class="line">private String apiUrl;</span><br></pre></td></tr></table></figure><h4><span id="4如果想实时更新的话需要配置两个地方两者缺一不可nacos版本为131">(4)如果想实时更新的话需要配置两个地方(两者缺一不可，nacos版本为1.3.1)</span></h4><h5><span id="a配置文件">a.配置文件</span></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cloud:</span><br><span class="line">  nacos:</span><br><span class="line">    discovery:</span><br><span class="line">      # 服务注册地址</span><br><span class="line">      server-addr: 127.0.0.1:8848</span><br><span class="line">    config:</span><br><span class="line">      # 配置中心地址</span><br><span class="line">      server-addr: 127.0.0.1:8848</span><br><span class="line">      # 配置文件格式</span><br><span class="line">      file-extension: yml</span><br><span class="line">      # 共享配置</span><br><span class="line">      shared-dataids: application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;,blog.properties</span><br><span class="line">      refresh-enabled: true</span><br><span class="line">      refreshable-dataids: blog.properties</span><br></pre></td></tr></table></figure><h5><span id="b注解">b.注解</span></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@RefreshScope</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之特殊字符过滤处理</title>
      <link href="/2021/05/16/Java%E4%B9%8B%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E8%BF%87%E6%BB%A4%E5%A4%84%E7%90%86/"/>
      <url>/2021/05/16/Java%E4%B9%8B%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E8%BF%87%E6%BB%A4%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>核心方法如下(结合正则表达式和Matcher的方法进行替换):<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static String strSpecialFilter(String str) &#123;</span><br><span class="line">    String regEx = &quot;[\\u00A0\\s\&quot;`~!@#$%^&amp;*()+=|&#123;&#125;&apos;:;&apos;,\\[\\].&lt;&gt;/?~！@#￥%……&amp;*（）——+|&#123;&#125;【】‘；：”“’。，、？]&quot;;</span><br><span class="line">    Pattern p = Pattern.compile(regEx);</span><br><span class="line">    Matcher m = p.matcher(str);</span><br><span class="line">    //将所有的特殊字符替换为空字符串</span><br><span class="line">    return m.replaceAll(&quot;&quot;).trim();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7如何卸载自带OpenJDK</title>
      <link href="/2021/05/16/CentOS7%E5%A6%82%E4%BD%95%E5%8D%B8%E8%BD%BD%E8%87%AA%E5%B8%A6OpenJDK/"/>
      <url>/2021/05/16/CentOS7%E5%A6%82%E4%BD%95%E5%8D%B8%E8%BD%BD%E8%87%AA%E5%B8%A6OpenJDK/</url>
      
        <content type="html"><![CDATA[<p>开发版的CentOS7.x一般自带OpenJDK,通常我们用商业版的Oracle JDK，这就需要将CentOS7.x自带的OpenJDK进行卸载。那么该如何卸载呢？</p><a id="more"></a><h2><span id="1首先通过命令获取默认安装的openjdk">1.首先，通过命令获取默认安装的OpenJDK</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep java</span><br></pre></td></tr></table></figure><h2><span id="2其次执行删除1中列出的jdk">2.其次，执行删除1中列出的jdk</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps 需要删除的OpenJDK名称</span><br></pre></td></tr></table></figure><p>例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps java-1.8.0-openjdk-1.8.0.191.b12-0.el7_5.x86_64</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正版office产品密钥-激活码</title>
      <link href="/2021/05/16/%E6%AD%A3%E7%89%88office%E4%BA%A7%E5%93%81%E5%AF%86%E9%92%A5-%E6%BF%80%E6%B4%BB%E7%A0%81/"/>
      <url>/2021/05/16/%E6%AD%A3%E7%89%88office%E4%BA%A7%E5%93%81%E5%AF%86%E9%92%A5-%E6%BF%80%E6%B4%BB%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p><strong>正版office产品密钥 office激活码 office2019永久激活:</strong><br><a href="https://www.win7w.com/win10jihuo/26107.html" target="_blank" rel="noopener">正版office产品密钥 office激活码 office2019永久激活</a><br><a href="http://www.ddooo.com/softdown/139653.htm" target="_blank" rel="noopener">office2019专业增强版激活密钥 附激活教程</a></p><p>两个链接均可破解。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>老J的技术分享之总结</title>
      <link href="/2021/04/22/%E8%80%81J%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%E4%B9%8B%E6%80%BB%E7%BB%93/"/>
      <url>/2021/04/22/%E8%80%81J%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%E4%B9%8B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>老J做IT这块有二十多个年头了，算是中国IT的见证者与参与者。<br>那个时候刚开始接触和了解时，对于他的一些建议，我不是很乐于去接受，因为我觉得他的那一套技术体系不是很适合如今的情况，当时间久了后发现，他对于数据库的设计、Java底层等有很多独到的见解和丰富的实践经验等，还是很值得学习和借鉴的。以下是老J的技术分享(其中也有我自己的一些分享进行补充完善)，由于时间比较长，我只能记的个大概，不过好在当初做了一些笔记。</p><a id="more"></a><h2><span id="一-线程急需避免的两类情况">一、线程急需避免的两类情况</span></h2><ul><li><strong>死锁</strong>；</li><li><strong>死循环</strong>。</li></ul><h3><span id="1死锁">1.死锁</span></h3><h3><span id="1什么是死锁">(1)什么是死锁？</span></h3><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程成为死锁进程。</p><h3><span id="2产生死锁的原因主要包括哪些">(2)产生死锁的原因主要包括哪些？</span></h3><ul><li><strong>系统资源不足</strong>；</li><li><strong>程序执行的顺序问题</strong>；</li><li><strong>资源分配不当</strong>。</li></ul><h3><span id="3产生死锁的四个必要条件有哪些">(3)产生死锁的四个必要条件有哪些？</span></h3><ul><li><strong>互斥条件</strong>：一个资源每次只能被一个进程使用。</li><li><strong>请求与保持条件</strong>：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li><strong>不剥夺条件</strong>：进程已获得资源，在未使用完之前，不能强行剥离。</li><li><strong>循环等待条件</strong>：若干进程之间形成一种头尾相接的循环等待资源关系。</li></ul><p>只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发现死锁。</p><h3><span id="4如何预防死锁">(4)如何预防死锁？</span></h3><p>由于互斥条件是非共享设备所必须的，不仅不能改变，还应该加以保证，因此，主要是破坏产生死锁的后三个条件：</p><ul><li><strong>破坏请求与保持条件</strong>：对一个进程在请求资源时，它不能持有不可剥夺资源。</li><li><strong>破坏不可剥夺条件</strong>：对一个已经保持某些不可剥夺资源的进程，提出新的资源请求而不能得到满足时，它必须释放已经保持的所有资源，待以后需要时再重新申请。</li><li><strong>破坏循环等待条件</strong>：对系统所有资源类型进行线性排列，并赋予不同序号。规定每个进程必须按序号递增的顺序请求资源。</li></ul><h3><span id="5避免死锁的方法有哪些">(5)避免死锁的方法有哪些？</span></h3><ul><li><strong>一次封锁法</strong>：每个进程(事务)将所要使用的数据全部加锁，否则，就不能继续执行。</li><li><strong>顺序封锁法</strong>：预先对数据对象规定一个封锁顺序，所有进程(事务)都按这个顺序枷锁。</li><li><strong>银行家算法</strong>：保证进程处于安全进程序列。</li></ul><h3><span id="6哪些方法有助于最大限度地降低死锁的概率">(6)哪些方法有助于最大限度地降低死锁的概率？</span></h3><ul><li><strong>按同一顺序访问对象</strong>；</li><li><strong>避免事务中的用户交互</strong>；</li><li><strong>保持事务简短并在一个批处理中</strong>；</li><li><strong>使用低隔离级别</strong>。</li></ul><h2><span id="2死循环">2.死循环</span></h2><h3><span id="1什么是死循环">(1)什么是死循环？</span></h3><p>在编程中，一个靠自身控制无法终止的程序称为“死循环”。</p><h3><span id="2死循环的危害有哪些">(2)死循环的危害有哪些？</span></h3><ul><li><strong>程序进入假死状态</strong>(当某个请求导致的死循环，该请求将会在很大的一段时间内，都无法获取接口的返回，程序好像进入假死状态一样)；</li><li><strong>CPU使用率飙升</strong>(代码出现死循环后，由于没有休眠，一直不断抢占cpu资源，导致cpu长时间处于繁忙状态，必定会使cpu使用率飙升)；</li><li><strong>内存使用率飙升</strong>(如果代码出现死循环时，循环体内有大量创建对象的逻辑，垃圾回收器无法及时回收，会导致内存使用率飙升。同时，如果垃圾回收器频繁回收对象，也会造成cpu使用率飙升问题)；</li><li><strong>StackOverFlowError栈溢出</strong>(在一些递归调用的场景，如果出现无限递归，最终会报StackOverflowError栈溢出，导致程序直接挂掉)。</li></ul><h3><span id="3哪些场景会造成死循环">(3)哪些场景会造成死循环？</span></h3><ul><li>一般循环遍历(for、foreach、while)；</li><li>Iterator遍历；</li><li>类中使用自己的对象；</li><li>无限递归；</li><li>HashMap使用不当；</li><li>动态代理使用不当。</li></ul><h3><span id="4写代码如何避免死循环">(4)写代码如何避免死循环?</span></h3><p>对于Java程序员而言，需要严谨地对待自己写的Code(不可太过随意,代码逻辑严谨性体现编写者的思维逻辑)，同时要深入地熟悉Java，注重基本功，这样一来就能避免写死循环代码。</p><h2><span id="二-缓存">二、缓存</span></h2><h3><span id="1缓存是什么">1.缓存是什么？</span></h3><p>缓存就是数据交换的缓冲区（称作Cache），当某一硬件要读取数据时，会首先从缓存中查找需要的数据，如果找到了则直接执行，找不到的话则从内存中找。由于缓存的运行速度比内存快得多，故缓存的作用就是帮助硬件更快地运行。</p><h3><span id="2为什么要使用缓存">2.为什么要使用缓存？</span></h3><p>缓存的本质就是用空间换时间，牺牲数据的实时性，以服务器内存中的数据暂时代替从数据库读取最新的数据，减少数据库IO，减轻服务器压力，减少网络延迟，加快页面打开速度。</p><h3><span id="3在java中对于缓存有哪些现成的解决方案">3.在Java中对于缓存有哪些现成的解决方案？</span></h3><ul><li><strong>EhCache</strong>(Java分布式缓存框架)；</li><li><strong>Cacheonix</strong>(高性能Java分布式缓存系统)；</li><li><strong>ASimpleCache</strong>(轻量级Android缓存框架)；</li><li><strong>JBoss Cache</strong>(基于事务的Java缓存框架)；</li><li><strong>Voldemort</strong>(基于Java开发的分布式键-值缓存系统,像JBoss Cache一样，Voldemort同样支持多台服务器之间的缓存同步，以增强系统的可靠性和读取性能)。</li></ul><p>其中我仅仅只使用过Ehcache，关于Ehcache的使用，感兴趣的朋友可以参考我的这篇博客:<br><a href="https://www.cnblogs.com/youcong/p/9931314.html" target="_blank" rel="noopener">SSM框架之整合EhCache</a></p><h3><span id="4ehcache和redis的区别又什么呢">4.Ehcache和Redis的区别又什么呢？</span></h3><ul><li><strong>概念不同</strong>(Redis是一个基于内存的高性能key-value数据库,而EhCache是纯Java进程内缓存框架)；</li><li><strong>运行程序不同</strong>(Redis独立运行程序需单独安装与Java程序间接关联(如SpringBoot需要操作Redis等),而Ehcache与Java程序直接绑定在一起，Java程序挂掉，Ehcache也会随之挂掉，而Redis却能保持完好)；</li><li><strong>场景不同</strong>(Redis适合分布式缓存，而EhCahce仅适合单个应用缓存)。</li></ul><h3><span id="5现成解决方案的利与弊有哪些分情况来看">5.现成解决方案的利与弊有哪些？分情况来看。</span></h3><h4><span id="1ehcache">(1)EhCache</span></h4><h5><span id="aehcache的优点有哪些">a.EhCache的优点有哪些？</span></h5><ul><li><strong>快速</strong>；</li><li><strong>简单</strong>；</li><li><strong>缓存数据有两级：内存和磁盘，因此无需担心容量问题</strong>；</li><li><strong>缓存数据会在虚拟机重启的过程中写入磁盘</strong>；</li><li><strong>可以通过RMI、可插入API等方式进行分布式缓存</strong>；</li><li><strong>具有缓存和缓存管理器的侦听接口</strong>；</li><li><strong>支持多缓存管理器实例，以及一个实例的多个缓存区域</strong>；</li><li><strong>提供Hibernate的缓存实现</strong>；</li><li><strong>多种缓存策略，Ehcache提供了对大数据的内存和硬盘的存储，最近版本允许多实例、保存对象高灵活性、提供LRU、LFU、FIFO淘汰算法，基础属性支持热配置、支持的插件多</strong>。</li></ul><h5><span id="behcache的缺点有哪些">b.EhCache的缺点有哪些？</span></h5><ul><li><strong>使用磁盘Cache的时候非常占用磁盘空间</strong>：这是因为DiskCache的算法简单，该算法简单也导致Cache的效率非常高。它只是对元素直接追加存储。因此搜索元素的时候非常的快。如果使用DiskCache的，在很频繁的应用中，很快磁盘会满。</li><li><strong>不能保证数据的安全</strong>：当突然kill掉java程序的时候，可能会产生冲突，EhCache的解决方法是如果文件冲突了，则重建cache。这对于Cache数据需要保存的时候可能不利。当然，Cache只是简单的加速，而不能保证数据的安全。如果想保证数据的存储安全，可以使用Bekeley DB Java Edition版本。这是个嵌入式数据库。可以确保存储安全和空间的利用率。</li></ul><h4><span id="2cacheonix">(2)Cacheonix</span></h4><h5><span id="acacheonix的优点有哪些">a.Cacheonix的优点有哪些？</span></h5><ul><li><strong>可靠的分布式Java 缓存</strong>；</li><li><strong>通过复制实现高可用性</strong>；</li><li><strong>支持泛型的缓存API</strong>；</li><li><strong>可与ORM框架集成</strong>；</li><li><strong>使用数据分区实现负载均衡</strong>；</li><li><strong>支持非多播网络</strong>；</li><li><strong>高性能计算</strong>；</li><li><strong>快速的本地Java缓存</strong>；</li><li><strong>分布式锁机制</strong>。</li></ul><h5><span id="bcacheonix的缺点有哪些">b.Cacheonix的缺点有哪些？</span></h5><p>我觉得最大的缺点是网上相关的资源太少，哪怕我用Google搜索也如此，同时该项目start或fork实在是太少，间接说明应用的不是很多。</p><p>这里就讲上面两个，另外三个就不讲了，意义不大。</p><h3><span id="6缓存的优缺点有哪些">6.缓存的优缺点有哪些？</span></h3><p>前面提到过缓存的优点，如减少数据库IO、减轻服务器压力、减少网络延迟、加快页面响应速度等。</p><p>那么缺点有哪些呢？<strong>凡是有利也有弊，如下</strong>:</p><ul><li><strong>存放内存的数据可能丢失</strong>(内存一断电就会清空数据)；</li><li><strong>缓存的数据可能与数据库中的不一致</strong>；</li><li><strong>内存的成本高</strong>；</li><li><strong>内存容量相对硬盘而言要少</strong>。</li></ul><h3><span id="7java中常用缓存机制有哪些">7.Java中常用缓存机制有哪些？</span></h3><ul><li><strong>内部</strong>(如HashMap以及前面提到的缓存框架等)；</li><li><strong>外部</strong>(如Redis、Memcache等)。</li></ul><h3><span id="8缓存实际的应用场景分为哪几类">8.缓存实际的应用场景分为哪几类？</span></h3><ul><li><strong>CPU缓存</strong>(是位于CPU与内存之间的临时存储器，它的容量比内存小的多但是交换速度却比内存要快得多）；</li><li><strong>浏览器缓存</strong>(浏览器可以缓存一些静态资源，比如图片、js、css等，这些都是不常变化的内容，所以没有必要每次都去请求)；</li><li><strong>CDN缓存</strong>(客户端会先检查浏览器的缓存，若缓存过期则会像CDN发送请求，CDN检查缓存数据还未过期，那么直接返回响应，只需两步搞定。但是，CDN缓存过期，那么需要向应用服务器发起请求，获得新的数据响应，这部分新的数据按一定的缓存策略会选择是否缓存在CDN中)；</li><li><strong>数据库缓存</strong>(存入数据库的数据具有持久化特点，所谓持久化就是将对象保存到可永久保存的存储设备中(通常是磁盘))；</li><li><strong>业务层缓存</strong>(针对具体的业务做数据缓存，如博客的排行榜、点赞功能、队列(排队处理)、分布式锁或单线程机制等)。</li></ul><h2><span id="三-客户端与服务端数据交互">三、客户端与服务端数据交互</span></h2><h3><span id="1数据传输的格式有哪些">1.数据传输的格式有哪些？</span></h3><p>二进制、文本、json、xml等。</p><h3><span id="2数据传输格式的效率比较哪个效率最高">2.数据传输格式的效率比较，哪个效率最高？</span></h3><p>二进制&gt;文本&gt;json&gt;xml(从左往右，效率逐渐降低)。</p><h3><span id="3聚焦常用-json">3.聚焦常用-JSON</span></h3><p>JSON对于前后端开发人员来说，是每天都要提到的。</p><h4><span id="1json为什么这么流行应用场景有哪些">(1)JSON为什么这么流行？应用场景有哪些？</span></h4><h5><span id="ajson为什么这么流行如下原因">a.JSON为什么这么流行？如下原因:</span></h5><ul><li><strong>简洁、简单、体积小</strong>(相对XML而言)；</li><li><strong>上手容易，高效</strong>；</li><li><strong>跨语言</strong>(与具体的编程语言无关)。</li></ul><h5><span id="b应用场景有哪些这里只列举主要的即接口返回数据">b.应用场景有哪些？这里只列举主要的，即接口返回数据:</span></h5><ul><li><strong>Ajax异步交互</strong>；</li><li><strong>RPC远程调用</strong>；</li><li><strong>前后端分离-后端响应数据</strong>；</li><li><strong>API开放</strong>；</li><li><strong>企业间的数据合作</strong>。</li></ul><h4><span id="2java中的json解析库有哪些">(2)Java中的JSON解析库有哪些？</span></h4><ul><li><strong>Json-Simple</strong>；</li><li><strong>Gson</strong>;</li><li><strong>FastJson</strong>;</li><li><strong>Jackson</strong>。</li></ul><h4><span id="3从适用场景出发我们应该如何使用合适的json解析库">(3)从适用场景出发，我们应该如何使用合适的JSON解析库？</span></h4><p>首先选择一个合适的JSON库要从多个方面考虑，例如:</p><ul><li><strong>字符串解析成JSON性能</strong>；</li><li><strong>字符串解析成JavaBean性能</strong>；</li><li><strong>JavaBean构造JSON性能</strong>；</li><li><strong>集合构造JSON性能</strong>；</li><li><strong>易用性</strong>。</li></ul><p>网上关于Json-lib、Gson、FastJson、Jackson的效率比较有很多，这里不再赘述。</p><h5><span id="a为什么要使用gson它有哪些优点">a.为什么要使用Gson，它有哪些优点？</span></h5><ul><li><strong>gson支持更深层次关联查询</strong>；</li><li><strong>gson比json更简单</strong>；</li><li><strong>异步传值非常方便</strong>；</li><li><strong>页面上eval之后可以直接用 xx.xx 的方式取值</strong>；</li><li><strong>减少格式错误导致的程序异常</strong>。</li></ul><h5><span id="b为什么使用fastjson它有哪些优点">b.为什么使用FastJson，它有哪些优点？</span></h5><ul><li><strong>速度快</strong>；</li><li><strong>使用广泛</strong>；</li><li><strong>测试完备</strong>；</li><li><strong>使用简单</strong>；</li><li><strong>功能完备</strong>。</li></ul><h5><span id="b为什么使用jackson它有哪些优点">b.为什么使用Jackson，它有哪些优点？</span></h5><ul><li><strong>解析大文件的速度比较快</strong>；</li><li><strong>运行时占用的内存比较少，性能更佳</strong>；</li><li><strong>API很灵活，容易进行扩展和定制</strong>。</li></ul><h5><span id="d某位支付宝技术专家这样概括json-simple-gson-jackson的适用场景">d.某位支付宝技术专家这样概括Json-Simple、Gson、Jackson的适用场景?</span></h5><ul><li>如果你的应用经常会处理大的JSON文件，那么Jackson应该是你的菜。GSON在大文件上表现得相当吃力。</li><li>如果你主要是处理小文件请求，比如某个微服务或者分布式架构的初始化，那么GSON当是首选。Jackson在小文件上的表现则不如人意。</li><li>如果这两种文件你都经常会处理到，那么JSON.Simple对此类场景则更为适合。在不同的文件大小上Jackson和GSON的表现都不太好。</li></ul><h2><span id="四-框架">四、框架</span></h2><h3><span id="1框架是什么">1.框架是什么？</span></h3><p>这里引用维基百科的概述:<br><strong>软件框架，通常指的是为了实现某个业界标准或完成特定基本任务的软件组件规范，也指为了实现某个软件组件规范时，提供规范所要求之基础功能的软件产品。</strong></p><p><strong>框架的功能类似于基础设施，与具体的软件应用无关，但是提供并实现最为基础的软件架构和体系。软件开发者通常依据特定的框架实现更为复杂的商业运用和业务逻辑。这样的软件应用可以在支持同一种框架的软件系统中运行。</strong></p><p><strong>简而言之，框架就是制定一套规范或者规则（思想），大家（程序员）在该规范或者规则（思想）下工作。或者说使用别人搭好的舞台来做编剧和表演</strong></p><h3><span id="2为什么要使用框架从软件层面出发">2.为什么要使用框架(从软件层面出发)？</span></h3><p>用前创业公司经理经常说的一句话来概括，<strong>不要重复造轮子</strong>。<br>重复造轮子意味着花大量的时间做一些事情(而这件事情已经有了现成的解决方案)，效率低，极度消耗时间。<br>反之，”不重复造轮子”意味着不必从头再来，而是站在巨人的肩上，这样一来，效率高，耗时少。这里从中也体现了框架一个重要特点:<strong>重用性</strong>。曾经二次开发的电商系统、在线教育、OJ测评、VsCode就是一个很有力的证明。</p><h3><span id="3使用框架能带来哪些好处从软件层面出发">3.使用框架能带来哪些好处(从软件层面出发)？</span></h3><ul><li><strong>重用代码，提高开发效率，节约时间</strong>；</li><li><strong>简单易上手</strong>(例如SpringBoot简化了过去SSM或SSH框架一堆配置文件)；</li><li><strong>程序安全性高</strong>(前人已经考虑到了，无需再从头过一遍，当然了这不是绝对，毕竟技术不断更新迭代，黑客攻击的手段也亦如此)；</li><li><strong>统一的套路</strong>(框架在一定程度上统一了编码规范，降低了维护成本)。</li></ul><h3><span id="4使用框架所带来的弊端">4.使用框架所带来的弊端？</span></h3><ul><li><strong>约束性</strong>(受到框架本身的制约)；</li><li><strong>泯然众人矣</strong>(大家都会，一定程度上造就了软件开发流水线，降低了门槛，加剧了内卷)；</li><li><strong>只会用而不懂工作原理</strong>(普遍性，面试的时候才会看，平时大多很少看)；</li><li><strong>兼容性</strong>(例如A框架和B框架存在冲突)。</li></ul><h3><span id="5这是一道思考题工作三年或五年以上的人和刚工作的童鞋区别到底在哪仅仅是工作经验上的积累吗">5.这是一道思考题，工作三年或五年以上的人和刚工作的童鞋区别到底在哪？仅仅是工作经验上的积累吗？</span></h3><p>老J在此提出，关键在于框架。框架包含的种类有很多？例如思维框架(不局限于当前)、工作框架(提高个人的工作效率或团队工作效率等)、为人处事框架(如何与人更好的打交道以及面对生活中的突发或非突发事情又是如何处理的等)。<strong>框架不仅仅是经验上的积累，更是从经验上提炼的精华，这种精华可以叫原则。</strong></p><h3><span id="6我对自己在研发上面的框架进行简要概率有这么几个">6.我对自己在研发上面的框架进行简要概率，有这么几个？</span></h3><ul><li><strong>技术选型框架</strong>(如何做技术选型等)；</li><li><strong>技术实践框架</strong>(如何提高开发效率、如何有效地排查问题和解决问题、如何更快的学习新技术或深入理解现有技术等)；</li><li><strong>文档框架</strong>(如何写好文档)；</li><li><strong>设计框架</strong>(如何做好数据库的设计)；</li><li><strong>运维框架</strong>(从单体到分布式微服务的运维体系构建与实践等)；</li><li><strong>业务知识框架</strong>(所待的IT行业涉及的业务知识积累，如何更快的熟悉业务等)。</li></ul><h2><span id="五-四大注意事项思考">五、四大注意事项思考</span></h2><p>老J提出<strong>四大注意事项</strong>:</p><ul><li><strong>资源消耗(文件、DB、IO、网络等)不能放入for循环</strong>。</li><li><strong>能并行不要串行</strong>。</li><li><strong>能触发不做结束</strong>。</li><li><strong>事件监听要统一</strong>。</li></ul><h3><span id="1资源消耗文件-db-网络等不能放入for循环">1.资源消耗(文件、DB、网络等)不能放入for循环</span></h3><p>关于资源消耗文件如文件的输入输出、DB的增删改查、网络通信等相关代码，最好不要放入for循环中。以我工作中的观察与实践，看到的例子如下(仅仅列举几个，不做过多的列举)：</p><ul><li>(1)服务之间的通信，例如A服务调B服务，而B服务里有个for循环需要根据A服务的传参来反复调用C服务，C服务不断的访问数据库拿到所需数据，会造成CPU飙升，如果同时多人访问，可能会造成系统假死(响应慢或迟迟得不到响应并陷入卡顿状态)；</li><li>(2)文件的读写，例如在for循环中不断创建文件并写入内容，直接会导致物理硬盘满了，硬盘一旦满了，直接会影响服务器上的所有微服务，导致所有微服务假死，虽然实际并未挂掉，但已停止对外服务，因为服务之间的通信也是需要消耗磁盘的，关于这个例子，可以阅读我写的这篇文章:<a href="https://youcongtech.com/2021/01/04/Linux%E8%AE%BE%E5%A4%87%E4%B8%8A%E6%B2%A1%E6%9C%89%E7%A9%BA%E9%97%B4%E4%B9%8B%E5%A4%8D%E7%9B%98/" target="_blank" rel="noopener">Linux设备上没有空间之复盘</a>；</li><li>(3)DB的CRUD，例如前段时间公司一同事将代码从6到8个小时优化到几分钟，之所以变快了是因为将for循环代码进行优化，不在for循环中做DB的操作(关于这个例子，可以阅读我写的这篇文章:<a href="https://youcongtech.com/2021/03/27/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E5%AF%B9%E5%A4%96%E7%9A%84API%E5%BE%AE%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener">如何写好对外的API微服务</a>)。</li></ul><h3><span id="2能并行不要串行">2.能并行不要串行</span></h3><p>并行和串行都是通讯中的数据传输方式。</p><h4><span id="1什么是并行">(1)什么是并行？</span></h4><p>并行就是同事执行,就好比单个窗口有3个人要办事,只需要到空窗口即可立即办事。在计算机中,同一时刻,有多条指令,在多个CPU上执行,就是并行。</p><h4><span id="2什么是串行">(2)什么是串行？</span></h4><p>串行就是按顺序执行,好比银行只有1个窗口,有3个人要办事,那么必须排队,只有前面的人办完走人才可以继续下一个。<br>在计算机中,同一时刻,只能有一条指令,在一个CPU上执行,后面的指令必须等到前面指令执行完毕才能执行</p><p>通过解释并行和串行的概念，大家就能很容易得出一个结论，并行的效率高于串行。</p><h3><span id="3能触发不做结束">3.能触发不做结束</span></h3><p>这句话我不是很懂。但触发对于前端开发而言非常熟悉，例如鼠标点击事件、键盘点击事件等。从某个角度上看，由用户自己决定触发什么样的事件获取什么样的展示信息，一定程度上降低资源不必要的消耗。</p><h3><span id="4事件监听要统一">4.事件监听要统一</span></h3><h4><span id="1什么是事件监听">(1)什么是事件监听？</span></h4><p>事件监听可以理解为是一种观察者模式，有数据发布者（事件源）和数据接受者（监听器）。</p><h4><span id="2为什么要事件监听">(2)为什么要事件监听?</span></h4><p>以Java文件监听器为例(文件监听也是事件监听的一种)，文件监听器监听文件目录的生成或销毁。<br>假如我们不用文件监听器的话，可能我们就得写一个程序每时每刻监听着某个文件目录的生成或销毁，那样的话，太消耗程序所运行环境的CPU和内存了。</p><h4><span id="3事件监听的应用场景有哪些">(3)事件监听的应用场景有哪些？</span></h4><ul><li><strong>项目的初始化</strong>；</li><li><strong>网站的在线人数统计</strong>；</li><li><strong>文件状态的监听</strong>；</li><li><strong>网站的用户行为</strong>；</li><li><strong>网站的访问量</strong>。</li></ul><h4><span id="4事件监听为何要统一">(4)事件监听为何要统一？</span></h4><p>统一是为了便于管理，事件监听如果不统一，会影响系统的稳定性。</p><h2><span id="六-全局思维">六、全局思维</span></h2><h3><span id="1什么是全局思维">1.什么是全局思维？</span></h3><p>全局思维是一切从系统整体及其全过程出发的思想和准则，从客观整体的利益出发，站在全局的角度看问题、想办法，做出决策。</p><h3><span id="2为什么需要全局思维">2.为什么需要全局思维？</span></h3><ul><li><strong>从不同的角度思考问题，能更接近问题的本质，找到规律和解决办法</strong>；</li><li><strong>追求长远利益，避免蝇头小利蒙蔽双眼</strong>。</li></ul><h3><span id="3如何培养全局思维某位管理顾问提供了如下方法">3.如何培养全局思维(某位管理顾问提供了如下方法)？</span></h3><ul><li><strong>用心想</strong>(每天睡觉前花个十分钟，用心想一下：我今天做的事与全局性有什么关系，产生了什么价值，有什么需要改进的地方。天长日久，全局性思维就慢慢建立起来了)；</li><li><strong>事上练</strong>(做事的时候，心中牢记目标，偏离方向了立即调整)；</li><li><strong>多交流</strong>(和有全局思维的人多交流(不仅仅是有全局思维的人，与不同领域或某一项精深的人多多交流)，听听他的反馈。用心想一想，我应该如何改进)。</li></ul><h3><span id="3程序员思维">3.程序员思维</span></h3><h4><span id="1什么是程序员思维">(1)什么是程序员思维？</span></h4><p>在理性思维的框架下，利用相应工具，来解决相应实际的问题。</p><p>例如有位知乎朋友这样概括程序员思维:<br><strong>职业化的程序员会养成一种思维定式，在做任何事之前会去思考：“能不能将这件事中需要重复执行的部分抽象出来？能不能不用人工参与就可以完成？”</strong></p><h4><span id="2程序员思维的优缺点有哪些">(2)程序员思维的优缺点有哪些？</span></h4><h5><span id="a优点">a.优点</span></h5><ul><li><strong>理性</strong>(基于逻辑思考问题，对就是对，错就是错，不掺杂主观)；</li><li><strong>实用主义</strong>(不管黑猫白猫，能抓住耗子就是好猫)；</li><li><strong>做事情更注重步骤、效率、可行性</strong>。</li></ul><h5><span id="b缺点">b.缺点</span></h5><ul><li><strong>过去追求完美，死扣细节，钻牛角</strong>；</li><li><strong>过于理性</strong>；</li><li><strong>过于实用主义</strong>；</li><li><strong>习惯于机器打交通，不善于与人沟通</strong>；</li><li><strong>习惯单兵作战，易忽略团队合作</strong>。</li></ul><h4><span id="3如何突破程序员思维的定势">(3)如何突破程序员思维的定势？</span></h4><ul><li><strong>学会透过技术发现问题的本质</strong>(技术的目的在于问题的解决，必须要明确这一点)；</li><li><strong>像专家一样给出意见</strong>(参加需求会或其他讨论会思考并给出自己的意见)；</li><li><strong>从不同的视角出发</strong>(可能要求你你具备该领域不同岗位的基本职能如运维、测试、开发、项目实施、产品经理、UI设计等，不一定要做到精通，一个领域精通很难，更何况多个领域)；</li><li><strong> 提高创造力</strong>(可以理解为创新，这样的创造力建立在长年不间断地编码实践、持续地学习借鉴、定期复盘的条件上)；</li><li><strong>提高全局思维</strong>(前面提到过，这里不在赘述)。</li></ul><h2><span id="七-总结">七、总结</span></h2><p>此次老J的技术分享之总结包含六个方面分别为:</p><ul><li>线程急需避免的两类情况；</li><li>缓存；</li><li>客户端与服务端数据交互；</li><li>框架；</li><li>四大注意事项思考；</li><li>全局思维。</li></ul><p>其实技术领域的知识远远不止这些，但更重要的是深入其中，并结合过往的实践经验进行复盘。<br>本次分享就写到这，希望对大家有一定的帮助。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术分享与思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从单体架构到分布式微服务架构的思考</title>
      <link href="/2021/04/17/%E4%BB%8E%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E5%88%B0%E5%88%86%E5%B8%83%E5%BC%8F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2021/04/17/%E4%BB%8E%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E5%88%B0%E5%88%86%E5%B8%83%E5%BC%8F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-单体架构">一、单体架构</span></h2><h3><span id="1什么是单体架构">1.什么是单体架构？</span></h3><p>单体架构也可叫单体系统或单体应用，是一种把系统所有的功能模块耦合在一个应用的架构方式。<br><a id="more"></a></p><h3><span id="2单体架构的优缺点有哪些">2.单体架构的优缺点有哪些？</span></h3><h4><span id="1优点">(1)优点</span></h4><ul><li><strong>部署简单</strong>；</li><li><strong>技术单一</strong>；</li><li><strong>用人成本相对低</strong>；</li><li><strong>项目管理相对较易</strong>；</li><li><strong>测试相对简单直观</strong>；</li><li><strong>应用开发相对简单</strong>；</li><li><strong>横向扩展容易</strong>。</li></ul><h4><span id="2缺点">(2)缺点</span></h4><ul><li><strong>项目过于臃肿，bug难以迅速定位</strong>；</li><li><strong>资源无法隔离</strong>(某个功能模块对应的接口访问量大，直接会影响整体性能)；</li><li><strong>无法灵活扩展</strong>；</li><li><strong>交付周期长</strong>(需求-&gt;设计-&gt;开发-&gt;测试-&gt;现场实施部署，就传统性质的企业而言)；</li><li><strong>部署消耗时间长</strong>；</li><li><strong>可靠性差</strong>；</li><li><strong>受技术栈限制</strong>；</li><li><strong>可伸缩性差</strong>；</li><li><strong>复杂度高</strong>。</li></ul><h3><span id="3单体架构的技术选型有哪些">3.单体架构的技术选型有哪些？</span></h3><p>从Java的角度看，有Spring全家桶一站式解决方案和相关的生态比较丰富(国外有GitHub，国内有Gitee，相应的开源框架非常多)。<br>从PHP的角度看，PHP是Web开发中最好的语言(至于为什么说它是Web开发中最好的语言，我想原因有三个，第一个是通吃方案(网站开发、App后端、小程序等)；第二个许多国内外的网站建设都是基于PHP，早期的淘宝也是如此；第三个容易上手。)</p><p>所有的技术选型都离不开一个基本的原则，那就是业务，分布式微服务技术选型也不例外，技术服务于业务，合适的技术框架对业务支撑非常关键。我在2020年的写过这样一篇文章，其中关于对技术的思考提到过，感兴趣的朋友可以阅读这篇文章:<a href="https://youcongtech.com/2020/10/07/2020%E5%B9%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E5%92%8C%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">2020年的一些思考和总结</a></p><h4><span id="1那么关于技术选型要注重哪些因素呢">(1)那么关于技术选型要注重哪些因素呢？</span></h4><ul><li><strong>业务相关性</strong>；</li><li><strong>框架流行度</strong>；</li><li><strong>学习曲线</strong>；</li><li><strong>文档</strong>；</li><li><strong>社区支持</strong>；</li><li><strong>单元测试</strong>；</li><li><strong>可扩展性</strong>；</li><li><strong>许可证</strong>。</li></ul><h4><span id="2在1的基础上举例进行说明">(2)在(1)的基础上举例进行说明</span></h4><p>以我曾经在某创业公司对EduSoho二次开发为例:<br><strong>从业务相关性的角度，</strong>当时我们做的是编程教育项目，EduSoho是一个在线教育解决方案，业务性与我们完美契合。<br><strong>从框架流行度，</strong>EduSoho是基于PHP开发，前面我提到过PHP是Web开发最好的语言，而EduSoho使用的PHP框架是<a href="https://github.com/symfony/symfony" target="_blank" rel="noopener">Symfony</a>，Symfony的框架流行度，以GitHub下图为例说明:<br><img src="/2021/04/17/从单体架构到分布式微服务架构的思考/01.png" alt=""><br>从中可以看出该框架非常流行，start非常多。<br><strong>从学习曲线来看，</strong>我觉得Symfony还是蛮简单，感兴趣的朋友，可以参考我这篇文章学习:<br><a href="https://www.cnblogs.com/youcong/p/11143879.html" target="_blank" rel="noopener">Symfony之入门学习</a><br>只要熟悉Symfony，二次开发EduSoho并不难。<br><strong>从文档上来看，</strong>Symfony框架资料非常多(网上有各种各样的博文)，对应的EduSoho官网方面的资料也非常多。<br><strong>从社区支持上来看，</strong>如果Symfony出现任何问题，通过搜索引擎不能解决的话，可以去GitHub给开源维护者提issue，详细说明问题，一般都能得到回答(前提把问题说清楚，英文不会也不怕，可以借助翻译工具)。<br><strong>从单元测试上来看，</strong>Symfony本身就支持单元测试，不仅仅是PHP相关的框架，Java和Go对应的Web开发框架均支持单元测试。<br><strong>从可扩展性上来看，</strong>Symfony发展至今能有这么多关注(前面的Github截图)，说明国内外有不少公司在用它，只要很多公司在用可扩展性自然不差(可扩展性指能适应业务的变化)。<br><strong> 从许可证上来看，</strong>EduSoho减少当时我们编程教育项目的从0到1开发的时间，只要项目能够盈利，花钱买许可证也是没问题的，结果我们在C城果然拿下了第一笔订单。</p><h3><span id="4前面提到的单体架构的缺点也可叫短板该如何应对呢">4.前面提到的单体架构的缺点(也可叫短板)该如何应对呢？</span></h3><p><strong>用组件化就能解决这个单体架构的缺点。</strong></p><h4><span id="1什么是组件化它的目的是什么">(1)什么是组件化？它的目的是什么？</span></h4><p>组件化是一种高效的处理复杂应用系统，更好的明确功能模块作用的方式。目的是为了解耦，把复杂系统拆分成多个组件，分离组件边界和责任，便于独立升级和维护。</p><h4><span id="2组件化的实际例子有哪些">(2)组件化的实际例子有哪些？</span></h4><p>这里只列举两个例子(实际的例子非常多):</p><ul><li>曾在某创业公司做VsCode二次开发时，当时写的各种VsCode插件，其实也是一种组件化的体现(本质上都是为了解耦，避免大量的代码耦合混杂)。</li><li>曾在某教育公司做前后端开发的时候，前端当时使用的是React框架，那个时候我也是第一次使用React，React的组件化，让我可重用大量的代码(这种可重用很少出问题，除非组件本身写的就有问题)，最后不到一天就写某个大功能模块，使我能更好的专注于后端接口的编写和调试。</li></ul><h4><span id="3有的朋友可能会问新的项目我可以最开始通过组件化来避免单体架构的短板但是老项目该怎么办呢">(3)有的朋友可能会问：”新的项目我可以最开始通过组件化来避免单体架构的短板，但是老项目该怎么办呢？”</span></h4><p>我的回答是只能慢慢来，一点点慢慢抽取出来(一定要在读懂代码的前提下进行)，封装为组件，组件可按照功能区分(公共组件、通信组件、日志组件、权限组件、具体业务组件等)。<br>另外还有一点，二次开发和老项目的组件化是相通的，如下:</p><ul><li><strong>项目先运行起来</strong>(不管是二次开发还是新到一家公司，这个流程是绕不开的)；</li><li><strong>整体了解项目架构并熟悉对应的业务知识</strong>；</li><li><strong>整体了解项目结构</strong>(每个包下面的代码功能职责是什么)；</li><li><strong>整体了解数据库表</strong>(可以间接和前面的业务知识对应起来)；</li><li><strong>跑起来后，通过调用接口，逐步的去了解对应的代码是做什么的</strong>；</li><li><strong>为了保持原本的代码分支完整性，通过版本控制工具新建分支做实验</strong>；</li><li><strong>虚心请教，学会提问</strong>(如果是开源项目请教对应的开源维护者，如果是老项目，请教对应的老员工，在此之前一定要有自己的思考，而不是眼睛一看不到10秒，就说看不懂，这种提问是万万不行的)。</li></ul><h2><span id="二-分布式微服务架构">二、分布式微服务架构</span></h2><h3><span id="1什么是分布式微服务架构">1.什么是分布式微服务架构？</span></h3><h4><span id="1分布式是什么为什么要用分布式分布式要考虑哪些问题">(1)分布式是什么？为什么要用分布式？分布式要考虑哪些问题？</span></h4><p>分布式是指数据和程序可以不位于一个服务器上，而是分散到多个服务器，以网络上分散分布的地理信息数据及受其影响的数据库操作为研究对象的一种理论计算模型。</p><p>之所以要用分布式，最关键的是服务器性能问题，单台服务器性能比较有限，综合利用多台服务器，能够提高整体的性能。</p><p>分布式要考虑的问题有如下:</p><ul><li><strong>如何合理的拆分出子系统</strong>。</li><li><strong>子系统之间如何通信</strong>。</li><li><strong>通信过程的安全如何保障</strong>。</li><li><strong>子系统扩展要如何设计</strong>。</li><li><strong>子系统的可靠性要如何保证</strong>。</li><li><strong>多个子系统之间相互通信交互数据，如何保证数据的一致性</strong>。</li></ul><p>简而言之可以概括为两大问题，一个是数据的一致性，另一个是服务的稳定性。</p><h4><span id="2集群是什么为什么要集群集群需要考虑哪些问题">(2)集群是什么？为什么要集群？集群需要考虑哪些问题？</span></h4><p>集群是指一组独立的计算机系统构成的一个松耦合的多处理器系统，它们之间通过网络实现进程间的通信。应用程序可以通过网络共享内存进行消息传送，实现分布式计算机。通俗一点来说，就是让若干台计算机联合起来工作(服务)，可以是并行的，也可以是做备份。</p><p>之所以要集群，是因为如下三个方面:</p><ul><li><strong>并发处理能力有限</strong>；</li><li><strong>容错率低，一旦服务器故障，整个服务无法访问</strong>；</li><li><strong>单台服务器计算能力低，无法完成复杂的海量数据计算</strong>。</li></ul><p>集群需要考虑哪些问题(<strong>最关键的是:是否有必要集群</strong>)？</p><ul><li><strong>Session共享</strong>(用户鉴权一次，而不是每次轮询后都要再鉴权)；</li><li><strong>Job(</strong>定时任务只执行一次而不是每台都执行)；</li><li><strong>DB数据同步</strong>；</li><li><strong>Cache同步</strong>；</li><li><strong>集群下的各个服务器性能</strong>(CPU、磁盘、内存等)；</li><li><strong>应用服务故障切换的时间</strong>；</li><li><strong>软硬件的集群管理和监控</strong>；</li><li><strong>成本</strong>。</li></ul><h4><span id="3分布式和集群的区别是什么">(3)分布式和集群的区别是什么？</span></h4><ul><li><strong>分布式是指将不同的业务分布在不同的地方</strong>；</li><li><strong>集群指的是将多台服务器集中在一起，实现同一业务</strong>；</li><li><strong>分布式的每一个节点，都可以做集群，而集群并不一定就是分布式的</strong>。</li></ul><h4><span id="4微服务架构是什么">(4)微服务架构是什么？</span></h4><p>微服务架构指的是将大型复杂系统按功能或者业务需求垂直切分成更小的子系统，这些子系统以独立部署的子进程存在，它们之间通过轻量级的、跨语言的同步（比如REST，gRPC）或者异步（消息）网络调用进行通信。</p><h3><span id="2微服务架构的优缺点">2.微服务架构的优缺点</span></h3><h5><span id="1优点">(1)优点</span></h5><ul><li><strong>复杂度可控</strong>；</li><li><strong>独立按需扩展</strong>；</li><li><strong>技术选型灵活</strong>；</li><li><strong>容错可用性高</strong>。</li></ul><h5><span id="2缺点">(2)缺点</span></h5><ul><li><strong>多服务增加运维难度</strong>；</li><li><strong>系统部署依赖</strong>；</li><li><strong>服务间的通信成本</strong>；</li><li><strong>数据一致性</strong>；</li><li><strong>系统集成测试</strong>；</li><li><strong>性能监控</strong>。</li></ul><h3><span id="3分布式微服务的技术选型有哪些">3.分布式微服务的技术选型有哪些？</span></h3><p>对于Java而言技术选型组合如下:</p><ul><li><strong>SpringBoot+SpringCloud</strong>；</li><li><strong>SpringBoot+SpringCloud Alibaba</strong>；</li><li><strong>SpringBoot+Dubbo</strong>。</li></ul><p>上面这三种是比较常见的。<br>当然了，分布式微服务的技术选型不局限某一类编程语言。<br>以我当初在某创业公司做的编程教育平台项目为例，涉及的编程语言就有四个，分别为Python、Java、PHP、JavaScript(Node.js、Vue.js、TypeScript等)。至于这些编程语言所涉及的框架组件就更多了。对我在创业公司做项目经历感兴趣的朋友可以阅读我的这篇文章:<a href="https://mp.weixin.qq.com/s?__biz=MzUxODk0ODQ3Ng==&amp;mid=2247485439&amp;idx=1&amp;sn=201a791086509ae93a29a669e8d402be&amp;chksm=f98054eccef7ddfac7c6b7d30d40b33a1044cc702850cadf1ee2b0a9b3caca551f56779c719b&amp;token=1979555451&amp;lang=zh_CN#rd" target="_blank" rel="noopener">一位北漂在创业公司的两年</a></p><h2><span id="三-总结">三、总结</span></h2><p>从单体架构到分布式微服务架构，基本上我都参与了，有从0到1，也有二次开发，还有从1到2再到3的版本迭代。所遇到的问题很多很多，当时在做这些设计方案的时候，有很多都没有考虑周到，导致最后代码落地的时候非常糟，这些都是教训，接下来我会将这些教训一一总结然后分享出去。</p><p>最后此次本文说的内容相对比较全和杂，没有就某一个具体中心点进行深入地讲解，后面将会有系列文章就上面所涉及的内容点进行深入详细地讲解。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA java.lang.OutOfMemoryError: Java heap space</title>
      <link href="/2021/04/12/IDEA-java-lang-OutOfMemoryError-Java-heap-space/"/>
      <url>/2021/04/12/IDEA-java-lang-OutOfMemoryError-Java-heap-space/</url>
      
        <content type="html"><![CDATA[<h3><span id="一-错误背景">一、错误背景</span></h3><p>本地开发环境，使用PostMan或Swagger请求A微服务，而A微服务需要将数据传递给B微服务,A微服务的控制台开始报错，使得A微服务没有得到正确的响应。<br><a id="more"></a></p><h3><span id="二-关键错误信息">二、关键错误信息</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IDEA java.lang.OutOfMemoryError: Java heap space</span><br></pre></td></tr></table></figure><h3><span id="三-错误原因">三、错误原因</span></h3><p>错误原因是因为A微服务所暴露的接口，接收的数据量实在是太大了，导致Idea内存溢出。</p><h3><span id="四-解决办法">四、解决办法</span></h3><p>在Idea中点击Edit Configurations，将VM options设置大一点，就能解决这个问题。我将其设置为-Xmx5048m才解决这个问题。</p><p>解决问题办法，主要参考如下链接:<br><a href="https://blog.csdn.net/weixin_44795273/article/details/107799686" target="_blank" rel="noopener">IDEA java.lang.OutOfMemoryError: Java heap space</a></p><h3><span id="六-outofmemoryerror的多种情况-原因以及解决方案本文仅针对这五种进行较为详细的说明">六、OutOfMemoryError的多种情况、原因以及解决方案(本文仅针对这五种进行较为详细的说明)</span></h3><h4><span id="1javalangoutofmemoryerror-java-heap-space">1.java.lang.OutOfMemoryError: Java heap space</span></h4><p><strong>原因:</strong>Heap内存溢出，意味着Young和Old generation的内存不够。<br><strong>解决方案:</strong>调整java启动参数 -Xms -Xmx 来增加Heap内存。</p><h4><span id="2javalangoutofmemoryerror-unable-to-create-new-native-thread">2.java.lang.OutOfMemoryError: unable to create new native thread</span></h4><p><strong>原因:</strong>Stack空间不足以创建额外的线程，要么是创建的线程过多，要么是Stack空间确实小了。<br><strong>解决方案:</strong>由于JVM没有提供参数设置总的stack空间大小，但可以设置单个线程栈的大小；而系统的用户空间一共是3G，除了Text/Data/BSS/MemoryMapping几个段之外，Heap和Stack空间的总量有限，是此消彼长的。因此遇到这个错误，可以通过两个途径解决：1.通过-Xss启动参数减少单个线程栈大小，这样便能开更多线程（当然不能太小，太小会出现StackOverflowError）；2.通过-Xms -Xmx 两参数减少Heap大小，将内存让给Stack（前提是保证Heap空间够用）。</p><h5><span id="3javalangoutofmemoryerror-permgen-space">3.java.lang.OutOfMemoryError: PermGen space</span></h5><p><strong>原因:</strong>Permanent Generation空间不足，不能加载额外的类。<br><strong>解决方案:</strong>调整-XX:PermSize= -XX:MaxPermSize= 两个参数来增大PermGen内存。一般情况下，这两个参数不要手动设置，只要设置-Xmx足够大即可，JVM会自行选择合适的PermGen大小。</p><h5><span id="4javalangoutofmemoryerror-requested-array-size-exceeds-vm-limit">4.java.lang.OutOfMemoryError: Requested array size exceeds VM limit</span></h5><p><strong>原因:</strong>这个错误比较少见（试着new一个长度1亿的数组看看），同样是由于Heap空间不足。如果需要new一个如此之大的数组，程序逻辑多半是不合理的。<br><strong>解决方案:</strong>修改程序逻辑吧。或者也可以通过-Xmx来增大堆内存。</p><h5><span id="5javalangstackoverflowerror">5.java.lang.StackOverflowError</span></h5><p><strong>原因:</strong>这也内存溢出错误的一种，即线程栈的溢出，要么是方法调用层次过多（比如存在无限递归调用），要么是线程栈太小。<br><strong>解决方案:</strong>优化程序设计，减少方法调用层次；调整-Xss参数增加线程栈大小。</p><p>参考资料如下:<br><a href="https://www.cnblogs.com/duanxz/p/4901437.html" target="_blank" rel="noopener">Java中的OutOfMemoryError的各种情况及解决和JVM内存结构</a><br><a href="https://cloud.tencent.com/developer/article/1690325" target="_blank" rel="noopener">面试官：小伙子，你给我说一下Java中什么情况会导致内存泄漏呢？</a><br><a href="https://www.jb51.net/article/201966.htm" target="_blank" rel="noopener">Java 内存溢出的原因和解决方法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客园整改之思考</title>
      <link href="/2021/04/06/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E6%95%B4%E6%94%B9%E4%B9%8B%E6%80%9D%E8%80%83/"/>
      <url>/2021/04/06/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E6%95%B4%E6%94%B9%E4%B9%8B%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>在博客园写博客写了三年半的时间了，当初为什么会选择在博客园写，我也记不清是什么原因了，或许这大概是缘分吧。<br><a id="more"></a></p><p>今年3月份后半段的时候，博客园突然访问不了了，如今通过搜索资料，仍然发现有部分文章访问不了，如下图所示:<br><img src="/2021/04/06/博客园整改之思考/01.png" alt=""></p><p>博客园给园友致歉，内容如下图所示:<br><img src="/2021/04/06/博客园整改之思考/02.png" alt=""></p><p>从这张图中引发我的一些思考，最核心的一句就是:<br><strong>7天还17年欠下的债（网站运营工作），四两拨万斤，我们的任何努力都是杯水车薪。</strong></p><h2><span id="一-技术债务的思考">一、技术债务的思考</span></h2><p>技术债务又称代码债务。定义如下:<br><strong>交付第一次代码就像陷入债务。 债务是可以加快开发速度，只有通过重写代码，及时偿还债务。如果不偿还债务，就会发生危险。 把时间花在写一些不正确的代码上的每一分钟都算作该债务的利息。 整个软件项目可能在未合并代码的部署，面向对象设计或其他方面的债务问题而陷入停顿</strong>-著名的计算机程序员沃德·坎宁安</p><p>在创业公司的时候，从智能酒店+智能门锁、快速开发平台、编程教育平台到电商平台二次开发等，写了大量的代码(至少十万行代码量，不含空格)，代码虽然写的多，但技术债务也不少，这导致的一个结果就是bug越写越多，最后不得不以周末的时间来改bug。</p><h3><span id="1为什么bug越写越多以我的经验总结如下">1.为什么bug越写越多？以我的经验总结如下:</span></h3><ul><li>写之前想的太少，没有想清楚就直接开敲，一切凭感觉(凭感觉写代码，在没养成良好的编码习惯和研发制度的约束下，凭感觉写代码很不可靠)；</li><li>工期紧，任务多，注重功能实现，忽略实现细节(对输入进行参数校验、复杂的业务逻辑处理考虑过于简单、不合理的数据库/IO操作、无异常机制或大量不必要的try/catch等)。</li></ul><h3><span id="2那么如何减少bug率">2.那么如何减少bug率？</span></h3><ul><li><strong>团队编码规范一定要落实</strong>(可以参考阿里巴巴的Java开发规范)；</li><li><strong>每写完一个功能，一定要自测</strong>(如果你平时bug率很高一定要这样做，当你的bug率大幅度降低时不一定都要自测(可能代表你逐渐养成好的编码习惯)，不过我的习惯是不管代码bug率多么低，一定要自测)；</li><li><strong>代码Code Review</strong>(不管是Review自己的或者还是其他人的，多少都会有些收获的)；</li><li><strong>一定要有责任心</strong>(记得当初在创业公司的时候，整个后台的前后端都是由我和另外一个同事负责，我们俩写了一堆bug，整个后台管理系统可用性非常差，根本原因就是我们责任心缺失,写的很随意)。</li></ul><h3><span id="3技术债务如何从源头控制">3.技术债务如何从源头控制？</span></h3><p>此次博客园被审查，很大原因是因为对于内容审核不严，内容审核太松的话，某些非法分子就会借此进行非法宣传和传播，最后遭殃的一定是平台，微信公众号在这块就做的很不错(可以借鉴)。之前在纵横网写小说的时候，发现纵横网的内容编辑器对内容审核还是比较严的，特别当内容出现违禁词的时候，强制性不准发布。</p><p><strong>回归正题，技术债务如何从源头控制住？或者是已经发生要如何控制？</strong></p><ul><li><strong>制度</strong>(光靠人的主观能动性是不行的，还要从制度上约束，合理的制度能充分调动人的主观能动性和积极性)；</li><li><strong>定期团队内部培训</strong>(代码规范、业务讲解、问题复盘、技术分享)；</li><li><strong>工程师要有主人翁的意识</strong>(开发前熟悉业务和理解需求、开发时画流程图(针对业务逻辑复杂的)和写代码遵守公司代码规范、开发后自测)；</li><li><strong>定期处理技术债务</strong>(功能实现了，但可读性和可扩展性非常不好需要重构，定期抽时间处理不一定要一口吃一个大胖子)；</li><li><strong>推行代码Review</strong>(利于发现系统的技术债务，同时也是为了提高团队的编码质量，好的推广落实，不好的引以为鉴)。</li></ul><h2><span id="二-面向搜索编程受阻">二、面向搜索编程受阻</span></h2><p>平时开发基于以往的经历(踩过的坑)，基本上能解决开发过程中的不少问题，但面对有些问题还需要搜索，没有搜索很难进行的下去。<br>这次说的面向搜索编程搜索受阻，不是指不会用搜索引擎，而是指我想要搜的关键信息，其中有一篇文章在博客园平台，但因为博客园平台整改，看不到我想要的信息。于是我便只能转向CSDN、思否、简书、StackoverFlow或其他个人博客，从中得到我想要的信息。<br>不禁想起导师曾写过的一篇wiki关于技术管理的，其中提到一点<br><strong>“一定要自己把问题搞清楚，不要寄希望于别人来帮你搞清楚事情，可以借助别人的帮助，但不能过度依赖”</strong><br>对于面向搜索编程时，有些时候我会犯这样的错误，只是看到报错部分的信息，没有注意到是那一行出现这样的错误，就直接搜索了(有些时候这样的搜索很低效，因为你没有弄清楚真正的错误是什么)，这种情况就是过于依赖搜索引擎，不过好在这种现象自去年下半年和至今基本犯的比较少，这或许是一个好的兆头。</p><h3><span id="1面向搜索编程让我看到自身的一些不足">1.面向搜索编程让我看到自身的一些不足？</span></h3><ul><li><strong> 基本功有待加强</strong>(体现在Java中对String、List、Set、Map、I/O和多线程的合理应用，应用不等于合理应用，当然了不仅仅是Java)；</li><li><strong>没有总结出自己的代码库</strong>(最直接的体现没有将以往的工具类总结出来，直接网上复制(不少代码是有问题的)或者将之前公司的代码迁移过来，总结自己的代码库不仅仅是为了方便以后复用，也是为了更好的深入理解)。</li></ul><h3><span id="2如何避免面向搜索编程形成的机械思维">2.如何避免面向搜索编程形成的机械思维？</span></h3><p>面向搜索编程有利也有弊端，</p><ul><li><strong>利是能在一定程度上提高学习或工作效率</strong>；</li><li><strong>弊是如果过于依赖大脑会变得不思考，长此以往，不利于长远发展</strong>。</li></ul><p>这里提到的如何避免面向搜索编程形成的机械思维或者是依赖性思维不等同于不使用搜索引擎。</p><p>刚好之前有一个活生生案例，是我写的一个复盘，文章如下:<br><a href="https://youcongtech.com/2021/01/05/ssh%E9%97%AE%E9%A2%98%E4%B9%8B%E5%A4%8D%E7%9B%98/" target="_blank" rel="noopener">ssh问题之复盘</a></p><p>这篇文章提到的问题，问题的根源在于我没有弄清楚真正的问题是什么，仅仅是依据是没有权限导致重复输入密码，结果是没有找准问题的关键，搜索了一堆，参考了网上各种解决办法都没有解决这样的问题(花费大量不必要的时间，仍然没有解决)。最后冷静下来，复现这个问题，一步步来，才找准了问题的根本原因。</p><p>面向搜索编程的机械思维也可叫惯性思维，这种惯性思维会让我们产生一个错觉(前面提到过)，当遇到一个问题时，我们看到错误信息，只看一部分不看很整体，发现解决不了就直接复制一些关键字搜索，其实这些问题原本是不需要搜索的，错误信息看全了，定位到关键代码(必要时可以借助Debug)实际是可以解决的。</p><p><strong>作为程序员平常工作中用到搜索引擎，主要为如下几个方面？</strong></p><ul><li><strong>个人学习</strong>(网上教程、博文、在线视频、技术官网等)；</li><li><strong>工作中高效解决问题</strong>(站在巨人的肩上，前人踩过的坑，我们不必从头来过)。</li></ul><p>过去近几年的时间，我过于依赖搜索给我带来的一些快感，这些快感让我养成了问题的浅度思考习惯(<strong>所谓问题的浅度思考习惯指仅仅满足于问题的解决，而不去深究问题背后的原因以及如何避免类似的问题再现等</strong>)。</p><p><strong>说了这么多，那么我们如何避免面向搜索编程形成的机械思维？</strong><br>答案很简单，<strong>那就是多给自己提问(凡是多问个为什么)，随着不断提问和回答所提的问题，问题的本质也就找到了，本质定位到了，对应的解决方案自然会有，这一个过程中，深度思考能力也在不断提升。</strong></p><p>当然了突破人的惯性很难，习惯一旦养成，不是一两天就能改的掉的，<strong>所以我选择用复盘来提高自己深度思考的能力和看问题的视角</strong>。</p><h2><span id="三-总结">三、总结</span></h2><p>舒婷有一首诗叫做《这也是一切》，其中有一句我印象深刻，即<strong>”一切的现在都孕育着未来，未来的一切都生长于它的昨天“</strong>，从18年到至今，我比较关键的三年经历(从2018年初到至今)，深刻地验证着这句话。这关键的三年有太多的经验教训，我都没有好好复盘总结过，导致至今还时不时犯这些错误，不过好在近来定期复盘一些事情，能规避不少曾经的错误。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis之insert(插入和更新)</title>
      <link href="/2021/04/03/MyBatis%E4%B9%8Binsert-%E6%8F%92%E5%85%A5%E5%92%8C%E6%9B%B4%E6%96%B0/"/>
      <url>/2021/04/03/MyBatis%E4%B9%8Binsert-%E6%8F%92%E5%85%A5%E5%92%8C%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>近来在改造一个同事的数据入库项目，发现了一些问题，其中就因为数据库联合主键的缘故导入新增的数据不能入库(这个新增的入库数据，其实对应的数据表就存在这样的数据，她那边没有针对此进行判断有则更新，仅仅是无则插入)。<br>基于这个问题，我不想写太多的代码(查这条数据是否存在，存在则更新这样的)，只想用最少的代码量解决这个问题，通过搜索我找到了这样的方法，无需写很多代码，就是一条SQL就能搞定。<br><a id="more"></a></p><h2><span id="1针对单条插入或更新而言sql可以这样写对应的xml里面的sql">1.针对单条插入或更新而言，SQL可以这样写(对应的XML里面的SQL)</span></h2><p>以我博客为例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `wp_users` (</span><br><span class="line">                   `ID`,</span><br><span class="line">                   `user_login`,</span><br><span class="line">                   `user_pass`,</span><br><span class="line">                   `user_nicename`,</span><br><span class="line">                   `user_email`,</span><br><span class="line">                   `user_url`,</span><br><span class="line">                   `user_registered`,</span><br><span class="line">                   `user_activation_key`,</span><br><span class="line">                   `user_status`</span><br><span class="line">                   `display_name`</span><br><span class="line">                   )</span><br><span class="line">           VALUES</span><br><span class="line">               (</span><br><span class="line">               #&#123;ID&#125;,</span><br><span class="line">               #&#123;user_login&#125;,</span><br><span class="line">               #&#123;user_pass&#125;,</span><br><span class="line">               #&#123;user_nicename&#125;,</span><br><span class="line">               #&#123;user_email&#125;,</span><br><span class="line">               #&#123;user_url&#125;,</span><br><span class="line">               #&#123;user_registered&#125;,</span><br><span class="line">               #&#123;user_activation_key&#125;,</span><br><span class="line">               #&#123;user_status&#125;,</span><br><span class="line">               #&#123;display_name&#125;</span><br><span class="line">               )</span><br><span class="line">                   ON DUPLICATE KEY UPDATE</span><br><span class="line">       ID = VALUES(ID),</span><br><span class="line">       user_login = VALUES(user_login),</span><br><span class="line">       user_pass = VALUES(user_pass),</span><br><span class="line">       user_nicename = VALUES (user_nicename),</span><br><span class="line">       user_email = VALUES (user_email),</span><br><span class="line">       user_url = VALUES (user_url),</span><br><span class="line">       user_registered = VALUES (user_registered),</span><br><span class="line">       user_activation_key = VALUES (user_activation_key),</span><br><span class="line">       user_status = VALUES (user_status),</span><br><span class="line">       display_name = VALUES (display_name)</span><br></pre></td></tr></table></figure></p><h2><span id="2针对批量插入或更新而言可以这么写对应的xml里面的sql">2.针对批量插入或更新而言可以这么写(对应的XML里面的SQL)</span></h2><p>以我博客为例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `wp_users` (</span><br><span class="line">                    `ID`,</span><br><span class="line">                    `user_login`,</span><br><span class="line">                    `user_pass`,</span><br><span class="line">                    `user_nicename`,</span><br><span class="line">                    `user_email`,</span><br><span class="line">                    `user_url`,</span><br><span class="line">                    `user_registered`,</span><br><span class="line">                    `user_activation_key`,</span><br><span class="line">                    `user_status`</span><br><span class="line">                    `display_name`</span><br><span class="line">                    )</span><br><span class="line">            VALUES</span><br><span class="line">            </span><br><span class="line">&lt;foreach collection=&quot;list&quot; item=&quot;item&quot; index=&quot;index&quot; separator=&quot;,&quot;&gt;</span><br><span class="line"></span><br><span class="line">                (</span><br><span class="line">                #&#123;item.ID&#125;,</span><br><span class="line">                #&#123;item.user_login&#125;,</span><br><span class="line">                #&#123;item.user_pass&#125;,</span><br><span class="line">                #&#123;item.user_nicename&#125;,</span><br><span class="line">                #&#123;item.user_email&#125;,</span><br><span class="line">                #&#123;item.user_url&#125;,</span><br><span class="line">                #&#123;item.user_registered&#125;,</span><br><span class="line">                #&#123;item.user_activation_key&#125;,</span><br><span class="line">                #&#123;item.user_status&#125;,</span><br><span class="line">                #&#123;item.display_name&#125;</span><br><span class="line">                )</span><br><span class="line">&lt;/foreach&gt;</span><br><span class="line">                    ON DUPLICATE KEY UPDATE</span><br><span class="line">        ID = VALUES(ID),</span><br><span class="line">        user_login = VALUES(user_login),</span><br><span class="line">        user_pass = VALUES(user_pass),</span><br><span class="line">        user_nicename = VALUES (user_nicename),</span><br><span class="line">        user_email = VALUES (user_email),</span><br><span class="line">        user_url = VALUES (user_url),</span><br><span class="line">        user_registered = VALUES (user_registered),</span><br><span class="line">        user_activation_key = VALUES (user_activation_key),</span><br><span class="line">        user_status = VALUES (user_status),</span><br><span class="line">        display_name = VALUES (display_name)</span><br></pre></td></tr></table></figure></p><p>参考资料如下:<br><a href="https://blog.csdn.net/AlbenXie/article/details/109641690" target="_blank" rel="noopener">mybatis对mysql进行插入或者更新(含批量)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>质疑微服务设计</title>
      <link href="/2021/03/27/%E8%B4%A8%E7%96%91%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/03/27/%E8%B4%A8%E7%96%91%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>这套分布式微服务体系建设到现在，已经有半年以上了。前段时间因为技术顾问和项目经理的一些提问，我有些质疑我的设计是不是合理的。<br><a id="more"></a></p><p>这里以我的Blog系统为例进行说明，博客系统基础构架为如下:</p><ul><li>用户模块；</li><li>文章模块；</li><li>评论模块。</li></ul><p>结合我的微服务设计最终为演变为如下:</p><ul><li>用户微服务；</li><li>文章微服务；</li><li>评论微服务；</li><li>服务注册中心；</li><li>网关微服务；</li><li>统一认证微服务。</li></ul><p>看似只有六个，实际有十二个微服务。因为其中用户微服务包含用户数据存取微服务、用户业务逻辑处理微服务、用户接口微服务，文章微服务、评论微服务同理。</p><p>按照当初技术顾问的设想，每个人的职责不一样，设计数据库的专门写数据存取微服务(即DAO微服务)，具体逻辑组装的由开发人员实现，也就是开发人员不一定懂业务(这里的不一定懂业务，指的是业务了解不深，而不是什么都不懂)，只负责数据组装即可，其实间接也反映了单一职责原则，即每个人只做一件事情。</p><p>也就三个功能，涉及了九个微服务，如果还要增加一个问答，肯定要加对应三个微服务，也就是从九个变成十二个了。这样一来只要一加新的功能如找工作、课程、直播等，都会加微服务，随着微服务越来越多，系统也变得越来越复杂，这涉及到微服务如何管理、微服务之间的通信如何保证、微服务部署如何高效快捷、微服务的稳定性、团队之间的沟通(不同的团队负责不同的业务模块等)，微服务的安全性等这些都会增加微服务的复杂性。</p><p>但复杂性也可以降低，将复杂变简单，不能马上就变简单，但可以逐渐演化。</p><p><strong>目前我的措施如下:</strong></p><ul><li><strong>微服务如何管理</strong>(Eureka或Nacos就能管理，前提是微服务的注册中心必须是其中任意一个，通常来说Nacos会比较友好)，通常微服务的管理还需文档化(编写对应的文档标明每个微服务是做什么的)；</li><li><strong>微服务之间的通信如何保证</strong>(微服务之间的通信基于HTTP协议，通过服务注册中心进行彼此间的服务调用，一般来说，只要服务没有宕机，就能给予正常的响应反馈)；</li><li><strong>微服务部署如何高效快捷</strong>(这个是我一直在推行的，用shell将部署流程脚本化，除了脚本化，我还采取分类化，例如部署文章服务，就执行文章微服务脚本即可，如果是评论微服务，执行评论微服务部署脚本即可，脚本执行成功都会有一个成功反馈，当然了如果是报错也会直接反馈)；</li><li><strong>微服务的稳定性</strong>(所谓稳定性，主要担心服务时不时就宕机，保证稳定性，通常是集群的方式，Eureka和Nacos均支持微服务集群)</li><li><strong>团队之间的沟通</strong>(以博客为例，问答微服务需要用户微服务提供某些API，这就涉及到团队之间的沟通，这个沟通关于问答微服务需要用户微服务提供哪些数据、什么时候提供、以什么形式等，沟通顺利的话还好，但是因为有些时候有一些数据不那么好提供，用户微服务可能需要找其他微服务组要API，这就需要一个主导者负责协调，没有一个主导者，最后的结果会导致微服务越来越难管理、越来越乱，变成一座屎山);</li><li><strong>微服务的安全性</strong>(假设大多是在一台服务器上，对外只开放网关的端口，微服务之间的通信仅仅是基于内网，对于特定的外网，进行具体的IP地址校验和开放，避免非法IP地址进行非法请求，这里不影响服务集群，只需确保服务注册中心集群即可，当然了接口访问肯定是要鉴权的)。</li></ul><p><strong>面对质疑，人都会有抵触情绪的，但质疑并不是一件坏事，质疑能在一定程度上有助于你发现设计上的不足，可以针对性优化，同时也能深化你对系统设计上的认识。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何写好对外的API微服务</title>
      <link href="/2021/03/27/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E5%AF%B9%E5%A4%96%E7%9A%84API%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
      <url>/2021/03/27/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E5%AF%B9%E5%A4%96%E7%9A%84API%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>写好对外API和对内API本质上是一样的，都需要考虑这几个方面？</p><ul><li>API文档；</li><li>API安全性；</li><li>API日志；</li><li>API性能。<a id="more"></a></li></ul><h2><span id="一-api文档">一、API文档</span></h2><p>好的API文档，能够降低低效沟通带来的时间、人力成本。好的文档应具有的特性有:结构清晰、内容简洁易懂等。</p><h3><span id="好的api文档应该要有这些内容">好的API文档应该要有这些内容？</span></h3><h4><span id="1概述">1.概述</span></h4><h5><span id="1编制目的">(1)编制目的</span></h5><h5><span id="2协议描述">(2)协议描述</span></h5><h6><span id="a应用名称">a.应用名称</span></h6><h6><span id="b交互协议通常http">b.交互协议(通常HTTP)</span></h6><h6><span id="c请求数据格式">c.请求数据格式</span></h6><h6><span id="d数据编码方式">d.数据编码方式</span></h6><h6><span id="e字符编码方式">e.字符编码方式</span></h6><h6><span id="fapi地址">f.API地址</span></h6><h6><span id="g交互超时">g.交互超时</span></h6><h4><span id="2接口列表">2.接口列表</span></h4><h5><span id="1具体接口名称">(1)具体接口名称</span></h5><h5><span id="2接口描述">(2)接口描述</span></h5><h5><span id="3请求频率">(3)请求频率</span></h5><h5><span id="4请求url">(4)请求URL</span></h5><h5><span id="5请求参数">(5)请求参数</span></h5><h5><span id="6请求参数描述">(6)请求参数描述</span></h5><h5><span id="7响应结果">(7)响应结果</span></h5><h4><span id="3附录">3.附录</span></h4><h5><span id="1响应码对照">(1)响应码对照</span></h5><h5><span id="2其它补充">(2)其它补充</span></h5><h3><span id="业内参考对象">业内参考对象</span></h3><p>可以借鉴参考，不一定照搬照抄，适合自己的才最重要。下面的具体实例和我上面列举的大同小异。</p><h4><span id="1支付宝">1.支付宝</span></h4><p>支付宝支付api文档地址:<br><a href="https://opendocs.alipay.com/apis/api_1" target="_blank" rel="noopener">https://opendocs.alipay.com/apis/api_1</a></p><h4><span id="2微信支付">2.微信支付</span></h4><p>微信支付api文档地址:<br><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_5_1.shtml" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_5_1.shtml</a></p><h4><span id="3聚合">3.聚合</span></h4><p>聚合API文档:<br><a href="https://www.juhe.cn/docs" target="_blank" rel="noopener">https://www.juhe.cn/docs</a><br>例如身份证实名认证api文档地址:<br><a href="https://www.juhe.cn/docs/api/id/103" target="_blank" rel="noopener">https://www.juhe.cn/docs/api/id/103</a></p><h4><span id="4腾讯云">4.腾讯云</span></h4><p>腾讯云API文档:<br><a href="https://cloud.tencent.com/document/api/" target="_blank" rel="noopener">https://cloud.tencent.com/document/api/</a></p><h4><span id="5阿里云">5.阿里云</span></h4><p>阿里云API文档:<br><a href="https://developer.aliyun.com/api" target="_blank" rel="noopener">https://developer.aliyun.com/api</a></p><h2><span id="二-api安全性">二、API安全性</span></h2><p>API安全性的目的是防止被人攻击以及非法利用获取数据等。这就显得API安全性至关重要。常用API安全性设计有如下:</p><ul><li>token鉴权机制；</li><li>时间戳超时机制；</li><li>API签名机制。</li></ul><p>这三种机制我都经历过，其中token鉴权机制，我就主导过两次，一次是在创业公司，另一次是在目前这家公司。API签名机制前创业公司由我们组长主导，当时她的设计是时间戳+签名两者都结合起来，而后到了教育项目的时候由我这边开始结合shiro+jwt实现token鉴权机制。<br>关于Shiro+JWT+Token鉴权可以参考我写的这篇文章:<br><a href="https://segmentfault.com/a/1190000038174544" target="_blank" rel="noopener">SpringBoot集成Shiro</a></p><p>关于SpringCloud之Security(本质上还是token鉴权，基于OAuth1.0)，可以参考我写的这篇文章:<br><a href="https://youcongtech.com/2020/06/10/SpringCloud%E4%B9%8BSecurity/" target="_blank" rel="noopener">SpringCloud之Security</a></p><p>不仅仅是对外的API需要特别注重安全性，对内的API(本质上是自己的App和后台API交互)也一样，不然的话很容易受到如下攻击:</p><ul><li>DOS攻击；</li><li>DDOS攻击。</li></ul><p>当然了除了Token鉴权机制、时间戳机制、签名机制外，也可以自建一套独特的机制，例如最近做的对外API，我就结合了公私钥+签名机制做了鉴权，感兴趣的朋友可以参考这篇文档:<br><a href="https://youcongtech.com/2020/10/31/WebService%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/" target="_blank" rel="noopener">WebService安全机制的思考与实践</a></p><p>当然了，还有我曾经最早做的Blog系统，用一个中间表做session存储，每次登录会将用户唯一标识+sessionid插入这张表里，同时这张表会有一个创建时间，系统定时任务每分钟会执行一次，检测sessionid从创建到现在有没有超过8个小时，如果超过了会自动清除这条数据，每次登录会判断是否存在这条数据，如果存在则更新，不存在则新增。这样做的话有一个弊端就是正在操作的时候突然一下就被弹出去了，为此还要有一个接口实时请求刷新这张表，但频繁的操作数据表特别是用户量很大的时候并不是一个明智的选择，于是我让Redis来做这件事情。</p><h2><span id="三-api日志">三、API日志</span></h2><p>API日志分为两个方面，以最近的实践经验，第一针对接口请求进行入日志表存储，第二针对请求的数据进行存入特定的xxx.log(也就是日志文件)。这样做的话主要的目的是针对对方推送调用API，而我方通过获取对方推送的数据进行处理和入库。而我方通常响应的结果不会是数据，只会是状态码便可以结合这两种方式进行处理。<br>但如果是我方既接收和处理数据，同时也接收和响应数据，那么就需要充分的考虑业务场景了，针对响应的结果是否有必要进行存储，在我看来有必要，特别是我方将数据卖给第三方，有证可查，避免少数客户的刁难。</p><p>结合我最近的实践经验来看，我上面这样做虽然做到有据可查，但是也会存在一些问题的:</p><ul><li>服务器的磁盘空间；</li><li>MySQL单表容量2GB或500万行(如果超过这个数会影响性能)。</li></ul><p>存在的问题也有办法解决:</p><ul><li>针对服务器的磁盘空间，可以写shell脚本定期备份和清理；</li><li>对于MySQL可以采用分库分表的形式(有现成的解决方案，如MyCat、Sharding-JDBC等)。</li></ul><h2><span id="四-api性能">四、API性能</span></h2><p>API性能衡量指标主要如下:</p><ul><li>响应时间；</li><li>请求成功率；</li><li>TPS；</li><li>资源利用率；</li><li>数据库死锁；</li><li>CPU限制；</li><li>内存。</li></ul><p>最直接的衡量标准就是，哪怕我用户量多么大，API都能正常给我吐出我想要的结果而不是404或502，再或没有响应处于卡顿的状态。<br>API性能的好坏跟开发人员写的代码也有很大的关系，例如我最近一个同事，优化某个代码，将原本需要6~8个小时才能拿到结果优化到2个小时，最后由两个小时优化到几分钟。<br>这段代码我没细看过，听她跟我说，关键原因是:<strong>for循环里进行频繁的DB操作。</strong></p><p>以我上家教育公司为例，面对庞大的用户所产生庞大的数据量，最常见的做法就是加服务器、加内存、加CPU等，通过服务器冗余来保持稳定性。</p><h2><span id="五-总结">五、总结</span></h2><p>不断回顾以往实践经历(做的好的+设计不足遇到的坑+未知的坑等)，是为了让未来走的更稳。以前很少去复盘，导致不断犯一些重复性的错误，这些重复性错误，虽然能短时间解决，但在我看来是完全没有必要的，因为浪费了时间，这些时间原本可以做一些其它的事情(优化某段问题代码、重构一些冗余代码、学习一些新技术、夯实基础、学一些新东西(非技术类的)等)。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常量与配置文件的应用考量</title>
      <link href="/2021/03/27/%E5%B8%B8%E9%87%8F%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%BA%94%E7%94%A8%E8%80%83%E9%87%8F/"/>
      <url>/2021/03/27/%E5%B8%B8%E9%87%8F%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%BA%94%E7%94%A8%E8%80%83%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>常量，可以理解为一种特殊的变量，通常用static final来修饰，它的值一旦设定，在程序运行过程中不允许改变。<br>常量在实际开发中使用非常多，这里以我博客为例，我的博客系统主要以WordPress作为模仿对象，我的常量类如下：<br><a id="more"></a><br><img src="/2021/03/27/常量与配置文件的应用考量/01.png" alt=""></p><p>其中的RoleConst.java内容如下:<br><img src="/2021/03/27/常量与配置文件的应用考量/02.png" alt=""></p><h3><span id="一我为什么使用常量来定义这些">一.我为什么使用常量来定义这些？</span></h3><p>最主要的一个原因是它能解决魔法值问题。特别是代码中有switch、if和其它重复多次的变量值，通常这些值都可以定义为常量。魔法值太多不利于代码的维护。<br>魔法值代码例子如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String key = &quot;Id#taobao_&quot; + tradeId;</span><br><span class="line">cache.put(key, value);</span><br></pre></td></tr></table></figure></p><h3><span id="二-常量与配置文件的区别">二、常量与配置文件的区别？</span></h3><p>常量通常是一个或多个Java类，这些类的包前缀通常为constant。<br>而配置文件大多是xx.properties文件或xml文件、yaml文件，一般来说，目前properties文件和yaml文件是用的比较多的(分布式微服务项目，如spring+springmvc+mybatis、springboot+mybatis、springboot+springcloud等)，xml文件偏向于比较老的项目了(spring+struts/struts2+hibernate或ssm(sprint+struts/struts2+mybatis等)。</p><h3><span id="三-什么时候应该使用常量什么时候应该使用配置文件">三、什么时候应该使用常量？什么时候应该使用配置文件？</span></h3><p>对于魔法值通常建议使用常量进行管理，而像mysql、memcache、elasticesearch、tomcat、redis、mongodb、对象存储服务器(类似文件管理这样的)等通常使用配置文件进行管理。</p><h3><span id="四-常量的规范有哪些">四、常量的规范有哪些？</span></h3><p>这里参考阿里巴巴Java开发手册:</p><ul><li><p>1.【强制】不允许任何魔法值（即未经定义的常量）直接出现在代码中。</p></li><li><p>2.【强制】long 或者 Long 初始赋值时，使用大写的 L，不能是小写的 l，小写容易跟数字 1 混<br>淆，造成误解。</p></li><li><p>3.【推荐】不要使用一个常量类维护所有常量，按常量功能进行归类，分开维护。<br>说明：大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。</p></li><li><p>4.【推荐】常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包<br>内共享常量、类内共享常量。<br>1） 跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。<br>2） 应用内共享常量：放置在一方库中，通常是 modules 中的 constant 目录下。<br>3） 子工程内部共享常量：即在当前子工程的 constant 目录下。<br>4） 包内共享常量：即在当前包下单独的 constant 目录下。<br>5） 类内共享常量：直接在类内部 private static final 定义。</p></li><li><p>5.【推荐】如果变量值仅在一个范围内变化，且带有名称之外的延伸属性，定义为枚举类。下面<br>正例中的数字就是延伸信息，表示星期几。</p></li></ul><h3><span id="五-配置文件有哪些规范">五、配置文件有哪些规范？</span></h3><ul><li>(1)首先要遵循该配置文件类型的规范，否则会报错或失效(yaml、properties、xml或txt、ini等)；</li><li>(2)按功能类型区分，用户配置文件、系统配置文件、业务配置文件、第三方配置文件等(对于springboot项目而言通常配置文件会放在resources目录下，通过目录进行区分)；</li><li>(3)注释说明(像txt的可能没办法加注释，但最后有一个专门的配置文档说明书，利于以后的扩展和维护)。</li></ul><h3><span id="六-总结">六、总结</span></h3><p>常量和配置文件本质上是让我们的代码变得更稳定、更好维护、更易扩展等，最后带来的好处是团队研发效率的提高，项目开发顺利，不用加班。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据表设计之主键自增、UUID或联合主键</title>
      <link href="/2021/03/25/%E6%95%B0%E6%8D%AE%E8%A1%A8%E8%AE%BE%E8%AE%A1%E4%B9%8B%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E3%80%81UUID%E6%88%96%E8%81%94%E5%90%88%E4%B8%BB%E9%94%AE/"/>
      <url>/2021/03/25/%E6%95%B0%E6%8D%AE%E8%A1%A8%E8%AE%BE%E8%AE%A1%E4%B9%8B%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E3%80%81UUID%E6%88%96%E8%81%94%E5%90%88%E4%B8%BB%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>最近在做数据库设计的时候(以MySQL为主)，遇到不少困惑，因为之前做数据库表设计，基本上主键都是使用自增的形式，最近因为这种做法，被领导指出存在一些不足，于是我想搞明白哪里不足。<br><a id="more"></a></p><h2><span id="一-mysql为什么建议使用自增">一、MySQL为什么建议使用自增？</span></h2><p>通过网上查阅资料，得出一个这样的结论:<br><strong>表的主键一般都要使用自增 id，不建议使用业务id ，是因为使用自增id可以避免页分裂。</strong></p><p>按照我过去的实践:<br>选择使用自增可以避免很多麻烦，主要体现是数据的唯一性(从1到xxx，肯定不会重复的)。</p><h3><span id="1什么是页分裂">1.什么是页分裂？</span></h3><p>这块我没看太明白，我主要参考<strong>如下链接:</strong><br><a href="https://www.cnblogs.com/ZhuChangwu/p/14041410.html" target="_blank" rel="noopener">一看就懂的：MySQL数据页以及页分裂机制</a></p><p><a href="https://zhuanlan.zhihu.com/p/250117430" target="_blank" rel="noopener">为什么?mysql不推荐使用uuid或者雪花id作为主键?</a></p><h2><span id="二-uuid作为主键的优劣势是什么以及它的应用场景是什么">二、UUID作为主键的优劣势是什么？以及它的应用场景是什么？</span></h2><h3><span id="1uuid和自增int型作为主键的比较有哪些优势和劣势">1.UUID和自增int型作为主键的比较,有哪些优势和劣势？</span></h3><h4><span id="1优势">(1)优势</span></h4><ul><li>UUID值在不同的表、数据库、甚至是服务器中都是全局唯一的，所以你可以合并来自不同数据库，甚至是不同服务器上不同数据库上的数据行；</li><li>UUID值不会在URL中暴露你的数据信息。例如，一个客户可以通过 id10来访问他的账号地址 <a href="http://www.example.com/c/10/" target="_blank" rel="noopener">http://www.example.com/c/10/</a> ，他可以很轻松地猜到会有 id 11, 12等等的客户，这可能被拖库，或被别人猜到你的用户量；</li><li>UUID值生成的时候不需要查一遍数据库，并且它还简化了应用层的逻辑。例如，当你要给父表和子表插入数据时，一般你要先把数据插到父表里，然后才能插到子表里。但是如果你用UUID的话，你可以直接生成父表的主键，然后在一个事务里同时把数据插到父表和子表里。</li></ul><h5><span id="专业名词解释">专业名词解释</span></h5><p><strong>拖库:</strong>指黑客通过各种社工手段、技术手段将数据库中敏感信息非法获取，一般这些敏感信息包括用户的账号信息如用户名、密码；身份信息如真实姓名、证件号码；通讯信息如电子邮箱、电话、住址等。</p><h4><span id="2劣势">(2)劣势</span></h4><ul><li>存储UUID值（16字节）需要的存储空间比INT型（4字节）甚至是 BIGINT型（8字节）都要大;</li><li>调试起来会更难一些，你可以想象一下平时你只需要 WHERE id = 10 现在你要写 WHERE id = ‘df3b7cb7-6a95-11e7-8846-b05adad3f0ae’;</li><li>UUID 值通常会因为它的大小和未被排序的问题导致性能问题。</li></ul><p><strong>参考链接:</strong><br><a href="https://kalasearch.cn/community/tutorials/mysql-use-uuid-or-int-as-primary-key/" target="_blank" rel="noopener">MySQL主键应该用UUID还是INT类型</a></p><p><a href="https://zhuanlan.zhihu.com/p/69979644" target="_blank" rel="noopener">一分钟让你了解拖库、洗库和撞库</a></p><h2><span id="2哪些应用场景应该使用uuid作为主键">2.哪些应用场景应该使用UUID作为主键？</span></h2><p><strong>简要概括UUID的适用场景:</strong>主要适合用在大型项目微服务架构中，保证全局ID唯一性(大型项目微服务架构集成各式各样的子系统，避免ID冲突)。</p><p>起初我在数据表设计的时候就与项目经理争论过，挺类似这个链接的对话:<a href="https://blog.csdn.net/weixin_42146996/article/details/108604141" target="_blank" rel="noopener">UUID与数字ID的区别与适用场景</a></p><h2><span id="三-什么是联合主键联合主键的适用场景又是什么">三、什么是联合主键？联合主键的适用场景又是什么？</span></h2><h3><span id="1什么是联合主键">1.什么是联合主键</span></h3><p>指用2个或者是2个以上的字段组成的主键，用这个主键包含的字段作为主键，这个组合在数据表中是唯一，且附加上了主键索引。</p><h3><span id="2联合主键的适用场景是什么">2.联合主键的适用场景是什么？</span></h3><p>我能想到一个用户信息，针对某个一个区域如果用用户ID或用户ID+用户姓名作为主键，难以保持数据的唯一性，因为这一个地区不仅仅是有一个小马哥，可能有七八个人，如此，前面提到的用户ID或用户ID+用户姓名显然是行不通的，这时可以把身份证加入主键，变成了用户ID+用户姓名+身份证(形成了一个联合主键)，这样一来该用户数据的唯一性得到了验证。当然了，联合主键的场景不仅仅是这个，关键看业务场景。</p><h2><span id="四-数据表设计心得分享">四、数据表设计心得分享</span></h2><p>从外包公司-&gt;创业公司-&gt;教育公司-&gt;现在所在公司，回过头来看过去我的数据表设计方面，存在的一个最大不足，<strong>即着重考虑技术实现难易层面，而轻视业务场景适用性、扩展性、稳定性等。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之for循环内外创建对象的区别</title>
      <link href="/2021/03/21/Java%E4%B9%8Bfor%E5%BE%AA%E7%8E%AF%E5%86%85%E5%A4%96%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/03/21/Java%E4%B9%8Bfor%E5%BE%AA%E7%8E%AF%E5%86%85%E5%A4%96%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2><span id="for循环内外创建对象的区别哪个性能更优">for循环内外创建对象的区别，哪个性能更优？</span></h2><a id="more"></a><p>for循环内创建对象，就像这样的代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;DriverTrack&gt; driverTracks = driverService.selectDriverTrackByExample(example);</span><br><span class="line">List&lt;TrackVo&gt; list = new ArrayList&lt;TrackVo&gt;();</span><br><span class="line">if (driverTracks != null &amp;&amp; driverTracks.size() &gt; 0) &#123;</span><br><span class="line">    for (DriverTrack driverTrack : driverTracks) &#123;</span><br><span class="line">        TrackVo trackVo = new TrackVo();</span><br><span class="line">        trackVo.setLat(driverTrack.getLatitude());</span><br><span class="line">        trackVo.setLng(driverTrack.getLongitude());</span><br><span class="line">        list.add(trackVo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>for循环外创建对象，就像这样的代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;DriverTrack&gt; driverTracks = driverService.selectDriverTrackByExample(example);</span><br><span class="line">List&lt;TrackVo&gt; list = new ArrayList&lt;TrackVo&gt;();</span><br><span class="line">if (driverTracks != null &amp;&amp; driverTracks.size() &gt; 0) &#123;</span><br><span class="line">    TrackVo trackVo = null;</span><br><span class="line">    for (DriverTrack driverTrack : driverTracks) &#123;</span><br><span class="line">        trackVo = new TrackVo();</span><br><span class="line">        trackVo.setLat(driverTrack.getLatitude());</span><br><span class="line">        trackVo.setLng(driverTrack.getLongitude());</span><br><span class="line">        list.add(trackVo);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>两者写法的对比存在争议,有如下观点:</strong></p><ul><li>A认为后者比前者要好(因为这样写只创建了一个对象的引用，也就是在for循环里面去new对象的时候，都只是将这个引用指向不同的对象)；</li><li>B认为随着JDK不断升级迭代，两者效率是一样；</li><li>C认为JVM早就解决这样的问题，无需担心。</li></ul><p><strong>我的看法:</strong><br>我更偏向于for循环体内定义对象，因为我一直的写法也是如此，特别是JDK从过去的1.5到现在，JDK已经有15了，像这样的问题JDK开发者早已经替我们考虑好了(Java不像C++,对内存的把控非常严，因为已经有JVM替我们管理了，我们只需专注于业务)。<br>但是从另外一个角度来看，弄清楚为什么比仅仅停留在使用层面，能让我们对于这项技术有更深入的了解和掌握，深入的了解和掌握能让我们走得更远。最近公司领导就特别建议在循环体外定义对象而非在循环体内定义对象。</p><p>接着留一个问题，供我以及感兴趣的读者实践研究？<br>for循环体外性能对比，拿出实际的数据证明两者的优劣。</p><p>参考资料如下:<br><a href="https://www.zhihu.com/question/31751468" target="_blank" rel="noopener">【JAVA】变量声明在循环体内还是循环体外的争论，以及怎样才真正叫『避免在循环体中创建对象』？</a></p><p><a href="https://blog.csdn.net/superman__007/article/details/73549921" target="_blank" rel="noopener">java中的for循环里面创建对象和for循环外面创建对象之间的区别</a></p><p><a href="https://www.jianshu.com/p/744587b61148" target="_blank" rel="noopener">for循环中创建对象</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之基本数据类型和包装数据类型</title>
      <link href="/2021/03/21/Java%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8C%85%E8%A3%85%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2021/03/21/Java%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8C%85%E8%A3%85%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>最近因为如下几个问题，有些疑惑，于是展开研究。</p><ul><li>变量尽量不要使用包装类型，强烈建议使用基本数据类型，是出于哪些考虑？</li><li>ORM映射的实体类为何建议使用包装数据类型，是出于哪些考虑？<a id="more"></a></li></ul><h2><span id="一-变量尽量不要使用包装类型强烈建议使用基本数据类型是出于哪些考虑">一、变量尽量不要使用包装类型，强烈建议使用基本数据类型，是出于哪些考虑？</span></h2><p>最主要是性能方面的考虑。以int和Integer来说，两者的存储原理不一样，int属于基本数据类型，不存在引用概念，其数据存储在栈上；而Integer，属于继承自Object类，按照Java存储对象的内存模型来存储，引用存储在栈上，对象数据存储在堆中。</p><h3><span id="1堆和栈哪个更快">1.堆和栈哪个更快？</span></h3><ul><li>(1)访问时间上，栈只需访问一次，而堆需要访问两次，一次访问取得指针，二次访问才能真正获取数据；</li><li>(2)分配和释放，堆在分配和释放时都要调用函数(MALLOC,FREE)，比如分配时会到堆空间去寻找足够大小的空间(因为多次分配释放后会造成空洞)，这些都会花费一定的时间，而栈则不需要。</li></ul><p>综上上面两点，int的性能比Integer更好，而int同short、int、long、double、floag、boolean、char、byte等属于基本数据类型，而基本数据对象存储在栈中，自然基本数据类型从性能上比包装类型更强。</p><p>参考资料如下:<br><a href="https://blog.csdn.net/findmyself_for_world/article/details/50094991" target="_blank" rel="noopener">Java为什么需要保留基本数据类型</a></p><p><a href="https://blog.csdn.net/yuxiaoshuangshuang/article/details/80677882" target="_blank" rel="noopener">int和Integer的区别，变量尽量不要定义为包装类，尽量使用基本类型。</a></p><p><a href="https://blog.csdn.net/ethan_10/article/details/79812112" target="_blank" rel="noopener">实体类中用基本类型好,还是用包装类型好?</a></p><h2><span id="二-orm映射的实体类为何建议使用包装数据类型是出于哪些考虑">二、ORM映射的实体类为何建议使用包装数据类型，是出于哪些考虑？</span></h2><p>包装类型可以赋值为null，表示空，但基本类型不能赋值为null。<br>而实际中数据表里面的每一行数据并不能保证都是不等于null的，使用包装类比较保险，避免报错影响数据服务的对外提供。</p><h3><span id="1java中为何要有包装类包装类的目的是什么">1.Java中为何要有包装类，包装类的目的是什么？</span></h3><p>从我使用的角度来看，因为有包装类能减少数据类型转换的麻烦，同时List、Set、Map中像基本数据类型(int、short、long等)这样的数据是放不进去的，只能转为包装类型才能放进去，而List、Set、Map在开发中又最为普遍常用。</p><p>参考资料如下:<br><a href="https://www.cnblogs.com/vegetableDD/p/11763009.html" target="_blank" rel="noopener">Java为什么要有包装类</a><br><a href="https://cloud.tencent.com/developer/article/1803380" target="_blank" rel="noopener">Java 中为什么设计了包装类</a><br><a href="https://www.jianshu.com/p/bb4ff1c9853b" target="_blank" rel="noopener">Java为什么要对基本类型进行包装（装箱和拆箱）</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码规范之注释该怎么写</title>
      <link href="/2021/03/21/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E4%B9%8B%E6%B3%A8%E9%87%8A%E8%AF%A5%E6%80%8E%E4%B9%88%E5%86%99/"/>
      <url>/2021/03/21/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E4%B9%8B%E6%B3%A8%E9%87%8A%E8%AF%A5%E6%80%8E%E4%B9%88%E5%86%99/</url>
      
        <content type="html"><![CDATA[<p>有人说，代码即注释，也就是通过你的代码就能看得懂你的代码逻辑是什么。但是对于大多数人来说，这有些不切实际，每个公司的研发团队成员的能力是不一样的，有的能力强，有的能力弱，能力强的体现在能解决若干问题，但是在编码规范方面却有待提高，能力弱的，有的能力弱的在代码规范方面却比所谓的能力强的要好得多，这里的”能力强”并不是指两个人的聪明才智差异很大，而是指特定领域的积累，有的积累得多，经验丰富，有的积累的少，经验不那么丰富。但因为是一个团队，就必须要有一定的约束，不仅仅是对能力强的，能力差也一样，一视同仁，团队不能搞单兵作战，那样就失去了团队的意义。<br><a id="more"></a><br>近来我不断思考一件事情，如何将代码注释写的更好，过去待了好几家公司，我写代码对于注释的态度如下:</p><ul><li>(1)有时间就写，没时间后面再说(实际等于不写任何注释)；</li><li>(2)针对特定接口、类、方法写一些概要注释(也就是解释该接口、类、方法是做什么的)；</li><li>(3)针对复杂的逻辑，写注释，自上而下。</li></ul><p>但是最终做的最多的还是(1)，哪怕有的时候工作中有一定的空闲时间，我所想的并不是如何将以往没写注释的补充一下注释，而是了解研究现在的新技术(流行的编程语言或Java相关的框架组件等)。</p><p>这样做的最后结果是，<strong>代码可读性越来越差，可读性差导致的扩展性也就越来越差，可读性跟可扩展性有一定的相关性</strong>。</p><p><strong>举个例子:</strong><br>在开发时间紧迫的时候，面对新的功能，看到以往有类似的功能，通常我们的做法是将其复制过来，改了一些，测试了一下，功能输出结果，符合预期，然后就不管了，下次再遇到类似的功能，仍然采取该做法。突然某一天，经理说这个新的功能里面要加一些附加小功能，并同时跟这个类似的都全部加上，由于我们之前习惯了复制黏贴，这时对于我们无疑是毁灭性打击，只能拼命加班加点弄了(从这一刻，我明白了码农是如何养成的)。<br><strong>假设我们有这样一个习惯，面对重复两次或三次以上的功能代码，我们可将其抽取成一个通用方法(针对类似的功能)，一方面，代码可重用性增强，另一方面减少不必要的代码量，最后一方面，未来如果需要加扩展，我们只需改动这一个方法即可，同时我们写注释，将这一方法写清楚即可。最近我迫使自己养成这样的一个习惯，面对好几个功能模块，我发现轻松了很多，工作效率也大大提升。</strong></p><h4><span id="一-回归正题从我的理解上注释该怎么写">一、回归正题，从我的理解上，注释该怎么写？</span></h4><ul><li>(1)复杂的逻辑应有一个流程图(可以是visor图、也可以是txt或word、思维导图等)，按照流程图在对应的代码上写下注释；</li><li>(2)接口、类、方法都需要写注释(这个注释通常包含作者、时间、描述等通用，可通过IDEA模板实现)，针对特定的方法，最好使用多行注释，按照数字顺序进行列举；</li><li>(3)参考开源项目是如何写注释的(如Java、Spring全家桶相关的框架等)；</li><li>(4)方法内部逻辑上，尽量减少注释，如果方法内部逻辑太长，一大堆注释，像写作文似的，改一个地方，需要整体看一遍，结合(1)和(2)或(2)。</li></ul><h4><span id="二-那么从阿里巴巴java开发手册上对于注释又是怎么描述的">二、那么从阿里巴巴Java开发手册上对于注释又是怎么描述的？</span></h4><h5><span id="1强制类-类属性-类方法的注释必须使用-javadoc-规范使用内容格式不得使用-xxx-方式">1.【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/*<em>内容</em>/格式，不得使用// xxx 方式。</span></h5><p>说明：在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高<br>阅读效率。</p><h5><span id="2-强制所有的抽象方法包括接口中的方法必须要用-javadoc-注释-除了返回值-参数-异常说明外还必须指出该方法做什么事情实现什么功能">2. 【强制】所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。</span></h5><p>说明：对子类的实现要求，或者调用注意事项，请一并说明。</p><h5><span id="3-强制所有的类都必须添加创建者和创建日期">3. 【强制】所有的类都必须添加创建者和创建日期。</span></h5><h5><span id="4-强制方法内部单行注释在被注释语句上方另起一行使用注释-方法内部多行注释使用-注释注意与代码对齐">4. 【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/<em> </em>/注释，注意与代码对齐。</span></h5><h5><span id="5-强制所有的枚举类型字段必须要有注释说明每个数据项的用途">5. 【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。</span></h5><h5><span id="6-推荐与其半吊子英文来注释不如用中文注释把问题说清楚-专有名词与关键字保持英文原文即可">6. 【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。</span></h5><p>反例：“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</p><h5><span id="7-推荐代码修改的同时注释也要进行相应的修改尤其是参数-返回值-异常-核心逻辑等的修改">7. 【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。</span></h5><p>说明：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。</p><h5><span id="8-参考谨慎注释掉代码-在上方详细说明而不是简单地注释掉-如果无用则删除">8. 【参考】谨慎注释掉代码。在上方详细说明，而不是简单地注释掉。如果无用，则删除。</span></h5><p>说明：代码被注释掉有两种可能性：1）后续会恢复此段代码逻辑。2）永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（代码仓库保存了历史代码）。</p><h5><span id="9-参考对于注释的要求第一-能够准确反应设计思想和代码逻辑第二-能够描述业务含义使别的程序员能够迅速了解到代码背后的信息-完全没有注释的大段代码对于阅读者形同天书注释是给自己看的即使隔很长时间也能清晰理解当时的思路注释也是给继任者看的使其能够快速接替自己的工作">9. 【参考】对于注释的要求：第一、能够准确反应设计思想和代码逻辑；第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。</span></h5><h5><span id="10-参考好的命名-代码结构是自解释的注释力求精简准确-表达到位-避免出现注释的一个极端过多过滥的注释代码的逻辑一旦修改修改注释是相当大的负担">10. 【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。</span></h5>]]></content>
      
      
      
        <tags>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码格式之什么样的代码格式才是正确的</title>
      <link href="/2021/03/21/%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E4%B9%8B%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E6%89%8D%E6%98%AF%E6%AD%A3%E7%A1%AE%E7%9A%84/"/>
      <url>/2021/03/21/%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E4%B9%8B%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E6%89%8D%E6%98%AF%E6%AD%A3%E7%A1%AE%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>应该说是最近，因为代码格式的问题被同事指出，虽然说我主观上不是很乐意接受，但是以后如果我要带徒弟的话，首先自己要做到不好的地方，有则改之，否则怎能服人。</p><p>代码格式问题主要体现是<strong>代码空行太多，一个类的代码行一千多行，其中不必要的空行就多了三四百行。</strong><br><a id="more"></a><br>以我之前写的博客系统其中的代码例子来说(确实看起来不美观):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public SelfUserEntity getUserInfo(String username) &#123;</span><br><span class="line"></span><br><span class="line">       QueryWrapper&lt;Users&gt; userWrapper = new QueryWrapper&lt;Users&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //邮箱正则表达式</span><br><span class="line">       String expr = &quot;^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]&#123;2,4&#125;|[0-9]&#123;1,3&#125;)$&quot;;</span><br><span class="line"></span><br><span class="line">       //是否为邮箱</span><br><span class="line">       if (username.matches(expr)) &#123;</span><br><span class="line">           userWrapper.eq(&quot;user_email&quot;, username);</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           userWrapper.eq(&quot;user_login&quot;, username);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       Users userInfo = usersDao.selectOne(userWrapper);</span><br><span class="line"></span><br><span class="line">       if (userInfo == null) &#123;</span><br><span class="line">           throw new NullPointerException(</span><br><span class="line">                   &quot;用户不存在&quot;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       SelfUserEntity selfUserEntity = new SelfUserEntity();</span><br><span class="line"></span><br><span class="line">       if (userInfo.getId() != null) &#123;</span><br><span class="line"></span><br><span class="line">           selfUserEntity.setUserId(userInfo.getId());</span><br><span class="line">           selfUserEntity.setUsername(userInfo.getUserLogin());</span><br><span class="line">           selfUserEntity.setPassword(userInfo.getUserPass());</span><br><span class="line">           selfUserEntity.setStatus(userInfo.getUserStatus().toString());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       return selfUserEntity;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>换言之，我为什么喜欢代码空行这么多？<br>原因是因为我不喜欢代码看起来太过拥挤、密密麻麻。</p><p>参考Java开发手册-编程规约-代码格式第一条如下:<br>【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果是非空代码块则：</p><ul><li>1） 左大括号前不换行。</li><li>2） 左大括号后换行。</li><li>3） 右大括号前换行。</li><li>4） 右大括号后还有 else 等代码则不换行；表示终止的右大括号后必须换行</li></ul><p>修改后，代码格式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public SelfUserEntity getUserInfo(String username) &#123;</span><br><span class="line">       QueryWrapper&lt;Users&gt; userWrapper = new QueryWrapper&lt;Users&gt;();</span><br><span class="line">       //邮箱正则表达式</span><br><span class="line">       String expr = &quot;^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]&#123;2,4&#125;|[0-9]&#123;1,3&#125;)$&quot;;</span><br><span class="line">       //是否为邮箱</span><br><span class="line">       if (username.matches(expr)) &#123;</span><br><span class="line">           userWrapper.eq(&quot;user_email&quot;, username);</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           userWrapper.eq(&quot;user_login&quot;, username);</span><br><span class="line">       &#125;</span><br><span class="line">       Users userInfo = usersDao.selectOne(userWrapper);</span><br><span class="line">       //条件判断(等于null)</span><br><span class="line">       if (userInfo == null) &#123;</span><br><span class="line">           throw new NullPointerException(</span><br><span class="line">                   &quot;用户不存在&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       //数据装载</span><br><span class="line">       SelfUserEntity selfUserEntity = new SelfUserEntity();</span><br><span class="line">       if (userInfo.getId() != null) &#123;</span><br><span class="line">           selfUserEntity.setUserId(userInfo.getId());</span><br><span class="line">           selfUserEntity.setUsername(userInfo.getUserLogin());</span><br><span class="line">           selfUserEntity.setPassword(userInfo.getUserPass());</span><br><span class="line">           selfUserEntity.setStatus(userInfo.getUserStatus().toString());</span><br><span class="line">       &#125;</span><br><span class="line">       return selfUserEntity;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之时间处理(当前年的上一年、上一季度、当月、当季)</title>
      <link href="/2021/03/05/Java%E4%B9%8B%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86-%E5%BD%93%E5%89%8D%E5%B9%B4%E7%9A%84%E4%B8%8A%E4%B8%80%E5%B9%B4%E3%80%81%E4%B8%8A%E4%B8%80%E5%AD%A3%E5%BA%A6%E3%80%81%E5%BD%93%E6%9C%88%E3%80%81%E5%BD%93%E5%AD%A3/"/>
      <url>/2021/03/05/Java%E4%B9%8B%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86-%E5%BD%93%E5%89%8D%E5%B9%B4%E7%9A%84%E4%B8%8A%E4%B8%80%E5%B9%B4%E3%80%81%E4%B8%8A%E4%B8%80%E5%AD%A3%E5%BA%A6%E3%80%81%E5%BD%93%E6%9C%88%E3%80%81%E5%BD%93%E5%AD%A3/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-当前年的上一年">一、当前年的上一年</span></h2><a id="more"></a><p>核心代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static String getYearBefore() &#123;</span><br><span class="line">      SimpleDateFormat formats = new SimpleDateFormat(&quot;yyyy&quot;);</span><br><span class="line">      Calendar c = Calendar.getInstance();</span><br><span class="line">      c.add(Calendar.YEAR, -1);</span><br><span class="line">      Date date = c.getTime();</span><br><span class="line">      return formats.format(date);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2><span id="二-上一季度">二、上一季度</span></h2><p>核心代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取上一季度 开始和结束时间</span><br><span class="line"> *</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static DateRange getLastQuarter() &#123;</span><br><span class="line">    Calendar startCalendar = Calendar.getInstance();</span><br><span class="line">    startCalendar.set(Calendar.MONTH, ((int) startCalendar.get(Calendar.MONTH) / 3 - 1) * 3);</span><br><span class="line">    startCalendar.set(Calendar.DAY_OF_MONTH, 1);</span><br><span class="line">    setMinTime(startCalendar);</span><br><span class="line"></span><br><span class="line">    Calendar endCalendar = Calendar.getInstance();</span><br><span class="line">    endCalendar.set(Calendar.MONTH, ((int) endCalendar.get(Calendar.MONTH) / 3 - 1) * 3 + 2);</span><br><span class="line">    endCalendar.set(Calendar.DAY_OF_MONTH, endCalendar.getActualMaximum(Calendar.DAY_OF_MONTH));</span><br><span class="line">    setMaxTime(endCalendar);</span><br><span class="line"></span><br><span class="line">    return new DateRange(startCalendar.getTime(), endCalendar.getTime());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 最小时间</span><br><span class="line"> *</span><br><span class="line"> * @param calendar</span><br><span class="line"> */</span><br><span class="line">private static void setMinTime(Calendar calendar) &#123;</span><br><span class="line">    calendar.set(Calendar.HOUR_OF_DAY, 0);</span><br><span class="line">    calendar.set(Calendar.MINUTE, 0);</span><br><span class="line">    calendar.set(Calendar.SECOND, 0);</span><br><span class="line">    calendar.set(Calendar.MILLISECOND, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 最大时间</span><br><span class="line"> *</span><br><span class="line"> * @param calendar</span><br><span class="line"> */</span><br><span class="line">private static void setMaxTime(Calendar calendar) &#123;</span><br><span class="line">    calendar.set(Calendar.HOUR_OF_DAY, calendar.getActualMaximum(Calendar.HOUR_OF_DAY));</span><br><span class="line">    calendar.set(Calendar.MINUTE, calendar.getActualMaximum(Calendar.MINUTE));</span><br><span class="line">    calendar.set(Calendar.SECOND, calendar.getActualMaximum(Calendar.SECOND));</span><br><span class="line">    calendar.set(Calendar.MILLISECOND, calendar.getActualMaximum(Calendar.MILLISECOND));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>DateRange.java:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class DateRange &#123;</span><br><span class="line">    private Date start;</span><br><span class="line">    private Date end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="三-当月">三、当月</span></h2><p>核心代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 获取当月(开始时间)</span><br><span class="line">   *</span><br><span class="line">   * @return</span><br><span class="line">   */</span><br><span class="line">  public static String getCurrentMonthStartDate() &#123;</span><br><span class="line"></span><br><span class="line">      // 获取当前年份、月份、日期</span><br><span class="line">      Calendar cale = null;</span><br><span class="line">      // 获取当月第一天</span><br><span class="line">      SimpleDateFormat format = new SimpleDateFormat(&quot;yyyyMMdd&quot;);</span><br><span class="line">      String firstday;</span><br><span class="line">      cale = Calendar.getInstance();</span><br><span class="line">      cale.add(Calendar.MONTH, 0);</span><br><span class="line">      cale.set(Calendar.DAY_OF_MONTH, 1);</span><br><span class="line">      firstday = format.format(cale.getTime());</span><br><span class="line">      return firstday;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 获取当月(结束时间)</span><br><span class="line">   *</span><br><span class="line">   * @return</span><br><span class="line">   */</span><br><span class="line">  public static String getCurrentMonthEndDate() &#123;</span><br><span class="line"></span><br><span class="line">      // 获取当前年份、月份、日期</span><br><span class="line">      Calendar cale = null;</span><br><span class="line">      // 获取当月最后一天</span><br><span class="line">      SimpleDateFormat format = new SimpleDateFormat(&quot;yyyyMMdd&quot;);</span><br><span class="line">      String lastday;</span><br><span class="line">      cale = Calendar.getInstance();</span><br><span class="line">      cale.add(Calendar.MONTH, 1);</span><br><span class="line">      cale.set(Calendar.DAY_OF_MONTH, 0);</span><br><span class="line">      lastday = format.format(cale.getTime());</span><br><span class="line">      return lastday;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2><span id="四-当季">四、当季</span></h2><p>核心代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 获取当季</span><br><span class="line">    *</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   public static DateRange getThisQuarter() &#123;</span><br><span class="line">       Calendar startCalendar = Calendar.getInstance();</span><br><span class="line">       startCalendar.set(Calendar.MONTH, ((int) startCalendar.get(Calendar.MONTH) / 3) * 3);</span><br><span class="line">       startCalendar.set(Calendar.DAY_OF_MONTH, 1);</span><br><span class="line">       setMinTime(startCalendar);</span><br><span class="line"></span><br><span class="line">       Calendar endCalendar = Calendar.getInstance();</span><br><span class="line">       endCalendar.set(Calendar.MONTH, ((int) startCalendar.get(Calendar.MONTH) / 3) * 3 + 2);</span><br><span class="line">       endCalendar.set(Calendar.DAY_OF_MONTH, endCalendar.getActualMaximum(Calendar.DAY_OF_MONTH));</span><br><span class="line">       setMaxTime(endCalendar);</span><br><span class="line"></span><br><span class="line">       return new DateRange(startCalendar.getTime(), endCalendar.getTime());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx代理之大文件下载失败问题</title>
      <link href="/2021/02/28/Nginx%E4%BB%A3%E7%90%86%E4%B9%8B%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
      <url>/2021/02/28/Nginx%E4%BB%A3%E7%90%86%E4%B9%8B%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>错误详细信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Cloning into &apos;aplanmis-project&apos;...</span><br><span class="line">remote: Enumerating objects: 176887, done.</span><br><span class="line">remote: Counting objects: 100% (176887/176887), done.</span><br><span class="line">remote: Compressing objects: 100% (75181/75181), done.</span><br><span class="line">error: RPC failed; curl 18 transfer closed with outstanding read data remaining</span><br><span class="line">fatal: the remote end hung up unexpectedly</span><br><span class="line">fatal: early EOF</span><br><span class="line">fatal: index-pack failed</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>上面的错误信息导致我无法git clone项目到本地。</p><p>通过关键字搜索找到对应的解决方案如下:</p><h3><span id="1缓冲区设置大小">1.缓冲区设置大小</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.postBuffer 524288000 　　    # 2GB</span><br><span class="line">git config --global http.postBuffer 2097152000　　    # 2GB</span><br><span class="line">git config --global http.postBuffer 3194304000 　　   # 3GB</span><br></pre></td></tr></table></figure><h3><span id="2网络原因">2.网络原因</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.lowSpeedLimit 0</span><br><span class="line">git config --global http.lowSpeedTime 999999</span><br></pre></td></tr></table></figure><h3><span id="3少git-clone一些">3.少git clone一些</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git地址 --depth 1</span><br></pre></td></tr></table></figure><p>上面的三个办法我均尝试，但仍然没有解决这个问题。于是我仔细一想，自建的git通过nginx代理，可能与nginx有关，然后我关键字搜索nginx大文件下载失败问题，于是找到了解决方案:</p><p>参考了该链接，如下:<br><a href="http://blog.chinaunix.net/uid-20332519-id-5755724.html" target="_blank" rel="noopener">Nginx反向代理导致大文件下载失败</a></p><p>该链接提供了两个解决方案，我尝试了第一个解决方案就解决了该问题。<br>在nginx代理配置如下(location标签配置即可):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxy_redirect default;</span><br><span class="line">proxy_buffering off;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PageHelper之排序</title>
      <link href="/2021/02/27/PageHelper%E4%B9%8B%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/02/27/PageHelper%E4%B9%8B%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>PageHelper是MyBatis的分页插件。关于MyBatis的分页插件如何使用和注意事项，可以参考我的这篇博客:<br><a id="more"></a><br><a href="https://youcongtech.com/2021/01/22/MyBatis%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%E4%B9%8B%E8%A7%A3%E5%86%B3/" target="_blank" rel="noopener">MyBatis分页插件失效问题之解决</a></p><p>今天说到的是利用Pagehelper排序，非常简单。</p><p>核心代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PageHelper.startPage(reqDTO.getCurPage(), reqDTO.getPageSize(), columAutoOrder(reqDTO.getOrderColumn(), reqDTO.getSort()));</span><br></pre></td></tr></table></figure></p><p>其中最关键的核心方法，columAutoOrder(param1,param2)内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static String getOrderBy(String orderByColumn, String sort) &#123;</span><br><span class="line"></span><br><span class="line">        if (&quot;0&quot;.equals(sort)) &#123;</span><br><span class="line">            sort = &quot;desc&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (&quot;1&quot;.equals(sort)) &#123;</span><br><span class="line">            sort = &quot;asc&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return orderByColumn + &quot; &quot; + sort;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>合在一起完整代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PageHelper.startPage(reqDTO.getCurPage(), reqDTO.getPageSize(), PageUtil.getOrderBy(reqDTO.getOrderColumn(), reqDTO.getSort()));</span><br><span class="line"></span><br><span class="line">    BasePageVo&lt;T&gt; pageInfo = new BasePageVo(userMapper.selectUserList(companyCode);</span><br></pre></td></tr></table></figure></p><p>BasePageVo.java:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class BasePageVo&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;T&gt; pageList;</span><br><span class="line">    private int curPage;</span><br><span class="line">    private int pageSize;</span><br><span class="line">    private long total;</span><br><span class="line">    private int pages;</span><br><span class="line"></span><br><span class="line">    public BasePageVo(List&lt;T&gt; list) &#123;</span><br><span class="line"></span><br><span class="line">        if (list instanceof Page) &#123;</span><br><span class="line">            Page page = (Page) list;</span><br><span class="line">            this.curPage = page.getPageNum();</span><br><span class="line">            this.pageSize = page.getPageSize();</span><br><span class="line">            this.pages = page.getPages();</span><br><span class="line">            this.pageList = page;</span><br><span class="line">            this.total = page.getTotal();</span><br><span class="line">        &#125; else if (list instanceof Collection) &#123;</span><br><span class="line"></span><br><span class="line">            this.curPage = 1;</span><br><span class="line">            this.pageSize = 10;</span><br><span class="line">            this.pages = 1;</span><br><span class="line">            this.pageList = list;</span><br><span class="line">            this.total = (long) list.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL之集群配置</title>
      <link href="/2021/02/21/MySQL%E4%B9%8B%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/02/21/MySQL%E4%B9%8B%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>本次针对的MySQL版本为5.7，首先分别在A服务器和B服务器上安装MySQL，可以通过yum安装也可以通过wget下载直接编译安装。安装方式可以多种多样，但必须要确保安装成功。<br><a id="more"></a></p><h2><span id="1修改a服务器的mycnf文件">1.修改A服务器的my.cnf文件</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure><p>并添加如下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server-id=1</span><br><span class="line">auto_increment_offset=1</span><br><span class="line">auto_increment_increment=2</span><br><span class="line">gtid_mode=on</span><br><span class="line">enforce_gtid_consistency=on</span><br><span class="line">log-bin=mysql-bin</span><br></pre></td></tr></table></figure></p><h2><span id="2修改b服务器的mycnf文件">2.修改B服务器的my.cnf文件</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure><p>并添加如下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server-id=2</span><br><span class="line">auto_increment_offset=1</span><br><span class="line">auto_increment_increment=2</span><br><span class="line">gtid_mode=on</span><br><span class="line">enforce_gtid_consistency=on</span><br><span class="line">log-bin=mysql-bin</span><br></pre></td></tr></table></figure></p><h2><span id="3在a服务器上的mysql创建b服务器访问的复制用户">3.在A服务器上的MySQL创建B服务器访问的复制用户</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create user B@&apos;IP&apos; identified by &apos;密码&apos;;</span><br><span class="line">grant replication slave on *.* to B@&apos;服务器IP&apos;;</span><br></pre></td></tr></table></figure><h2><span id="4在b服务器上的mysql创建a服务器访问的复制用户">4.在B服务器上的MySQL创建A服务器访问的复制用户</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create user A@&apos;IP&apos; identified by &apos;密码&apos;;</span><br><span class="line">grant replication slave on *.* to A@&apos;密码&apos;;</span><br></pre></td></tr></table></figure><h2><span id="5在b服务器上的mysql执行主从配置进行a主b从">5.在B服务器上的MySQL执行主从配置，进行A主B从</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=&apos;IP&apos;, master_user=&apos;B&apos;, master_password=&apos;?T-p&amp;clsr38i&apos;, master_port=3306, master_auto_position=1;</span><br><span class="line"></span><br><span class="line">start slave;</span><br><span class="line"></span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure><h2><span id="6在a服务器上的mysql执行主从配置进行b主a从">6.在A服务器上的MySQL执行主从配置，进行B主A从</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=&apos;IP&apos;, master_user=&apos;A&apos;, master_password=&apos;?T-p&amp;clsr38i&apos;, master_port=3306, master_auto_position=1;</span><br><span class="line"></span><br><span class="line">start slave;</span><br><span class="line"></span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure><p>然后测试，在A服务器上的MySQL新建数据库和对应的数据表，B服务器上的MySQL会同步过来，确保数据库和数据表一致。</p><h2><span id="7nginx配置">7.Nginx配置</span></h2><p>Nginx配置MySQL集群访问URL，确保微服务应用连接相同的URL。<br>Nginx中的MySQL配置，内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    upstream mysql_proxy&#123;</span><br><span class="line">       hash $remote_addr consistent;</span><br><span class="line">       server A服务器IP:3306 weight=1 max_fails=3 fail_timeout=10s;</span><br><span class="line">   server B服务器IP:3306 weight=1 max_fails=3 fail_timeout=10s;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">       listen 3306; # 数据库服务器监听端口</span><br><span class="line">       proxy_connect_timeout 10s;</span><br><span class="line">       proxy_timeout 300s; </span><br><span class="line">       proxy_pass mysql_proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>特别注意:</strong><br>生产环境不建议设置MySQL端口为3306或3389。</p><p>关于Nginx配置MySQL可以参考我写的这篇文章:<br><a href="https://youcongtech.com/2021/01/22/nginx%E4%B9%8BMySQL%E4%BB%A3%E7%90%86/" target="_blank" rel="noopener">nginx之MySQL代理</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之判断字符串是否为数字(包含浮点型数据)</title>
      <link href="/2021/02/18/Java%E4%B9%8B%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E4%B8%BA%E6%95%B0%E5%AD%97-%E5%8C%85%E5%90%AB%E6%B5%AE%E7%82%B9%E5%9E%8B%E6%95%B0%E6%8D%AE/"/>
      <url>/2021/02/18/Java%E4%B9%8B%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E4%B8%BA%E6%95%B0%E5%AD%97-%E5%8C%85%E5%90%AB%E6%B5%AE%E7%82%B9%E5%9E%8B%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>核心代码如下(利用正则表达式判断):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isNumber(String str) &#123;</span><br><span class="line"></span><br><span class="line">    if (StringUtils.isNotEmpty(str)) &#123;</span><br><span class="line">        String reg = &quot;^[0-9]+(.[0-9]+)?$&quot;;</span><br><span class="line">        return str.matches(reg);</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>如果仅仅是非浮点型数据，也可以使用下面这段代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isNumberJava(String str) &#123;</span><br><span class="line">    for (int i = 0; i &lt; str.length(); i++) &#123;</span><br><span class="line">        if (!Character.isDigit(str.charAt(i))) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不管浮点或者非浮点类型数据，我个人倾向于正则表达式，因为它看起来非常简洁。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>/bin/mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file:</title>
      <link href="/2021/02/16/bin-mysqld-error-while-loading-shared-libraries-libaio-so-1-cannot-open-shared-object-file/"/>
      <url>/2021/02/16/bin-mysqld-error-while-loading-shared-libraries-libaio-so-1-cannot-open-shared-object-file/</url>
      
        <content type="html"><![CDATA[<p>错误详细信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure></p><p>错误原因分析:<br>是因为缺少初始化所必须的库。</p><p>解决办法:<br>安装对应的库，即可，执行如下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y libaio</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Error Code: 1153 - Got a packet bigger than &#39;max_allowed_packet&#39; bytes</title>
      <link href="/2021/02/06/Error-Code-1153-Got-a-packet-bigger-than-max-allowed-packet-bytes/"/>
      <url>/2021/02/06/Error-Code-1153-Got-a-packet-bigger-than-max-allowed-packet-bytes/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-错误详细信息">一、错误详细信息</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error occured at:2021-02-02 09:59:41</span><br><span class="line">Line no.:87</span><br><span class="line">Error Code: 1153 - Got a packet bigger than &apos;max_allowed_packet&apos; bytes</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="二-错误原因">二、错误原因</span></h2><p>导入的数据库脚本(xxx.sql)文件过大(超过几百M)，就会出现上面的错误。</p><h2><span id="三-解决办法">三、解决办法</span></h2><h3><span id="1临时解决办法mysql一旦重启配置就不生效了">1.临时解决办法(MySQL一旦重启，配置就不生效了)</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global max_allowed_packet=524288000;</span><br></pre></td></tr></table></figure><h3><span id="2全局解决办法不管mysql重启多少次配置永久生效">2.全局解决办法(不管MySQL重启多少次，配置永久生效)</span></h3><p>可通过修改my.ini文件(主要在my.ini添加如下内容):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max_allowed_packet=600M</span><br></pre></td></tr></table></figure></p><p>修改完毕后，执行<code>/etc/init.d/mysql restart</code>命令即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>413 Request Entity Too Large</title>
      <link href="/2021/01/22/413-Request-Entity-Too-Large/"/>
      <url>/2021/01/22/413-Request-Entity-Too-Large/</url>
      
        <content type="html"><![CDATA[<p>之前遇到413的错误信息如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">error:RPC失败。HTTP 413 curl 22 the request URL returned error:413</span><br><span class="line"></span><br><span class="line">fatal:远端意外挂断了。</span><br><span class="line"></span><br><span class="line">fatal:远端意外挂断了。</span><br></pre></td></tr></table></figure></p><p>这个错误是git推送代码，代码文件过多导致的。</p><p>之前的解决办法，可以参考如下:<br><a href="https://developers-youcong.github.io/2021/01/13/Http%E4%B9%8B413%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/">Http之413错误解决</a></p><p>今天遇到的这个错误关键核心信息是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">413 Request Entity Too Large</span><br></pre></td></tr></table></figure></p><p>翻译过来，请求数据量过大。<br><a id="more"></a><br>问题的原因基本一样，都与请求数据有关，解决办法自然一样，只不过表达形式不一样,只需在nginx代理配置如下，即可解决(其中client_max_box_size配置多大，与请求数据量有关):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">client_max_body_size 20m;</span><br><span class="line"></span><br><span class="line">client_body_buffer_size 128k;</span><br><span class="line"></span><br><span class="line">fastcgi_intercept_errors on;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis分页插件失效问题之解决</title>
      <link href="/2021/01/22/MyBatis%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%E4%B9%8B%E8%A7%A3%E5%86%B3/"/>
      <url>/2021/01/22/MyBatis%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%E4%B9%8B%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>今天遇到一个问题，MyBatis分页插件失效，导致分页无效，分页失效的原因是我在Controller里做了分页，但业务逻辑实现类对应的方法却写了两个SQL，第一个SQL是查询一条数据判断，第二个SQL是查询列表(是需要分页的)，结果通过日志打印SQL，我发现它却对第一个SQL做分页。最后我的解决办法是，在业务逻辑实现类对应的方法做分页，解决了这个问题。<br><a id="more"></a></p><p>MyBatis实现分页很简单，需要引入如下两个依赖(以SpringBoot+MyBatis为例):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;5.1.6&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.2.12&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>核心模板代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PageHelper.startPage(pageNum,pageSize);</span><br><span class="line">List&lt;T&gt; list = xxxService.getAll();</span><br><span class="line">PageInfo&lt;T&gt; pageInfo = new PageInfo&lt;&gt;(list);</span><br></pre></td></tr></table></figure></p><p>通常建议这段代码写入Service层，最好不要写在Controller里面。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx之MySQL代理</title>
      <link href="/2021/01/22/nginx%E4%B9%8BMySQL%E4%BB%A3%E7%90%86/"/>
      <url>/2021/01/22/nginx%E4%B9%8BMySQL%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>修改nginx.conf，添加如下配置(注意:stream和http是同级的):<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    upstream cloudsocket &#123;</span><br><span class="line">       hash $remote_addr consistent;</span><br><span class="line">       server 192.168.1.101:3389 weight=5 max_fails=3 fail_timeout=30s;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">       listen 25674; # 数据库服务器监听端口</span><br><span class="line">       proxy_connect_timeout 10s;</span><br><span class="line">       proxy_timeout 300s; # 设置客户端和代理服务之间的超时时间，如果5分钟内没操作将自动断开。</span><br><span class="line">       proxy_pass cloudsocket;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置stream的前提，该Nginx要按照如下命令编译安装才行，否则会报错:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx-mysql --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.35 --with-stream</span><br></pre></td></tr></table></figure></p><p>参考链接:<br><a href="https://www.cnblogs.com/DreamFather/p/11358131.html" target="_blank" rel="noopener">nginx转发mysql连接</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql快速插入数据三种方法</title>
      <link href="/2021/01/18/mysql%E5%BF%AB%E9%80%9F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2021/01/18/mysql%E5%BF%AB%E9%80%9F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>今日发现一个独立的api微服务插入数据过慢，主要体现在日志aop的数据入库。于是我通过搜索想知道如何提高mysql数据库插入数据的效率。通过搜索我找到了三种方法:</p><ul><li>(1)修改mysql配置文件(mysql的ini文件增加bulk_insert_buffer_size=100M);</li><li>(2)改写insert语句(使用insert delayed into);</li><li>(3)一次插入多条数据(使用insert into table values(‘张三’,’18’),(‘李四’,’22’),(‘王五’,’28’)…;)。</li></ul><p>其中我尝试了第二种方法，效果能直接看到，只不过有延迟，没有普通insert into那样实时性(从字面上就很好理解，即延迟插入)，<br>这种方法和我用线程池异步处理效果很相似。</p><p>参考资料如下:<br><a href="https://www.cnblogs.com/wangsongbai/p/10493700.html" target="_blank" rel="noopener">mysql千万级数据库插入速度和读取速度的调整记录</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux git免密登录</title>
      <link href="/2021/01/13/Linux-git%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
      <url>/2021/01/13/Linux-git%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>因为某种原因，内网的git需要对外开放，为了保障git代码库的安全。<br>我让所有的仓库均为不可见，相当于登录才能看到对应的代码仓库，不登录看不到，之前是不登陆也能clone到本地，因为是内网，不怕外界侵入。但因此我的部署脚本需要重复输入用户名和密码，为了只输入一次，我执行了如下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br><span class="line"></span><br><span class="line">git config --list</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>参考链接:<br><a href="https://www.jianshu.com/p/d8a6dffd08da" target="_blank" rel="noopener">Linux 的Git客户端免密登录</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http之413错误解决</title>
      <link href="/2021/01/13/Http%E4%B9%8B413%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
      <url>/2021/01/13/Http%E4%B9%8B413%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h3><span id="1错误信息">1.错误信息</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">error:RPC失败。HTTP 413 curl 22 the request URL returned error:413</span><br><span class="line"></span><br><span class="line">fatal:远端意外挂断了。</span><br><span class="line"></span><br><span class="line">fatal:远端意外挂断了。</span><br></pre></td></tr></table></figure><a id="more"></a><h3><span id="2错误原因">2.错误原因</span></h3><p>原因在于Nginx配置文件中的client_max_body_size，client_max_body_size如果不设置的话，默认为1m。</p><h3><span id="3解决办法">3.解决办法</span></h3><p>在nginx配置文件中(nginx.conf)添加如下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">client_max_body_size 8m;</span><br><span class="line"></span><br><span class="line">client_body_buffer_size 128k;</span><br><span class="line"></span><br><span class="line">fastcgi_intercept_errors on;</span><br></pre></td></tr></table></figure><p>我的完整配置如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      client_max_body_size 8m;</span><br><span class="line"></span><br><span class="line">      client_body_buffer_size 128k;</span><br><span class="line"></span><br><span class="line">      fastcgi_intercept_errors on;</span><br><span class="line"></span><br><span class="line">      proxy_pass   http://eqics-api;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="4参考链接">4.参考链接</span></h3><p><a href="https://blog.csdn.net/qq_33571718/article/details/80242556" target="_blank" rel="noopener">HTTP 413错误解决方法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows杀死端口进程命令</title>
      <link href="/2021/01/12/windows%E6%9D%80%E6%AD%BB%E7%AB%AF%E5%8F%A3%E8%BF%9B%E7%A8%8B%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/01/12/windows%E6%9D%80%E6%AD%BB%E7%AB%AF%E5%8F%A3%E8%BF%9B%E7%A8%8B%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-windows杀死端口进程步骤">一、windows杀死端口进程步骤</span></h2><h4><span id="1查询端口进程">1.查询端口进程</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | findstr 端口</span><br></pre></td></tr></table></figure><h4><span id="2找到端口进程占用的应用">2.找到端口进程占用的应用</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist | findstr 进程号</span><br></pre></td></tr></table></figure><h4><span id="3杀死端口进程">3.杀死端口进程</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill -PID 进程号 -F</span><br></pre></td></tr></table></figure><h2><span id="二-应用场景">二、应用场景</span></h2><p>想杀死某个端口进程，但在服务列表中却找不到，可以之间通过命令行找到这个进程并杀死该进程。这样一来，减少重启电脑和找到问题根源。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ERROR 1006 (HY000): Can&#39;t create database</title>
      <link href="/2021/01/11/ERROR-1006-HY000-Can-t-create-database/"/>
      <url>/2021/01/11/ERROR-1006-HY000-Can-t-create-database/</url>
      
        <content type="html"><![CDATA[<p>错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1006 (HY000): Can&apos;&apos;t create database</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>错误原因(针对编译安装MySQL而非直接安装MySQL):<br>与授权有关，我改了mysql所在目录下的权限，导致我创建数据库失败。</p><p>解决办法:<br>重新授权。如chown -R mysql /usr/software/mysql。</p><p>参考链接:<br><a href="https://blog.csdn.net/kexiaoling/article/details/50259569" target="_blank" rel="noopener">MySQL: 1006 - Can’t create database ‘***’ (errno: 13) 错误 解决方法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisCommandExecutionException: MISCONF Redis is configured to save RDB snapshots, but it is current</title>
      <link href="/2021/01/11/RedisCommandExecutionException-MISCONF-Redis-is-configured-to-save-RDB-snapshots-but-it-is-current/"/>
      <url>/2021/01/11/RedisCommandExecutionException-MISCONF-Redis-is-configured-to-save-RDB-snapshots-but-it-is-current/</url>
      
        <content type="html"><![CDATA[<p>错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RedisCommandExecutionException: MISCONF Redis is configured to save RDB snapshots, but it is current</span><br></pre></td></tr></table></figure></p><p>出现错误信息的原因:<br>还是因为授权，我的应用部署在/home下的某个用户目录下，而恰好其中一个应用在启动的时候会用到Redis进行数据初始化。初始化需要将MySQL的数据放到Redis中，而Redis则会将数据持久化，持久化涉及到存储，而存储势必会写入，因为Redis我放在/usr/software这个目录下，而我并未给这个用户授权，所以才导致上面的错误。</p><p>解决办法:<br>授权该用户有写入Redis的权限即可。</p><p>参考解决办法:<br><a href="https://cloud.tencent.com/developer/article/1600527" target="_blank" rel="noopener">解决Redis报错Redis is configured to save RDB snapshots, but it is currently not able to persist on disk</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh问题之复盘</title>
      <link href="/2021/01/05/ssh%E9%97%AE%E9%A2%98%E4%B9%8B%E5%A4%8D%E7%9B%98/"/>
      <url>/2021/01/05/ssh%E9%97%AE%E9%A2%98%E4%B9%8B%E5%A4%8D%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-问题发生-排查以及解决">一、问题发生、排查以及解决</span></h2><p>某天H博士在登录B服务器时发现一个严重的问题，问题是H博士在执行脚本出现一个异常，这个异常是过去我执行脚本只需输入一次密码，现在要输入五六次，只有输入五六次后才能正确执行完脚本。这个问题非常严重。我记得那天ZH向我请教了几个关于Linux授权的问题。而后第二天H博士就开始反馈这个异常。于是ZH先处理，一直找不到问题在哪，于是便叫我来，一同排查是什么原因。<br><a id="more"></a><br>H博士那边给我们提供一个方案，他怀疑是SSH密钥失效导致的，于是我们按照H博士提供的方案一一执行，发现还是不行。<br>而且在验证H博士提供的方案之前，我参考我之前写过的文章:<a href="https://www.cnblogs.com/youcong/p/10809056.html" target="_blank" rel="noopener">Linux远程传输文件免密码</a><br>试验开发服务器，按照我这边试验的，A服务器上的用户可以免密登录B服务器，而B服务器上的用户可以免密登录A服务器，前提是将彼此ssh-keygen -t rsa 生成密钥放入.ssh/authorized_keys即可。<br>我按照我之前写过试了试，完全没有问题。<br>由此排除了是密钥的问题。<br>接着怀疑是权限的原因，最后我给H博士经常使用的用户授予最大权限chmod 777或chown -R 用户 文件夹。但发现仍解决不了这个问题。<br>最后ZH和我一时想不到有效的办法，ZH就准备重装系统了，先从B服务器开始入手。<br>而我最初想着重装太费劲了，主要是备份很多东西和安装很多奇葩环境，一直在想如何解决这个问题。<br>某天灵感突然一来，明确我们的问题(登录某个用户执行该用户所属目录的脚本需要输入多次密码)，我使用root用户新建了一个用户，按照H博士之前提供的方案，切换到新用户，执行相关命令，然后验证是否需要输入密码，最后发现完全不要。我此时还没有意识到是用户组权限问题。</p><p>为了解决这个问题，归纳一下，我试了如下方法:</p><ul><li>认为是权限问题，授予该用户最大权限;</li><li>认为是密钥问题，使用该用户执行重新生成密钥步骤;</li><li>两台服务器存放密钥验证免密(最初定位错了问题，认为是两台服务器需要交互操作);</li><li>重新新建用户验证是否免密；</li><li>修改ssh配置文件。</li></ul><p>最后均不能解决这个问题，后来我只能表示黔驴技穷，ZH也想不到更好的办法，基本上搜索引擎我们能搜的，能尝试的都尝试了，都不能解决这样的问题，ZH还亲自读脚本和执行脚本一步步用echo输出调试，还是不能定位问题根源在哪。最后我们采用最后的方案，重装系统，回归原来的环境。</p><p>ZH当时重复说了多次，我就仅仅动了一下用户权限，其它什么都没有动(<strong>这是一条非常关键的信息，当时我并未重视起来，仅仅是表面的以为没有权限，授个权就行了</strong>)。</p><p>自到ZH重装以后，再次授权，复现了这个问题，然后我叫他别动，我在此新建一个用户，发现执行免密登录所需步骤后，可以不用输入密码。最后他再次快速重装，什么都没有动，然后我使用H博士常使用的用户验证是否输入密码(在此安装免密步骤执行了)，最后发现不要，问题就这么解决了。<br>后来过了一段时间，ZH再次给我反馈有这么一个问题，我问他做了什么操作，他回答到H博士经常操作的是A用户，但是我们部署微服务的是放在B用户上，B用户需要读A用户下的某个文件，于是他给B用户递归授权A用户目录，最后再次验证A用户是否需要输入密码，最后发现需要输入了。最后我使用ll命令查看了/home下的用户权限，发现有问题，譬如/home/A的用户和用户组应该是A A，而不是A B这样的，此次我发现A B。<strong>最后我断定一定是A用户的权限组不明确 生成的密钥与权限组有非常大的关联，如果权限组变了，密钥是无法识别的，于是造成A用户执行脚本时需要输入多次密码。</strong><br>经常多次试验，果真是这个原因。<br>但因为B用户上部署的微服务程序需要访问A用户下的目录，这个问题不解决会有很大的影响，最后我们的方案是，<strong>/home下的A用户和B用户各自做各自的事情，不能交叉，例如A用户除了执行脚本外，还可以执行部署微服务，脚本执行每天人为地固定执行，而程序是自动化的，B用户仅仅是部署，完全没有这个必要，于是A用户只做两件事情，一件事情是执行脚本，另外一件事情是部署微服务，因为后续脚本将会自动化，所以A用户最终的职责就是部署微服务，由此我们推出了一个新的原则，叫做用户专一原则(一个用户只做一件事情或一类事情)。</strong></p><h2><span id="二-总结">二、总结</span></h2><p>这个问题说大不大，说小也不小，足足磨了我们半个多月的时间，当然了，半个多月虽然还有其它的开发任务，但这个问题卡在这，让人着实不爽。虽然最终解决了，但我仍不高兴，因为明明我可以在几个小时内或不用几个小时就能快速解决这个问题，但最后却足足耽搁了半个多月。</p><h3><span id="1之后我在想为什么这个问题这么长才定位到原因">1.之后我在想为什么这个问题这么长才定位到原因？</span></h3><p>我想关键在于问题复现步骤上，首先我没有与ZH仔细沟通，询问他做了什么操作(没有具体到原来是给B用户授予A用户的权限)，而仅仅是得到一个大致不精确的回答了授了一下权限。如果试想当初我追根刨底，具体到执行了什么命令，我想用不了这么长时间就能快速解决，因为问题本身并不难。<br>由此推出，原因在于我没有仔细询问ZH在该服务器上做了哪些操作，执行哪些具体命令，导致我错误的定位问题，如扫雷式排查，一个个试。<br>可见，<strong>遇到问题并不可怕，可怕的是没有找问题发现者，仔细询问是如何发现这个问题的，以及在发现这个问题时做了那些操作(因为这些操作可能是导致问题发生的引子)。</strong></p><h3><span id="2以后将如何避免这样类似的问题">2.以后将如何避免这样类似的问题？</span></h3><p><strong>我总结出如下两个原则:</strong></p><ul><li>(1)面对他人发现的问题，首先要仔细询问他是如何发现的或在此做了些什么(非常关键，需要重点留意)，在与问题发现者的不断沟通中，得到更多的信息，这些信息实际上有助于问题的正确定位(这一刻我明白了磨刀不误砍柴工)；</li><li>(2)在(1)的基础上，根据从(1)所知的信息和结合以往的经验，找到问题的可能原因，定位问题并解决，另外必要时可请教相关专业人士提供帮助，在请教前，记得将问题陈述清楚(如问题是如何发现的、问题发现前做了哪些事情、为了解决这个问题根据问题可能原因尝试用哪些方法去解决等)。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux设备上没有空间之复盘</title>
      <link href="/2021/01/04/Linux%E8%AE%BE%E5%A4%87%E4%B8%8A%E6%B2%A1%E6%9C%89%E7%A9%BA%E9%97%B4%E4%B9%8B%E5%A4%8D%E7%9B%98/"/>
      <url>/2021/01/04/Linux%E8%AE%BE%E5%A4%87%E4%B8%8A%E6%B2%A1%E6%9C%89%E7%A9%BA%E9%97%B4%E4%B9%8B%E5%A4%8D%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h3><span id="一-问题是如何发现的以及如何解决的">一、问题是如何发现的以及如何解决的</span></h3><a id="more"></a><p>某天前端在调接口的时候，发现登录页面得验证码接口居然没有响应数据，显示的是500响应码。于是我一路排查，首先排查验证码接口所属的微服务是否正常，通过lsof -i:服务端口进行排查，发现该微服务进程存在，同时我在服务注册中心的服务管理列表也发现该服务正常注册。结合之前遇到的问题，验证码接口报500，没有及时响应数据，与Redis有关，验证码的数据会存放Redis，我再次排查Redis，发现Redis也正常，最后我看错误日志。<strong>我排查该问题的步骤:</strong></p><ul><li>第一排查提供验证码的微服务是否正常；</li><li>第二排查服务注册中心是否有该服务；</li><li>第三排查Redis是否正常运行；</li><li>最后查看日志。<br>最后我从错误日志中看到了设备上没有空间这样的错误信息。当时我还没有意识到，可能是Linux磁盘空间不足的原因，下意识使用程序员的万能绝招”重启”，但”重启”并没有从根本上解决这个问题，这里提到的”重启”是指重启Java应用而不是重启Linux服务器。最后发现重启也不能解决这个问题，于是我又下意识的觉得是内存的原因，于是便直接关闭其它无需和前端对接口的微服务，突然发现问题一下解决了。于是就没有深究了。<br>而后过了一个小时左右，前端又再次反馈其它接口有问题了，不能及时响应正确的数据，全部报500，这时我开始慌了，隐隐约约觉得问题并未从根本上解决，根本不是内存的原因，这时我才想起用free -m命令查看一下内存的使用，发现还有2个多G的内存，排除了内存不足的原因，通常运行Java应用，内存不足会报如下异常:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000794500000, 576716800, 0) failed; error=&apos;Cannot allocate memory&apos; (errno=12)</span><br></pre></td></tr></table></figure><p>这时我冷静下来，看日志信息，再次发现了这句话”设备上没有空间”。于是通过关键字搜索，找到了问题所在，如图所示:<br><img src="https://developers-youcong.github.io/2020/12/27/Linux-%E8%AE%BE%E5%A4%87%E4%B8%8A%E6%B2%A1%E6%9C%89%E7%A9%BA%E9%97%B4%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/01.png" alt="图一"></p><p>结合Windows，形象地概括，就是我的系统盘C盘满了。</p><h3><span id="二-当时我很疑惑为什么devmappercentos-root一下就满了呢">二、当时我很疑惑为什么/dev/mapper/centos-root一下就满了呢？</span></h3><p>我仔细想了下，发现我将很多软件和服务以及日志全部放在/usr下的某个目录里，于是我一路排查后，发现有这么几类文件占用很大的空间:</p><ul><li>日志文件(Nacos日志以及各项微服务日志、MySQL日志、系统日志等足足10G以上，这时我终于明白了，为什么日志要实时备份传输以及删除了)；</li><li>遗留的软件包和压缩包(10G以上)；</li><li>静态文件(离线地图，足足占了20G以上)和其它图片文件；</li><li>项目源代码以及打包成功后的jar(3个多G)；</li><li>Maven仓库(足足占了5个多G)。</li></ul><h3><span id="三-问题已经定位到了那么我是如何解决这个问题的">三、问题已经定位到了，那么我是如何解决这个问题的？</span></h3><p>问题的根源在于不合理的占用系统盘空间，将这些不合理的从系统盘空间转移出去即可，转移到磁盘空间充足的，也就是/dev/mapper/centos-home下。</p><p><strong>我做了这些事情:</strong></p><ul><li>备份日志，下载到本地(目前备份服务器还没有申请下来，同时关于哪些需要保留的，需要内部协商探讨)，原有的日志进行删除(这个工作可以脚本化)；</li><li>遗留软件包和压缩包直接删除；</li><li>静态文件迁移至/home下的某个用户目录，通过配置进行映射(确保迁移后仍不影响正常的访问)；</li><li>项目源代码迁移到/home下的某个用户目录；</li><li>修改Maven配置文件，仓库地址指向/home下的某个用户目录。</li></ul><p>最终解决了这个问题，释放了50%的空间，其中还有15%暂时不能动。<br>这样一来，/dev/mapper/centos-root这个系统盘得到了充分释放，同时/dev/mapper/centos-home也得到了充分利用(不再资源闲置)。</p><h3><span id="四-问题列表和具体解决措施">四、问题列表和具体解决措施</span></h3><h4><span id="1如何通过linux命令知道当前磁盘空间使用情况">1.如何通过Linux命令知道当前磁盘空间使用情况?</span></h4><p>命令格式如下:<br>du -sh 文件路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh *</span><br></pre></td></tr></table></figure></p><p>执行就能看到当前文件以及文件夹所占用内存。占用内存多的，可进一步查看到底是什么原因占用这么多内存的。</p><p>下面就是我通过du -sh *命令查看内存占用最多的文件或文件夹:</p><ul><li>Nacos;</li><li>MySQL;</li><li>Nginx;</li><li>Project。</li></ul><h4><span id="2为什么nacos会占用这么多内存呢它仅仅是一个服务注册中心并不对外提供服务">2.为什么Nacos会占用这么多内存呢？它仅仅是一个服务注册中心并不对外提供服务。</span></h4><p>通过du -sh <em>命令，我排查到原来是nacos下的bin目录占用内存最多，其它很少，于是我进一步查看，发现bin目录下的log目录占用内存最多，因为该log目录下主要是nacos的访问日志，最后我通过du -sh </em>命令查看，如图所示:<br><img src="/2021/01/04/Linux设备上没有空间之复盘/01.png" alt="图一"><br>由图可知，平均一个日志文件就是一百多M，足足占了十几个G也就不足为奇了。</p><p>我的解决办法很简单，分为两个方面:<br>第一方面是定时删除仅保留一个和备份迁移到/home下的某个目录;<br>第二个方面通过修改nacos的配置解决，具体参考如下链接:<br><a href="https://blog.csdn.net/qq_43437874/article/details/108027122" target="_blank" rel="noopener">Nacos系列(4)-Nacos各种日志太多问题的终极解决办法</a></p><h4><span id="3为什么mysql会占用这么多磁盘空间">3.为什么MySQL会占用这么多磁盘空间？</span></h4><p>通过命令排查(即du -sh *)，我发现是MySQL下的data目录占用磁盘空间最大，其中有一个足足占了4个多G，针对这样的问题，我将其直接由/usr/software目录下迁移到/home下，这样一来系统盘的空间再度得到释放，迁移后需要改mysql的配置文件(即my.cnf文件)。</p><h4><span id="4nginx为何占用这么多磁盘空间">4.Nginx为何占用这么多磁盘空间？</span></h4><p>之所以占用这么多，前面我提到过是因为离线地图，离线地图包括街道地图和卫星地图，两个加在一起足足二十多G，为此我将其迁移到/home下的某个目录，然后修改Nginx的核心配置nginx.conf文件进行映射，这样一来系统盘的空间再次得到释放，同时用户盘的空间得到了充分利用。</p><h4><span id="5关于project">5.关于Project</span></h4><p>Project主要放源代码和打包成功产生的jar，我还是用老办法将其迁移(迁移到/home下的某个目录)。</p><h3><span id="五-问题的根本原因是什么为什么我需要排查这么长时间才定位到这个原因呢">五、问题的根本原因是什么？为什么我需要排查这么长时间才定位到这个原因呢？</span></h3><p>问题的根本原因在于不规范性。正常来说，不应该将用户磁盘空间做的事情放在系统磁盘空间(与Windows同理)。从这一刻起，我也深深意识到规范性的重要，不规范性导致的bug何止千千万万，仔细想来我的开发经历，造成bug的绝大多数原因均是因为不规范，因为不规范，暴露出各种奇奇怪怪的bug。<br>另外从我排查问题来看也是很有问题的，问题在于没有用正确的态度对待日志，其实一开始仔细排查日志，定位到这个关键信息，然后将这样的关键信息复制搜索引擎来寻找解决办法，这样一来就不必浪费了近一个多小时来捣鼓这样的事情。</p><h3><span id="六-如何避免这样的问题再现以及通过这样的问题总结出什么样的原则">六、如何避免这样的问题再现？以及通过这样的问题总结出什么样的原则？</span></h3><p>首先这样的问题属于运维范畴，而我作为公司的兼职运维，面对这样的问题，首先从规范入手，制定可行的规范，从根本上杜绝这样的问题再现，对于这样的问题，<strong>我总结的原则如下:</strong></p><ul><li>(1)不同的用户做不同的事情，保持Linux用户的功能专一性(后面会提到一个重大bug,是因为违反这样的原则导致的)；</li><li>(2)遇到问题，分为两个方面来解决，见过和没有见过，见过表示过去我遇到过这样的问题，可以借鉴以往经验来快速解决这个问题；没有见过的问题，严格遵守的流程:复现问题-&gt;仔细查看日志-&gt;定位问题-&gt;解决问题-&gt;总结并存入知识库(如有必要进行定期复盘)。总而言之，最关键的在于定位问题(如何定位问题，可通过重复复现问题-&gt;仔细查看日志这样的步骤来定位；</li><li>(3)针对常见运维需求，编写脚本(如监控系统磁盘使用情况以及用户磁盘使用情况，超出阈值，自动告警和人工干预)，推进脚本自动化；</li><li>(4)制定适合当下情况的运维规范(如安装软件安在哪个目录、大文件放在哪个目录、日志存放多久并备份后自动清除、每个用户只做自己的事情等,根据实际情况不断增加和修订，定期写入文档进行维护)。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Openrestry+Lua之静态文件鉴权</title>
      <link href="/2021/01/04/Openrestry-Lua%E4%B9%8B%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E9%89%B4%E6%9D%83/"/>
      <url>/2021/01/04/Openrestry-Lua%E4%B9%8B%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E9%89%B4%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<p>核心代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">location /statis-img &#123;</span><br><span class="line">              alias /home/user/files/;</span><br><span class="line">              access_by_lua &apos;</span><br><span class="line"></span><br><span class="line">                local token  = ngx.var.arg_token</span><br><span class="line"></span><br><span class="line">                local access_token = &quot;123456&quot;</span><br><span class="line"></span><br><span class="line">                if token == access_tokein then</span><br><span class="line">                    return true</span><br><span class="line">                else</span><br><span class="line">                   ngx.exit(403)</span><br><span class="line">                end</span><br><span class="line">            &apos;;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>这段代码的主要功能就是鉴权，/home/user/files下的静态文件访问是需要携带token的，携带token以及token正确的前提下才能访问到静态资源，否则被拦截并定向到403。<br><a id="more"></a><br>Openrestry是Nginx的一种扩展增强，主要的一个体现就是通过编写lua脚本实现非常多的功能，如果要进行应用场景归类，可分为如下几大类:</p><ul><li>Web应用；</li><li>接入网关；</li><li>Web防火墙；</li><li>缓存服务器。</li></ul><p>关于Openrestry的搭建，可参考我的这篇文章:<br><a href="https://developers-youcong.github.io/2020/12/12/OpenResty%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/">OpenResty源码编译安装</a></p><p>关于lua语言的学习，可参考如下链接:<br><a href="https://www.runoob.com/lua/lua-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/lua/lua-tutorial.html</a></p><p><a href="https://www.w3cschool.cn/lua/lua-tutorial.html" target="_blank" rel="noopener">https://www.w3cschool.cn/lua/lua-tutorial.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>net.sf.jsqlparser.statement.select.PlainSelect.getGroupByColumnReferences()Ljava/util/List(版本问题)</title>
      <link href="/2021/01/04/net-sf-jsqlparser-statement-select-PlainSelect-getGroupByColumnReferences-Ljava-util-List-%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98/"/>
      <url>/2021/01/04/net-sf-jsqlparser-statement-select-PlainSelect-getGroupByColumnReferences-Ljava-util-List-%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>详细错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.sf.jsqlparser.statement.select.PlainSelect.getGroupByColumnReferences()Ljava/util/List</span><br></pre></td></tr></table></figure></p><p>这个问题导致我的pagehelper分页失效出不来以及报错。</p><p>之前遇到过这样的错误，原因是因为pagehelper插件冲突导致的，我在这篇文章提到过<a href="https://developers-youcong.github.io/2020/09/30/net-sf-jsqlparser-statement-select-PlainSelect-getGroupByColumnReferences-Ljava-util-List/">net.sf.jsqlparser.statement.select.PlainSelect.getGroupByColumnReferences()Ljava/util/List;</a></p><p>这个错误原因是因为jsqlparser版本过高导致的。<br><a id="more"></a></p><p>我原来的版本是3.1，如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.jsqlparser&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jsqlparser&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>现在改为1.4版本就好了，如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.jsqlparser&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jsqlparser&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>这个问题非常普遍，总时不时会冒出来，要从根本上解决这个问题，需要从研发规范方面入手，核心一句<strong>就是不得随意引入其它得库，如果要引入，需做多次测试(兼容性)，确保不会导致项目的启动、接口开发、打包发布报错等。</strong></p><p>参考解决办法链接:<br><a href="https://blog.csdn.net/qq_44804469/article/details/105906831" target="_blank" rel="noopener">https://blog.csdn.net/qq_44804469/article/details/105906831</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux:设备上没有空间的问题解决</title>
      <link href="/2020/12/27/Linux-%E8%AE%BE%E5%A4%87%E4%B8%8A%E6%B2%A1%E6%9C%89%E7%A9%BA%E9%97%B4%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/12/27/Linux-%E8%AE%BE%E5%A4%87%E4%B8%8A%E6%B2%A1%E6%9C%89%E7%A9%BA%E9%97%B4%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>某天前端跟我说验证码的接口挂掉了，然后我急忙去看日志，发现一切正常，没有问题，服务运行正常，Redis也正常。后来看具体日志发现，出现这样的错误，设备上没有空间。<br><a id="more"></a><br>于是我通过关键字搜索，一路排查问题，发现是因为没有磁盘空间导致的，我记得磁盘空间明明很多的。</p><p>通过df -hl命令排查，找到了原因，执行df -hl命令，结果如图所示:<br><img src="/2020/12/27/Linux-设备上没有空间的问题解决/01.png" alt=""></p><p>从这张图发现，/home目录下的磁盘空间没有得到充分的利用。</p><p>至于解决办法，就是将/下的部分文件给删除(如日志)以及一些如JDK、Redis、代码文件、文件服务存储迁移到/home下，这样一来，将/home充分利用起来，问题就迎刃而解。</p><p>参考解决问题链接:<br><a href="https://zhuanlan.zhihu.com/p/150681695" target="_blank" rel="noopener">Linux:设备上没有空间的问题解决</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口之多种返回数据类型</title>
      <link href="/2020/12/19/%E6%8E%A5%E5%8F%A3%E4%B9%8B%E5%A4%9A%E7%A7%8D%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/12/19/%E6%8E%A5%E5%8F%A3%E4%B9%8B%E5%A4%9A%E7%A7%8D%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>近来在做另一个项目接口设计的时候需要考虑这样一个需求，一套接口需兼容两类数据类型(xml和json)。<br><a id="more"></a><br>基于这个项目，原来的接口均为WSDL，遵守的协议为SOAP，它是基于XML的。</p><p>于是我想了一些办法做一些扩展，这样的扩展保持WSDL不变的前提下，增加少量代码实现。</p><p>由于之前整合Apache CXF用到过，所以很顺利的将其复用过来。</p><p>核心代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">public class UserApiController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/add&quot;)</span><br><span class="line">    public int add(@RequestParam String email, @RequestParam String username, @RequestParam String password) &#123;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // 接口地址</span><br><span class="line">            String address = &quot;http://127.0.0.1:9090/cxf/user?wsdl&quot;;</span><br><span class="line">            // 代理工厂</span><br><span class="line">            JaxWsProxyFactoryBean jaxWsProxyFactoryBean = new JaxWsProxyFactoryBean();</span><br><span class="line">            // 设置代理地址</span><br><span class="line">            jaxWsProxyFactoryBean.setAddress(address);</span><br><span class="line">            // 设置接口类型</span><br><span class="line">            jaxWsProxyFactoryBean.setServiceClass(UserService.class);</span><br><span class="line">            // 创建一个代理接口实现</span><br><span class="line">            UserService userService = (UserService) jaxWsProxyFactoryBean.create();</span><br><span class="line"></span><br><span class="line">            return userService.addUser(email, username, password);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面是之前整合CXF中的客户端写的例子，我在项目中改为如下，减少了内部通信，直接调用service,核心代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">public class UserApiController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowire</span><br><span class="line">    private UserService userService;</span><br><span class="line">    </span><br><span class="line">    @PostMapping(&quot;/add&quot;)</span><br><span class="line">    public int add(@RequestParam String email, @RequestParam String username, @RequestParam String password) &#123;</span><br><span class="line"></span><br><span class="line">           return userService.addUser(email, usern</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样一来，XML和JSON返回数据类型都兼容，同时请求数据类型既可以是JSON，也可以XML，都能很好的兼容。</p><p>当然了，如果只对响应数据类型定义，而不用管请求数据是json还是xml，最简单的办法就是请求头定义(核心是Accept)。</p><p>如果是已经写了Controller，原来是JSON数据，现在要求返回XML，还可以这么做，核心配置类如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfig extends WebMvcConfigurationSupport &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configureContentNegotiation(ContentNegotiationConfigurer configurer) &#123;</span><br><span class="line">        configurer.favorPathExtension(true) //是否支持后缀的方式</span><br><span class="line">                .parameterName(&quot;mediaType&quot;)</span><br><span class="line">                .defaultContentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                .mediaType(&quot;xml&quot;, MediaType.APPLICATION_XML)   //当后缀名称为xml的时候返回xml数据</span><br><span class="line">                .mediaType(&quot;json&quot;, MediaType.APPLICATION_JSON);//当后缀名称是json的时候返回json数据</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样一来针对响应数据类型，你如果要的是xml只需在请求路径加上.xml即可，例如<br><a href="http://localhost:8080/user/list.xml，" target="_blank" rel="noopener">http://localhost:8080/user/list.xml，</a><br>直接能获取xml数据。如果是原来的json数据，路径不变，例如<br><a href="http://localhost:8080/user/list" target="_blank" rel="noopener">http://localhost:8080/user/list</a><br>或<br><a href="http://localhost:8080/user/list.json。" target="_blank" rel="noopener">http://localhost:8080/user/list.json。</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux当前用户如何免密登录</title>
      <link href="/2020/12/19/Linux%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E5%A6%82%E4%BD%95%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
      <url>/2020/12/19/Linux%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E5%A6%82%E4%BD%95%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>最近因某些问题研究需要用到这相关的知识，今天做个记录。<br>Linux当前用户如何免密登录，通常免密登录的应用场景主要是跨服务器文件传输或者跨服务器进行某些操作需要用到。</p><p>关于跨服务器文件传输可以参考早年我写的这篇文章:<br><a href="https://www.cnblogs.com/youcong/p/10809056.html" target="_blank" rel="noopener">Linux远程传输文件免密码</a></p><p>关于当前用户如何免密登录，很简单按照如下步骤操作即可:<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa #一路回车，不做任何操作。</span><br><span class="line"></span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys #将生成的key写入authorized_keys文件中。</span><br><span class="line"></span><br><span class="line">chmod 600 ~/.ssh/authorized_keys #其中600权限的意思是设置拥有者可读写，其他人不可读写执行。</span><br><span class="line"></span><br><span class="line">ssh localhost #初次输入会弹出一个确认提示，输入yes即可，接下来执行 ssh localhost命令就不需要再次输入。</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenResty源码编译安装</title>
      <link href="/2020/12/12/OpenResty%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
      <url>/2020/12/12/OpenResty%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3><span id="一下载源码包">一.下载源码包</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://openresty.org/download/openresty-1.17.8.1.tar.gz</span><br><span class="line">wget http://labs.frickle.com/files/ngx_cache_purge-2.3.tar.gz</span><br><span class="line">wget https://github.com/yaoweibin/nginx_upstream_check_module/archive/v0.3.0.tar.gz</span><br></pre></td></tr></table></figure><a id="more"></a><h3><span id="二-解压">二、解压</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf openresty-1.17.8.1.tar.gz</span><br><span class="line">tar -xzvf ngx_cache_purge-2.3.tar.gz</span><br><span class="line">tar -xzvf v0.3.0.tar.gz</span><br></pre></td></tr></table></figure><h3><span id="三-将ngx_cache_purge和nginx_upstream_check_module移动至openresty-11781bundle下">三、将ngx_cache_purge和nginx_upstream_check_module移动至openresty-1.17.8.1/bundle下</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -r ngx_cache_purge-2.3 openresty-1.17.8.1/bundle/</span><br><span class="line">cp -r nginx_upstream_check_module-0.3.0 openresty-1.17.8.1/bundle/</span><br></pre></td></tr></table></figure><h3><span id="四-编译安装">四、编译安装</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/openresty --with-luajit --with-http_ssl_module --user=root --group=root --with-http_realip_module --add-module=./bundle/ngx_cache_purge-2.3/ --add-module=./bundle/nginx_upstream_check_module-0.3.0/</span><br></pre></td></tr></table></figure><p>出现如下所示，表示Ok:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">出现如下表示OK:</span><br><span class="line">Configuration summary</span><br><span class="line">  + using system PCRE library</span><br><span class="line">  + using system OpenSSL library</span><br><span class="line">  + using system zlib library</span><br><span class="line"></span><br><span class="line">  nginx path prefix: &quot;/usr/local/openresty/nginx&quot;</span><br><span class="line">  nginx binary file: &quot;/usr/local/openresty/nginx/sbin/nginx&quot;</span><br><span class="line">  nginx modules path: &quot;/usr/local/openresty/nginx/modules&quot;</span><br><span class="line">  nginx configuration prefix: &quot;/usr/local/openresty/nginx/conf&quot;</span><br><span class="line">  nginx configuration file: &quot;/usr/local/openresty/nginx/conf/nginx.conf&quot;</span><br><span class="line">  nginx pid file: &quot;/usr/local/openresty/nginx/logs/nginx.pid&quot;</span><br><span class="line">  nginx error log file: &quot;/usr/local/openresty/nginx/logs/error.log&quot;</span><br><span class="line">  nginx http access log file: &quot;/usr/local/openresty/nginx/logs/access.log&quot;</span><br><span class="line">  nginx http client request body temporary files: &quot;client_body_temp&quot;</span><br><span class="line">  nginx http proxy temporary files: &quot;proxy_temp&quot;</span><br><span class="line">  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;</span><br><span class="line">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</span><br><span class="line">  nginx http scgi temporary files: &quot;scgi_temp&quot;</span><br><span class="line"></span><br><span class="line">cd ../..</span><br><span class="line">Type the following commands to build and install:</span><br><span class="line">    make</span><br><span class="line">    make install</span><br></pre></td></tr></table></figure></p><p>接着再执行如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>不报错并再/usr/local/目录下发现openrestry，就表示安装成功。</p><h3><span id="五-启动">五、启动</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/openresty/nginx</span><br><span class="line"></span><br><span class="line">./sbin/nginx</span><br></pre></td></tr></table></figure><p>界面效果，如图所示:<br><img src="/2020/12/12/OpenResty源码编译安装/01.png" alt="效果图"></p><p>本文主要参考资料如下:<br><a href="https://blog.csdn.net/anhuizwwandthd/article/details/106140661" target="_blank" rel="noopener">Openresty 源码编译安装 Nginx模块安装Njs</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven之多线程打包</title>
      <link href="/2020/12/12/Maven%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%93%E5%8C%85/"/>
      <url>/2020/12/12/Maven%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>Maven多线程打包核心命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -T 1C -Dmaven.test.skip=true  -Dmaven.compile.fork=true</span><br></pre></td></tr></table></figure></p><p>主要解决多模块编译打包速度问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三方API之获取IP</title>
      <link href="/2020/12/02/%E7%AC%AC%E4%B8%89%E6%96%B9API%E4%B9%8B%E8%8E%B7%E5%8F%96IP/"/>
      <url>/2020/12/02/%E7%AC%AC%E4%B8%89%E6%96%B9API%E4%B9%8B%E8%8E%B7%E5%8F%96IP/</url>
      
        <content type="html"><![CDATA[<p>近来因业务需要，需要用到第三方获取用户真实IP地址的接口。<br><a id="more"></a></p><p>通过调研找到了这些免费的API:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://extreme-ip-lookup.com/json/</span><br><span class="line"></span><br><span class="line">https://api.ipify.org/ 或 https://api.ipify.org/?format=jsonp&amp;callback=getIP</span><br><span class="line"></span><br><span class="line">http://pv.sohu.com/cityjson?ie=utf-8</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 第三方API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx安装配置lua支持</title>
      <link href="/2020/12/02/nginx%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AElua%E6%94%AF%E6%8C%81/"/>
      <url>/2020/12/02/nginx%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AElua%E6%94%AF%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<p>nginx安装很简单，配置lua相关的支持就需要额外的安装一些库和编译。<br><a id="more"></a></p><h2><span id="一-准备环境">一、准备环境</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install lua*</span><br><span class="line">wget https://luajit.org/download/LuaJIT-2.0.4.tar.gz</span><br><span class="line">wget https://github.com/simpl/ngx_devel_kit/archive/v0.2.19.tar.gz</span><br><span class="line">wget https://github.com/openresty/lua-nginx-module/archive/v0.10.13.tar.gz</span><br></pre></td></tr></table></figure><h2><span id="二-解压ngx_devel_kit以及lua-nginx-module">二、解压ngx_devel_kit以及lua-nginx-module</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar xf v0.2.19.tar.gz</span><br><span class="line">tar xf v0.10.13.tar.gz</span><br></pre></td></tr></table></figure><h2><span id="三-编译安装luajit即lua及时编译器">三、编译安装LuaJIT，即Lua及时编译器</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar xf LuaJIT-2.0.4.tar.gz</span><br><span class="line">cd LuaJIT-2.0.4/</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2><span id="四-进入解压的nginx执行命令">四、进入解压的nginx执行命令</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/software/nginx_lua --with-http_ssl_module --with-http_stub_status_module --with-http_dav_module --with-file-aio --with-http_dav_module --add-module=../ngx_devel_kit-0.2.19/ --add-module=../lua-nginx-module-0.10.13/</span><br></pre></td></tr></table></figure><h2><span id="五-写个hello-world测试">五、写个hello world测试</span></h2><p>nginx.conf配置如下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /test_lua &#123;</span><br><span class="line">    default_type text/html;</span><br><span class="line">    content_by_lua_block &#123;</span><br><span class="line">            ngx.say(&quot;Hello Lua!&quot;) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改配置文件后，重启。</p><p>通过浏览器访问/test_lua，有hello world出现，说明配置lua成功。</p><p>本文参考资料如下:<br><a href="https://blog.csdn.net/qq_31725371/article/details/85226116?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control" target="_blank" rel="noopener">Nginx安装配置Lua支持</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>error while loading shared libraries: libluajit-5.1.so.2</title>
      <link href="/2020/12/02/error-while-loading-shared-libraries-libluajit-5-1-so-2/"/>
      <url>/2020/12/02/error-while-loading-shared-libraries-libluajit-5-1-so-2/</url>
      
        <content type="html"><![CDATA[<p>错误详细信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./sbin/nginx: error while loading shared libraries: libluajit-5.1.so.2: </span><br><span class="line">cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>错误背景:<br>搭建nginx+lua环境，启动nginx遇到这样的错误。</p><p>错误原因:<br>nginx中有lua相关库需要有lua环境才能运行起来。</p><p>解决错误，核心代码(安装lua环境即可):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install lua*</span><br></pre></td></tr></table></figure></p><p>参考解决问题链接:<br><a href="https://blog.csdn.net/weixin_45093060/article/details/104037482" target="_blank" rel="noopener">/usr/local/nginx/sbin/nginx: error while loading shared libraries: libluajit-5.1.so.2: cannot open</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nacos之配置文件实时刷新</title>
      <link href="/2020/11/30/nacos%E4%B9%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AE%9E%E6%97%B6%E5%88%B7%E6%96%B0/"/>
      <url>/2020/11/30/nacos%E4%B9%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AE%9E%E6%97%B6%E5%88%B7%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>当初为了解决nacos配置文件实时刷新问题，搜索了很多资料，仍无效，最后不经意间的尝试却解决了这个问题。</p><p>我的SpringCloud版本为:Hoxton.SR4；</p><p>我的SpringCloud Alibaba版本为:2.2.1.RELEASE；</p><p>我的Nacos版本为:1.3.1。<br><a id="more"></a></p><h3><span id="一-核心配置文件一定要是bootstrapyml而非applicationyml">一、核心配置文件(一定要是bootstrap.yml，而非application.yml)</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cloud:</span><br><span class="line">  nacos:</span><br><span class="line">    discovery:</span><br><span class="line">      # 服务注册地址</span><br><span class="line">      server-addr: 127.0.0.1:8848</span><br><span class="line">    config:</span><br><span class="line">      # 配置中心地址</span><br><span class="line">      server-addr: 127.0.0.1:8848</span><br><span class="line">      # 配置文件格式</span><br><span class="line">      file-extension: yml</span><br><span class="line">      # 共享配置</span><br><span class="line">      shared-dataids: application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;,job.yml,test.properties</span><br><span class="line">      refresh-enabled: true</span><br><span class="line">      refreshable-dataids: job.yml,test.properties</span><br></pre></td></tr></table></figure><p>上面是完整的，最关键的是如下两行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">refresh-enabled: true</span><br><span class="line">refreshable-dataids: job.yml,test.properties</span><br></pre></td></tr></table></figure></p><h3><span id="二-读取配置文件的类上需加上refreshscope注解">二、读取配置文件的类上，需加上@RefreshScope注解</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@RefreshScope</span><br><span class="line">@RestController</span><br><span class="line">public class TestConfigJob &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;job.live.cron&#125;&quot;)</span><br><span class="line">    private String val;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private Environment env;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private EqicsSaasApiProperties eqicsSaasApi;</span><br><span class="line"></span><br><span class="line">    @Scheduled(cron = &quot;1 * * * * ?&quot;)</span><br><span class="line">    public void test() &#123;</span><br><span class="line">        System.out.println(DateUtil.date() + &quot; val:&quot; + val);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;api_url:&quot; + eqicsSaasApi.getApiUrl());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/getConfig&quot;)</span><br><span class="line">    public String getConfig() &#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; returnMap = new HashMap&lt;&gt;();</span><br><span class="line">        returnMap.put(&quot;val&quot;, val);</span><br><span class="line">        return JSONUtil.parse(returnMap).toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx之静态资源映射</title>
      <link href="/2020/11/30/nginx%E4%B9%8B%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%98%A0%E5%B0%84/"/>
      <url>/2020/11/30/nginx%E4%B9%8B%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<p><strong>主要应用场景:</strong><br>访问nginx不同目录下的静态资源。<br><a id="more"></a><br><strong>核心配置代码:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /img/ &#123;</span><br><span class="line">           alias /home/software/nginx/html/img/;</span><br><span class="line">           autoindex on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之数据字典实现</title>
      <link href="/2020/11/30/Java%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/11/30/Java%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>数据字典核心代码实现:</strong><br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class DictMap &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private SysDictDataMapper dictDataMapper;</span><br><span class="line"></span><br><span class="line">    private static HashMap&lt;String, String&gt; hashMap = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public static DictMap dictMap;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 从数据库中取值放入到HashMap中(存储字典)</span><br><span class="line">     */</span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void queryDic() &#123;</span><br><span class="line"></span><br><span class="line">        dictMap = this;</span><br><span class="line">        dictMap.dictDataMapper = this.dictDataMapper;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;初始化&quot;);</span><br><span class="line"></span><br><span class="line">        List&lt;SysDictData&gt; dics = dictMap.dictDataMapper.selectDictDataAll();</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; dics.size(); i++) &#123;</span><br><span class="line">            SysDictData dic = dics.get(i);</span><br><span class="line"></span><br><span class="line">            String fieldName = dic.getDictType();</span><br><span class="line">            String fieldValue = dic.getDictValue();</span><br><span class="line">            String key = fieldName + &quot;_&quot; + fieldValue;</span><br><span class="line">            String value = dic.getDictLabel();</span><br><span class="line">            System.out.println(key + &quot;=&quot; + value);</span><br><span class="line">            hashMap.put(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取字典</span><br><span class="line">     *</span><br><span class="line">     * @param fieldName</span><br><span class="line">     * @param fieldValue</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getFieldDetail(String fieldName, String fieldValue) &#123;</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        StringBuilder keySb = sb.append(fieldName).append(&quot;_&quot;).append(fieldValue);</span><br><span class="line">        String key = keySb.toString();</span><br><span class="line">        String value = hashMap.get(key);</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>代码引用:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class UserVo implements Serializable &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private Long userId;</span><br><span class="line"></span><br><span class="line">    private String sex;</span><br><span class="line"></span><br><span class="line">    public String getSex() &#123;</span><br><span class="line">        return sex = DictMap.getFieldDetail(&quot;sex_type&quot;, sex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之定时任务全家桶</title>
      <link href="/2020/11/21/Java%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
      <url>/2020/11/21/Java%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%85%A8%E5%AE%B6%E6%A1%B6/</url>
      
        <content type="html"><![CDATA[<p>定时任务应用非常广泛，Java提供的现有解决方案有很多。<br>本次主要讲schedule、quartz、xxl-job、shedlock等相关的代码实践。<br><a id="more"></a></p><h2><span id="一-springboot使用schedule">一、SpringBoot使用Schedule</span></h2><p>核心代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class ScheduleTask &#123;</span><br><span class="line"></span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(ScheduleTask.class);</span><br><span class="line"></span><br><span class="line">    @Scheduled(cron = &quot;0/1 * * * * ? &quot;)</span><br><span class="line">    public void one() &#123;</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;one:&quot; + new Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Scheduled(cron = &quot;0/1 * * * * ? &quot;)</span><br><span class="line">    public void two() &#123;</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;two:&quot; + new Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Scheduled(cron = &quot;0/1 * * * * ? &quot;)</span><br><span class="line">    public void three() &#123;</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;three:&quot; + new Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行效果如下:<br><img src="/2020/11/21/Java之定时任务全家桶/01.png" alt="图一"></p><p>除此之外还可以这样实现，核心代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@PropertySource(value = &#123;</span><br><span class="line">        &quot;classpath:task.properties&quot;,</span><br><span class="line">&#125;, encoding = &quot;utf-8&quot;)</span><br><span class="line">@Component(&quot;scheduleTask&quot;)</span><br><span class="line">public class ScheduleTask implements SchedulingConfigurer &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;TEST_JOB_TASK_CRON&#125;&quot;)</span><br><span class="line">    private String cron;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configureTasks(ScheduledTaskRegistrar scheduledTaskRegistrar) &#123;</span><br><span class="line"></span><br><span class="line">        scheduledTaskRegistrar.addTriggerTask(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                System.out.println(&quot;执行任务:&quot; + DateUtil.date());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, new Trigger() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Date nextExecutionTime(TriggerContext triggerContext) &#123;</span><br><span class="line">                return new CronTrigger(cron).nextExecutionTime(triggerContext);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCron(String cron) &#123;</span><br><span class="line">        this.cron = cron;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有朋友或许很疑惑，为什么要写这么一大堆，这个与前面的代码又有何区别呢？<br>区别是多线程并行。其实多线程并行也可以不用这么写，只需写一段核心配置类代码即可。</p><p>定时任务多线程配置类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ScheduleConfig implements SchedulingConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    public void configureTasks(ScheduledTaskRegistrar scheduledTaskRegistrar) &#123;</span><br><span class="line">        scheduledTaskRegistrar.setScheduler(Executors.newScheduledThreadPool(5));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再次启动，查看效果，如下:<br><img src="/2020/11/21/Java之定时任务全家桶/02.png" alt="图二"><br>由此看出走不同的线程执行，不同的线程执行的好处是，如果某一个线程挂掉后，并不会阻塞导致其它定时任务无法执行。</p><p>另外如果要想并发执行，前面的配置可以不要，直接用SpringBoot提供的现成注解即可，核心代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@EnableAsync</span><br><span class="line">public class ScheduleAsyncTask &#123;</span><br><span class="line"></span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(ScheduleAsyncTask.class);</span><br><span class="line"></span><br><span class="line">    @Scheduled(cron = &quot;0/1 * * * * ? &quot;)</span><br><span class="line">    @Async</span><br><span class="line">    public void one() &#123;</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;one Async:&quot; + new Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Scheduled(cron = &quot;0/1 * * * * ? &quot;)</span><br><span class="line">    @Async</span><br><span class="line">    public void two() &#123;</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;two Async:&quot; + new Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Scheduled(cron = &quot;0/1 * * * * ? &quot;)</span><br><span class="line">    @Async</span><br><span class="line">    public void three() &#123;</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;three Async:&quot; + new Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除此外，还有基于schedule动态定时任务(所谓动态只不过是指cron表达式放在对应的数据表里)，简单示例代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class DynamicScheduleTask implements SchedulingConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    @SuppressWarnings(&quot;all&quot;)</span><br><span class="line">    CronMapper cronMapper;</span><br><span class="line"></span><br><span class="line">    @Mapper</span><br><span class="line">    public interface CronMapper &#123;</span><br><span class="line">        @Select(&quot;select cron from cron limit 1&quot;)</span><br><span class="line">        public String getCron();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 执行定时任务.</span><br><span class="line">     */</span><br><span class="line">    public void configureTasks(ScheduledTaskRegistrar taskRegistrar) &#123;</span><br><span class="line"></span><br><span class="line">        taskRegistrar.addTriggerTask(</span><br><span class="line">                //1.添加任务内容(Runnable)</span><br><span class="line">                () -&gt; System.out.println(&quot;执行动态定时任务: &quot; + LocalDateTime.now().toLocalTime()),</span><br><span class="line">                //2.设置执行周期(Trigger)</span><br><span class="line">                triggerContext -&gt; &#123;</span><br><span class="line">                    //2.1 从数据库获取执行周期</span><br><span class="line">                    String cron = cronMapper.getCron();</span><br><span class="line">                    //2.2 合法性校验.</span><br><span class="line">                    if (StringUtils.isEmpty(cron)) &#123;</span><br><span class="line">                        // Omitted Code ..</span><br><span class="line">                    &#125;</span><br><span class="line">                    //2.3 返回执行周期(Date)</span><br><span class="line">                    return new CronTrigger(cron).nextExecutionTime(triggerContext);</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>核心配置文件(application.yml):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql://127.0.0.1:3306/test</span><br><span class="line">    username: root</span><br><span class="line">    password: 1234</span><br></pre></td></tr></table></figure></p><p>SQL脚本:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS `test`;</span><br><span class="line">CREATE DATABASE `test`;</span><br><span class="line">USE `test`;</span><br><span class="line">DROP TABLE IF EXISTS `cron`;</span><br><span class="line">CREATE TABLE `cron`  (</span><br><span class="line">  `cron_id` varchar(30) NOT NULL PRIMARY KEY,</span><br><span class="line">  `cron` varchar(30) NOT NULL  </span><br><span class="line">);</span><br><span class="line">INSERT INTO `cron` VALUES (&apos;1&apos;, &apos;0/5 * * * * ?&apos;);</span><br></pre></td></tr></table></figure></p><p>运行效果如下:<br><img src="/2020/11/21/Java之定时任务全家桶/03.png" alt="图三"></p><h2><span id="二-springboot使用quartz">二、SpringBoot使用Quartz</span></h2><h3><span id="1maven依赖">1.Maven依赖</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--引入quartz定时框架--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3><span id="2配置文件">2.配置文件</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  quartz:</span><br><span class="line">    #相关属性配置</span><br><span class="line">    properties:</span><br><span class="line">      org:</span><br><span class="line">        quartz:</span><br><span class="line">          scheduler:</span><br><span class="line">            instanceName: clusteredScheduler</span><br><span class="line">            instanceId: AUTO</span><br><span class="line">          jobStore:</span><br><span class="line">            class: org.quartz.impl.jdbcjobstore.JobStoreTX</span><br><span class="line">            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span><br><span class="line">            tablePrefix: QRTZ_</span><br><span class="line">            isClustered: true</span><br><span class="line">            clusterCheckinInterval: 10000</span><br><span class="line">            useProperties: false</span><br><span class="line">          threadPool:</span><br><span class="line">            class: org.quartz.simpl.SimpleThreadPool</span><br><span class="line">            threadCount: 10</span><br><span class="line">            threadPriority: 5</span><br><span class="line">            threadsInheritContextClassLoaderOfInitializingThread: true</span><br><span class="line">    #数据库方式</span><br><span class="line">    job-store-type: jdbc</span><br><span class="line">    #初始化表结构</span><br><span class="line">    jdbc:</span><br><span class="line">      initialize-schema: always</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql://127.0.0.1:3306/test</span><br><span class="line">    username: root</span><br><span class="line">    password: 1234</span><br></pre></td></tr></table></figure><h3><span id="3启动类">3.启动类</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableScheduling</span><br><span class="line">public class BlogQuartzApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(BlogQuartzApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="4配置类">4.配置类</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class QuartzConfiguration &#123;</span><br><span class="line">    // 使用jobDetail包装job</span><br><span class="line">    @Bean</span><br><span class="line">    public JobDetail myCronJobDetail() &#123;</span><br><span class="line">        return JobBuilder.newJob(CouponTimeOutJob.class).withIdentity(&quot;couponTimeOutJob&quot;).storeDurably().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 把jobDetail注册到Cron表达式的trigger上去</span><br><span class="line">    @Bean</span><br><span class="line">    public Trigger CronJobTrigger() &#123;</span><br><span class="line">        CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(&quot;0/1 * * * * ?&quot;);</span><br><span class="line"></span><br><span class="line">        return TriggerBuilder.newTrigger()</span><br><span class="line">                .forJob(myCronJobDetail())</span><br><span class="line">                .withIdentity(&quot;CouponTimeOutJobTrigger&quot;)</span><br><span class="line">                .withSchedule(cronScheduleBuilder)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="5定时任务类">5.定时任务类</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class CouponTimeOutJob extends QuartzJobBean &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void executeInternal(JobExecutionContext jobExecutionContext) throws JobExecutionException &#123;</span><br><span class="line">        System.out.println(&quot;定时任务执行&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="6启动成功不报错">6.启动成功不报错</span></h3><h4><span id="1对应的数据库会生成定时任务相关的数据表">(1)对应的数据库会生成定时任务相关的数据表</span></h4><p><img src="/2020/11/21/Java之定时任务全家桶/04.png" alt="图四"></p><h4><span id="2控制台不断输出定时任务执行日志">(2)控制台不断输出定时任务执行日志</span></h4><p><img src="/2020/11/21/Java之定时任务全家桶/05.png" alt="图五"></p><h2><span id="三-springboot使用xxl-job">三、SpringBoot使用xxl-job</span></h2><p>之前写过一样的例子，如今简化了下。<br>关于xxl-job使用详情，可以参考我的这篇文章:<br><a href="https://www.cnblogs.com/youcong/p/12935760.html" target="_blank" rel="noopener">SpringBoot整合Xxl-Job</a></p><h3><span id="1maven依赖">1.Maven依赖</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.xuxueli&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;xxl-job-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3><span id="2配置类">2.配置类</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class XxlJobConfig &#123;</span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(XxlJobConfig.class);</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;xxl.job.admin.addresses&#125;&quot;)</span><br><span class="line">    private String adminAddresses;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;xxl.job.executor.appname&#125;&quot;)</span><br><span class="line">    private String appName;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;xxl.job.executor.ip&#125;&quot;)</span><br><span class="line">    private String ip;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;xxl.job.executor.port&#125;&quot;)</span><br><span class="line">    private int port;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;xxl.job.accessToken&#125;&quot;)</span><br><span class="line">    private String accessToken;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;xxl.job.executor.logpath&#125;&quot;)</span><br><span class="line">    private String logPath;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;xxl.job.executor.logretentiondays&#125;&quot;)</span><br><span class="line">    private int logRetentionDays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean(initMethod = &quot;start&quot;, destroyMethod = &quot;destroy&quot;)</span><br><span class="line">    public XxlJobSpringExecutor xxlJobExecutor() &#123;</span><br><span class="line">        logger.info(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;);</span><br><span class="line">        XxlJobSpringExecutor xxlJobSpringExecutor = new XxlJobSpringExecutor();</span><br><span class="line">        xxlJobSpringExecutor.setAdminAddresses(adminAddresses);</span><br><span class="line">        xxlJobSpringExecutor.setAppname(appName);</span><br><span class="line">        xxlJobSpringExecutor.setIp(ip);</span><br><span class="line">        xxlJobSpringExecutor.setPort(port);</span><br><span class="line">        xxlJobSpringExecutor.setAccessToken(accessToken);</span><br><span class="line">        xxlJobSpringExecutor.setLogPath(logPath);</span><br><span class="line">        xxlJobSpringExecutor.setLogRetentionDays(logRetentionDays);</span><br><span class="line"></span><br><span class="line">        return xxlJobSpringExecutor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="3配置文件内容">3.配置文件内容</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># web port</span><br><span class="line">server.port=8081</span><br><span class="line"># no web</span><br><span class="line">#spring.main.web-environment=false</span><br><span class="line">### xxl-job admin address list, such as &quot;http://address&quot; or &quot;http://address01,http://address02&quot;</span><br><span class="line">xxl.job.admin.addresses=http://127.0.0.1:8080/xxl-job-admin</span><br><span class="line">### xxl-job, access token</span><br><span class="line">xxl.job.accessToken=</span><br><span class="line">### xxl-job executor appname</span><br><span class="line">xxl.job.executor.appname=blog-job-xxl-job</span><br><span class="line">### xxl-job executor registry-address: default use address to registry , otherwise use ip:port if address is null</span><br><span class="line">xxl.job.executor.address=</span><br><span class="line">### xxl-job executor server-info</span><br><span class="line">xxl.job.executor.ip=</span><br><span class="line">xxl.job.executor.port=8888</span><br><span class="line">### xxl-job executor log-path</span><br><span class="line">xxl.job.executor.logpath=/data/applogs/xxl-job/jobhandler</span><br><span class="line">### xxl-job executor log-retention-days</span><br><span class="line">xxl.job.executor.logretentiondays=30</span><br></pre></td></tr></table></figure><h3><span id="4定时任务类">4.定时任务类</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class XxlJobTaskExample &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @XxlJob(&quot;blogJobHandler&quot;)</span><br><span class="line">    public ReturnT&lt;String&gt; blogJobHandler(String param) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;执行&quot;);</span><br><span class="line">        XxlJobLogger.log(&quot;XXL-JOB, Hello World.&quot;);</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">            XxlJobLogger.log(&quot;beat at:&quot; + i);</span><br><span class="line">            TimeUnit.SECONDS.sleep(2);</span><br><span class="line">        &#125;</span><br><span class="line">        return ReturnT.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="5执行效果">5.执行效果</span></h3><p>分别如下所示:<br><img src="/2020/11/21/Java之定时任务全家桶/06.png" alt="图六"></p><p><img src="/2020/11/21/Java之定时任务全家桶/07.png" alt="图七"></p><h2><span id="四-springboot使用shedlock">四、SpringBoot使用ShedLock</span></h2><h3><span id="1导入maven依赖">1.导入Maven依赖</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 分布式定时任务锁 --&gt;</span><br><span class="line">   &lt;!-- https://mvnrepository.com/artifact/net.javacrumbs.shedlock/shedlock-spring --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;net.javacrumbs.shedlock&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;shedlock-spring&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;4.0.4&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!-- 使用redis做分布式任务 --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;net.javacrumbs.shedlock&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;shedlock-provider-redis-spring&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;2.5.0&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!-- redis组件 --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3><span id="2编写配置类">2.编写配置类</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableSchedulerLock(defaultLockAtMostFor = &quot;PT30M&quot;)</span><br><span class="line">public class ShedLockConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public LockProvider lockProvider(RedisTemplate redisTemplate) &#123;</span><br><span class="line">        return new RedisLockProvider(redisTemplate.getConnectionFactory());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="3编写具体的定时任务">3.编写具体的定时任务</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class TaskSchedule &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 每分钟执行一次</span><br><span class="line">     * [秒] [分] [小时] [日] [月] [周] [年]</span><br><span class="line">     */</span><br><span class="line">    @Scheduled(cron = &quot;1 * * * * ?&quot;)</span><br><span class="line">    @SchedulerLock(name = &quot;synchronousSchedule&quot;)</span><br><span class="line">    public void SynchronousSchedule() &#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(&quot;Start run schedule to synchronous data:&quot; + new Date());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="4编写启动类">4.编写启动类</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableScheduling</span><br><span class="line">public class ShedLockRedisApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ShedLockRedisApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="5配置文件">5.配置文件</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  tomcat:</span><br><span class="line">    uri-encoding: UTF-8</span><br><span class="line">    max-threads: 1000</span><br><span class="line">    min-spare-threads: 30</span><br><span class="line">  port: 8083</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    database: 0</span><br><span class="line">    host: localhost</span><br><span class="line">    port: 6379</span><br><span class="line">    password:      # 密码（默认为空）</span><br><span class="line">    timeout: 6000ms  # 连接超时时长（毫秒）</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-active: 1000  # 连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">        max-wait: -1ms      # 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">        max-idle: 10      # 连接池中的最大空闲连接</span><br><span class="line">        min-idle: 5       # 连接池中的最小空闲连接</span><br></pre></td></tr></table></figure><h3><span id="6测试">6.测试</span></h3><p>我之所以用shedlock是因为确保在集群环境下各微服务的定时任务只执行一个，而不是全部都运行相同的定时任务。</p><p>本次测试效果如下:<br><img src="/2020/11/21/Java之定时任务全家桶/08.png" alt="图八"></p><p>本次代码例子已放至我的GitHub:<br><a href="https://github.com/developers-youcong/blog-job" target="_blank" rel="noopener">https://github.com/developers-youcong/blog-job</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之下载网络图片到本地文件夹</title>
      <link href="/2020/11/21/Java%E4%B9%8B%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%89%87%E5%88%B0%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
      <url>/2020/11/21/Java%E4%B9%8B%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%89%87%E5%88%B0%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<p>核心代码(下载网络图片到本地文件夹):<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public class DownFileUtils &#123;</span><br><span class="line">    public static void downloadFile(String remoteFilePath, String localFilePath) &#123;</span><br><span class="line">        URL urlfile = null;</span><br><span class="line">        HttpURLConnection httpUrl = null;</span><br><span class="line">        BufferedInputStream bis = null;</span><br><span class="line">        BufferedOutputStream bos = null;</span><br><span class="line">        File f = new File(localFilePath);</span><br><span class="line">        try &#123;</span><br><span class="line">            urlfile = new URL(remoteFilePath);</span><br><span class="line">            httpUrl = (HttpURLConnection) urlfile.openConnection();</span><br><span class="line">            httpUrl.connect();</span><br><span class="line">            bis = new BufferedInputStream(httpUrl.getInputStream());</span><br><span class="line">            bos = new BufferedOutputStream(new FileOutputStream(f));</span><br><span class="line">            int len = 2048;</span><br><span class="line">            byte[] b = new byte[len];</span><br><span class="line">            while ((len = bis.read(b)) != -1) &#123;</span><br><span class="line">                bos.write(b, 0, len);</span><br><span class="line">            &#125;</span><br><span class="line">            bos.flush();</span><br><span class="line">            bis.close();</span><br><span class="line">            httpUrl.disconnect();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                bis.close();</span><br><span class="line">                bos.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">   </span><br><span class="line">//注意这个本地文件夹(localFileMkdir)必须要指定文件的名称如test.jpg，否则会出现下载失败(控制台会报错，访问拒绝)。 </span><br><span class="line"></span><br><span class="line">DownFileUtils.downloadFile(networkImgUrl,localFileMkdir);</span><br><span class="line"></span><br><span class="line">//  例子  DownFileUtils.downloadFile(&quot;http://www.test.com/img/2020.jpg&quot;,&quot;D:\\test\\test.jpg&quot;);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hutool之Http工具类使用</title>
      <link href="/2020/11/21/Hutool%E4%B9%8BHttp%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/11/21/Hutool%E4%B9%8BHttp%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>最早接触Hutool这个集常用工具类为一体的框架工具包是在2018年的时候(酒店业务需要调用第三方门锁API)。<br>而后19年因为业务接触到Bmob云，开始写对Bmob云的API，于是便有了这篇文章<a href="https://www.cnblogs.com/youcong/p/10809078.html" target="_blank" rel="noopener">Hutool工具类之HttpUtil使用Https</a></p><p>最近针对业务，再次用到这个。这次涉及到不同单个服务之间的调用，通信方式还是HTTP为主。</p><p>针对最近常用的，做了一些总结。<br><a id="more"></a></p><h2><span id="二-应用场景">二、应用场景</span></h2><ul><li>(1)调用第三方服务API(第三方服务通常支持HTTP、WebService，一般HTTP比较多);</li><li>(2)单体应用服务之间的服务调用;</li><li>(3)分布式服务之间的服务调用;</li></ul><h2><span id="二-httputil">二、HttpUtil</span></h2><p>官方文档地址:<br><a href="https://hutool.cn/docs/#/http/Http%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A5%E5%85%B7%E7%B1%BB-HttpUtil" target="_blank" rel="noopener">https://hutool.cn/docs/#/http/Http%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A5%E5%85%B7%E7%B1%BB-HttpUtil</a></p><p>大家可以做个参考。</p><h3><span id="1get请求">1.Get请求</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String apiData = HttpUtil.get(url);</span><br><span class="line"></span><br><span class="line">String apiData = HttpUtil.get(url,timeout);</span><br><span class="line"></span><br><span class="line">String apiData = HttpUtil.get(url,paramMap);</span><br><span class="line"></span><br><span class="line">String apiData = HttpUtil.get(url,paramMap,timeout);</span><br><span class="line"></span><br><span class="line">String apiData = HttpUtil.createGet(url)</span><br><span class="line">               .execute().body();</span><br></pre></td></tr></table></figure><h3><span id="2post请求">2.Post请求</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String apiData = HttpUtil.post(url,body);</span><br><span class="line"></span><br><span class="line">String apiData = HttpUtil.post(url,body,timeout);</span><br><span class="line"></span><br><span class="line">String apiData =HttpUtil.post(url,paramMap,timeout);</span><br><span class="line"></span><br><span class="line">String apiData =HttpUtil.post(url,paramMap);</span><br><span class="line"></span><br><span class="line">String apiData = HttpUtil.createPost(url)</span><br><span class="line">        .body(reqDto.toString())</span><br><span class="line">        .execute().body();</span><br></pre></td></tr></table></figure><p>至于apiData如何由String转成JSON格式化，可通过Hutools自带的JSONObject对象或者JSONArray对象进行转换。</p><p>例子如下(以我调用博客园API为例):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private String getToken() &#123;</span><br><span class="line">       String url = &quot;https://api.cnblogs.com/token&quot;;//请求接口地址</span><br><span class="line">       Map&lt;String, Object&gt; paramMap = new HashMap&lt;&gt;();</span><br><span class="line">       paramMap.put(&quot;client_id&quot;, ClientId);</span><br><span class="line">       paramMap.put(&quot;client_secret&quot;, ClientSecret);</span><br><span class="line">       paramMap.put(&quot;grant_type&quot;, &quot;client_credentials&quot;);</span><br><span class="line">       String result = HttpUtil.post(url, paramMap);</span><br><span class="line"></span><br><span class="line">       JSONObject jsonObject = new JSONObject(result);</span><br><span class="line"></span><br><span class="line">       return &quot;Bearer &quot; + jsonObject.getStr(&quot;access_token&quot;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>上面是针对单一JSONObject对象，下面还有针对数组是如何拿到具体的元素(这里是我对接博客园API代码，拿到博客园各个博主的名称，然后根据名称去匹配URL，实现批量数据抓取):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">           Integer pageMaxSize = 200;</span><br><span class="line"></span><br><span class="line">           Integer pageSize = 30;</span><br><span class="line"></span><br><span class="line">           for (int pageParentIndex = 0; pageParentIndex &lt; pageMaxSize; pageParentIndex++) &#123;</span><br><span class="line"></span><br><span class="line">               String homeApiPageData = cnBlogApiService.getSiteHomePostList(pageParentIndex, pageSize);</span><br><span class="line"></span><br><span class="line">               JSONArray getHomeApiPageData = new JSONArray(homeApiPageData);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               if (getHomeApiPageData.size() &gt; 0) &#123;</span><br><span class="line"></span><br><span class="line">                   for (int i = 1; i &lt; getHomeApiPageData.size(); i++) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                       JSONObject jsonObject = getHomeApiPageData.getJSONObject(i);</span><br><span class="line"></span><br><span class="line">                       this.executeCnBlogsImportDataTask(jsonObject.getStr(&quot;BlogApp&quot;));</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           return ResponseBaseDTO.createSuccResp(1);</span><br><span class="line">       &#125; catch (Exception e) &#123;</span><br><span class="line">           logger.error(&quot;/cnblogs/singleImport&quot;, e);</span><br><span class="line">           return ResponseBaseDTO.createFailResp(e.getMessage());</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8 List通用方法处理总结</title>
      <link href="/2020/11/21/Java8-List%E9%80%9A%E7%94%A8%E6%96%B9%E6%B3%95%E5%A4%84%E7%90%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/11/21/Java8-List%E9%80%9A%E7%94%A8%E6%96%B9%E6%B3%95%E5%A4%84%E7%90%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>总结项目里使用Java8新特性对List的数据处理(用的比较多的)。<br><a id="more"></a></p><h3><span id="一-分组">一、分组</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, List&lt;T&gt;&gt; yearData = allData.stream().collect(Collectors.groupingBy(T::getYear));</span><br></pre></td></tr></table></figure><h3><span id="二-条件筛选">二、条件筛选</span></h3><h4><span id="单条件筛选">单条件筛选</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; filterList = appleList.stream().filter(a -&gt; a.getName().equals(&quot;YC&quot;)).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h4><span id="多条件筛选">多条件筛选</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; filterList = dayVoList.</span><br><span class="line">                      stream().filter(a -&gt; a.getYEAR().equals(item)).collect(Collectors.toList())</span><br><span class="line">                      .stream().filter(a -&gt; a.getPrice() != &quot;0&quot; &amp;&amp; a.getPrice() != &quot;0.0&quot;).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3><span id="三-list合并">三、List合并</span></h3><h4><span id="1合并去重">1.合并去重</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; result = Stream.of(Lists.newArrayList(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), Lists.newArrayList(&quot;A&quot;, &quot;B&quot;))</span><br><span class="line">  .flatMap(Collection::stream).distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h4><span id="2合并不去重">2.合并不去重</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; result = Stream.of(Lists.newArrayList(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), Lists.newArrayList(&quot;A&quot;, &quot;B&quot;))</span><br><span class="line">  .flatMap(Collection::stream).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h2><span id="四-list排序">四、List排序</span></h2><h4><span id="1倒序">1.倒序</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; api_list = apiData</span><br><span class="line">               .stream().sorted(Comparator.comparing(T::getID).reversed()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h4><span id="2正序">2.正序</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; api_list = apiData</span><br><span class="line">               .stream().sorted(Comparator.comparing(T::getID).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h2><span id="五-list-数据去重">五、List 数据去重</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; primaryFilterData = apiData.stream().collect(</span><br><span class="line">               Collectors.collectingAndThen(</span><br><span class="line">                       Collectors.toCollection(() -&gt; new TreeSet&lt;&gt;(Comparator.comparing(T::getName))), ArrayList::new));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webservice如何通过代码单元测试</title>
      <link href="/2020/11/21/webservice%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E4%BB%A3%E7%A0%81%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/11/21/webservice%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E4%BB%A3%E7%A0%81%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>前面我在下面这篇文章说过如何使用WebService:<br><a href="https://www.cnblogs.com/youcong/p/13874940.html" target="_blank" rel="noopener">SpringBoot整合Apache-CXF实践</a></p><p>在这篇文章中我列举过通过SOAP UI测试webservice接口。</p><p>但实际中涉及服务调用的情况，需要类似单元测试的东西。<br><a id="more"></a></p><h3><span id="一-基于代理类工厂">一、基于代理类工厂</span></h3><p>核心代码很简单，如下所示(这个比较普遍常用):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">           // 接口地址(写webservice的地址)</span><br><span class="line">           String address = &quot;http://127.0.0.1:9090/cxf/user?wsdl&quot;;</span><br><span class="line">           // 代理工厂</span><br><span class="line">           JaxWsProxyFactoryBean jaxWsProxyFactoryBean = new JaxWsProxyFactoryBean();</span><br><span class="line">           // 设置代理地址</span><br><span class="line">           jaxWsProxyFactoryBean.setAddress(address);</span><br><span class="line">           // 设置接口类型</span><br><span class="line">           jaxWsProxyFactoryBean.setServiceClass(UserService.class);</span><br><span class="line">           // 创建一个代理接口实现</span><br><span class="line">           UserService userService = (UserService) jaxWsProxyFactoryBean.create();</span><br><span class="line"></span><br><span class="line">           return userService.addUser(email, username, password);</span><br><span class="line">       &#125; catch (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           return -1;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><h3><span id="二-动态调用">二、动态调用</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 创建动态客户端</span><br><span class="line">JaxWsDynamicClientFactory dcf = JaxWsDynamicClientFactory.newInstance();</span><br><span class="line">//接口地址</span><br><span class="line">Client client = dcf.createClient(&quot;http://127.0.0.1/cxf/user?wsdl&quot;);</span><br><span class="line">// 需要密码的情况需要加上用户名和密码</span><br><span class="line">// client.getOutInterceptors().add(new ClientLoginInterceptor(USER_NAME, PASS_WORD));</span><br><span class="line">Object[] objects = new Object[0];</span><br><span class="line">try &#123;</span><br><span class="line">    // invoke(&quot;方法名&quot;,参数1,参数2,参数3....);</span><br><span class="line">    objects = client.invoke(&quot;getUserName&quot;, &quot;maple&quot;);</span><br><span class="line">    System.out.println(&quot;返回数据:&quot; + objects[0]);</span><br><span class="line">&#125; catch (java.lang.Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="三-通过controller调用">三、通过Controller调用</span></h3><p>我在<a href="https://www.cnblogs.com/youcong/p/13874940.html" target="_blank" rel="noopener">SpringBoot整合Apache-CXF实践</a><br>这篇文章里就写到过。</p><p>具体的代码例子如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.cxf.client.controller;</span><br><span class="line"></span><br><span class="line">import com.blog.cxf.server.dto.UserReqDto;</span><br><span class="line">import com.blog.cxf.server.service.UserService;</span><br><span class="line">import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:</span><br><span class="line"> * @author: youcong</span><br><span class="line"> * @time: 2020/10/24 23:37</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">public class UserApiController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/add&quot;)</span><br><span class="line">    public int add(@RequestParam String email, @RequestParam String username, @RequestParam String password) &#123;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // 接口地址</span><br><span class="line">            String address = &quot;http://127.0.0.1:9090/cxf/user?wsdl&quot;;</span><br><span class="line">            // 代理工厂</span><br><span class="line">            JaxWsProxyFactoryBean jaxWsProxyFactoryBean = new JaxWsProxyFactoryBean();</span><br><span class="line">            // 设置代理地址</span><br><span class="line">            jaxWsProxyFactoryBean.setAddress(address);</span><br><span class="line">            // 设置接口类型</span><br><span class="line">            jaxWsProxyFactoryBean.setServiceClass(UserService.class);</span><br><span class="line">            // 创建一个代理接口实现</span><br><span class="line">            UserService userService = (UserService) jaxWsProxyFactoryBean.create();</span><br><span class="line"></span><br><span class="line">            return userService.addUser(email, username, password);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至于其它服务调用，可以通过Feign，也可以基于HtppClient。</p><p>至于上面三种哪种更好，具体看实际业务场景而定。可以根据自己的需求来选择。</p><p>最后向大家推荐一下，近来所写关于WebService安全机制的思考和实践一文:<br><a href="https://www.cnblogs.com/youcong/p/13906999.html" target="_blank" rel="noopener">WebService安全机制的思考与实践</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之Sentinel</title>
      <link href="/2020/11/07/SpringCloud%E4%B9%8BSentinel/"/>
      <url>/2020/11/07/SpringCloud%E4%B9%8BSentinel/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-sentinel">一、Sentinel</span></h2><p>Sentinel GitHub地址:<br><a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel</a></p><p>关于Sentinel详细介绍:<br><a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a></p><p>Sentinel官方文档:<br><a href="https://sentinelguard.io/zh-cn/docs/introduction.html" target="_blank" rel="noopener">https://sentinelguard.io/zh-cn/docs/introduction.html</a><br><a id="more"></a><br>这里只明确一点，Sentinel主要作用是<strong>在高流量下如何保持服务的稳定性。</strong></p><h2><span id="二-下载运行sentinel">二、下载运行Sentinel</span></h2><h3><span id="1下载源代码">1.下载源代码</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/alibaba/Sentinel.git</span><br></pre></td></tr></table></figure><h3><span id="2打包">2.打包</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd Sentinel</span><br><span class="line"></span><br><span class="line">mvn clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><p><strong>特别注意:</strong><br>Sentinel项目路径不能在有中文，否则会报错。</p><h3><span id="3打包成功指定jar运行">3.打包成功指定jar运行</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sentinel-dashboard.jar</span><br></pre></td></tr></table></figure><p>Linux部署只需执行jar即可。<br>平时如果需要调试，只需导入Sentinel到IDE，然后直接运行DashboardApplication.java文件即可(sentinel-dashboard模块下)。</p><h2><span id="三-springcloud整合sentinel">三、SpringCloud整合Sentinel</span></h2><p><strong>注意:</strong><br>我的SpringCloud Version为Hoxton.SR4。</p><h3><span id="1maven依赖">1.Maven依赖</span></h3><p>父pom.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- SpringCloud Alibaba 微服务 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2.1.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure></p><p>子pom.xml(将其依赖放入网关模块里的pom.xml即可):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- SpringCloud Ailibaba Sentinel --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- SpringCloud Ailibaba Sentinel Gateway --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-alibaba-sentinel-gateway&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h3><span id="2gateway模块配置文件applicationyml添加如下内容">2.gateway模块配置文件(application.yml)，添加如下内容</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    sentinel:</span><br><span class="line">      # 取消控制台懒加载</span><br><span class="line">      eager: true</span><br><span class="line">      transport:</span><br><span class="line">        # 控制台地址</span><br><span class="line">        dashboard: 127.0.0.1:8718</span><br></pre></td></tr></table></figure><p>我的详细配置文件内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    sentinel:</span><br><span class="line">      # 取消控制台懒加载</span><br><span class="line">      eager: true</span><br><span class="line">      transport:</span><br><span class="line">        # 控制台地址</span><br><span class="line">        dashboard: 127.0.0.1:8718</span><br><span class="line">    gateway:</span><br><span class="line">      discovery:</span><br><span class="line">        locator:</span><br><span class="line">          lowerCaseServiceId: true</span><br><span class="line">          enabled: true</span><br><span class="line">      routes:</span><br><span class="line">        # 第三方API</span><br><span class="line">        - id: blog-api</span><br><span class="line">          uri: lb://blog-api</span><br><span class="line">          predicates:</span><br><span class="line">            - Path=/api/**</span><br><span class="line">          filters:</span><br><span class="line">            - StripPrefix=1</span><br><span class="line">        ## 后台</span><br><span class="line">        - id: blog-admin</span><br><span class="line">          uri: lb://blog-admin</span><br><span class="line">          predicates:</span><br><span class="line">            - Path=/admin/**</span><br><span class="line">          filters:</span><br><span class="line">            - StripPrefix=1</span><br><span class="line">        ## PC端</span><br><span class="line">        - id: blog-portal</span><br><span class="line">          uri: lb://blog-portal</span><br><span class="line">          predicates:</span><br><span class="line">            - Path=/portal/**</span><br><span class="line">          filters:</span><br><span class="line">            - StripPrefix=1</span><br><span class="line">        ## 工具</span><br><span class="line">        - id: blog-tools</span><br><span class="line">          uri: lb://blog-tools</span><br><span class="line">          predicates:</span><br><span class="line">            - Path=/blog-tools/**</span><br><span class="line">          filters:</span><br><span class="line">            - StripPrefix=1</span><br><span class="line"></span><br><span class="line">application:</span><br><span class="line">  name: blog-gateway-server</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br></pre></td></tr></table></figure></p><h3><span id="3启动项目">3.启动项目</span></h3><p>启动项目不报错，然后访问Sentinel，有如下效果，表示整合成功:<br><img src="/2020/11/07/SpringCloud之Sentinel/01.png" alt="图一"></p><p>接着访问网关下的blog-api的接口，Sentinel实时监控效果如下:<br><img src="/2020/11/07/SpringCloud之Sentinel/02.png" alt="图二"></p><h3><span id="4说明">4.说明</span></h3><p>Sentinel功能很强大，这里列举仅仅是整合，如用得比较多需深入学习。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之Gateway</title>
      <link href="/2020/11/07/SpringCloud%E4%B9%8BGateway/"/>
      <url>/2020/11/07/SpringCloud%E4%B9%8BGateway/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-为什么选择springcloud-gateway而不是zuul">一、为什么选择SpringCloud Gateway而不是Zuul?</span></h2><p>Gateway和Zuul的职责一样，都承担着请求分发，类似Nginx分发到后端服务器。<br><a id="more"></a></p><h3><span id="1spingcloud-gateway-和springcloud-zuul对比分析">1.SpingCloud Gateway 和SpringCloud Zuul对比分析</span></h3><h4><span id="1相同点">(1)相同点</span></h4><ul><li>底层都是servlet</li><li>两者均是web网关，处理的是http请求</li></ul><h4><span id="2不同点">(2)不同点</span></h4><h5><span id="a内部实现">a.内部实现</span></h5><p>gateway对比zuul多依赖了spring-webflux，在spring的支持下，功能更强大，内部实现了限流、负载均衡等，扩展性也更强，但同时也限制了仅适合于Spring Cloud套件；<br>zuul则可以扩展至其他微服务框架中，其内部没有实现限流、负载均衡等。</p><h5><span id="b是否支持异步">b.是否支持异步</span></h5><p>zuul仅支持同步;<br>gateway支持异步(理论上gateway则更适合于提高系统吞吐量（但不一定能有更好的性能），最终性能还需要通过严密的压测来决定)。</p><h5><span id="c框架设计的角度">c.框架设计的角度</span></h5><p>gateway具有更好的扩展性，并且其已经发布了2.0.0的RELESE版本，稳定性也是非常好的。</p><h5><span id="d性能">d.性能</span></h5><p>Zuul和Gateway哪个性能更好，有朋友特别做了测试并写下了文章:<br><a href="https://www.jianshu.com/p/3c40b603673f" target="_blank" rel="noopener">微服务网关选型：spring cloud gateway、zuul 1性能对比测试</a></p><h5><span id="e限流">e.限流</span></h5><p>Zuul2：可通过配置文件或者filter实现；<br>Gateway:可对IP、用户、集群进行限流，并提供扩展接口。</p><h5><span id="f鉴权">f.鉴权</span></h5><p>Zuul2：filter中代码实现；<br>Gateway：普通鉴权、auth2.0。</p><h5><span id="g监控">g.监控</span></h5><p>Zuul2：filter中代码实现;<br>Gateway：Gateway Metrics Filter实现。</p><h5><span id="h易用性">h.易用性</span></h5><p>Zuul2：参考较少;<br>Gateway：简单易用。</p><h4><span id="3架构图">(3)架构图</span></h4><h5><span id="azuul2内部架构图">a.Zuul2内部架构图</span></h5><p><img src="/2020/11/07/SpringCloud之Gateway/01.png" alt="图一"></p><h5><span id="bgateway内部架构图">b.Gateway内部架构图</span></h5><p><img src="/2020/11/07/SpringCloud之Gateway/02.png" alt="图二"></p><h3><span id="2究竟该选gateway还是zuul">2.究竟该选Gateway还是Zuul?</span></h3><p>我的看法是结合业务场景和实际情况。比方说，如果是一个新的项目可以采用Gateway，如果是二次开发某个项目，而那个项目网关用的是Zuul，建议不要改，保持现状，直到真正搞懂了那个项目和框架底层，可以尝试试验换(最终换不换在于换的成本有多高，如果太高的话，还是不要换)。</p><h2><span id="二-springcloud整合gateway">二、SpringCloud整合Gateway</span></h2><h3><span id="1导入maven依赖">1.导入Maven依赖</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3><span id="2配置文件">2.配置文件</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      discovery:</span><br><span class="line">        locator:</span><br><span class="line">          lowerCaseServiceId: true</span><br><span class="line">          enabled: true</span><br><span class="line">      routes:</span><br><span class="line">        # 认证中心</span><br><span class="line">        - id: blog-api</span><br><span class="line">          uri: lb://blog-api</span><br><span class="line">          predicates:</span><br><span class="line">            - Path=/api/**</span><br><span class="line">          filters:</span><br><span class="line">            - StripPrefix=1</span><br><span class="line"></span><br><span class="line">application:</span><br><span class="line">  name: blog-gateway-server</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br></pre></td></tr></table></figure><h3><span id="3启动并测试">3.启动并测试</span></h3><p>整合其实非常简单，关键在于两个:<br>第一，SpringCloud和SpringBoot版本要兼容；<br>第二，配置文件要对，否则会遇到这样的问题，能够正常启动，但是通过网关访问不到下面的微服务。</p><p>我的测试效果，如图:<br><img src="/2020/11/07/SpringCloud之Gateway/03.png" alt="图三"></p><p>如果有朋友对Zuul感兴趣，可以参考我的这篇文章:<br><a href="https://developers-youcong.github.io/2020/06/04/SpringCloud%E4%B9%8BZuul/">SpringCloud之Zuul</a></p><p>本文参考资料如下:<br><a href="https://www.cnblogs.com/lgg20/p/12507845.html" target="_blank" rel="noopener">微服务网关Zuul和Gateway的区别</a><br><a href="https://blog.csdn.net/TOP__ONE/article/details/105583331" target="_blank" rel="noopener">SpringCloud Gateway 新网关与zuul的对比选型</a><br><a href="https://www.jianshu.com/p/3c40b603673f" target="_blank" rel="noopener">微服务网关选型：spring cloud gateway、zuul 1性能对比测试</a><br><a href="https://blog.csdn.net/lizz861109/article/details/103575186" target="_blank" rel="noopener">Zuul和Gateway对比</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>com.netflix.discovery.shared.transport.TransportException: Cannot executerequest on any known server</title>
      <link href="/2020/11/07/com-netflix-discovery-shared-transport-TransportException-Cannot-execute-request-on-any-known-server/"/>
      <url>/2020/11/07/com-netflix-discovery-shared-transport-TransportException-Cannot-execute-request-on-any-known-server/</url>
      
        <content type="html"><![CDATA[<h4><span id="1错误信息">1.错误信息</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server</span><br></pre></td></tr></table></figure><a id="more"></a><h4><span id="2错误背景">2.错误背景</span></h4><p>启动Eureka Server报错</p><h4><span id="3错误原因">3.错误原因</span></h4><p>Spring2.0以后默认开的安全验证，你需要手动关闭，关闭方法为添加一个配置方法。</p><h4><span id="4解决办法">4.解决办法</span></h4><h5><span id="1添加maven依赖">(1)添加Maven依赖</span></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5><span id="2添加配置类">(2)添加配置类</span></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.config;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line">import org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        // Configure HttpSecurity as needed (e.g. enable http basic).</span><br><span class="line"> http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.NEVER);</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        </span><br><span class="line">        //注意：为了可以使用 http://u s e r : &#123;user&#125;:user:&#123;password&#125;@h o s t : &#123;host&#125;:host:&#123;port&#125;/eureka/ 这种方式登录,所以必须是httpBasic,</span><br><span class="line">        </span><br><span class="line">        // 如果是form方式,不能使用url格式登录     http.authorizeRequests().anyRequest().authenticated().and().httpBasic();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5><span id="3完成1和2步骤重启即可">(3)完成(1)和(2)步骤，重启即可</span></h5><p>参考资料如下:</p><p><a href="https://blog.csdn.net/luansha0/article/details/88789742" target="_blank" rel="noopener">com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known serve</a></p><h4><span id="5补充说明">5.补充说明</span></h4><p>最奇葩的是，我后来尝试去除该配置也能正常启动Eureka Server成功,之前早上启动的时候一直报错，哪怕退出IDE重新登录也一样，同时也验证过配置文件是否有问题，但都没有解决，于是找到了上述的链接，加了maven依赖和配置类，一启动就成功了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之分布式链路追踪</title>
      <link href="/2020/11/06/SpringCloud%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
      <url>/2020/11/06/SpringCloud%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-为什么要有分布式链路追踪">一、为什么要有分布式链路追踪</span></h2><p>链路追踪的主要目的在于让我们知道A微服务调用B微服务，B微服务调用C微服务，C微服务调用D微服务，D微服务调用A微服务等整个流程是怎样的。<br><a id="more"></a></p><h2><span id="二-springcloud整合sleuthzipkin">二、SpringCloud整合Sleuth+Zipkin</span></h2><h3><span id="1maven依赖">1.Maven依赖</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- SpringCloud Sleuth --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-sleuth&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- SpringCloud ZipKin--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-sleuth-zipkin&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3><span id="2核心配置文件">2.核心配置文件</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: blog-api</span><br><span class="line">  zipkin:</span><br><span class="line">    base-url: http://127.0.0.1:9411</span><br><span class="line">  sleuth:</span><br><span class="line">    sampler:</span><br><span class="line">      probability: 1</span><br></pre></td></tr></table></figure><p><strong>注意:</strong><br>实际probability的值应该设置为0.1,1的话主要用于调试查看详细信息。</p><h3><span id="3测试接口效果如下">3.测试接口，效果如下</span></h3><p><img src="/2020/11/06/SpringCloud之分布式链路追踪/01.png" alt="图一"></p><h2><span id="三-编译运行zipkin">三、编译运行zipkin</span></h2><p>这里我推荐看官网:<br><a href="https://zipkin.io/pages/quickstart.html" target="_blank" rel="noopener">https://zipkin.io/pages/quickstart.html</a></p><p>按照官网流程，执行如下即可(我做了适当修改，主要讲./mvnw改为mvn):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># get the latest source</span><br><span class="line">git clone https://github.com/openzipkin/zipkin</span><br><span class="line">cd zipkin</span><br><span class="line"># Build the server and also make its dependencies</span><br><span class="line">mvn -DskipTests --also-make -pl zipkin-server clean install</span><br><span class="line"># Run the server</span><br><span class="line">java -jar ./zipkin-server/target/zipkin-server-*exec.jar</span><br></pre></td></tr></table></figure></p><p>运行成功，效果图，如下:<br><img src="/2020/11/06/SpringCloud之分布式链路追踪/02.png" alt="图二"></p><h2><span id="四-注意事项">四、注意事项</span></h2><p>注意重要一点，SpringBoot和SpringCloud版本要匹配，否则即便按照上面的配置，但是仍无法看到调用的效果。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jar指定运行main方法</title>
      <link href="/2020/11/06/Jar%E6%8C%87%E5%AE%9A%E8%BF%90%E8%A1%8Cmain%E6%96%B9%E6%B3%95/"/>
      <url>/2020/11/06/Jar%E6%8C%87%E5%AE%9A%E8%BF%90%E8%A1%8Cmain%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>最近在试验某个功能遇到这样的需求，并不需要项目一直运行，这是在某个特定的时候运行即可，而且只运行main方法里面的应用程序。<br><a id="more"></a><br>这里我没有用grandle，用的是Maven，主要在pom.xml配置如下内容即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.3&lt;/version&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;appendAssemblyId&gt;false&lt;/appendAssemblyId&gt;</span><br><span class="line">          &lt;descriptorRefs&gt;</span><br><span class="line">            &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;</span><br><span class="line">          &lt;/descriptorRefs&gt;</span><br><span class="line">          &lt;archive&gt;</span><br><span class="line">            &lt;manifest&gt;</span><br><span class="line">              &lt;addClasspath&gt;true&lt;/addClasspath&gt;</span><br><span class="line">              &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt;</span><br><span class="line">              &lt;mainClass&gt;com.blog.test.MainTest&lt;/mainClass&gt;</span><br><span class="line">            &lt;/manifest&gt;</span><br><span class="line">          &lt;/archive&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">        &lt;executions&gt;</span><br><span class="line">          &lt;execution&gt;</span><br><span class="line">            &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class="line">            &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">              &lt;goal&gt;assembly&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line"> </span><br><span class="line">          &lt;/execution&gt;</span><br><span class="line">        &lt;/executions&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br></pre></td></tr></table></figure></p><p>本文参考资料如下:<br><a href="https://blog.csdn.net/xiaoguangtouqiang/article/details/82182654" target="_blank" rel="noopener">执行jar包中指定main方法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Redisson(集群版)</title>
      <link href="/2020/11/06/SpringBoot%E6%95%B4%E5%90%88Redisson-%E9%9B%86%E7%BE%A4%E7%89%88/"/>
      <url>/2020/11/06/SpringBoot%E6%95%B4%E5%90%88Redisson-%E9%9B%86%E7%BE%A4%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p>之前写了一篇关于SpringBoot整合Redisson的单机版，这篇是集群版。</p><p>关于如何在Linux搭建Redis集群，可以参考这篇文章:<br><a href="https://developers-youcong.github.io/2020/09/22/redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/">redis集群搭建</a><br><a id="more"></a></p><h2><span id="一-导入maven依赖">一、导入Maven依赖</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- redisson-springboot --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;redisson-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.11.4&lt;/version&gt;</span><br><span class="line">          &lt;exclusions&gt;</span><br><span class="line">              &lt;exclusion&gt;</span><br><span class="line">                  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                  &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">              &lt;/exclusion&gt;</span><br><span class="line">              &lt;exclusion&gt;</span><br><span class="line">                  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                  &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;</span><br><span class="line">              &lt;/exclusion&gt;</span><br><span class="line">          &lt;/exclusions&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2><span id="二-核心配置文件">二、核心配置文件</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">redis:</span><br><span class="line">   cluster:</span><br><span class="line">     nodes: &quot;192.168.52.1:7000,192.168.52.1:7001,192.168.52.1:7002,192.168.52.1:7003,192.168.52.1:7004,192.168.52.1:7005&quot;</span><br><span class="line">   password: 123456</span><br><span class="line">   lettuce:</span><br><span class="line">     pool:</span><br><span class="line">       max-active: 1500</span><br><span class="line">       max-wait: 5000</span><br><span class="line">       max-idle: 500</span><br><span class="line">       min-idle: 100</span><br><span class="line">       shutdown-timeout: 1000</span><br><span class="line">   timeout: 60000</span><br></pre></td></tr></table></figure><h2><span id="三-核心代码配置">三、核心代码配置</span></h2><p>RedisConfigProperties.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import java.util.List;</span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;spring.redis&quot;)</span><br><span class="line">public class RedisConfigProperties &#123;</span><br><span class="line">    private String password;</span><br><span class="line">    private cluster cluster;</span><br><span class="line"></span><br><span class="line">    public static class cluster &#123;</span><br><span class="line">        private List&lt;String&gt; nodes;</span><br><span class="line"></span><br><span class="line">        public List&lt;String&gt; getNodes() &#123;</span><br><span class="line">            return nodes;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setNodes(List&lt;String&gt; nodes) &#123;</span><br><span class="line">            this.nodes = nodes;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public RedisConfigProperties.cluster getCluster() &#123;</span><br><span class="line">        return cluster;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCluster(RedisConfigProperties.cluster cluster) &#123;</span><br><span class="line">        this.cluster = cluster;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>RedissonConfig.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import org.redisson.Redisson;</span><br><span class="line">import org.redisson.config.ClusterServersConfig;</span><br><span class="line">import org.redisson.config.Config;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">@Configuration</span><br><span class="line">public class RedissonConfig &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisConfigProperties redisConfigProperties;</span><br><span class="line"></span><br><span class="line">    //添加redisson的bean</span><br><span class="line">    @Bean</span><br><span class="line">    public Redisson redisson() &#123;</span><br><span class="line">        //redisson版本是3.5，集群的ip前面要加上“redis://”，不然会报错，3.2版本可不加</span><br><span class="line">        List&lt;String&gt; clusterNodes = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; redisConfigProperties.getCluster().getNodes().size(); i++) &#123;</span><br><span class="line">            clusterNodes.add(&quot;redis://&quot; + redisConfigProperties.getCluster().getNodes().get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        Config config = new Config();</span><br><span class="line">        ClusterServersConfig clusterServersConfig = config.useClusterServers()</span><br><span class="line">                .addNodeAddress(clusterNodes.toArray(new String[clusterNodes.size()]));</span><br><span class="line">        clusterServersConfig.setPassword(redisConfigProperties.getPassword());//设置密码</span><br><span class="line">        return (Redisson) Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="四-启动项目只要不报错就表示配置集群成功同时启动过程中也会显示连接的各个redis">四、启动项目，只要不报错就表示配置集群成功，同时启动过程中也会显示连接的各个redis</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Redisson(单机版)</title>
      <link href="/2020/11/06/SpringBoot%E6%95%B4%E5%90%88Redisson-%E5%8D%95%E6%9C%BA%E7%89%88/"/>
      <url>/2020/11/06/SpringBoot%E6%95%B4%E5%90%88Redisson-%E5%8D%95%E6%9C%BA%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-为什么选择使用redisson">一、为什么选择使用Redisson</span></h2><p>因为它非常适用于分布式锁，而我们的一项业务需要考虑分布式锁这个应用场景，于是我整合它做一个初步简单的例子(和整合redis一样)。<br><a id="more"></a></p><h3><span id="redisson-jedis-lettuce优缺点对比">Redisson、Jedis、Lettuce优缺点对比</span></h3><h4><span id="1redisson">(1)Redisson</span></h4><p>优点：<br>实现了分布式特性和可扩展的 Java 数据结构，适合分布式开发；<br>API线程安全；<br>基于Netty框架的事件驱动的通信，可异步调用。</p><p>缺点：<br>API更抽象，学习使用成本高。</p><h4><span id="2jedis">(2)Jedis</span></h4><p><strong>优点：</strong><br>提供了比较全面的Redis操作特性的API<br>API基本与Redis的指令一一对应，使用简单易理解。</p><p><strong>缺点:</strong><br>同步阻塞IO；<br>不支持异步；<br>线程不安全。</p><h4><span id="3lettuce">(3)Lettuce</span></h4><p><strong>优点：</strong><br>线程安全;<br>基于Netty 框架的事件驱动的通信，可异步调用;<br>适用于分布式缓存。</p><p><strong>缺点：</strong><br>API更抽象，学习使用成本高。</p><p>其中Jedis是用的最普遍的(确实非常简单)，特别是很多单体应用或者伪分布式应用等。</p><h2><span id="二-springboot整合redisson">二、SpringBoot整合Redisson</span></h2><h3><span id="1添加maven依赖">1.添加Maven依赖</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- redisson-springboot --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;redisson-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;3.11.4&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3><span id="2配置文件">2.配置文件</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: 127.0.0.1</span><br><span class="line">    port: 6379</span><br><span class="line">    database: 0</span><br><span class="line">    timeout: 5000</span><br></pre></td></tr></table></figure><h3><span id="3添加配置类">3.添加配置类</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import org.redisson.Redisson;</span><br><span class="line">import org.redisson.api.RedissonClient;</span><br><span class="line">import org.redisson.config.Config;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.autoconfigure.data.redis.RedisProperties;</span><br><span class="line">import org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class RedissonConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisProperties redisProperties;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public RedissonClient redissonClient() &#123;</span><br><span class="line">        Config config = new Config();</span><br><span class="line">        String redisUrl = String.format(&quot;redis://%s:%s&quot;, redisProperties.getHost() + &quot;&quot;, redisProperties.getPort() + &quot;&quot;);</span><br><span class="line">        config.useSingleServer().setAddress(redisUrl).setPassword(redisProperties.getPassword());</span><br><span class="line">        config.useSingleServer().setDatabase(3);</span><br><span class="line">        return Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="4代码测试简单的存取">4.代码测试(简单的存取)</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import org.redisson.api.RedissonClient;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/redisson&quot;)</span><br><span class="line">public class RedissonController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/save&quot;)</span><br><span class="line">    public String save()&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(&quot;key&quot;,&quot;redisson&quot;);</span><br><span class="line">        return &quot;save ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/get&quot;)</span><br><span class="line">    public String get()&#123;</span><br><span class="line">        return stringRedisTemplate.opsForValue().get(&quot;key&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Consider defining a bean of type &#39;org.springframework.http.codec.ServerCodecConfigurer&#39; in your configuration.</title>
      <link href="/2020/11/06/Consider-defining-a-bean-of-type-org-springframework-http-codec-ServerCodecConfigurer-in-your-configuration/"/>
      <url>/2020/11/06/Consider-defining-a-bean-of-type-org-springframework-http-codec-ServerCodecConfigurer-in-your-configuration/</url>
      
        <content type="html"><![CDATA[<p>错误详细信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Parameter 1 of constructor in com.alibaba.cloud.sentinel.gateway.scg.SentinelSCGAutoConfiguration required a bean of type &apos;org.springframework.http.codec.ServerCodecConfigurer&apos; that could not be found.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Consider defining a bean of type &apos;org.springframework.http.codec.ServerCodecConfigurer&apos; in your configuration.</span><br></pre></td></tr></table></figure></p><a id="more"></a><h4><span id="错误背景">错误背景</span></h4><p>集成redisson出现这个错误</p><p>redisson的maven依赖如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;redisson-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;3.11.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h4><span id="错误原因分析">错误原因分析</span></h4><p>这是因为redisson里有spring-boot-starter-web导致的。因为我的springcloud-gateway也有这个依赖，依赖冲突导致启动报错。</p><h4><span id="解决办法">解决办法</span></h4><p>排除依赖即可，如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;redisson-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.11.4&lt;/version&gt;</span><br><span class="line">      &lt;exclusions&gt;</span><br><span class="line">          &lt;exclusion&gt;</span><br><span class="line">              &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">              &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">          &lt;/exclusion&gt;</span><br><span class="line">          &lt;exclusion&gt;</span><br><span class="line">              &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">              &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;</span><br><span class="line">          &lt;/exclusion&gt;</span><br><span class="line">      &lt;/exclusions&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>参考解决办法:<br><a href="https://blog.csdn.net/github_38924695/article/details/99650634?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param" target="_blank" rel="noopener">springboot集成springCloud中gateway时启动报错</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么bootstrap.yml比application.yml优先级高</title>
      <link href="/2020/11/05/%E4%B8%BA%E4%BB%80%E4%B9%88bootstrap-yml%E6%AF%94application-yml%E4%BC%98%E5%85%88%E7%BA%A7%E9%AB%98/"/>
      <url>/2020/11/05/%E4%B8%BA%E4%BB%80%E4%B9%88bootstrap-yml%E6%AF%94application-yml%E4%BC%98%E5%85%88%E7%BA%A7%E9%AB%98/</url>
      
        <content type="html"><![CDATA[<p>最近遇到好几个与此有关的问题。</p><p>其中一个典型的问题是，明明bootstrap.yml指定了端口，但还是显示为默认的8080端口。最后我用了一个常规的死办法将bootstrap.yml改为application.yml就好了。</p><p>于是我不得不思考，为什么会出现这样的问题。通过搜索我了解到了以下几点。<br><a id="more"></a></p><h3><span id="为什么bootstrapyml会比applicationyml先加载">为什么bootstrap.yml会比application.yml先加载？</span></h3><p>启动上下文时，Spring Cloud 会创建一个 Bootstrap Context，作为 Spring 应用的 Application Context 的父上下文。</p><p>初始化的时候，Bootstrap Context 负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的 Environment。Bootstrap 属性有高优先级，默认情况下，它们不会被本地配置覆盖。</p><p>也就是说如果加载的 application.yml 的内容标签与 bootstrap 的标签一致，application 也不会覆盖 bootstrap，而 application.yml 里面的内容可以动态替换。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java.lang.OutOfMemoryError: Unable to create new native thread</title>
      <link href="/2020/11/05/java-lang-OutOfMemoryError-Unable-to-create-new-native-thread/"/>
      <url>/2020/11/05/java-lang-OutOfMemoryError-Unable-to-create-new-native-thread/</url>
      
        <content type="html"><![CDATA[<p>错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: Unable to create new native thread</span><br></pre></td></tr></table></figure></p><p>从字面意思我们就很好理解，这是因为内存不足导致的错误，内存不足不能创建新的线程。</p><p>于是我搜索了一下，找到了解决方案:<br><a id="more"></a></p><h3><span id="1排查应用是否创建了过多的线程">1.排查应用是否创建了过多的线程</span></h3><p>通过jstack命令排查。</p><h3><span id="2调整操作系统线程数阈值">2.调整操作系统线程数阈值</span></h3><p>操作系统会限制进程允许创建的线程数，使用ulimit -u命令查看限制。某些服务器上此阈值设置的过小，比如1024。一旦应用创建超过1024个线程，就会遇到java.lang.OutOfMemoryError: unable to create new native thread问题。如果是这种情况，可以调大操作系统线程数阈值。</p><h3><span id="3增加机器内存">3.增加机器内存</span></h3><p>如果上述两项未能排除问题，可能是正常增长的业务确实需要更多内存来创建更多线程。如果是这种情况，增加机器内存。</p><h3><span id="4减小堆内存">4.减小堆内存</span></h3><p>线程不在堆内存上创建，线程在堆内存之外的内存上创建。所以如果分配了堆内存之后只剩下很少的可用内存，依然可能遇到java.lang.OutOfMemoryError: unable to create new native thread。考虑如下场景：系统总内存6G，堆内存分配了5G，永久代512M。在这种情况下，JVM占用了5.5G内存，系统进程、其他用户进程和线程将共用剩下的0.5G内存，很有可能没有足够的可用内存创建新的线程。如果是这种情况，考虑减小堆内存。</p><h3><span id="5减少进程数">5.减少进程数</span></h3><p>这和减小堆内存原理相似。考虑如下场景：系统总内存32G，java进程数5个，每个进程的堆内存6G。在这种情况下，java进程总共占用30G内存，仅剩下2G内存用于系统进程、其他用户进程和线程，很有可能没有足够的可用内存创建新的线程。如果是这种情况，考虑减少每台机器上的进程数。</p><h3><span id="6减少线程栈大小">6.减少线程栈大小</span></h3><p>线程会占用内存，如果每个线程都占用更多内存，整体上将消耗更多的内存。每个线程默认占用内存大小取决于JVM实现。可以利用-Xss参数限制线程内存大小，降低总内存消耗。例如，JVM默认每个线程占用1M内存，应用有500个线程，那么将消耗500M内存空间。如果实际上256K内存足够线程正常运行，配置-Xss256k，那么500个线程将只需要消耗125M内存。（注意，如果-Xss设置的过低，将会产生java.lang.StackOverflowError错误）。</p><p>最后我是用2办法解决的。<br>这与我之前遇到过的这样的错误一样，错误信息如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot create GC thread. Out of system resources.</span><br></pre></td></tr></table></figure></p><p>参考文章解决方案:<a href="https://www.cnblogs.com/youcong/p/13865984.html" target="_blank" rel="noopener">Cannot create GC thread. Out of system resources.</a></p><p>本文的六个解决方案主要参考了这篇文章:<br><a href="https://blog.csdn.net/wchgogo/article/details/78185643" target="_blank" rel="noopener">解决OutOfMemoryError: unable to create new native thread问题</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Caused by: org.apache.ibatis.type.TypeException: The alias &#39;SiteVo&#39; is already mapped to the value &#39;com.test.base.vo.manager.SiteVo&#39;</title>
      <link href="/2020/11/05/Caused-by-org-apache-ibatis-type-TypeException-The-alias-SiteVo-is-already-mapped-to-the-value-com-test-base-vo-manager-SiteVo/"/>
      <url>/2020/11/05/Caused-by-org-apache-ibatis-type-TypeException-The-alias-SiteVo-is-already-mapped-to-the-value-com-test-base-vo-manager-SiteVo/</url>
      
        <content type="html"><![CDATA[<p>错误详细信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.apache.ibatis.type.TypeException: </span><br><span class="line">The alias &apos;SiteVo&apos; is already mapped to the value &apos;com.test.base.vo.manager.SiteVo&apos;</span><br></pre></td></tr></table></figure></p><p>错误原因:<br><a id="more"></a><br>关键在于配置文件指定别名范围过广，导致不同的包下出现相同的类，从而造成冲突显示上述的错误信息。</p><p>配置文件内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mybatis:</span><br><span class="line">  # 搜索指定包别名</span><br><span class="line">  typeAliasesPackage: com.test.**.entiy</span><br></pre></td></tr></table></figure></p><p>解决办法1:<br>一般起名的话，建议最好不要起相同的。<br>改下相同类的名称即可。</p><p>解决办法2:<br>搜索指定包别名(上述配置文件)，最好指定确定的范围如com.test.blog.entity，这样就不会出现上面的错误。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebService安全机制的思考与实践</title>
      <link href="/2020/10/31/WebService%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
      <url>/2020/10/31/WebService%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>近来因业务需要，需要研究webservice，于是便有这篇文章:<br><a href="https://www.cnblogs.com/youcong/p/13874940.html" target="_blank" rel="noopener">SpringBoot整合Apache-CXF实践</a><br><a id="more"></a></p><h2><span id="一-webservice是什么">一、WebService是什么?</span></h2><p>WebService是一个平台独立的、低耦合的、自包含的、基于可编程的web的应用程序，可使用开放的XML（标准通用标记语言下的一个子集）标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的交互操作的应用程序。</p><p>简单概括如下:<br><strong>WebService是一种跨平台，跨语言的规范，用于不同平台，不同语言开发的应用之间的交互</strong>。</p><h2><span id="二-webservice安全机制有哪些">二、Webservice安全机制有哪些？</span></h2><p>由于我之前从未实际接触过WebService，对于它的安全机制不了解。于是通过搜索，<strong>我得到了关于它的安全机制一些建议</strong>:</p><ul><li><p>(1)对webservice发布的方法，方法名称和参数不要使用望文生义的描述；</p></li><li><p>(2)对webservice发布的方法，在入参中增加一个或多个字符串序列(这里的字符串可以要求必须满足指定的格式，同时字符串可以再通过客户端传参数的时候加密，服务端解密)；</p></li><li><p>(3)对webservice发布的方法，入参中加上用户名和密码，然后服务端通过数据库校验；</p></li><li><p>(4)对webservice发布的方法，通过handler/chain方式来实现验证(用户名&amp;密码校验/IP地址校验等)；</p></li><li><p>(5)对webservice发布的方法，采用webservice的users.lst来进行验证；</p></li><li><p>(6)对webservice发布的服务，通过servlet的Filter来实现验证；</p></li><li><p>(7)对webservice传输过程中的数据进行加密；</p></li><li><p>(8)自己写校验框架来实现webservice的安全；</p></li><li><p>(9)其它方式.</p></li></ul><p>上述是搜索方面出现毕竟频繁的，也是webservice比较普遍的方式之一。</p><p>我思虑再三决定结合以往开发HTTP应用安全经验和现有参考WebService安全机制结合起来。</p><p><strong>于是便有了如下的安全机制方案:</strong></p><ul><li>Token鉴权机制;</li><li>公私钥签名校验;</li><li>IP白名单校验.</li></ul><h2><span id="三-如何实现token鉴权-公私钥签名校验-ip白名单校验等webservice安全方案呢">三、如何实现Token鉴权、公私钥签名校验、IP白名单校验等WebService安全方案呢？</span></h2><p>本次代码已同步到我的Apache CXF代码例子里了，Github地址为:<br><a href="https://github.com/developers-youcong/blog-cxf" target="_blank" rel="noopener">https://github.com/developers-youcong/blog-cxf</a></p><h3><span id="核心代码关键在于拦截器">核心代码，关键在于拦截器</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.cxf.server.interceptor;</span><br><span class="line"></span><br><span class="line">import cn.hutool.core.util.StrUtil;</span><br><span class="line">import com.blog.cxf.server.security.SecretKey;</span><br><span class="line">import com.blog.cxf.server.utils.IpUtils;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.apache.cxf.binding.soap.SoapMessage;</span><br><span class="line">import org.apache.cxf.headers.Header;</span><br><span class="line">import org.apache.cxf.interceptor.Fault;</span><br><span class="line">import org.apache.cxf.message.Message;</span><br><span class="line">import org.apache.cxf.phase.AbstractPhaseInterceptor;</span><br><span class="line">import org.apache.cxf.phase.Phase;</span><br><span class="line">import org.apache.cxf.phase.PhaseInterceptorChain;</span><br><span class="line">import org.apache.cxf.transport.http.AbstractHTTPDestination;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.w3c.dom.Element;</span><br><span class="line">import org.w3c.dom.Node;</span><br><span class="line">import org.w3c.dom.NodeList;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description: 认证鉴权拦截器</span><br><span class="line"> * @author: youcong</span><br><span class="line"> * @time: 2020/10/31 17:07</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class AuthInterceptor extends AbstractPhaseInterceptor&lt;SoapMessage&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public AuthInterceptor() &#123;</span><br><span class="line">        super(Phase.PRE_INVOKE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void handleMessage(SoapMessage msg) throws Fault &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Message ipVerify = PhaseInterceptorChain.getCurrentMessage();</span><br><span class="line"></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) ipVerify.get(AbstractHTTPDestination.HTTP_REQUEST);</span><br><span class="line"></span><br><span class="line">        //处理IP</span><br><span class="line">        handleIp(request);</span><br><span class="line"></span><br><span class="line">        Header authHeader = null;</span><br><span class="line">        //获取验证头</span><br><span class="line">        List&lt;Header&gt; headers = msg.getHeaders();</span><br><span class="line"></span><br><span class="line">        if (headers.isEmpty()) &#123;</span><br><span class="line">            throw new Fault(new Exception(&quot;请求头为空&quot;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for (Header h : headers) &#123;</span><br><span class="line"></span><br><span class="line">            log.info(&quot;h:&quot; + h.getName().toString().contains(&quot;auth&quot;));</span><br><span class="line">            if (h.getName().toString().contains(&quot;auth&quot;)) &#123;</span><br><span class="line">                authHeader = h;</span><br><span class="line">                break;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                throw new Fault(new Exception(&quot;请求头需包含auth&quot;));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Element auth = (Element) authHeader.getObject();</span><br><span class="line"></span><br><span class="line">        NodeList childNodes = auth.getChildNodes();</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; reqHeader = new HashSet&lt;String&gt;();</span><br><span class="line">        for (int i = 0; i &lt; childNodes.getLength(); i++) &#123;</span><br><span class="line">            //处理节点</span><br><span class="line">            handleNode(childNodes.item(i), reqHeader);</span><br><span class="line">        &#125;</span><br><span class="line">        //处理请求Key</span><br><span class="line">        handleSOAPReqHeader(reqHeader);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //处理IP</span><br><span class="line">    private void handleIp(HttpServletRequest request) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String[] ip_arr = new String[]&#123;&quot;127.0.0.1&quot;, &quot;192.168.52.50&quot;&#125;;</span><br><span class="line"></span><br><span class="line">        for (String str : ip_arr) &#123;</span><br><span class="line">            System.out.println(&quot;ip:&quot; + str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; ipSet = new HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        for (String item : ip_arr) &#123;</span><br><span class="line"></span><br><span class="line">            ipSet.add(item);</span><br><span class="line">            if (ipSet.contains(IpUtils.getIpAddr(request))) &#123;</span><br><span class="line">                log.info(&quot;合法IP:&quot; + item);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                throw new Fault(new Exception(&quot;非法IP&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //处理节点</span><br><span class="line">    private void handleNode(Node items, Set&lt;String&gt; reqHeader) &#123;</span><br><span class="line"></span><br><span class="line">        Node item = items;</span><br><span class="line"></span><br><span class="line">        //存储请求头Key</span><br><span class="line">        if (item.getLocalName() != null) &#123;</span><br><span class="line">            String str = new String(item.getLocalName());</span><br><span class="line">            reqHeader.add(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //获取请求头token</span><br><span class="line">        if (item.getNodeName().contains(&quot;token&quot;)) &#123;</span><br><span class="line">            String tokenValue = item.getTextContent();</span><br><span class="line"></span><br><span class="line">            if (!StrUtil.isEmpty(tokenValue)) &#123;</span><br><span class="line"></span><br><span class="line">                if (&quot;soap&quot;.equals(tokenValue)) &#123;</span><br><span class="line"></span><br><span class="line">                    log.info(&quot;token Value:&quot; + tokenValue);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    throw new Fault(new Exception(&quot;token错误&quot;));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                throw new Fault(new Exception(&quot;token不能为空&quot;));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //获取请求头sign</span><br><span class="line">        if (item.getNodeName().contains(&quot;sign&quot;)) &#123;</span><br><span class="line"></span><br><span class="line">            String signValue = item.getTextContent();</span><br><span class="line"></span><br><span class="line">            if (!StrUtil.isEmpty(signValue)) &#123;</span><br><span class="line"></span><br><span class="line">                //原数据</span><br><span class="line">                String originData = &quot;test_webservice_api_2020&quot;;</span><br><span class="line"></span><br><span class="line">                try &#123;</span><br><span class="line"></span><br><span class="line">                    //比对签名</span><br><span class="line">                    boolean verifySign = SecretKey.verifySign(originData, signValue);</span><br><span class="line"></span><br><span class="line">                    log.info(&quot;verifySign:&quot; + verifySign);</span><br><span class="line"></span><br><span class="line">                    if (verifySign) &#123;</span><br><span class="line">                        log.info(&quot;sign Value:&quot; + signValue);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        throw new Fault(new Exception(&quot;签名错误&quot;));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    throw new Fault(new Exception(&quot;签名错误&quot;));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                throw new Fault(new Exception(&quot;签名不能为空&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //处理SOAP请求头Key</span><br><span class="line">    private void handleSOAPReqHeader(Set&lt;String&gt; reqHeader) &#123;</span><br><span class="line"></span><br><span class="line">        if (reqHeader.contains(&quot;token&quot;)) &#123;</span><br><span class="line">            log.info(&quot;包含token&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new Fault(new Exception(&quot;请求头auth需包含token&quot;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (reqHeader.contains(&quot;sign&quot;)) &#123;</span><br><span class="line">            log.info(&quot;包含sign&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new Fault(new Exception(&quot;请求头auth需包含sign&quot;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="1token鉴权的目的是什么">1.Token鉴权的目的是什么？</span></h4><p>每个用户生成的token不一样，获取token的接口是需要对应的用户名和密码，通过用户名和密码产生token，token放在请求头里，后台可根据token识别是哪个用户请求哪个接口，后面日志存储会提到的。</p><h4><span id="2token的生成有哪些方案">2.Token的生成有哪些方案？</span></h4><p>可以参考我写的这篇文章:<a href="https://www.cnblogs.com/youcong/p/13086991.html" target="_blank" rel="noopener">SpringCloud之Security</a><br>这篇文章我结合了JWT。</p><p>除此之外还可以结合某种规则(用户名+密码+特殊UUID+用户注册码)生成加密的token。</p><h4><span id="3签名的目的是什么">3.签名的目的是什么？</span></h4><p>为了数据安全和防止重复提交。</p><h4><span id="4如何实现签名">4.如何实现签名？</span></h4><p>签名的规则有很多，可以增加某种证书公私钥，也可以时间戳。</p><h4><span id="5为什么需要ip白名单校验">5.为什么需要IP白名单校验？</span></h4><p>主要是为了安全，防止非法IP不停的请求，造成恶意攻击(如DOS攻击和DDOS攻击等)。</p><h4><span id="6ip白名单校验有哪些方案">6.IP白名单校验有哪些方案？</span></h4><p>可以将IP白名单放在对应的数据表中，也可以将其放到配置文件里，还可以将其存一个数组中(就像我在上述代码所写的那样)。</p><h4><span id="7开始测试">7.开始测试</span></h4><h5><span id="1非法ip请求不在数组内的ip">(1)非法IP请求(不在数组内的IP)</span></h5><p><img src="/2020/10/31/WebService安全机制的思考与实践/01.png" alt="图一"></p><h5><span id="2携带错误的token请求">(2)携带错误的Token请求</span></h5><p><img src="/2020/10/31/WebService安全机制的思考与实践/02.png" alt="图二"></p><h5><span id="3携带错误的签名请求">(3)携带错误的签名请求</span></h5><p><img src="/2020/10/31/WebService安全机制的思考与实践/03.png" alt="图三"></p><h5><span id="4正确请求token正确-签名正确-ip合法">(4)正确请求(token正确、签名正确、IP合法)</span></h5><p><img src="/2020/10/31/WebService安全机制的思考与实践/04.png" alt="图三"></p><h4><span id="8证书生成方案公私钥">8.证书生成方案(公私钥)</span></h4><p>这一块我主要参考了这篇文章，这篇文章很完整，大家可以参考一下:<br><a href="https://www.cnblogs.com/molao-doing/articles/9704278.html" target="_blank" rel="noopener">Java 证书(keytool实例)代码实现加解密、加签、验签</a></p><p>生成证书核心两条命令，如下(注意，其中的密码之类的，改成自己的):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## 生成私钥</span><br><span class="line">keytool -genkey -alias yunbo2 -keypass 123456 -keyalg RSA -keysize 1024 -validity 3650 -keystore merKey.jks -storepass abc@2018 -dname &quot;CN=localhost,OU=localhost, O=localhost, L=深圳, ST=广东, C=CN&quot;</span><br><span class="line"></span><br><span class="line">## 生成公钥</span><br><span class="line">keytool -export -alias yunbo2 -keystore merKey.jks -file yunbo2.cer</span><br></pre></td></tr></table></figure></p><h4><span id="9数据加密">9.数据加密</span></h4><p>数据加密主要体现在对请求体内的数据进行base64加密或者是其他的加密方式。</p><h4><span id="10补充说明">10.补充说明</span></h4><p>之前搜索了不少文章提到过，请求头或者请求体传输用户名和密码，我个人觉得用户名和密码传输太过频繁并不安全，因此我选择了token，选择了多一步（通过用户名和密码拿到token,再通过token请求对其它业务webservice等）。</p><h2><span id="四-总结">四、总结</span></h2><p>技术往往有很多相似之处，可以复用和借鉴。之前在研究Apache CXF安全机制的时候，发现并没有那么多的资料可供参考，于是我换了一个思路，Apache CXF框架本质上就是对WebService简化，方便开发人员使用而不用配置一堆东西。我把核心聚焦在webservice安全，然后在发散，就有了这篇文章。<br>简单的概括一点:<br><strong>遇到难题不要钻牛角尖，可以尝试换一个思路(发散自己的思维)来解决这个难题。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术思考与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之监控服务器内存、CPU、磁盘使用率shell脚本</title>
      <link href="/2020/10/25/Linux%E4%B9%8B%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AD%98%E3%80%81CPU%E3%80%81%E7%A3%81%E7%9B%98%E4%BD%BF%E7%94%A8%E7%8E%87shell%E8%84%9A%E6%9C%AC/"/>
      <url>/2020/10/25/Linux%E4%B9%8B%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AD%98%E3%80%81CPU%E3%80%81%E7%A3%81%E7%9B%98%E4%BD%BF%E7%94%A8%E7%8E%87shell%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>监控服务器内存、CPU、磁盘使用率脚本内容(包含邮件告警):<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#Memory</span><br><span class="line">totalMemory=$(free -m | awk -F &apos;[ :]+&apos; &apos;NR==2&#123;print $2&#125;&apos;)</span><br><span class="line">usedMemory=$(free -m | awk -F &apos;[ :]+&apos; &apos;NR==2&#123;print $3&#125;&apos;)</span><br><span class="line">freeMemory=$(free -m|awk  &apos;&#123;print $4&#125;&apos;|sed -n &apos;3p&apos;)</span><br><span class="line">usedPerMemory=$(awk &apos;BEGIN&#123;printf &quot;%.0f&quot;,(&apos;$usedMemory&apos;/&apos;$totalMemory&apos;)*100&#125;&apos;)</span><br><span class="line">freePerMemory=$(awk &apos;BEGIN&#123;printf &quot;%.0f&quot;,(&apos;$freeMemory&apos;/&apos;$totalMemory&apos;)*100&#125;&apos;)</span><br><span class="line">logFile=/tmp/monitor.log</span><br><span class="line">#alerm date</span><br><span class="line">now_time=`date &apos;+%Y-%m%d %H:%M:%S&apos;`</span><br><span class="line">#Disk</span><br><span class="line">diskusAge=$(df -h | grep /dev/mapper/centos-root | awk -F &apos;[ %]+&apos; &apos;&#123;print $5&#125;&apos;)</span><br><span class="line"></span><br><span class="line">#CPU</span><br><span class="line">cpuusAge=$(top -b -n 1 |grep Cpu|awk &apos;&#123;print $8&#125;&apos;|cut -f 1 -d&apos;.&apos;)</span><br><span class="line"></span><br><span class="line">echo $cpuusAge</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># send mail</span><br><span class="line">function send_mail()&#123;</span><br><span class="line">        mail -s &quot;test alerm&quot; test@163.com &lt; /tmp/monitor.log</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [[ &quot;$usedPerMemory&quot; &gt; 90 ]] || [[ &quot;$diskusAge&quot; &gt; 90 ]] || [[ &quot;$cpuusAge&quot; &gt; 95 ]];then</span><br><span class="line"></span><br><span class="line">                echo &quot;报警时间：$&#123;now_time&#125;&quot; &gt; $logFile</span><br><span class="line">                echo &quot;CPU usage:$&#123;cpuusAge&#125;%&quot; &gt;&gt; $logFile</span><br><span class="line">                echo &quot;Memory usage:$&#123;usedPerMemory&#125;%&quot; &gt;&gt; $logFile</span><br><span class="line">                echo &quot;Disk usage:$&#123;diskusAge&#125;%&quot; &gt;&gt; $logFile</span><br><span class="line">                send_mail</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之监控微服务shell脚本</title>
      <link href="/2020/10/25/Linux%E4%B9%8B%E7%9B%91%E6%8E%A7%E5%BE%AE%E6%9C%8D%E5%8A%A1shell%E8%84%9A%E6%9C%AC/"/>
      <url>/2020/10/25/Linux%E4%B9%8B%E7%9B%91%E6%8E%A7%E5%BE%AE%E6%9C%8D%E5%8A%A1shell%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>监控微服务shell脚本内容(包含邮件告警):<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### check port</span><br><span class="line">check_port() &#123;</span><br><span class="line"></span><br><span class="line">        netstat -tlpn | grep &quot;\b$1\b&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">### check mkdir</span><br><span class="line">check_mkdir()&#123;</span><br><span class="line"></span><br><span class="line"> if [ ! -d &quot;/home/youcong/project/monitor/$1&quot; ]; then</span><br><span class="line">      mkdir /home/youcong/project/monitor/$1</span><br><span class="line"> fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">### server check </span><br><span class="line"></span><br><span class="line">monitor_server_register()&#123;</span><br><span class="line"></span><br><span class="line">if check_port $1                                  #端口</span><br><span class="line"></span><br><span class="line">then</span><br><span class="line">        </span><br><span class="line">        DATE_N=`date &quot;+%Y-%m%d&quot;`</span><br><span class="line">        </span><br><span class="line">        DATE_N_F=`date &quot;+%Y-%m%d %H:%M:%S&quot;`        </span><br><span class="line"></span><br><span class="line">        echo &quot;server $1 online date:$&#123;DATE_N&#125;&quot; &gt;&gt; /home/youcong/project/monitor/$1/server_&quot;$&#123;DATE_N&#125;.&quot;log</span><br><span class="line"></span><br><span class="line">    exit 1</span><br><span class="line">else</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        DATE_N=`date &quot;+%Y-%m%d&quot;`</span><br><span class="line"></span><br><span class="line">        DATE_N_F=`date &quot;+%Y-%m%d %H:%M:%S&quot;`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        echo &quot;server $1 offline date:$&#123;DATE_N_F&#125;&quot; &gt;&gt; /home/youcong/project/monitor/$1/server_$&#123;DATE_N&#125;.log</span><br><span class="line"></span><br><span class="line">        echo &quot;服务 $1 宕机 宕机日期为:$&#123;DATE_N_F&#125; 可进入/home/youcong/project/log查看宕机时间或进入/home/youcong/project/log查看错误详情 &quot; |mail -s &quot;邮件告警-服务为$1 的端口宕机了&quot; test@163.com </span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#服务端口(定义一个端口数组遍历监控,可写多个，记得以空格进行分隔)</span><br><span class="line">arrayIndex=(8080 8081)</span><br><span class="line"></span><br><span class="line">for var in $&#123;arrayIndex[@]&#125;</span><br><span class="line">do   </span><br><span class="line">     echo $var</span><br><span class="line">     </span><br><span class="line">     #检查目录是否存在</span><br><span class="line">     check_mkdir $var &amp;</span><br><span class="line"></span><br><span class="line">     #检测微服务状态</span><br><span class="line">     monitor_server_register $var &amp;</span><br><span class="line">     </span><br><span class="line">done</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot整合CXF时，启动报错</title>
      <link href="/2020/10/25/springboot%E6%95%B4%E5%90%88CXF%E6%97%B6%EF%BC%8C%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/"/>
      <url>/2020/10/25/springboot%E6%95%B4%E5%90%88CXF%E6%97%B6%EF%BC%8C%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line">Description:</span><br><span class="line">Parameter 1 of constructor in org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration required a bean of type &apos;org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath&apos; that could not be found.</span><br><span class="line">The following candidates were found but could not be injected:</span><br><span class="line">    - Bean method &apos;dispatcherServletRegistration&apos; in &apos;DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration&apos; not loaded because DispatcherServlet Registration found non dispatcher servlet dispatcherServlet</span><br><span class="line">Action:</span><br><span class="line">Consider revisiting the entries above or defining a bean of type &apos;org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath&apos; in your configuration.</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>通过搜索，说是和SpringBoot版本冲突导致的。</p><p>我的SpringBoot版本为2.2.6.RELEASE</p><p>整合的Apache CXF版本为3.2.4</p><p>我的CXF配置类代码有一段这样的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">    public ServletRegistrationBean dispatcherServlet() &#123;</span><br><span class="line">        return new ServletRegistrationBean(new CXFServlet(), &quot;/cxf/*&quot;);// 发布服务名称 localhost:8080/cxf</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我将其去除并在application.yml配置这行代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cxf:</span><br><span class="line">  path: /cxf</span><br></pre></td></tr></table></figure></p><p>最终项目启动起来了，问题得到解决。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我对测试的思考</title>
      <link href="/2020/10/25/%E6%88%91%E5%AF%B9%E6%B5%8B%E8%AF%95%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2020/10/25/%E6%88%91%E5%AF%B9%E6%B5%8B%E8%AF%95%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>说起来人生第一家互联网公司，教会了我蛮多的东西，虽然比较杂。如运维、测试、实施、开发等。基本上那个时候，哪里有需要，哪里就有我。</p><p>之前曾写过这么一篇文章<a href="https://www.cnblogs.com/youcong/p/9291184.html" target="_blank" rel="noopener">论单元测试之重要性</a><br>这篇文章的背景是我处于创业公司的时期，那个时候做的比较杂，由于前后端一起做，功能越来越多，bug也就越来越多。最后发现因为赶着发布周期，不得不快，快的我们连单元测试以及自测都懒得弄。最后发布前，经理测试了一下，发现了一堆bug。于是我们周末加班改bug。<br><a id="more"></a><br>持续了一段时间后，觉得老这样也不行，于是就开始写单元测试。还别说，因为写了单元测试后，bug率果然下降很多，bug率下降很多后，虽然也有一些bug，但并不是很重要，可以慢慢改。总而言之，我们不用周末来加班了，可以有一个美好的双休。</p><h2><span id="一-第一家公司专做测试的那段日子">一、第一家公司专做测试的那段日子</span></h2><p>之前我的领导是R哥，后来变成了D姐。D姐教我如何写测试用例。<br>根据测试用例，然后界面上进行操作，这样的测试通常叫功能性测试。<br>测试有很多种，功能测试是测试人员最基本的，也是最基础的。</p><p>测试分类如下:</p><ul><li><p><strong>黑盒测试</strong>——不是基于内部代码和设计的知识，而是基于需求和功能。</p></li><li><p><strong>白盒测试</strong>——基于应用程序的内部逻辑的知识，通过语句，分支，路径和条件的覆盖率。</p></li><li><p><strong>单元测试</strong>——测试中的最小单位，测试特殊的功能或代码模块。由于需要对内部代码和设计的详细知识，该测试一般由开发者完成而不是由测试人员完成。该测试的容易程度同代码设计的好坏直接相关。</p></li><li><p><strong>增量型的集成测试</strong>——随着新功能的增加，不断的对应用程序进行测试。在程序的所有部分完成之前，需要一个应用程序的各个部分之间能够相对独立的进行工作。这类型测试可以有开发者或测试者完成</p></li><li><p><strong>集成测试</strong>——测试应用程序结合的部分来确定它们的功能结合到一起是正确的。在这里‘部分’的概念可能是代码模块，独立的应用程序，在网络上的客户端和服务器断程序等等。这类型测试典型的是于客户/服务器和分布式系统相关。</p></li><li><p><strong>功能测试</strong>——是一种黑盒测试，同应用程序的功能需求紧密相关。这类型测试应当有测试人员来完成。这并不意味着开发人员在发布版本之前就不需要检查他们的代码。</p></li><li><p><strong>端到端测试</strong>——同系统测试类似，包括模拟现实世界对一个完整的应用环境进行测试。例如同数据库进行交互、使用网络通信，或者其他的软件、硬件和系统进行交互。</p></li><li><p><strong>理智测试</strong>——这是一种典型的原始测试，其目的是要确定一个新的软件版本在一些主要的测试努力下表现的足够好并且可以接受。例如：如果一个新软件每五分钟宕机一次，使系统执行速度极其缓慢，或者破坏系统数据，那么该软件就处于不够‘理智’状态，必须保证在当前状态下进行进一步测试。</p></li></ul><ul><li><p><strong>回归测试</strong>——在软件或环境被修改后进行的再测试。可能很难确定我们需要进行多少的再测试，尤其接近到开发过程的末期。自动测试工具可能会有很大的帮助。</p></li><li><p><strong>可接受性测试</strong>——基于最终用户的规格进行的最后测试。或者基于最终用户在一定的时间范围内的测试。</p></li></ul><ul><li><p><strong>负荷测试</strong>——在高负荷条件下进行的测试。</p></li><li><p><strong>压力测试</strong>——该术语通常同负荷测试和性能测试是可交换的。也可用于描述这样一些测试如：在不正常的负荷状态下，过分的重复某些动作或输入情况下进行的系统功能测试。</p></li></ul><ul><li><p><strong>性能测试</strong>——该术语通常同负荷测试和压力测试是可交换的。理想的性能测试是定义在需求文档或QA测试计划中的。</p></li><li><p><strong>安装和反安装测试</strong>——测试完全、部分或升级的安装/反安装过程。</p></li></ul><ul><li><p><strong>恢复测试</strong>——测试当出现崩溃，硬件错误或其他灾难性问题时，系统的表现情况。</p></li><li><p><strong>安全性测试</strong>——测试系统对于内部和外部非法入侵、故意损坏时的表现情况。可能需要复杂的测试技术。</p></li></ul><ul><li><p><strong>兼容性测试</strong>——测试系统在不同的平台/硬件/操作系统/网络上的表现情况。</p></li><li><p><strong>ALPHA测试</strong>——在开发进行结束的时候进行的测试。针对测试的结果可能还会进行一些小的设计更改。这类测试典型的是由用户进行的，而不是由开发者或测试人员进行的。</p></li><li><p><strong>BETA测试</strong>——在开发和测试已经全部结束后，并且在最终版本发布之前进行的测试。这类测试典型的是由用户进行的，而不是由开发者或测试人员进行的。</p></li></ul><p>那段时期做过最多的还是功能性测试。</p><p>那段时期也比较苦恼，觉得功能性测试没有一点技术含量，有过辞职的念头，于是将自己的苦恼跟导师诉说。导师很快给我回复，虽然现在记不得很清楚他的原话，但内容大概是，测试并不是没有技术含量的，高级的测试是需要会写代码的，同时你觉得哪些是重复性、单调的工作你可以学习一些自动化工具来提高你的测试效率。</p><p>于是我才坚持下来做了一段时期的测试工作。功夫不负有心人，最终我还是成功转到了开发部门，开始写我喜爱的Code。</p><h2><span id="二-创业公司的那段测试时期">二、创业公司的那段测试时期</span></h2><p>在创业公司做我们自己的产品，我在这篇文章较为详细的说过<a href="https://www.cnblogs.com/youcong/p/12153262.html" target="_blank" rel="noopener">创业公司这两年</a></p><p>仔细想想，我们的产品类型分为如下:</p><ul><li>物联网产品(既面向B端，又面向C端);</li><li>电商产品(既面向B端，又面向C端);</li><li>教育产品(既面向B端，又面向C端)。</li></ul><p>我们公司组织结构除了研发就是产品，没有测试。所以我们研发人员无论是后端还是安卓端的，基本上都需要兼任测试职责。</p><p>就像我在前面说到的那样，前期我们不是很注重测试环节甚至过滤掉，导致我们不必要的加班改bug。后期我们形成了一套流程，周一到周四开发阶段，周五发版测试，如果没有问题，周五下班前直接发给经理，由经理再测试验证，随后再到老板那，如果有问题，问题比较严重，周五改不过来，那么我们就需要周六或周日来加班，</p><p>最初我们的测试也就是点点，但后来发现这样不行，因为点点仅仅是确认这个功能是否会报错如500等之类的，但并不能确保业务流程是对的。</p><p>于是我们改进了，写了几个业务流程的思维导图，然后测试，这样有针对性的测试，让我们测试就有了方向，不至于东点点西点点浪费不必要的时间。</p><h2><span id="三-教育saas公司的测试时期">三、教育SAAS公司的测试时期</span></h2><p>教育SAAS有专门的测试人员和完善的测试机制。但是作为开发人员，我们部门明确一点要求，那就是每个人写的Java程序，必须要有对应的测试代码，以确保不必要的错误和代码质量。<br>每两周发版一次，分为开发周和测试周，开发周写本周产品提出的需求，每周周五开发周将终止，进行内部发版，发到测试环境，周一或者周五下午由测试人员进行冒烟测试。</p><p>大家或许对冒烟测试不太了解，其实我之前也不明白。</p><h3><span id="冒烟测试">冒烟测试</span></h3><h4><span id="1冒烟测试是什么">1.冒烟测试是什么</span></h4><p>针对每个版本或每次需求变更后，在正式测试前，对产品或系统的一次简单的验证性测试。</p><h4><span id="2冒烟测试的目的">2.冒烟测试的目的</span></h4><p>为正式测试前，验证是否产品或系统的主要需求或预置条件是否存在bug。</p><p>经过冒烟测试验证Ok没问题后，然后测试人员才会进行下一步测试如功能性测试。</p><p>经过这家公司的洗礼，我才发现测试人员还是要有很强的功底如必须对业务非常熟悉和非常细心和严谨，同时还得熟练掌握一些自动化测试工具如LoadRunner或Selenium等。</p><p>由于没待过流程体系较为完善的公司，我在这家公司做的第一个功能就出现了近一百多个bug。那个时候我既要写后端，也要写前端。后端bug二十来个，前端bug近一百个。看到禅道上给我指派的bug，我都快哭了。那个时候很想揍那位测试小哥哥。我刚来没多久，就对我这么不友好。想了想，先把bug改完再说。改完后，我逐渐意识到也不能怪那位测试小哥哥，毕竟是人家的职责所在。通过这次我发现自身存在很多问题，如代码写的不严谨、对一些细节不注重、不细心、对于功能差不多就好等缺点，于是后来我努力改进，虽然写的功能或多或少会有bug，但基本上控制在个位数上，改起来也不费劲，自那以后我和测试人员就处的很愉快，bug少，我轻松，他们也轻松。</p><h2><span id="四-总结">四、总结</span></h2><p>我所待的三家公司里，测试工作的经历告诉我一个很重要的道理:<br><strong>无论研发、测试、运维或者是其他行业的工作，做到最后都在围绕一个人最重要的素养，那就是责任心，同样这个责任心也是做人最重要的品质之一。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 职业生涯思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Apache-CXF实践</title>
      <link href="/2020/10/24/SpringBoot%E6%95%B4%E5%90%88Apache-CXF%E5%AE%9E%E8%B7%B5/"/>
      <url>/2020/10/24/SpringBoot%E6%95%B4%E5%90%88Apache-CXF%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-apache-cxf是什么">一、Apache CXF是什么？</span></h2><p>Apache CXF 是一个开源的 Services 框架，CXF 帮助您利用 Frontend 编程 API 来构建和开发 Services ，像 JAX-WS 。这些 Services 可以支持多种协议，比如：SOAP、XML/HTTP、RESTful HTTP 或者 CORBA ，并且可以在多种传输协议上运行，比如：HTTP、JMS 或者 JBI，CXF 大大简化了 Services 的创建，同时它继承了 XFire 传统，一样可以天然地和 Spring 进行无缝集成。<br><a id="more"></a></p><h2><span id="二-springboot整合apache-cxf实践例子">二、SpringBoot整合Apache CXF实践例子</span></h2><p>本次例子为Client-Server(客户端-服务端)。还是以我最喜欢的Blog为例。</p><p>本次涉及两个项目，一个是blog-cxf-client，另外一个是blog-cxf-server。</p><h3><span id="1blog-cxf-server">1.blog-cxf-server</span></h3><h4><span id="1导入maven依赖">(1)导入Maven依赖</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!-- SpringBoot Web --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- CXF webservice --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;cxf-spring-boot-starter-jaxws&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.2.4&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- Lombok--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;artifactId&gt;blog-cxf-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.blog.cxf&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h4><span id="2编写相关代码">(2)编写相关代码</span></h4><h5><span id="a编写主类">a.编写主类</span></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.cxf.server;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:</span><br><span class="line"> * @author: youcong</span><br><span class="line"> * @time: 2020/10/24 22:30</span><br><span class="line"> */</span><br><span class="line">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span><br><span class="line">public class BlogCxfServerApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(BlogCxfServerApplication.class, args);</span><br><span class="line">        System.out.println(&quot;====启动Blog Cxf Server====&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5><span id="b编写applicationyml配置文件">b.编写application.yml配置文件</span></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># Tomcat</span><br><span class="line">server:</span><br><span class="line">  tomcat:</span><br><span class="line">    uri-encoding: UTF-8</span><br><span class="line">    #最小线程数</span><br><span class="line">    min-spare-threads: 500</span><br><span class="line">    #最大线程数</span><br><span class="line">    max-threads: 2500</span><br><span class="line">    #最大连接数</span><br><span class="line">    max-connections: 5000</span><br><span class="line">    #最大等待队列长度</span><br><span class="line">    accept-count: 1000</span><br><span class="line">    #请求头最大长度kb</span><br><span class="line">    max-http-header-size: 1048576</span><br><span class="line">    #启动APR(非阻塞IO)</span><br><span class="line">    protocol: org.apache.coyote.http11.Http11AprProtocol</span><br><span class="line">  port: 9090</span><br><span class="line"></span><br><span class="line"># Spring</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    # 应用名称</span><br><span class="line">    name: blog-cxf-server</span><br><span class="line">cxf:</span><br><span class="line">  path: /cxf</span><br></pre></td></tr></table></figure><h5><span id="c编写service代码">c.编写service代码</span></h5><p>UserService.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.cxf.server.service;</span><br><span class="line"></span><br><span class="line">import com.blog.cxf.server.dto.UserReqDto;</span><br><span class="line"></span><br><span class="line">import javax.jws.WebParam;</span><br><span class="line">import javax.jws.WebService;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:</span><br><span class="line"> * @author: youcong</span><br><span class="line"> * @time: 2020/10/24 22:32</span><br><span class="line"> */</span><br><span class="line">@WebService(targetNamespace = &quot;http://service.server.cxf.blog.com/&quot;)</span><br><span class="line">public interface UserService &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 添加用户</span><br><span class="line">     * @param email</span><br><span class="line">     * @param username</span><br><span class="line">     * @param password</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    int addUser(@WebParam(name = &quot;email&quot;) String email, @WebParam(name = &quot;username&quot;) String username, @WebParam(name = &quot;password&quot;) String password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 更新用户信息</span><br><span class="line">     * @param userReqDto</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    int updateUser(@WebParam(name=&quot;user&quot;)UserReqDto userReqDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>UserServiceImpl.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.cxf.server.service.impl;</span><br><span class="line"></span><br><span class="line">import com.blog.cxf.server.dto.UserReqDto;</span><br><span class="line">import com.blog.cxf.server.service.UserService;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.jws.WebService;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:</span><br><span class="line"> * @author: youcong</span><br><span class="line"> * @time: 2020/10/24 22:35</span><br><span class="line"> */</span><br><span class="line">@WebService(serviceName = &quot;userService&quot;,//对外发布的服务名</span><br><span class="line">        targetNamespace = &quot;http://service.server.cxf.blog.com/&quot;,//指定你想要的名称空间，通常使用使用包名反转</span><br><span class="line">        endpointInterface = &quot;com.blog.cxf.server.service.UserService&quot;)</span><br><span class="line">@Component</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">    public int addUser(String email, String username, String password) &#123;</span><br><span class="line">        System.out.println(&quot;注册用户:&quot;+email);</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int updateUser(UserReqDto userReqDto) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数据传输类(UserReqDto.java):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.cxf.server.dto;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:</span><br><span class="line"> * @author: youcong</span><br><span class="line"> * @time: 2020/10/24 22:49</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">public class UserReqDto &#123;</span><br><span class="line"></span><br><span class="line">    private Long ID;</span><br><span class="line"></span><br><span class="line">    private String email;</span><br><span class="line"></span><br><span class="line">    private String username;</span><br><span class="line"></span><br><span class="line">    private String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5><span id="c编写配置类服务发布">c.编写配置类(服务发布)</span></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.cxf.server.config;</span><br><span class="line">import com.blog.cxf.server.service.UserService;</span><br><span class="line">import com.blog.cxf.server.service.impl.UserServiceImpl;</span><br><span class="line">import org.apache.cxf.Bus;</span><br><span class="line">import org.apache.cxf.bus.spring.SpringBus;</span><br><span class="line">import org.apache.cxf.jaxws.EndpointImpl;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:</span><br><span class="line"> * @author: youcong</span><br><span class="line"> * @time: 2020/10/24 22:37</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class CxfConfig &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean(name = Bus.DEFAULT_BUS_ID)</span><br><span class="line">    public SpringBus springBus() &#123;</span><br><span class="line">        return new SpringBus();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public UserService userService() &#123;</span><br><span class="line">        return new UserServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发布服务并指定访问URL</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public EndpointImpl userEnpoint() &#123;</span><br><span class="line">        EndpointImpl endpoint = new EndpointImpl(springBus(), userService());</span><br><span class="line">        endpoint.publish(&quot;/user&quot;);</span><br><span class="line">        return endpoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="3启动blogcxfserverapplication主类并访问对应的wsdl">(3)启动BlogCxfServerApplication主类并访问对应的WSDL</span></h4><p>访问路径:<br><a href="http://localhost:9090/cxf/user?wsdl" target="_blank" rel="noopener">http://localhost:9090/cxf/user?wsdl</a></p><p>截图效果:<br><img src="/2020/10/24/SpringBoot整合Apache-CXF实践/01.png" alt="图一"></p><p>使用SOAP-UI工具进行测试:<br><img src="/2020/10/24/SpringBoot整合Apache-CXF实践/02.png" alt="图二"></p><p><img src="/2020/10/24/SpringBoot整合Apache-CXF实践/03.png" alt="图三"></p><h3><span id="2blog-cxf-client">2.blog-cxf-client</span></h3><h4><span id="1导入maven依赖">(1)导入Maven依赖</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;blog-cxf&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.blog.cxf&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;blog-cxf-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- SpringBoot Web --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- CXF webservice --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;cxf-spring-boot-starter-jaxws&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.2.4&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Lombok--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;artifactId&gt;blog-cxf-server&lt;/artifactId&gt;</span><br><span class="line">            &lt;groupId&gt;com.blog.cxf&lt;/groupId&gt;</span><br><span class="line">            &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h4><span id="2编写主类">(2)编写主类</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.cxf.client;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:</span><br><span class="line"> * @author: youcong</span><br><span class="line"> * @time: 2020/10/24 23:35</span><br><span class="line"> */</span><br><span class="line">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span><br><span class="line">public class BlogCxfClientApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(BlogCxfClientApplication.class, args);</span><br><span class="line">        System.out.println(&quot;====启动Blog Cxf Client====&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="3编写applicationyml">(3)编写application.yml</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># Tomcat</span><br><span class="line">server:</span><br><span class="line">  tomcat:</span><br><span class="line">    uri-encoding: UTF-8</span><br><span class="line">    #最小线程数</span><br><span class="line">    min-spare-threads: 500</span><br><span class="line">    #最大线程数</span><br><span class="line">    max-threads: 2500</span><br><span class="line">    #最大连接数</span><br><span class="line">    max-connections: 5000</span><br><span class="line">    #最大等待队列长度</span><br><span class="line">    accept-count: 1000</span><br><span class="line">    #请求头最大长度kb</span><br><span class="line">    max-http-header-size: 1048576</span><br><span class="line">    #启动APR(非阻塞IO)</span><br><span class="line">    protocol: org.apache.coyote.http11.Http11AprProtocol</span><br><span class="line">  port: 9091</span><br><span class="line"></span><br><span class="line"># Spring</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    # 应用名称</span><br><span class="line">    name: blog-cxf-client</span><br></pre></td></tr></table></figure><h4><span id="4编写controller">(4)编写Controller</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.cxf.client.controller;</span><br><span class="line"></span><br><span class="line">import com.blog.cxf.server.dto.UserReqDto;</span><br><span class="line">import com.blog.cxf.server.service.UserService;</span><br><span class="line">import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:</span><br><span class="line"> * @author: youcong</span><br><span class="line"> * @time: 2020/10/24 23:37</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">public class UserApiController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/add&quot;)</span><br><span class="line">    public int add(@RequestParam String email, @RequestParam String username, @RequestParam String password) &#123;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // 接口地址</span><br><span class="line">            String address = &quot;http://127.0.0.1:9090/cxf/user?wsdl&quot;;</span><br><span class="line">            // 代理工厂</span><br><span class="line">            JaxWsProxyFactoryBean jaxWsProxyFactoryBean = new JaxWsProxyFactoryBean();</span><br><span class="line">            // 设置代理地址</span><br><span class="line">            jaxWsProxyFactoryBean.setAddress(address);</span><br><span class="line">            // 设置接口类型</span><br><span class="line">            jaxWsProxyFactoryBean.setServiceClass(UserService.class);</span><br><span class="line">            // 创建一个代理接口实现</span><br><span class="line">            UserService userService = (UserService) jaxWsProxyFactoryBean.create();</span><br><span class="line"></span><br><span class="line">            return userService.addUser(email, username, password);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong><br>实际中这段代码应该放在blog-cxf-server里面的Controller，然后客户端通过http-client或者其它http工具包进行请求。</p><p>还有如果是服务是都在一起，可按照maven依赖导入的方式来实现两个不同项目进行调用。</p><h4><span id="5使用postman测试">(5)使用PostMan测试</span></h4><p><img src="/2020/10/24/SpringBoot整合Apache-CXF实践/04.png" alt="图四"></p><p>接着服务端控制台会打印如下:<br><img src="/2020/10/24/SpringBoot整合Apache-CXF实践/05.png" alt="图五"></p><h2><span id="三-代码例子">三、代码例子</span></h2><p>代码例子已上传到我的GitHub上。</p><p>代码地址:<br><a href="https://github.com/developers-youcong/blog-cxf" target="_blank" rel="noopener">https://github.com/developers-youcong/blog-cxf</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我对运维的思考</title>
      <link href="/2020/10/24/%E6%88%91%E5%AF%B9%E8%BF%90%E7%BB%B4%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2020/10/24/%E6%88%91%E5%AF%B9%E8%BF%90%E7%BB%B4%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>我是一名Java后端研发工程师，在我的职业生涯中，曾做过一小段时间专业的运维，而后在一段很长的时间里兼任我运维职责，只不过职责范围在小和大之间来回奔跑。<br><a id="more"></a></p><h2><span id="一-linux命令是基础万变不离其宗">一、Linux命令是基础，万变不离其宗</span></h2><p>我所待的几家公司，或多或少要做运维相关的工作，其中Linux是最常用的，这个Linux包含Linux常用命令和操作系统(如Debian、红帽、Gentoo、Ubuntu、CentOS等)。其中我接触最多的就是CentOS和Ubuntu。</p><h3><span id="为什么说linux命令是基础">为什么说Linux命令是基础？</span></h3><ul><li><p>命令行界面以Linux命令作为基础，如果不会敲命令，也就无法使用(各种软件安装和问题排查都涉及);</p></li><li><p>shell脚本就是由一条条Linux命令组合而来，掌握好Linux命令，你就可以写出各种各样的符合实际需求的脚本(服务监控、备份、项目部署等)。</p></li></ul><p>另外再从另外一个角度来看，不论是专业的运维人员或开发人员都需要掌握Linux命令，只不过程度不一样，对于运维人员必须掌握牢靠，毕竟是吃饭的家伙，对于开发人员，开发写出来的项目大多是部署在Linux上(有一部分是Windows Server)，涉及生产环境的问题排查，必然需要熟知一些常用的Linux命令。</p><h2><span id="二-自动化">二、自动化</span></h2><p>自动化这块对运维非常重要，自动化涉及最多的就是写一些shell脚本放在特定的目录归类好，按需执行。</p><p>现在有很多现成的软件可以将一些工作自动化如(jenkins持续集成(拉取项目、自动编译、发布等)、zabbix自动监控服务器CPU、内存、磁盘和JVM、MySQL等、Ansible轻松管理上百台服务器等)。</p><p>有人幽默地说:<strong>不擅长将工作自动化的运维不是好运维。</strong></p><p>在我做运维相关的工作的时候，发现像部署或者一些软件的备份和安装就那么几条命令，敲来敲去，敲了N多遍，虽然可以复制粘贴，但是感觉还是太过麻烦，于是写一个shell脚本，只需一键执行即可。这样一来就可以节省更多的时间。</p><p>更多的时间可以用来思考更多，比方说现有的运维体系哪些不是很完善或者是之前遗留的哪些问题(不那么紧急但比较重要)可以现在来解决。<br>再或者对于一些软件它的一些设计原理和思想是什么，也可以研究研究。再或者是配置文件，为什么要这么配置，每个配置是什么含义。</p><p>在我做运维的时候，网上搜索安装和配置软件，基本上就是复制过来一步步来，但后来发现有一点不好的就是我对于为什么这样配置不知道，不知道意味着可能存在一些风险，运维人员要想进步成长，对一些软件不仅仅做到知其然，更要知其所以然(与我们研发人员写代码一样，不仅仅要懂业务逻辑和代码执行逻辑，同时也要知道所使用的库，底层是如何处理的)。</p><p>安装软件谁都会，但要说到软件的配置，如何配更合理更符合实际场景那就是一门比较深的功夫。</p><h3><span id="那么如何做到自动化呢">那么如何做到自动化呢？</span></h3><p>要养成”懒”的习惯，就和研发人员写代码一样，发现多段重复的代码，于是将其抽取为一个方法进行调用(不用在复制来复制去，影响可读行，同时也增加代码行，代码行越多确实不便阅读)。运维人员经常使用Linux命令，在敲的过程中总会能够发现哪些是重复多次的，重复多次的就可以写成一个shell脚本。</p><h3><span id="自动化的好处有哪些">自动化的好处有哪些？</span></h3><p>最直接的好处就是:<strong>你动脑思考了，思考如何简化工作，提高效率。这样一来给你直接带来的就是实力的提升。</strong></p><p>其它的好处就像上面说的，你可以有更多的时间来思考如何做的更好或者学习(我第一家公司的运维同事在自动化方面做的很不错，同时他的Linux功底也非常好，基本上工作做的特别快，效率也特别高，因此他有更多的时间去思考，去学习(业务或者技术层面)等)。</p><p>还有一个最重要的原因，<strong>如果你不擅长将工作自动化，最后可能会累的要命。累的代价就是身心疲惫和停止思考(人在非常累的时候写代码，非常麻木，根本不知道自己在做什么，只是在重复动作)</strong>。</p><h2><span id="三-要懂业务">三、要懂业务</span></h2><p>在一些互联网公司，开发人员不懂业务的话，工作几乎没办法进行下去。对于运维人员来说，可以不懂。这是我曾经的看法。</p><p>后来经历多了，发现还真不是这样。什么样的业务决定使用什么样的架构(逻辑架构(如分层:数据访问层、业务逻辑层、表示层等)、开发架构(SDK和一些第三方库等)、物理架构(部署和运行)、系统架构等)，其中物理架构(操作系统、网络、服务器等)、数据架构(数据表设计、高可用、备份、复制等)。</p><p>根据合适的业务，选择合适的架构。对架构师而言非常重要，对于运维人员也同样如此。</p><p>同时懂业务对于运维人员排查问题也是很有帮助的，因为懂流程，懂流程意味着可以重现，重现问题过程中，打开对应的日志，这样一来能准确的定位到问题，看是因为服务器的原因还是某个开发人员代码写的问题(服务器的原因通常那段程序执行需要更多的内存，服务器内存可能不够;代码的原因通常是一些判断逻辑不是很完善导致程序没有按照正常流程走)。这样就能减少运维背锅的概率，也能有理有据的反驳。</p><h2><span id="四-要有一套完整的运维机制">四、要有一套完整的运维机制</span></h2><p>曾看过李鹏写的《IT运维之道》这本书，大部分忘记了，但其中提到的IT运维四要事，至今印象还比较深刻，做运维的朋友，可以读一读，曾经在创业公司读这本书的时候，受到一些启发运用到实际中，提高效率不少。<br>这本书总结了IT运维的四件要事。我觉得讲的很不错。同时这四要素可构成一套完整的运维机制。四要素如下:</p><h3><span id="1按运维原则做事">1.按运维原则做事</span></h3><ul><li>事前:讲计划、重承诺;</li><li>事中:讲规范、重控制、有反馈;</li><li>事后:重效率、能应急、有保障。</li></ul><h3><span id="2掌握服务平衡">2.掌握服务平衡</span></h3><ul><li>主动服务:服务者发起运维服务;</li><li>受理服务:用户提出运维需求。</li></ul><h3><span id="3落实整体运维">3.落实整体运维</span></h3><ul><li>软件支撑系统;</li><li>应用系统;</li><li>计算机硬件设备;</li><li>机房和环境。</li></ul><h3><span id="4贯穿服务流程">4.贯穿服务流程</span></h3><ul><li>事件流程;</li><li>问题流程;</li><li>配置管理流程;</li><li>变更流程;</li><li>发布流程。</li></ul><p>上述四要素每一个部分要细说，都可以讲很多内容。由于我运维经历很有限，上述四要素并没有全部接触。但对于我感触最深的是第一点按运维原则做事和第四点贯穿服务流程。这四要素大家可择需而取。在我的职业生涯中，涉及到运维相关的工作，如果我有权把控的话，基本上会按照第一点来做(其实不仅仅是运维，开发也一样)。</p><h2><span id="五-适当了解前后端">五、适当了解前后端</span></h2><p>早年软件，以Java开发为例，基本上JSP+SSH之类的或者JSP+SSM等之类的框架。基本上Java代码+前端HTML+CSS+JS混合一体。如果代码写的不是那么优美，看起来很难受。<br>如今，基本上都是前后端分离。<br>前端三大主流框架Vue.js、React.js、Angular.js等。<br>这三大框架基本上都体现了前端模块化的思想。作为运维人员部署方面也很简单，要么服务器有node.js环境，要么让前端人员本地编译好，将生成的dist目录里的文件打成zip包直接上传到nginx对应的目录解压即可。总而言之，运维人员得了解。</p><h3><span id="为什么要适当了解前后端">为什么要适当了解前后端？</span></h3><p>最基础的就是针对请求的响应码，要识别一些常用的响应码，利于排错，同时作为运维人员也要擅长浏览器调试。因为像有的公司做的项目是需要现场实施的，实施人员通常是运维，去客户公司部署项目，确定项目是否部署成功，通常要结合一些前后端相关的知识。记忆比较深刻的是在第一家公司的时候，有一次运维同事和技术总监跟着去客户公司调设备，技术总监之所以带他去也是让其熟悉这个环境，同时也让他熟悉一些Java代码(Client-Server通信)，因为回头就得他一个人来客户公司调，要求他能看懂这部分Java代码。不能排除有的时候运维不仅仅是捣鼓一些服务器上的东西，可能还要求熟悉一些前后端代码之类的。大家可以去Boss直聘上瞄一眼，中高级运维，基本上都要求至少熟悉一门编程语言，可以是Java，也可以是Go和Python。不过近年来Go和Python是比较多(Python做自动化运维是非常合适的)。当然了，基本上学计算机的，大家接触了编程语言不可能只有一个。</p><h2><span id="六-总结">六、总结</span></h2><p>记得之前在公众号看过一篇文章《远见|美团王慧文清华演讲:社会最稀缺的是π型人才》，这篇文章提到了社会最稀缺的是”π型人才”。</p><p>“π型人才”并不等于是全才(也不能等于什么都了解、什么都不精)，只是不给自己设限(不把自己圈在特定的地方，简单的举例说明，我既是一名Java程序员，又是产品的创造者之一，同时我也可以是一名业余作家)。</p><p>我的前三家公司经理级别的领导基本上都符合这样的。</p><h3><span id="第一家公司的技术总监">第一家公司的技术总监</span></h3><p>之前公司是没有运维的，他独立负责整个公司的运维。不仅仅这样，如果项目急的时候，他也要上阵写Java和一些前端代码。平时他也是主要写后端代码和做数据库设计方面的。</p><h3><span id="第二家公司的项目经理">第二家公司的项目经理</span></h3><p>他早年做过程序员，后来做产品经理，再后来运营总监等。</p><h3><span id="第三家公司的技术经理">第三家公司的技术经理</span></h3><p>他是一名后端程序员，后来不知由于什么原因做起来前端。我和他在一起工作的时候，发现他每天和我们一样，除了开产品会就是在写代码或者是做少部分管理工作。</p><p>结合我这些年的工作经验来看，无论是开发、测试、运维等，它们都共同涉及一个点，那就是工作的”原则”(包含工作的方法论),每家公司的研发流程不一样，但工作的原则是可以复用的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 职业生涯思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jar包部署指定不同环境</title>
      <link href="/2020/10/20/jar%E5%8C%85%E9%83%A8%E7%BD%B2%E6%8C%87%E5%AE%9A%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83/"/>
      <url>/2020/10/20/jar%E5%8C%85%E9%83%A8%E7%BD%B2%E6%8C%87%E5%AE%9A%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>核心命令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar --spring.profiles.active=prod</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>通过–spring.profiles.active指定不同的环境(如开发、测试、生产等)。</p><p>这非常重要因为涉及到部署脚本的编写。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cannot create GC thread. Out of system resources.</title>
      <link href="/2020/10/20/Cannot-create-GC-thread-Out-of-system-resources/"/>
      <url>/2020/10/20/Cannot-create-GC-thread-Out-of-system-resources/</url>
      
        <content type="html"><![CDATA[<h4><span id="错误信息">错误信息:</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot create GC thread. Out of system resources.</span><br></pre></td></tr></table></figure><a id="more"></a><h4><span id="问题背景">问题背景:</span></h4><p>使用普通用户部署项目报这样的错误信息。</p><h4><span id="错误原因">错误原因:</span></h4><p>Linux是有文件句柄限制的，而且Linux默认不是很高，一般都是1024，生产服务器用其实很容易就达到这个数量。<br>也就是说普通用户有软硬件的限制。这不是授权就可以解除的。</p><h4><span id="解决办法">解决办法:</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/security/limits.d</span><br><span class="line"></span><br><span class="line">vim 20-nproc.conf</span><br></pre></td></tr></table></figure><p>修改如下内容:</p><p>文件原内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*          soft    nproc     4096</span><br><span class="line">root       soft    nproc     unlimited</span><br></pre></td></tr></table></figure></p><p>文件修改后的内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*          soft    nproc     unlimited</span><br><span class="line">root       soft    nproc     unlimited</span><br></pre></td></tr></table></figure></p><p>最终使用普通用户部署就不会再出现这样的错误了。</p><p>另外之所以做这样的限制是为了避免前端请求，后端处理时，一些恶意的请求导致对应的进程会增加，从而占用内存。如果不做一定的限制，可能会使得整个服务器宕机。这也就是为什么前端接口要鉴权，后台要有一个机制来识别哪些是恶意的请求。之前一直觉得微服务组件Sentinel没用，但后来发现其实它还是有用的，至少它可以在一定程度上起到一个识别是否是正常请求的作用，对于哪些频繁的恶意请求，Sentinel直接转向其它提示信息，并不会走到后端真正的处理逻辑从而避免不必要的资源消耗。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更改＂xxxx＂ 的权限: 不允许的操作</title>
      <link href="/2020/10/20/%E6%9B%B4%E6%94%B9%EF%BC%82xxxx%EF%BC%82-%E7%9A%84%E6%9D%83%E9%99%90-%E4%B8%8D%E5%85%81%E8%AE%B8%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/10/20/%E6%9B%B4%E6%94%B9%EF%BC%82xxxx%EF%BC%82-%E7%9A%84%E6%9D%83%E9%99%90-%E4%B8%8D%E5%85%81%E8%AE%B8%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p><strong>错误背景:</strong><br>在CentOS7.8中添加定时任务，突然出现两个crontab相关文件，一个是crontab，另外一个是crontab~。于是当我编辑crontab添加一行定时任务记录时，提示该文件只读，不能修改。于是我通过root用户授权，然后就提示，更改”xxx”的权限:不允许的操作这样的错误。<br><a id="more"></a></p><p><strong>问题原因:</strong><br>是因为在Linux中有些配置文件，哪怕是root都不能随意修改，主要是防止误操作(误删和修改等)。</p><p><strong>解决办法:</strong><br>允许修改即可，命令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr -i /etc/fstab</span><br></pre></td></tr></table></figure></p><p>如果你想一些特别的文件不能随意修改的话，可以执行如下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr +i /etc/fstab</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈FTP</title>
      <link href="/2020/10/17/%E8%B0%88%E8%B0%88FTP/"/>
      <url>/2020/10/17/%E8%B0%88%E8%B0%88FTP/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-关于ftp">一、关于FTP</span></h2><h3><span id="1ftp是什么">1.FTP是什么？</span></h3><p>FTP，全称”文件传输协议”。属于TCP/IP四层模型中的应用层。<br><a id="more"></a></p><h3><span id="2tcpip五层模型有哪些">2.TCP/IP五层模型有哪些？</span></h3><p>如图所示:<br><img src="/2020/10/17/谈谈FTP/01.png" alt="图一"></p><p>用文字叙述(从高层到底层):</p><ul><li>(1)应用层;</li><li>(2)传输层;</li><li>(3)网络层;</li><li>(4)数据链路层;</li><li>(5)物理层。</li></ul><p>其中如FTP、HTTP、SNMP等就属于应用层。</p><h3><span id="3为什么要使用ftp">3.为什么要使用FTP</span></h3><p>从我个人职业经历来谈，使用FTP的应用场景如下:</p><ul><li>(1)数据备份;</li><li>(2)公司内部文件管理;</li><li>(3)业务层应用;</li></ul><h4><span id="1数据备份">(1)数据备份</span></h4><p>关于数据备份，结合我之前做运维的一段经历，主要手段如下:<br><strong>编写shell脚本(基于scp命令)，配置crontab，进行定时文件传输备份(通常传输到另外一台备份服务器上)。</strong></p><p>除了基于scp之外，还可以有sftp、sz/rz、rsync和本文提到的ftp等。</p><p><strong>备份的内容通常如下:</strong><br>数据库脚本、应用软件日志(tomcat等)、常用脚本备份、重要配置文件和软件备份等。</p><h4><span id="2公司内部文件管理">(2)公司内部文件管理</span></h4><p>关于公司内部文件管理，有的公司会搭建一个内部的FTP，主要用于管理公司重要文件(如公司规章制度文档、业务文档、技术文档、开发环境软件、重要第三方账号管理等)。</p><p>FTP有严格的权限控制，可以控制谁能访问某个目录下的文件和下载文件的权限。</p><h4><span id="3业务层应用">(3)业务层应用</span></h4><p>业务层应用的话，我之前用FTP作为我的博客系统文件管理工具，主要用于保存用户的头像和上传的如MP3、MP4、Pdf、Word等文件。</p><p>因为如果将其以二进制(其实将文件流转化为二进制)的形式存储，会影响数据库的性能。</p><p><strong>问:为什么将文件(这里指图片和其它文件格式的文件)以二进制的形式存储会影响数据库的性能？</strong><br>因为存储图片或其它文件的二进制需要非常长的字段(如text或longtext等)，对于数据库查找数据的时候，会增加处理时间(处理时间长)，在高并发的应用场景下，很多用户访问，这会加重数据库的负担，从而导致处理时间长(速度慢)，导致C端用户可能看到的景象是，点击某个功能加载很慢(如电商相关的，商品列表展示非常多的图片等)。</p><p><strong>问:为什么对于非常长的字段会增加数据库的查询时间呢？</strong><br>因为更长的列会消耗更多的内存，因为MySQL通常会分配固定大小的内存块来保存内部值。</p><p>以我之前写的博客系统，我会图片上传至FTP，然后通过Nginx做代理映射到FTP上传图片的目录，实际上保存在数据表里面的图片，仅仅是一个URL。而且nginx对于处理静态资源(如图片、css、html、js等)性能非常好。</p><p><strong>问:目前公司项目用FTP多吗？</strong><br>我的回答是分情况看，比方说对于中小公司或者创业公司来说，一般不会使用FTP，通常会用阿里云或者腾讯云、七牛云的存储服务。因为性能更好，不需要任何成本。因为自建，不管是FTP或者是分布式FastDFS都需要对其非常熟悉，不然的话，很容易遇到一些奇怪问题。<br>对于一些传统公司来说，用FTP的还是比较多(这里就不列举了)。</p><h3><span id="4ftp的优缺点">4.FTP的优缺点</span></h3><h4><span id="1ftp有哪些优点">(1)FTP有哪些优点?</span></h4><ul><li>a.完善的权限管理;</li><li>b.基于网络，操作灵活;</li><li>c.安全性高，数据传输可通过SSL、SSH2进行安全加密;</li><li>d.使用TCP/IP协议，保证数据准确到达;</li><li>e.传输速度快,FTP的传输效率比HTTP更快;</li></ul><h4><span id="2ftp有哪些缺点">(2)FTP有哪些缺点?</span></h4><ul><li>a.FTP没有内置加速技术，传输巨型文件和海量文件需要很长时间，过程存在无故中断、传输文件内容不一致、传输文件丢失等(最近就特别感受到了，传输近二十个G文件，一旦中断，又得重新进行);</li><li>b.FTP传输过程没有可视化的显示记录(使用winscp或xftp才能看到传输过程，代码层面上根本看不到);</li></ul><h3><span id="5ftp的替代方案有哪些">5.FTP的替代方案有哪些？</span></h3><p>就FTP方面，有如下方案:</p><ul><li>a.FTPS;</li><li>b.SFTP;</li></ul><p>但除此之外，还有很多第三方的文件存储方案如前面提到腾讯云对象存储、阿里云对象存储、七牛云对象存储等。</p><p>当然了，一切根据公司业务情况和公司背景情况而定，很多公司之所以不使用例如腾讯云、阿里云、七牛云的存储方案，是因为存储的东西非常重要，放在第三方不安全，害怕对方可能窃取其中的重要信息。</p><p>这也是为什么微信会有企业微信、阿里会有钉钉、美团会有大象的重要原因。</p><h3><span id="6关于ftp的安装">6.关于FTP的安装</span></h3><h4><span id="1centos7安装ftp">(1)CentOS7安装FTP</span></h4><p>参考如下流程，一步步执行即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#安装FTP</span><br><span class="line">yum -y install vsftpd</span><br><span class="line"></span><br><span class="line">#修改配置文件</span><br><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line"></span><br><span class="line">修改第12行为： anonymous_enable=NO  禁止匿名登录</span><br><span class="line"></span><br><span class="line">取消第102行chroot_list_enable=YES，104行chroot_list_file=/etc/vsftpd/chroot_list的注释  </span><br><span class="line"></span><br><span class="line">在最后一行新增 allow_writeable_chroot=YES</span><br><span class="line"></span><br><span class="line">#新建用户</span><br><span class="line">useradd test</span><br><span class="line">passwd test</span><br><span class="line"></span><br><span class="line">#防火墙放行</span><br><span class="line">firewall-cmd --permanent --zone=public --add-service=ftp</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">#ftp命令</span><br><span class="line">#设置开机启动</span><br><span class="line">systemctl enable vsftpd.service</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">systemctl start vsftpd.service</span><br><span class="line"></span><br><span class="line">#停止</span><br><span class="line">systemctl stop vsftpd.service</span><br><span class="line"></span><br><span class="line">#查看状态</span><br><span class="line">systemctl status vsftpd.service</span><br><span class="line"></span><br><span class="line">#重启ftp服务器</span><br><span class="line">systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure></p><h4><span id="2ubuntu1604安装ftp">(2)Ubuntu16.04安装FTP</span></h4><p><a href="ubuntu16.04搭建ftp服务器">https://www.cnblogs.com/YangJieCheng/p/8252577.html</a></p><h4><span id="3ftp配置文件各个配置的含义">(3)FTP配置文件各个配置的含义</span></h4><p><a href="https://www.cnblogs.com/youcong/p/10786332.html" target="_blank" rel="noopener">ftp配置详解</a></p><h2><span id="二-java中如何使用ftp">二、Java中如何使用FTP</span></h2><h3><span id="1java应用使用ftp">1.Java应用使用FTP</span></h3><p>可以参考我之前写过的一篇<a href="https://www.cnblogs.com/youcong/p/10422360.html" target="_blank" rel="noopener">谈谈存储系统</a><br>该篇文章主要针对如何使用阿里云的对象存储、FTP、常规存储等三种方案，有代码例子。</p><p>最近我的同事就使用其中的FTP方案。</p><h3><span id="2springboot应用使用ftp">2.SpringBoot应用使用FTP</span></h3><p>与Java应用使用FTP一样，只不过将FTP相关的配置放在配置文件里如application.yml或application.properties文件里。</p><p>大家感兴趣的可以参考<a href="https://blog.csdn.net/weixin_38326506/article/details/89891043" target="_blank" rel="noopener">springBoot 实现ftp上传与下载</a>，这里我就不写代码了。</p><h2><span id="三-和ftp相爱相杀的经历">三、和FTP相爱相杀的经历</span></h2><h3><span id="1ftp访问不了">1.FTP访问不了</span></h3><p>像FTP搭建好了并启动，通常是可以通过<a href="ftp://ip进行访问，此时访问不了，因为是我们自建的服务器，没有使用阿里云或者腾讯云，结果发现是防火墙的限制。" target="_blank" rel="noopener">ftp://ip进行访问，此时访问不了，因为是我们自建的服务器，没有使用阿里云或者腾讯云，结果发现是防火墙的限制。</a></p><p>之前做运维的一段时间，接触CentOS6.5系统，知道有个iptables防火墙，没想到这次有个firewall。后来查了相关资料，原来CentOS7默认是firewall防火墙。</p><p>执行上面的开放ftp就可以访问了。</p><p>之前公司服务器对公网开放过，由于我忘记了没有设置防火墙开机自启动导致突然服务就不行了。为此我专门研究了一下服务器安全策略。</p><p>搜索了相关资料，总结了如下几个策略(常规性策略):</p><ul><li>漏洞补丁;</li><li>防火墙;</li><li>杀毒软件;</li><li>关闭不需要的服务和端口;</li><li>定期备份;</li><li>账户和密码保护(定期更改和密码设置复杂);</li><li>监测系统日志.</li></ul><h4><span id="既然提到防火墙那么提个问题防火墙有什么用呢">既然提到防火墙，那么提个问题防火墙有什么用呢？</span></h4><p>答:防火墙主要目的是阻止网络蠕虫病毒的攻击以及网络中某些不怀好意的人访问你的电脑（通过这些访问，可以非法获取用户电脑中的文件数据，甚至可以修改用户电脑系统中的某些设置，远程控制用户的电脑），保证用户上网安全。</p><h3><span id="2输入正确的用户名和密码还是弹出需要登录的界面">2.输入正确的用户名和密码还是弹出需要登录的界面</span></h3><p>这个问题是因为改了一些ftp的配置导致的。无论怎么设置用户名和密码都不行。主要参考一个博客参考的有问题。其实很简单，按照我前面列举的步骤就可以了，一举成功。</p><h3><span id="3没有权限">3.没有权限</span></h3><p>一般情况下，ftp安装好后，默认是/var/ftp/pub下的目录，这个通常是默认的ftp用户。但这次没有权限是因为公司的一个程序员小姐姐使用自建的用户访问。linux创建用户的命令，通常有两个:<br>一个是useradd username，另外一个是adduser username。</p><h4><span id="问useradd和adduser有何区别">问:useradd和adduser有何区别？</span></h4><p><strong>以CentOS为例:</strong><br>两者没有区别，都是创建用户，并在/home目录下生成对应的用户目录，没有设置密码，需要重新设置密码。</p><p><strong>以Ubuntu为例:</strong><br>useradd在使用该命令创建用户是不会在/home下自动创建与用户名同名的用户目录，而且不会自动选择shell版本，也没有设置密码，那么这个用户是不能登录的，需要使用passwd命令修改密码。</p><p>adduser在使用该命令创建用户是会在/home下自动创建与用户名同名的用户目录，系统shell版本，会在创建时会提示输入密码，更加友好。</p><p>这让我联想到，当初使用Ubuntu16.04的useradd创建用户时，一直不在/home目录下生成对应的用户目录，于是我手动创建，然后通过授权命令进行关联。</p><h3><span id="4下载大的文件突然中断又需要重新执行">4.下载大的文件，突然中断，又需要重新执行</span></h3><p>使用Java程序下载FTP上的大文件(接近二十个G)，出现中断。<br>最后通过搜索确定了是连接时间配置，连接不上，超时从而中断。为此我修改了该配置并重启，解决了这个问题。<br>配置如图所示:<br><img src="/2020/10/17/谈谈FTP/02.png" alt="图二"></p><p><strong>注意</strong>:这里分主动模式和被动模式。</p><h3><span id="5ftp的被动模式设置">5.FTP的被动模式设置</span></h3><p>核心配置如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#被动模式相关配置</span><br><span class="line">pasv_enable=YES</span><br><span class="line">pasv_min_port=10221</span><br><span class="line">pasv_max_port=11221</span><br><span class="line">pasv_promiscuous=YES</span><br></pre></td></tr></table></figure></p><h4><span id="问ftp的被动模式是什么">问:FTP的被动模式是什么？</span></h4><p>所谓被动模式，指的是FTP服务器“被动”等待客户端来连接自己的数据端口，其过程具体是：当开启一个FTP连接时，客户端打开两个任意的非特权本地端口（N &gt;1024和N+1）。第一个端口连接服务器的21端口，但与主动方式的FTP不同，客户端不会提交PORT命令并允许服务器来回连它的数据端口，而是提交PASV命令。这样做的结果是服务器会开启一个任意的非特权端口（P &gt; 1024），并发送PORT P命令给客户端。然后客户端发起从本地端口N+1到服务器的端口P的连接用来传送数据。</p><h4><span id="问ftp的主动模式是什么">问:FTP的主动模式是什么?</span></h4><p>所谓主动模式，指的是FTP服务器“主动”去连接客户端的数据端口来传输数据，其过程具体来说就是：客户端从一个任意的非特权端口N（N&gt;1024）连接到FTP服务器的命令端口（即tcp 21端口），紧接着客户端开始监听端口N+1，并发送FTP命令“port N+1”到FTP服务器。然后服务器会从它自己的数据端口（20）“主动”连接到客户端指定的数据端口（N+1），这样客户端就可以和ftp服务器建立数据传输通道了。</p><h4><span id="问ftp的主动模式和被动模式的区别什么">问:FTP的主动模式和被动模式的区别什么？</span></h4><p>主动模式的FTP是指服务器主动连接客户端的数据端口，被动模式的FTP是指服务器被动地等待客户端连接自己的数据端口。<br>被动模式的FTP通常用在处于防火墙之后的FTP客户访问外界FTp服务器的情况，因为在这种情况下，防火墙通常配置为不允许外界访问防火墙之后主机，而只允许由防火墙之后的主机发起的连接请求通过。因此，在这种情况下不能使用主动模式的FTP传输，而被动模式的FTP可以良好的工作。</p><p><strong>有一位技术小伙伴幽默的概括:</strong></p><ul><li>主动模式：服务器向客户端敲门，然后客户端开门;</li><li>被动模式：客户端向服务器敲门，然后服务器开门。</li></ul><h4><span id="问为什么要使用被动模式">问:为什么要使用被动模式？</span></h4><p>从上面的FTP的主动模式和被动模式的区别，我们就能得知为什么要使用被动模式不是主动模式。因为主动模式是服务端主动连接客户端，而被动模式是服务端等待客户端连接。实际应用中，客户端的端口是多变的，而服务端的端口则相对统一。所以千万不要因为是被动模式就理解为是服务端去连接客户端。</p><h4><span id="问被动模式的优缺点有哪些">问:被动模式的优缺点有哪些？</span></h4><p>被动FTP对FTP客户端的管理有利，但对服务器端的管理不利。因为客户端要与服务器端建立两个连接，其中一个连到一个高位随机端口，而这个端口很有可能被服务器端的防火墙阻塞掉。</p><h3><span id="6ftp下载过慢如何提高速率">6.FTP下载过慢如何提高速率？</span></h3><p>这里需要修改配置，增加如下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local_max_rate = 1048576(相当于下载M/S) #单位，默认为字节</span><br></pre></td></tr></table></figure></p><h3><span id="7ftp太慢了使用临时方案写shell脚本脚本里处理文件和传输文件">7.FTP太慢了，使用临时方案写shell脚本，脚本里处理文件和传输文件。</span></h3><p>针对FTP下载实在太慢了，我想到了一个临时的办法使用scp来进行文件传输。但是呢？scp免密登录处理不太安全，于是我想到了一个办法使用sshpass。<br><a href="https://www.cnblogs.com/youcong/p/13734601.html" target="_blank" rel="noopener">sshpass和scp相结合</a></p><p>关于scp免密传输，可以参考我的这篇博客:<br><a href="https://www.cnblogs.com/youcong/p/10809056.html" target="_blank" rel="noopener">Linux远程传输文件免密码</a></p><h3><span id="8太过随意ftp配置匿名的重大隐患">8.太过随意，FTP配置匿名的重大隐患。</span></h3><p>之前为了做试验测试，我不太严谨，就直接设置为匿名访问且可以任意读写。但实际中不应该这么做。</p><p>官方的话来说:<br><strong>匿名开放模式是一种最不安全的认证模式，任何人都可以无需密码验证而直接登录到FTP服务器。</strong></p><p>这样一来任何人就可以在服务器上任意上传或下载文件，安全形同虚设。</p><h4><span id="问ftp除了匿名开放模式还有哪些模式哪个模式更安全一些">问:FTP除了匿名开放模式还有哪些模式？哪个模式更安全一些？</span></h4><p><strong>本地用户模式：</strong><br>它是通过Linux系统本地的账户密码信息进行认证的模式，相较于匿名开放模式更安全，而且配置起来也很简单。但是如果被黑客破解了账户的信息，就可以畅通无阻地登录FTP服务器，从而完全控制整台服务器。</p><p>如果是默认useradd username创建用户，默认就有ftp和sftp、ssh等权限。但如果是执行这条命令<code>usermod -s /usr/sbin/nologin fujieace</code>那么只能ftp，不能sftp和ssh。</p><p><strong>虚拟用户模式：</strong><br>它是这三种模式中最安全的一种认证模式，它需要为FTP服务单独建立用户数据库文件，虚拟出用来进行口令验证的账户信息，而这些账户信息在服务器系统中实际上是不存在的，仅供FTP服务程序进行认证使用。这样，即使黑客破解了账户信息也无法登录服务器，从而有效降低了破坏范围和影响。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NET::ERR_INCOMPLETE_CHUNKED_ENCODING 200 (OK)</title>
      <link href="/2020/10/16/NET-ERR-INCOMPLETE-CHUNKED-ENCODING-200-OK/"/>
      <url>/2020/10/16/NET-ERR-INCOMPLETE-CHUNKED-ENCODING-200-OK/</url>
      
        <content type="html"><![CDATA[<p><strong>错误信息:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NET::ERR_INCOMPLETE_CHUNKED_ENCODING 200 (OK)</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong>错误背景:</strong><br>微服务不通过统一的nginx端口访问，能够正常请求接口并获取对应的响应。<br>但是通过nginx的话，则出现请求通(也就是响应200)，但始终没有得到正确的响应，同时上述错误 NET::ERR_INCOMPLETE_CHUNKED_ENCODING 200 (OK)。</p><p><strong>解决办法:</strong><br>在nginx中的对应的反向代理配置如下内容，即可解决:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxy_buffer_size 1024k;</span><br><span class="line">proxy_buffers 16 1024k;</span><br><span class="line">proxy_busy_buffers_size 2048k;</span><br><span class="line">proxy_temp_file_write_size 2048k;</span><br></pre></td></tr></table></figure></p><p>我的反向代理完整配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location /forecast &#123;</span><br><span class="line"></span><br><span class="line"> proxy_pass http://127.0.0.1:9999/;</span><br><span class="line"> proxy_buffer_size 1024k;</span><br><span class="line"> proxy_buffers 16 1024k;</span><br><span class="line"> proxy_busy_buffers_size 2048k;</span><br><span class="line"> proxy_temp_file_write_size 2048k;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>错误原因分析:</strong><br>1.nginx配置缓存区设置过小<br>2.nginx的临时目录（/proxy_temp）过大或没有权限写入缓存文件<br>3.磁盘空间不足</p><p>经过验证是第一种原因(nginx配置缓冲区设置过小)</p><p><strong>问</strong>:nginx的缓冲区作用是什么？</p><p><strong>答</strong>:如果客户端到nginx速度快，nginx到服务器速度慢，没有缓冲区，一点点数据量就直接发到客户端，十分浪费性能。<br>有了缓冲区，积累到一定量，再传输到客户端，减少了Tcp请求。<br>相反，客户端到nginx速度慢，nginx到服务器速度快，没有缓冲区，<br>nginx到服务器的连接就会一直保持在那边，直到客户端接受完毕。<br>有了缓冲区，返回内容放到缓冲区后，nginx到服务器的连接就能断开了，客户端从缓冲区拉取即可。</p><p>参考解决办法:</p><p><a href="https://blog.csdn.net/willingtolove/article/details/103372199" target="_blank" rel="noopener">NET::ERR_INCOMPLETE_CHUNKED_ENCODING 200 (OK)解决办法</a></p><p><a href="https://www.jianshu.com/p/c1559fd01828" target="_blank" rel="noopener">缓冲区的作用</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年的一些思考和总结</title>
      <link href="/2020/10/07/2020%E5%B9%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E5%92%8C%E6%80%BB%E7%BB%93/"/>
      <url>/2020/10/07/2020%E5%B9%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E5%92%8C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>首先这篇文章不等于”2020年总结”，因为2020年还没有完全结束，还有近两个多月的时间。通常来说，我的2020年总结会在2021年初以及2020年末写的，内容格式都是今年计划完成情况+来年计划制定等。</p><p>国庆假期游山玩水了四五天，该玩的都玩了，没玩的，等有时间了再计划。</p><p>每年在某个特定的时候，总感觉要写些什么东西。</p><p>就像在2018年的时候，感触非常深，写下了这篇<a href="https://www.cnblogs.com/youcong/p/9862712.html" target="_blank" rel="noopener">作为程序员的思考与反省</a>，<br>再然后创业公司近两年的经历，写下了这么几篇关键性的文章(对于我挺关键的):<br><a href="https://www.cnblogs.com/youcong/p/12153262.html" target="_blank" rel="noopener">创业公司这两年</a></p><p><a href="https://www.cnblogs.com/youcong/p/10933433.html" target="_blank" rel="noopener">致所有的开发者们</a></p><p><a href="https://www.cnblogs.com/youcong/p/10162609.html" target="_blank" rel="noopener">如何成为一名全栈开发工程师</a></p><p><a href="https://www.cnblogs.com/youcong/p/10016594.html" target="_blank" rel="noopener">谈谈在创业公司的几点感触</a></p><p>至于其它关于技术方面的，感兴趣的，可以在我这个博客地址上搜索:<br><a href="https://www.cnblogs.com/youcong/" target="_blank" rel="noopener">https://www.cnblogs.com/youcong/</a></p><p>我的文笔并不那么好，有的时候写起来有点题内不符合(标题和内容不一样，当然了，我也尝试过不断改进，还是有效果的)，但都是我的真情实感的流露和一些痛定思痛的经历。</p><p>前文稍微啰嗦了一些，接下来进入正题:<br><a id="more"></a></p><h2><span id="一-我对技术的思考">一、我对技术的思考</span></h2><p>记得在第一家公司的时候，我的技术栈是单薄的，就会前端(写一些简单的HTML、CSS、javascript等)，再加主攻Java后端(Spring+SpringMVC+MyBatis+JSP),再加数据库(MySQL)。<br>基本上能干一些活，但这些活又不能太核心关键，太核心关键的写不了。<br>那个时候我的思维比较狭隘，信奉”唯技术论”(技术高于业务，技术高于一切)，那个时候之所以如此，关键在于接触的太少，经历的太少。</p><p>第一家公司是一家外包公司，专做CRM、ERP等之类的解决方案。在这家公司我做过运维、测试、项目实施等(其实间接也为我在第二家公司，也就是创业公司做准备)。那个时候，在我眼里还是技术始终是第一位(只想埋头弄技术写代码，其它都不管)。</p><p>而后来到创业公司后，这个时候，全栈就是我的目标，因为创业公司资金有限，各方面都不是很完善，一个人常常身兼多职，就拿开发人员为例，我是做Java后端开发的，但在创业公司就要求我必须会写前端，再然后，项目第一个版本发布，为了确保领导试用时不出差错，这个时候我们编写好测试用例，然后按照业务流程一个个功能性测试和业务性测试，再然后发布到公网环境对外开放(实际是对老板那边的员工开放，让其体验使用)。</p><p>在创业公司，我是开发、运维、测试、产品都做。但仍然有所偏重，技术仍然是第一位的，对于我来说，技术是产品的基石，没有技术，产品仅仅是蓝图(<strong>其实后来想想，并非如此,业务才是基础(包含商业模式等)-&gt;产品蓝图或原型-&gt;技术手段实现</strong>)。</p><p>在创业公司我做过物联网平台(智能酒店、智能门锁、共享洗浴间等)、电商二次开发(类似淘宝、京东)、教育产品(编程教育为主)等三个领域的项目，除了教育产品稍有起色之外，其它全部死掉了。那个时候对我的打击很大(不仅仅是我，整个团队的士气也很低下，大家对未来一切迷茫)，一年零九个月的时间，没有一个项目(除教育项目外)真正的实现盈利(<strong>盈利也意味着成功验证商业模式的可行性</strong>)。</p><p>最初的时候，哪怕我身兼多职，我给自己的定位仍然是一名埋头写代码的程序员，而非产品的创造者(从产品的创造者角度来看，一方面如何让产品更完善，另外一方面如何更好的提高用户粘性，这需要不断思考和实践)。于是我放弃了对产品的思考，那个时候我觉得这是高层的事情(领导的事情)，与我无关，拿一份工资，干一份活(更何况做这么多事情，还只拿一份工资)(大家可以思考这个问题，接下来下面的内容的可能会给出答案)。</p><p>再回到这个主题来，<strong>“我对技术的思考核心两点”</strong>:</p><p><strong>1. 业务是基础，产品是蓝图，而技术是将蓝图变成现实的手段；</strong><br><strong>2. 技术的本质在于解决问题(回顾人类历史，很多技术创新发明都是在某个领域解决了什么样的问题，或者是在多个领域解决类似的问题)。</strong></p><p>经过三家关键性公司的磨练，更加坚定了上述两点(因为这两点，让一家创业公司(前教育saas公司)从弱小走向强大(年盈利几十万几百万到上千万，有上市的潜力),也让一家公司从有到无，从无到有，危机重重)。</p><p>因为上述列出的核心两点(我对技术的思考):<br>使我不再刻意的去追求新的技术，当然了，作为一名技术工程师而言，我会不断去学习新的技术，学习新的思想和理念。但在学习的过程中，我不再像过去那样，因为学习一个新技术，就觉得自己很牛逼，沾沾自喜，似乎超过了N多人，我会更关注新技术优点特性(适应的业务场景是什么)、缺点(没有技术是完美的，都有缺点(包含局限性)、设计理念和思想等。</p><p>简单概括这几年的项目技术架构经历:<br>单体应用(外包、创业)-&gt;前后端分离实践(创业)-&gt;变相微服务实践(创业）-&gt;分布式微服务实践初级(教育saas)-&gt;分布式微服务实践全权把控(当前所在公司)</p><p>总的来说，走了很多弯路，填了很多坑。走弯路和填坑的原因，有很多。虽然都说，成长就是经历，有些坑是无法避免的。但其实有不少是我自己的独断专制造成的，这一点我至今仍要反思(虽然目前没有犯类似的错误，但我仍要反思，反思的目的，在于不能再走老路了，同时也是为了让新路更加通顺)。</p><h2><span id="二-我对学习的思考">二、我对学习的思考</span></h2><p>人从出生就开始不断学习，从走路到识字，再到独立生活和工作，再到生儿育女等。</p><p>我在博客园写了800多篇的博客文章，最开始我没想写这个:</p><ol><li>觉得没时间(最大的理由是工作太累不想写，懒惰)；</li><li>觉得没意义没价值(最大的理由是有很多现成的，人家写好了，我为什么还要写呢，不想重复造轮子)。</li></ol><p>一切源于我的导师，他当初给我说过这样的话(导师说过话很多，我也记不清，但核心的意思是这样的):<br><strong>写作的目的，不仅仅在培养形成解决问题的良性循环，同时更关键在于培养自己深度思考和善于总结的能力。</strong></p><p>我的写作和我的学习历程很相近。我的博客写了800多篇文章，大多是技术学习和问题解决等内容，少部分是一些职业思考、读书新的/笔记等内容。</p><p>我的写作间接反映出我是一个持之以恒且热爱技术、热爱学习的人，但同样也反映出我在学习过程中的很多不足。</p><p>以下是写作中暴露的问题(这里就不谈写的语句通顺方面的问题):<br><strong>1. 欠缺较为深度的文章；</strong><br><strong>2. 刻意练习过于简单；</strong><br><strong>3. 读书笔记欠缺自己的思考；</strong><br><strong>4. 解决问题类问题欠缺较为详细的错误原因分析(为什么会报错，原因是什么等，缺乏对错误原因的深究)。</strong></p><h4><span id="1欠缺较为深度的文章">1.欠缺较为深度的文章</span></h4><p>深度的文章在于思考，思考的关键在于提问。<br>爱因斯坦曾说过，提出问题比解决问题更重要。<br>我觉得原因应该是因为提出问题能让思维更加发散，思维发散能让视野更加广阔(因为它可以让人从多个角度来看问题)。</p><p>深度的文章在于深度思考(思考的关键在于多提问)。</p><p>我的导师曾用《论语》中一句话，来概述我目前所存在的问题，<strong>“学而不思则罔，思而不学则殆”</strong>。</p><p>这句话的解释如下:<br><strong>指的是一味读书而不思考，就会因为不能深刻理解书本的意义而不能合理有效利用书本的知识，甚至会陷入迷茫。而如果一味空想而不去进行实实在在地学习和钻研，则终究是沙上建塔，一无所得。告诫我们只有把学习和思考结合起来，才能学到切实有用的知识，否则就会收效甚微。</strong></p><p>关于学习提问，很多人不知道提出什么样的问题才是好的问题，我个人觉得刚刚开始不应该执着于这个，越是执着，越难以落地。刚刚开始，应该在于做。<strong>就像我当初写博客那样，如果我一昧的以高质量作为前提的话(而忽略自身实际情况)，恐怕很难坚持到现在，任何事情都是一个循序渐进的过程，不能揠苗助长。</strong></p><p>在写的过程中，每天一点一滴的积累，有读者朋友会提出一些问题启发我思考，也有像我导师这样的，指出我写作欠缺深度。</p><h4><span id="2刻意练习过于简单">2.刻意练习过于简单</span></h4><p>《异类》的作者马尔科姆·格拉德威尔说过这样的话:<br><strong>“人们眼中的天才之所以卓越不凡，并非天资超人一等，而是付出了持续不断的努力。只要经过1万小时的锤炼，任何人都能从平凡变成超凡。</strong></p><p>以写博客文章为例，当初我在写学习类的教程文章时，不乏有这样的意识，<strong>“只要我将例子正常运行并写出相应的步骤来，加上笔记记录，我就能充分地掌握这门技术框架。”</strong></p><p><strong>但事实真的如此吗？</strong><br>然而并不是这样。基于上述这种意识，我学习了Python和Node.js，我的学习步骤很简单，例子敲一遍，正常运行出来，然后记点笔记，遇到错误，记录错误。经过这样的步骤，然后我觉得我掌握了。<br>当初没被打脸，是因为当时没人知道我会Node.js和Python，后来呢，因为要做一个在线测评(OJ),当时参考的OJ是一个青岛大学的开源项目，于是我开始接触，起初运行起来还是比较简单的，用Docker一键就能启动。但后来了，领导发话，要对其二次开发，二次开发意味着不仅仅要弄懂它的一些关键核心代码，同时也要加上我们自己写的功能，当时我就懵逼了，这个该怎么弄啊，于是只好翻看文档，原来这个青岛OJ用的技术框架，主要还是Python的Django。也正是因为研究过程中，我才发现我对Python仅仅还是个小白，并没有因为把教程敲了2~3遍就成了专家非常熟练和精通。</p><p>由此我发现我缺乏一个东西将新学的技术串起来，人的记忆是有限的，今天学过的东西，可能明天还记得一半，过了几个礼拜不用，可能就全部忘光了。</p><p>于是我想起了导师当年对我说的一句话(还是跟博客有关，但与写文章没有直接关系)，<strong>做一个博客系统</strong>。</p><p>做一个博客系统，不仅仅能让你将知识串起来，更能让你在实践中不断熟练和提高(实践中需要大量动手，更能加深印象，遇到问题并解决问题，不仅使你深刻理解该语言的特性，同样也能提高解决问题的能力)。</p><p>而后我更能深刻体会到这一点，就像当初没有接触过微服务框架那样，我通过博客系统来驱动学习，让我更能深刻的理解该框架技术，同样更能贴近实际应用场景，解决实际的问题。</p><p>博客系统让我的刻意练习更加精确，博客系统其实说简单也简单，说难也难。简单在于你可以仅仅写个CRUD(增删改查),难的在于按照企业级产品应用来做(就像著名的WordPress那样，虽然它看起来仅仅是一个CMS，但它丰富的插件扩展，让其可以是电商，也可以是视频、论坛等，只有想不到没有做不到)。</p><p>在做一个企业级应用产品的过程中，它是很令人痛苦的，因为你作为一个产品的创造者而言，你必须要想清楚它做出来之后是什么样的，同样你也必须关注跟你所做的类似的东西(但已经面向C端用户)有哪些可以参考借鉴的(就像现在有很多电商平台，难保他们不彼此借鉴彼此的优劣来改进产品)。</p><p>我的博客系统断断续续做了好几年了，从单体到分布式微服务，能用的技术都用了，我不否认当初有段时期仅仅是为了技术而技术。</p><p><strong>另外说说我的博客系统断断续续做了好几年的原因</strong>:</p><ul><li>模块单一，拆分为多模块；</li><li>技术太过单一，实践新的技术；</li><li>业务大而全，写不下去，没有把握好博客系统的本质，即CMS；</li><li>代码质量太差，中间断层太多，牵一发动其余，改的太痛苦不如重构;</li><li>找到几个参考对象，最后改成了一个四不像。</li></ul><p>今年有段相对空闲的时间，于是进行了改造，以WordPress作为参考对象(不再追求大而全，把握核心本质)，</p><p>访问地址:<br><a href="http://www.youcongtech.com/blog-portal" target="_blank" rel="noopener">http://www.youcongtech.com/blog-portal</a><br>效果图如下:</p><p><img src="/2020/10/07/2020年的一些思考和总结/01.png" alt="图一"></p><p><img src="/2020/10/07/2020年的一些思考和总结/02.png" alt="图二"></p><p><img src="/2020/10/07/2020年的一些思考和总结/03.png" alt="图三"></p><p><img src="/2020/10/07/2020年的一些思考和总结/04.png" alt="图四"></p><p>最近因工作繁忙，目前还不能面向广大朋友们。目前该网站文章题材均是通过爬虫技术获取。</p><p>因为这个博客系统，我在技术上的刻意练习不再是简单、单一。随着博客的面世，我需要考虑用户体验、数据隔离稳定性、大数据量、类似于WordPress的丰富插件和主题等，当然了，这并非一朝一夕的事情，需要一个循序渐进的过程，这个事情我会长期坚持下来的。</p><h4><span id="3读书笔记欠缺自己的思考">3.读书笔记欠缺自己的思考</span></h4><p>前面我说过，思考的关键在于提问。人在读一本书的时候，通常会带一些疑问，读专业书籍如此，读小说也是如此。即便刚读的时候没有疑问，但随着越来越多的时候，就有了疑问，这个疑问比分说是故事人物之间的关系、专业书籍中抛出问题等。</p><p>有段时间我感觉我即便读了很多书，但所知甚少。就像我在博客里写了大量的读书笔记，就像如图所示:<br><img src="/2020/10/07/2020年的一些思考和总结/05.png" alt="图五"><br>《算法图解》我读了近一个月的时间，做了一些笔记，但仍觉得还是不知道。<br>最近总结了两点原因:<br><strong>- 没有真正的思考(记录书中关键话，然后一些术语名词通过搜索来记录，没有就关键话语展开疑问)；</strong><br><strong>- 没有把理论同实践充分的结合起来(这需要实践，后来在LeetCode刷题实践才方觉有些收获，知行合一)。</strong></p><h4><span id="4解决问题类问题欠缺较为详细的错误原因分析为什么会报错原因是什么等缺乏对错误原因的深究">4.解决问题类问题欠缺较为详细的错误原因分析(为什么会报错，原因是什么等，缺乏对错误原因的深究)</span></h4><p>800多篇博客，有半数是关于遇到问题怎么解决的。刚开始时，是照搬照抄，而后就是就错误信息展开(错误原因、解决步骤/方案、参考链接等)。但后来发现解决问题的效率有些提高(比方说，公司小伙伴们遇到一些技术问题时，我对那些问题有些印象，然后我就让小伙伴去我的博客上搜索即可，或者是有些技术小伙伴不会，但我之前应用过并记录在我的博客里，小伙伴一搜，然后也能快速应用)。<br><strong>但是呢？我发现有一点严重弊端。</strong><br>那就是这些问题总会以一种形式到另一种形式转变，实际上问题的本质是一样的，以Java开发为例，用Spring全家桶总会遇到找不到Bean之类的错误，通常来说，一般是因为Service类，没有加@Service注解导致的。但是最近我所遇到的并不是这样的，哪怕@Service注解加上对应的业务类它还会报这样的错误，这个问题最初使我百思不得其解。<br>最后找到了原因，发现就是一段代码的问题(由于这段代码是公司的核心代码，这里就不能公开了)。</p><p><strong>由此发现很多问题其实都是一样的，关键在于把握问题的本质，那么如何把握问题的本质呢？</strong><br>最关键的就是明确问题是什么。就像刚才我举的例子，找不到bean，原因并不是没有加注解，而是一段代码导致的。<strong>很多开发人员(包括我)常常面对错误最容易犯的错误是没有真正的理解问题到底是什么，而仅仅的非常浅度的复制问题，然后百度或者google搜索之类的。</strong></p><p><strong>那么我们怎么避免这样的现象出现呢？</strong><br>答案很简单，<strong>那就是耐心的把问题看全</strong>，通常报错，IDE的控制台会显示那段代码那一行，看具体代码通常就明白了。最重要的是要把信息看全，看全后，通常就能把握错误的关键信息是什么，这样才能更好的解决问题(其实在看错误信息的时候，脑袋里也会不由自主的分析错误信息，思考可能是什么原因导致这样的错误信息)。另外这对于学习技术，参考他人的博客也有很大的启发意义，如今互联网上各种信息非常全(也意味着非常杂乱而不系统)，这就需要呢学会如何筛选信息，关键字搜索很重要，还有一点就是识别信息也很重要，比方说看一篇博客，你如果要按照他写的博客实践，最好还是从头到尾看一遍，然后再决定是否这样做，因为很多人写博客并不一定写的很全(中间可能有些代码没有展示出来，导致最后你按照这个例子来写，缺东西，从而导致进展不顺，只好放弃)。</p><p>学习是人一生的事情，不管你从事哪行哪业，都要树立这样的观念，”终身学习观”。只有这样你才不至于被淘汰(社会淘汰、时代淘汰)。</p><p><strong>我曾因为，只要像程咬金那样只会”三板斧”就能打天下，后来随着经历的事情很多，看的世界越来越广，我才发现这远远不够。</strong></p><h2><span id="三-我对工作的思考">三、我对工作的思考</span></h2><p>我对工作的思考，不禁让我想起曾在公众号写了一篇文章<a href="https://mp.weixin.qq.com/s?__biz=MzUxODk0ODQ3Ng==&amp;mid=2247485165&amp;idx=1&amp;sn=4c3f297583a42b946e7fc673a1c2ca17&amp;chksm=f98055fecef7dce814c3b7c7636550cf26cdbad5dc3cf87c62d7e63616613b6add54630c76f8&amp;token=1678293524&amp;lang=zh_CN#rd" target="_blank" rel="noopener">《工作的意义》</a>，我在文章中这么说，工作的意义无非两点，一点是为了金钱(物质，也就是让生活更好，比较物质基础决定上层建筑)，二是为了成长。</p><p>《工作的意义》这篇文章也间接反映和验证，我因为工作，生活也走向越来越好。</p><p>但是呢？也让我逐渐形成了”安逸”。记得之前在创业公司的时候，其中某段时间(大概持续一到两个月)，那个时候开始迷上了游戏，如刺激战场、王者荣耀，可谓是天天打游戏，没有一天不打，同时呢，也变得不怎么爱学习了，也以为工作就意味着稳定。然而，就像我在《创业这两年》说的那样，突然一天领导对我们说，公司如果拿不到融资可能就要解散了。当我听到这则消息，心就突然慌了。因为我从来就没有经历类似得场景。</p><p>虽然心慌了，但另外一个”我”提醒着我，保持冷静，近观态势。<br>于是就有了这篇文章<a href="https://www.cnblogs.com/youcong/p/12293309.html" target="_blank" rel="noopener">互联网的寒冬该如何度过</a></p><p>而后2019年10月以及2020年的经历再次告诉我，安逸是不存在的，工作的意义，不仅仅是诗和远方，也不仅仅是自身成长，更是提高自我市场价值的一种重要方式。</p><p><strong>为什么我会给原来的那句话再加上了提高自我市场价值的一种重要方式呢？</strong></p><p>首先一件东西为什么会有价值，答案是因为有市场需求(关键就是供求关系，供过于求，贬值，供不应求升值)。</p><p>人只有工作才能实现自我市场价值的增值，尽管你可能有非常大的本事，但如果没有公司这个大的平台，恐怕只能感叹”英雄无用武之地”。</p><p>很多人都说要有职业规划，职业规划是为了谋求长远的发展。但这个职业规划仍然有一个大的前提，那就是工作，在特定的单位工作(可以是传统企业，也可以是互联网企业等)，还是离不开公司提供的平台。</p><p>以程序员找工作为例，很多公司招聘上都说高并发、高性能、分布式微服务等，但是对于很多人来说，在一些较为传统的公司工作根本就没有这样的机会接触这些。就好像当初如果没在教育saas公司积累，很难主导公司的技术平台设计。再换言之没有创业公司的洗涤，面对从0到1或者二次开发，我可能很难上手甚至头疼，尽管很多人说开源有现成的，但试问对于一个企业来说开发产品中最重要的一环是稳定性和可靠性，开源项目虽多，但不少开源项目不稳定不可靠，对于一个新人来说，贸然使用开源项目和使用新的技术一样，无异于自杀。因为你所遇到的问题，在搜索引擎上搜索可能非常少甚至无。</p><p>从这点来看，也是公司成就了我，提高了我的市场价值。</p><p>但有一点非常重要，那就是公司不养闲人。</p><p>如果你不去主动成长和提高自我价值的话，那么你随时可能会被裁员(对于公司而言，发展是硬道理，发展的关键在于人才)。</p><p>从这点来看，毫无安逸可能。</p><p>再比如很多人说国企安逸，早九晚五，福利好(虽然工资不高)。但大家别忘记了当年的”国企下岗潮”。</p><p>我说了这么多，只想诠释一个重要观点(虽然过于武断，但还是要说)，<strong>“根本没有安全/稳定的工作，唯有提高自我价值才是王道”</strong>(虽然这些话，对于前辈而言是废话，但这些来源于我自身的经历和深刻的体会)。</p><p>那么如何提高自我价值呢？</p><ul><li>要有终身学习观的意识，然后不断去学习和实践；</li><li>工作中不要畏难，要敢于面对和战胜。</li></ul><p>很多人都说人脉很重要，这里我之所以不列举人脉是因为，<strong>社交的核心在于价值交换(虽然功利点，但却很对)</strong>。</p><p>以我上家教育saas公司的CTO为例，他也是从一名初级研发工程师到高级研发工程师、架构师，到目前的位置，和他一起创业的是他的同事，两个人在当时公司的位置相等，只是负责的领域不一样，一个是营销，另一个是技术。两个人互补彼此优劣，然后带着团队的骨干一起创业，如今也算是财务自由，跟着他们的骨干也有股份。</p><p>当然了，这样的例子还有很多。再列举一个在比如当初在北京的一个合租屋，合租的小伙伴们从事不同的工作，碰巧有个猎头，平时很少见，有天遇上聊了一会儿，然后突然说电脑遇到了一个问题，然后跟我说，这样的问题，我之前遇见过，然后飞快的将其解决，因为是猎头，从哪以后时不时推工作给我，甚至要我给他推荐人。</p><p>2020年我觉得最重要的一点是我对工作态度和观念上的转变。</p><p>过去我多少会有些逃避或者是畏难，如今的我不会了。虽然过程会让人痛苦，但过后会非常愉悦，我想这就是工作成就自我的一个体现。</p><h2><span id="四-我对理财的思考">四、我对理财的思考</span></h2><p>在我看来，理财的含义，就是打理自己的财富。<br>很多人都说学会理财很重要。</p><p>那么如何打理自己的财富呢？<br>很多人都说投资，如投资股票、基金、债劵等。我曾读过一些相关的书籍如:</p><ol><li>《富爸爸穷爸爸》这本书告诉我，增加资产，减少负债；</li><li>《小狗钱钱》这本书告诉我，量入为出，不要超前消费；</li><li>《富爸爸:为什么富人越来越富》这本书告诉我，要让自己往B、I象限发展和人生需要一个B计划；</li><li>《新中产家庭理财第一课》这本书告诉我投资组合、风险管理、家庭资产配置、信用资产等。</li></ol><p>上述四本书都属于已经读完的。我和导师的交流以及这些书让我产生一些思考，我对自己的理财有了更清晰的认识。总结了如下:</p><ul><li>量入为出，拒绝超前消费(固定支出或零花钱,记账);</li><li>每月定存(特殊用途，如买房等,雷打不动);</li><li>投资组合(基金、债劵持有,一般不动，每月定投);</li><li>应急定存(银行卡或其它，随时能取);</li><li>房租定存(通常会放入基金，偏中低风险)。</li></ul><p><strong>一直以来有这么一样的观念，”没钱怎么理财”？</strong></p><p>持有这种观念的人，我能够理解，过去我也曾有这样的观念。<br>后来我转变了，因为我体会到没钱的无助和负债的压迫。<br>于是当我工作后，我会强制自己储蓄。正是因为这种强制储蓄，成为我人生中的一个转折点。</p><p><strong>有部分人认为，一点小钱再怎么理，也不能一夜变个几百万出来？</strong><br>前面我提到过，理财的含义就是打理财富。钱少的时候，节俭，钱多的时候，大手大脚的花，这也就解释了为什么一夜暴富或因某种机遇发横财的人，最后都穷困潦倒。</p><p>实际上理财不单单是打理财富，它也体现出一个人的持家。</p><p>简单的来说，一个人单身的时候，可以毫无顾忌，但两个人的时候就不一样，特别是当决定结婚的时候。这个时候你会发现，如果当初你不善于打理钱财，一方面婚前的房子、彩礼、结婚所需的资金等拿不出来需要啃老或外借(如果你一直是别人眼里的”月光族”，不一定能借到)，另外一方面，尽管婚前房子、彩礼、结婚所需的资金都解决搞定了，这时你还得考虑两个人一起的生活开销、孩子到来开销(出生、以后教育等)。</p><p>所以从某个角度来看，越早学会理财显得更加重要。有一点明确的是，<strong>适合自己的理财方式才是最好的</strong>。</p><p>比方说对于一个月收入5k的白领而言，总不可能拿3k去投资股票或者是存4k，只用1k吧。</p><p>所以说，每个人的理财方式不同，最关键的在于适合。这个适合在于不影响生活质量和水平的前提下(吃、穿、住、行在合理的区间下)。</p><p><strong>理财也是便于了解自己的开支。</strong><br>不论是通过支付宝或者微信，再或者我自己的记账本之类的。我能够更好的了解自己的开支，这也为了每月的资金分配做合理决策。</p><p><strong>理财中所涉及的投资是如何分配的？</strong><br>“割韭菜”这个词，对于投资股票或炒比特币的小伙伴们并不陌生。</p><p>究竟什么样的人会被割韭菜？</p><ul><li>盲目听从他人推荐；</li><li>什么都不懂，凭感觉；</li><li>半知半解，充当专家。</li></ul><p>对此有人这样说:炒股中也有”二八定律”，即20%懂的人赚钱，80%不懂的人亏钱。</p><p>对于理财投资的分配，我不会将太多的钱进行投入，一方面，我很清楚我自己的风险承担能力，另外一方面，对于投资方面我并不擅长，因此高风险和高回报的，我很少考虑，一般倾向于中低风险或低风险的，这个占的比重高。如果要说100%的资金(月收入)，一般10%~15%是偏向于中低风险的基金或债劵，5%是中高风险的指数基金。其它80%就按照前面的总结进行分配。</p><p>就像前面所说，人需要不断学习，理财相关的知识学习也是一个循序渐进的过程。</p><p>我曾在吴军《见识》中看到这样一句话，<strong>任何好的投资都要建立在控制风险的基础之上。</strong></p><p>最后一句话，理财同工作一样，目的只有一个让生活更好。</p><h2><span id="五-我对学习周报的思考">五、我对学习周报的思考</span></h2><p>学习周报与工作周报是两码事。学习周报是我与我导师之间的交流工具。</p><p>学习周报制定我每周的计划，如学习、锻炼身体等。</p><p>学习周报从2018年末开始写。中间有过断续。</p><p>刚刚开始写的时候，极其不适应，感觉自己很被限制。</p><p>后来随着不断写，和每周执行。发现自身存在很多不足(这些不足是通过写学习周报发现的):</p><ul><li>1.制定的计划，永远都完不成(忽略自身实际情况，盲目追求大而全);</li><li>2.制定的计划，没有具体可衡量的指标(如该任务完成得情况标准是什么);</li><li>3.自律性存在问题，不能在固定的时间专注于做一件事情;</li><li>4.其它问题(前面提到过的，技术博客文章缺乏深度等)。</li></ul><p>经过一年多的执行，总的来说于我自身而言还是有很大的提升的。</p><p>一方面，在创业公司的时候，领导经常处于不在公司状态，有时去深圳出差，也有时去其它地方，由于写学习周报，即便在工作任务少的情况下，我仍能抵抗外界干扰(某同事看电子书、斗地主之类的)学习，虽然有些特立独行，但不学不行欠缺的东西太多，直到如今为止，我仍然觉得我还有很多要学。</p><p>另一方面，养成计划的习惯，虽说有些时候，计划跟不上变化，但绝大多数时候还是能跟的上的，如果一直跟不上就说明计划制定的不合理。计划的习惯使我自律性提高，能在固定的时间段专注于做一件事情。</p><h2><span id="六-我对健康的思考">六、我对健康的思考</span></h2><p>健康是我一直所忽略的。因为有段困难时期不在乎也顾不上。后来到了教育saas，那段时期可谓是加班加疯了。经常加班，9点下班都算早班。但我仍然感激那段时期的经历，确实磨练了我。也让我深刻明白一个盈利的教育saas产品应该是怎样的。</p><p>5月中旬体检，结果一半好，一半差。但无疑是给我一个警钟，这个警钟告诉我在透支下去，无疑于加快自杀的进程。于是我开始制定了我的养生计划，无奈于生活并不会因此而停滞不前，休息总有截至的日期，太长了就成了不务正业了。</p><p>曾参加的一个读书会，里面有位书友这样诠释健康:<br><strong>身心和财务都要好，落实到具体的事情上，吃的好一点、睡得好一点，多运动一点、心情好一点，财务好一点。</strong></p><p>健康是极易忽略的，因为只有当我生病时才会意识到它是多么的难能可贵。所幸因为年轻，抵抗力较为强，基本上的小病都能扛过去。</p><p>但随着年纪不断增长，我需要重视一个问题就是身体机能一年比一年下降，曾经上班，经常性一两点才到住的地方，只需睡三到四个小时，照样能爬起来继续工作。</p><p>但我不能不重视了，再不重视了，就真的可能验证”工作996，生病ICU了”。</p><p>为此我给自己首条要求就是11点睡觉+每周至少锻炼3公里。</p><p>虽然说从10点半开始不睡觉就算熬夜，但由于程序员这个工作性质，很难这个点睡，虽说11点睡觉，但通常也要11点半才能睡着。其实这么一说，每周3公里其实是最容易的，从9月份到现在，我一直坚持着。<br>随着天气越来越冷，对于锻炼身体也是一个不小的挑战。因此我基本上都是下午去跑步。早上担心起不来，就算起来了，也比较晚了。<br>按照上面的理解，我觉得吃的好，多运动、财务好一点，就目前而言达到这个标准并不难，吃的好，蔬菜、水果、肉这些都能满足，多运动一周3公里加上每天步行也算是运动了，财务方面，按照前面”我对理财的思考”这并不难，也算我从18年就开始制定的计划。最难的可能就是睡得好和心情要好点。</p><p>都说晚读(晚上读书)能治疗失眠，从今天开始就开始实施吧。当年当当活动买了十几本书，至今尚未看完。其中《原则》这本书只看了一部分，从昨天开始看。这本书也让我启发蛮多的。</p><p>其实仔细思考，吃得好、睡得好、财务好点、心情好点，可概括为一句话，即良好的生活习惯(合理的饮食结构、规律的作息习惯、适当的体育运动等)</p><p>良好的生活习惯应该包含如下:</p><ul><li>健康规律的饮食(一日三餐、每天8杯水、多吃水果等，我是一餐不吃饿的慌，8杯水看情况，3杯水至少的，很多时候忙，就顾不上喝水，水果的话，从来未断过)；</li><li>运动(步行或定期跑步，一般一周一跑或两跑，至于多少公里看身体状况，我个人就跑3公里)；</li><li>多读书(多读书，不仅仅是学习，最主要丰富精神世界，记得当初我挺喜欢刷小视频的，觉得离不开小视频，最后把抖音卸了，如今微信虽有小视频，偶尔看看，无伤大雅，也没关系，也没有刷的欲望，游戏也如此，近来主要读刘慈欣《三体》，这本书我觉得挺不错的);</li><li>干净整洁(每周定期清理，平时打扫打扫，保持整洁，事实证明，整洁利于心情愉悦，同样也利于良好的生活习惯养成，婚后可减少不少矛盾，同样不论男女，每天拾掇拾掇，干净整洁的去上班也很不错，我就挺反对有人说男程序员不修边幅之类的一说);</li><li>不熬夜(这一点对我要求稍微高点，不过我会试着去做，就像前面说的晚读)；</li><li>劳逸结合(工作闲暇，会去楼下走走，如果实在走不开，也会再工位上静坐看远处的风景，喝喝茶，适当的休息的确能倍增灵感，提高接下来的工作效率等)。</li></ul><p>当然了良好的生活习惯还有很多，这里我列举最关键的几个。</p><p>人的一生，每10年就是一个分水岭，马上就要25了，离我的分水岭还有5年。5年以后，也就是30，对于一个程序员而言，这是一个至关重要的标志。可能会中年危机，也可能走向不一样的路。<br>但就目前而言，不在考虑的范围。因为我所能把握的仅仅是当下，珍惜当下，看得见的，摸得着的，才是最重要的。</p><h2><span id="七-我对职业生涯的思考">七、我对职业生涯的思考</span></h2><p>与职业生涯对应的是职业规划。<br>近来摆在我面前有两个IT转型的例子，一个前端开发的女程序员，另外一个是后端开发的男程序员。前者成了产品经理(产品设计，无需写代码)，后者成了项目经理(把握项目进度，任务派发，可能要写点代码)。</p><p>当初我在<a href="https://www.cnblogs.com/youcong/p/9862712.html" target="_blank" rel="noopener">作为程序员的思考与反省</a>中的职业规划提到过如下内容:</p><p><strong>初级开发工程师-&gt;中级开发工程师-&gt;高级开发工程师-&gt;架构师/项目经理-&gt;技术总监-&gt;CTO</strong></p><p><strong>初级开发工程师-&gt;中级开发工程师-&gt;高级开发工程师-&gt;产品经理-&gt;产品总监</strong></p><p><strong>初级开发工程师-&gt;中级开发工程师-&gt;高级开发工程师-&gt;技术合伙人(参与创业)</strong></p><p>对于男程序员而言，基本上都达到5年以上的研发经验，然后转向的管理层(项目经理)。</p><p>对于女程序员而言，具备3年以上的研发经验，加上一些机遇，成功转型了产品。</p><p>仔细想来，我所认识的人，前教育SAAS公司CTO走的就是第一条路。前创业公司经理走的初级开发工程师-&gt;中级开发工程师-&gt;高级开发工程师-&gt;产品经理-&gt;高级产品经理/项目经理-自主创业当老板(这是我根据他以往三家公司的经历推出来的)。</p><p>但很多人都卡在了这个高级开发工程师上，无法前进，有的是自身能力，也有的确实是喜欢写代码，写代码能力非常强，但不喜欢管理。我所遇到的人都有。</p><p>转型目前不在我考虑范围，我所想的是如何成为这个高级开发工程师。经过这几年的时间，我愈发了解自己。</p><p>当年某公司领导让我取代某个人成为组长，我犹豫了。找了一堆理由，说自己不太胜任，最后此事不了了之。那个时候确实是无法胜任，太嫩了。</p><p>其实仔细想来我还是很感激互联网的，正是因为它，我从一个农村小伙跳到了大城市。而大城市给了一个相对平等的机会与众多人竞争，这场竞争中，我不会一直处于弱势。这场竞争其实也算是马拉松。跑在最前面的，不一定最终跨过终点，跑在后面的，总有机会超过前面的。<br>这个过程一定是无比艰辛的。</p><h2><span id="八-我对沟通的思考">八、我对沟通的思考</span></h2><p>沟通这一环节在项目开发中至关重要，关系到项目的存亡，项目的存亡关系到公司的兴亡。<br><strong>我一直在思考如何更好的把握对方的问题给予对方能够理解的答案。</strong><br>近来公司的程序媛小伙伴们请教我一些问题，其实问题我基本上都遇到过，但给她们的回答，她们又无法理解，等我坐在她们的电脑桌上给她们讲，她们一下就明白了。我在想，难道问题是出在我这，我没有说清楚，我觉得我已经说的很清楚了。但事实上因为沟通表达方式(语句叙述)，确实我的回答和她们说的不是一个问题。而有些时候，我的回答是那个问题，而答案对于她们而言又不太理解。一来一去，有的时候一个小时就过去了。所以针对此，我想出了一个办法，遇到问题，要么微信描述或者是我去她电脑旁看，这样的话比较高效。这仅仅是日常工作。</p><p>在回到现实生活中，我的父母是做卖菜生意的，从小在他们身边看的事情很多，记得一次在市场卖菜的时候，见过旁边的摊贩和顾客因为商品的事情争吵，事情表面仅仅是商品价格折扣，实际上由于摊贩的表述不当，让顾客以为其看不起他，认为他是因为付不起钱，从而争吵。</p><p>后来读了一本书《非暴力沟通》，该书有一句话让我印象很深刻<strong>，”暴力的根源在于人们忽视彼此的感受与需要，而将冲突归咎于对方–至少大部分暴力的根源都是如此，不论是语言、精神或身体的暴力，还是家族、部落以及国家暴力”。</strong></p><p>这几年互联网研发工作，待的几家公司，多多少少看过一些争吵，其实原因正如《非暴力沟通》这句话。</p><p>这篇文章就写到这吧，也算是我国庆假期的一个结尾小插曲。<br>这篇文章总的来说应该是近来一些经历的总结，犹豫了很长时间，究竟要不要写，想了想，总要留些什么东西，于是动笔开始写(键盘和鼠标就是我的笔)。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 职业生涯思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 cache/buff过高处理方法</title>
      <link href="/2020/09/30/Centos7-cache-buff%E8%BF%87%E9%AB%98%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/"/>
      <url>/2020/09/30/Centos7-cache-buff%E8%BF%87%E9%AB%98%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>核心三条命令，即可清理cache/buff:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"></span><br><span class="line">echo 2 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"></span><br><span class="line">echo 3 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>参考资料:<br><a href="https://blog.51cto.com/13578154/2150303?source=dra" target="_blank" rel="noopener">Centos7 cache/buff过高处理方法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>net.sf.jsqlparser.statement.select.PlainSelect.getGroupByColumnReferences()Ljava/util/List;</title>
      <link href="/2020/09/30/net-sf-jsqlparser-statement-select-PlainSelect-getGroupByColumnReferences-Ljava-util-List/"/>
      <url>/2020/09/30/net-sf-jsqlparser-statement-select-PlainSelect-getGroupByColumnReferences-Ljava-util-List/</url>
      
        <content type="html"><![CDATA[<p>错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.sf.jsqlparser.statement.select.PlainSelect.getGroupByColumnReferences()Ljava/util/List;</span><br></pre></td></tr></table></figure></p><p>这个错误导致我启动项目失败。<br><a id="more"></a></p><p>错误原因:<br>发现是pagehelper插件冲突导致的(我引入了一个pagehelper，同事又引入了一个pagehelper，版本不一样，去除她的就好了)。</p><p>搜了相关资料说是它的冲突:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.jsqlparser&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jsqlparser&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>但是我的项目并沒有引入它(估计可能是maven的依赖传递)。</p><p>参考资料:<br><a href="https://blog.csdn.net/qq_44804469/article/details/105906831" target="_blank" rel="noopener">net.sf.jsqlparser.statement.select.PlainSelect.getGroupByColumnReferences()Ljava/util/List;</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql出现unblock with &#39;mysqladmin flush-hosts&#39;</title>
      <link href="/2020/09/30/mysql%E5%87%BA%E7%8E%B0unblock-with-mysqladmin-flush-hosts/"/>
      <url>/2020/09/30/mysql%E5%87%BA%E7%8E%B0unblock-with-mysqladmin-flush-hosts/</url>
      
        <content type="html"><![CDATA[<p>错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unblock with &apos;mysqladmin flush-hosts&apos;</span><br></pre></td></tr></table></figure></p><p>这个错误导致我无法远程连接MySQL(使用navicat或sqlyog等mysql客户端工具)<br><a id="more"></a></p><p>解决办法:<br>修改max_connect_errors的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(1)进入Mysql数据库查看max_connect_errors：</span><br><span class="line">&gt; show variables like &apos;%max_connect_errors%&apos;;</span><br><span class="line">(2)修改max_connect_errors的值：</span><br><span class="line">&gt; set global max_connect_errors = 100;</span><br><span class="line">(3)查看是否修改成功</span><br><span class="line">&gt; show variables like &apos;%max_connect_errors%&apos;;</span><br></pre></td></tr></table></figure></p><p>参考资料:<br><a href="https://www.cnblogs.com/abclife/p/9469622.html" target="_blank" rel="noopener">mysql出现unblock with ‘mysqladmin flush-hosts’</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Handler dispatch failed; nested exception is java.lang.OutOfMemoryError: GC overhead limit exceeded</title>
      <link href="/2020/09/26/Handler-dispatch-failed-nested-exception-is-java-lang-OutOfMemoryError-GC-overhead-limit-exceeded/"/>
      <url>/2020/09/26/Handler-dispatch-failed-nested-exception-is-java-lang-OutOfMemoryError-GC-overhead-limit-exceeded/</url>
      
        <content type="html"><![CDATA[<p>错误详细信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">org.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.OutOfMemoryError: GC overhead limit exceeded</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>错误原因:<br>部署springboot微服务时，<br>java -Xms64m -Xmx128m -jar xxx.jar<br>分配内存过小导致。</p><p>解决方案:<br>设置大点或去除-Xms64m -Xmx128m ，就能解决这个问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16.04防火墙开启</title>
      <link href="/2020/09/26/ubuntu16-04%E9%98%B2%E7%81%AB%E5%A2%99%E5%BC%80%E5%90%AF/"/>
      <url>/2020/09/26/ubuntu16-04%E9%98%B2%E7%81%AB%E5%A2%99%E5%BC%80%E5%90%AF/</url>
      
        <content type="html"><![CDATA[<p>ubuntu16.04防火墙开启和常用命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ufw #安装防火墙</span><br><span class="line">sudo ufw status #防火墙状态</span><br><span class="line">sudo ufw enable #开启防火墙</span><br><span class="line">sudo ufw allow 22  #开启端口</span><br><span class="line">sudo ufw reload  #重启防火墙</span><br><span class="line">sudo ufw delete allow 8001/tcp #关闭端口</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>参考资料:<br><a href="https://blog.csdn.net/qq_36938617/article/details/95234909" target="_blank" rel="noopener">ubuntu16.04防火墙开启</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scp带密码拷贝文件</title>
      <link href="/2020/09/24/scp%E5%B8%A6%E5%AF%86%E7%A0%81%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6/"/>
      <url>/2020/09/24/scp%E5%B8%A6%E5%AF%86%E7%A0%81%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>应用场景:<br>将B服务器的文件传输到A服务器。<br><a id="more"></a><br>核心命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sshpass -p 123456 scp ubuntu@192.168.52.1:/home/ubuntu/&quot;TEST&quot;&apos;&apos;$(date +&quot;%Y&quot;)&apos;&apos;$[$(date +&quot;%j&quot;+$i)] /home/test</span><br></pre></td></tr></table></figure></p><p>需要安装sshpass。</p><p>ubuntu16.04执行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install sshpass</span><br></pre></td></tr></table></figure></p><p>centos7执行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install sshpass</span><br></pre></td></tr></table></figure></p><p>为什么不纯用SCP?<br>主要考虑到服务器之间传输需要密码授权。<br>当然了，也可以免密，但是免密一般来说不太安全，同时呢？考虑到是从B服务器拉取文件到A服务器，scp做起来比较麻烦。<br>如果是纯粹从B服务器免密传文件到A服务器的话，scp免密做起来很方便。<br>关于Linux免密传输，可以参考我的这篇博客:<br><a href="https://www.cnblogs.com/youcong/p/10809056.html" target="_blank" rel="noopener">Linux远程传输文件免密码</a></p><p>本文主要参考资料:<br><a href="https://blog.csdn.net/d1240673769/article/details/99947375" target="_blank" rel="noopener">scp带密码拷贝文件</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis集群之节点少于六个错误-解决</title>
      <link href="/2020/09/22/redis%E9%9B%86%E7%BE%A4%E4%B9%8B%E8%8A%82%E7%82%B9%E5%B0%91%E4%BA%8E%E5%85%AD%E4%B8%AA%E9%94%99%E8%AF%AF-%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/09/22/redis%E9%9B%86%E7%BE%A4%E4%B9%8B%E8%8A%82%E7%82%B9%E5%B0%91%E4%BA%8E%E5%85%AD%E4%B8%AA%E9%94%99%E8%AF%AF-%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>错误详细信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*** ERROR: Invalid configuration for cluster creation.</span><br><span class="line">*** Redis Cluster requires at least 3 master nodes.</span><br><span class="line">*** This is not possible with 4 nodes and 1 replicas per node.</span><br><span class="line">*** At least 6 nodes are required.</span><br></pre></td></tr></table></figure></p><p>解决方案:<br>增加节点即可。</p><p>参考资料:<br><a href="https://www.cnblogs.com/linyilong3/p/6033901.html" target="_blank" rel="noopener">当节点数量少于6个时候会提示如下信息,初始化一个集群的时候需要6个节点，为什么??</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>There is no normal TM</title>
      <link href="/2020/09/22/There-is-no-normal-TM/"/>
      <url>/2020/09/22/There-is-no-normal-TM/</url>
      
        <content type="html"><![CDATA[<p>错误关键信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">There is no normal TM</span><br></pre></td></tr></table></figure></p><p>只需在配置文件添加如下代码即可(application.properties):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tx-lcn.manager.host=0.0.0.0</span><br></pre></td></tr></table></figure></p><p>错误原因:<br>与redis没有开放远程连接问题性质一样。</p><p>参考资料:<br><a href="https://blog.csdn.net/qq_43371556/article/details/105757288" target="_blank" rel="noopener">记录一次Tx_LCN连接失败的问题( There is no normal TM )</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 分布式事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LCN 错误: attempts to join the non-existent transaction group</title>
      <link href="/2020/09/22/LCN-%E9%94%99%E8%AF%AF-attempts-to-join-the-non-existent-transaction-group/"/>
      <url>/2020/09/22/LCN-%E9%94%99%E8%AF%AF-attempts-to-join-the-non-existent-transaction-group/</url>
      
        <content type="html"><![CDATA[<p>错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">com.codingapi.txlcn.logger.AbstractTxLogger.error(AbstractTxLogger.java:70) - business code error</span><br><span class="line"></span><br><span class="line">attempts to join the non-existent transaction group</span><br><span class="line"></span><br><span class="line">rpc execute service error. action: joinGroup</span><br></pre></td></tr></table></figure></p><p>解决办法:<br>在tx-lcn项目配置如下内容，即可解决:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 分布式事务执行总时间(ms). 默认为36000</span><br><span class="line">tx-lcn.manager.dtx-time=600000</span><br></pre></td></tr></table></figure></p><p>配置完需要重新打包。</p><p>参考资料:<br><a href="https://blog.csdn.net/qq_41463655/article/details/106483312" target="_blank" rel="noopener">LCN 错误: attempts to join the non-existent transaction group</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 分布式事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis集群搭建</title>
      <link href="/2020/09/22/redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/09/22/redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>参考博客文章:<br><a href="https://www.cnblogs.com/fousor/p/10598400.html" target="_blank" rel="noopener">redis5.0.4 集群搭建</a><br>说明:<br>就目前亲测，redis5.0以上版本都可以这么做。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis集群报错:(error) CLUSTERDOWN Hash slot not served</title>
      <link href="/2020/09/22/redis%E9%9B%86%E7%BE%A4%E6%8A%A5%E9%94%99-error-CLUSTERDOWN-Hash-slot-not-served/"/>
      <url>/2020/09/22/redis%E9%9B%86%E7%BE%A4%E6%8A%A5%E9%94%99-error-CLUSTERDOWN-Hash-slot-not-served/</url>
      
        <content type="html"><![CDATA[<p>错误关键信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(error) CLUSTERDOWN Hash slot not served</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>错误原因:<br>没有分配槽，因为redis集群要分配16384个槽来储存数据，那么没有分配槽则报如上错误</p><p>解决办法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Can I set the above configuration? (type &apos;yes&apos; to accept): </span><br><span class="line"></span><br><span class="line">你需要输入yes,而并非缩写 y，因为玩linux的都习惯的会输入 y，但是这里不行，要全拼yes才可以。</span><br><span class="line"></span><br><span class="line">就是这个错误引起的分配槽失败。</span><br></pre></td></tr></table></figure></p><p>参考解决方案:<br><a href="https://www.cnblogs.com/hanguoqing/p/10411128.html" target="_blank" rel="noopener">redis集群报错:(error) CLUSTERDOWN Hash slot not served</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TX-LCN分布式事务框架使用</title>
      <link href="/2020/09/19/TX-LCN%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/09/19/TX-LCN%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>官方文档相关:</p><p>GitHub地址:<br><a href="https://github.com/codingapi/tx-lcn" target="_blank" rel="noopener">https://github.com/codingapi/tx-lcn</a></p><p>官方文档:<br><a href="https://www.codingapi.com/docs/txlcn-preface/" target="_blank" rel="noopener">https://www.codingapi.com/docs/txlcn-preface/</a></p><h2><span id="一-运行tx-lcn分布式事务框架">一、运行TX-LCN分布式事务框架</span></h2><a id="more"></a><h3><span id="1下载合适版本这里我用的是502">1.下载合适版本(这里我用的是5.0.2)</span></h3><p>下载地址:<br><a href="https://github.com/codingapi/tx-lcn/releases/tag/5.0.2.RELEASE" target="_blank" rel="noopener">https://github.com/codingapi/tx-lcn/releases/tag/5.0.2.RELEASE</a></p><h3><span id="2下载并解压">2.下载并解压</span></h3><h3><span id="3导入idea">3.导入Idea</span></h3><p>导入成功后的项目结构，如图所示:<br><img src="/2020/09/19/TX-LCN分布式事务框架使用/01.png" alt=""></p><h3><span id="4配置数据库连接和新建库">4.配置数据库连接和新建库</span></h3><p>数据库脚本(项目中存在，以项目中存在的SQL脚本为主)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/*</span><br><span class="line"> Navicat Premium Data Transfer</span><br><span class="line"></span><br><span class="line"> Source Server         : local</span><br><span class="line"> Source Server Type    : MySQL</span><br><span class="line"> Source Server Version : 100309</span><br><span class="line"> Source Host           : localhost:3306</span><br><span class="line"> Source Schema         : tx-manager</span><br><span class="line"></span><br><span class="line"> Target Server Type    : MySQL</span><br><span class="line"> Target Server Version : 100309</span><br><span class="line"> File Encoding         : 65001</span><br><span class="line"></span><br><span class="line"> Date: 29/12/2018 18:35:59</span><br><span class="line">*/</span><br><span class="line">CREATE DATABASE IF NOT EXISTS  `tx-manager` DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class="line">USE `tx-manager`;</span><br><span class="line"></span><br><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for t_tx_exception</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `t_tx_exception`;</span><br><span class="line">CREATE TABLE `t_tx_exception`  (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `group_id` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `unit_id` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `mod_id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `transaction_state` tinyint(4) NULL DEFAULT NULL,</span><br><span class="line">  `registrar` tinyint(4) NULL DEFAULT NULL,</span><br><span class="line">  `ex_state` tinyint(4) NULL DEFAULT NULL COMMENT &apos;0 待处理 1已处理&apos;,</span><br><span class="line">  `remark` varchar(10240) NULL DEFAULT NULL COMMENT &apos;备注&apos;,</span><br><span class="line">  `create_time` datetime(0) NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 967 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br></pre></td></tr></table></figure></p><p>application.properties配置内容如下(一般都有，通常改下库名和用户名、密码即可):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/tx-manager?characterEncoding=UTF-8&amp;useSSL=false</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=1234</span><br></pre></td></tr></table></figure></p><h3><span id="5运行txlcn-tm项目">5.运行txlcn-tm项目</span></h3><p>主要启动主类(TMApplication.java)<br>运行成功后，访问地址为:<br><a href="http://IP:7970/admin" target="_blank" rel="noopener">http://IP:7970/admin</a></p><p>效果图，如下:<br><img src="/2020/09/19/TX-LCN分布式事务框架使用/02.png" alt=""></p><p>默认密码是codingapi，支持修改(通常改配置文件即可)，主要修改application.properties，添加如下内容，即可实现自定义:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tx-lcn.manager.admin-key=tx-lcn-test</span><br></pre></td></tr></table></figure></p><p>登录成功后的效果图如下:<br><img src="/2020/09/19/TX-LCN分布式事务框架使用/03.png" alt=""></p><h2><span id="二-微服务中使用分布式事务">二、微服务中使用分布式事务</span></h2><h3><span id="1添加maven依赖">1.添加Maven依赖</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.codingapi.txlcn&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;txlcn-tc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.0.2.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.codingapi.txlcn&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;txlcn-txmsg-netty&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.0.2.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3><span id="2applicationyml或bootstrapyml配置如下内容">2.application.yml或bootstrap.yml配置如下内容</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tx-lcn:</span><br><span class="line">  client:</span><br><span class="line">    manager-address: 127.0.0.1:8070</span><br><span class="line">  logger:</span><br><span class="line">    enabled: true</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    jdbc-url: jdbc:mysql://127.0.0.1:3306/tx-manager?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false</span><br><span class="line">    username: root</span><br><span class="line">    password: 1234</span><br></pre></td></tr></table></figure><h3><span id="3启动类增加注解">3.启动类增加注解</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableDistributedTransaction</span><br></pre></td></tr></table></figure><h3><span id="4对应的controller中的方法或者service方法添加对应的注解">4.对应的Controller中的方法或者Service方法添加对应的注解</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@LcnTransaction</span><br><span class="line">@Transactional</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分布式事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7通过yum安装jdk8</title>
      <link href="/2020/09/18/centos7%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85jdk8/"/>
      <url>/2020/09/18/centos7%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85jdk8/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-查看系统是否已有自带的jdk">一、查看系统是否已有自带的jdk</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa |grep java</span><br><span class="line"></span><br><span class="line">rpm -qa |grep jdk</span><br><span class="line"></span><br><span class="line">rpm -qa |grep gcj</span><br></pre></td></tr></table></figure><a id="more"></a><p>如果没有输出信息，则说明系统没有安装。如果有输出信息，则执行下面的命令卸载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep java | xargs rpm -e --nodeps</span><br></pre></td></tr></table></figure></p><h2><span id="二-列出所有可安装的rpm软件包">二、列出所有可安装的rpm软件包</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list java-1.8*</span><br></pre></td></tr></table></figure><h2><span id="三-安装jdk8">三、安装jdk8</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install java-1.8.0-openjdk* -y</span><br></pre></td></tr></table></figure><p>验证安装是否成功:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></p><p>参考链接:<br><a href="https://my.oschina.net/u/3455207/blog/1858639" target="_blank" rel="noopener">Centos7通过yum安装jdk8</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7.8安装rabbitmq</title>
      <link href="/2020/09/18/centos7-8%E5%AE%89%E8%A3%85rabbitmq/"/>
      <url>/2020/09/18/centos7-8%E5%AE%89%E8%A3%85rabbitmq/</url>
      
        <content type="html"><![CDATA[<p>以安装3.7.28为例，步骤如下:<br><a id="more"></a></p><h2><span id="一-安装erlang">一、安装erlang</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://packagecloud.io/install/repositories/rabbitmq/erlang/script.rpm.sh | sudo bash</span><br><span class="line"></span><br><span class="line">yum install -y erlang</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">erl -version</span><br></pre></td></tr></table></figure><h2><span id="二-安装rabbitmq">二、安装rabbitmq</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.28/rabbitmq-server-3.7.28-1.el7.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum install rabbitmq-server-3.7.28-1.el7.noarch.rpm</span><br><span class="line"></span><br><span class="line">## 开启管理后台界面</span><br><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br><span class="line"></span><br><span class="line">## 必须执行，否则会导致启动rabbitmq-server失败</span><br><span class="line">chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie</span><br></pre></td></tr></table></figure><h2><span id="三-rabbitmq常用命令">三、rabbitmq常用命令</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#前台启动服务</span><br><span class="line">rabbitmq-server</span><br><span class="line"> </span><br><span class="line">#后台启动服务</span><br><span class="line">rabbitmq-server -detached </span><br><span class="line"> </span><br><span class="line">#停止服务</span><br><span class="line">rabbitmqctl stop </span><br><span class="line"> </span><br><span class="line">#查看状态</span><br><span class="line">rabbitmqctl status</span><br></pre></td></tr></table></figure><h2><span id="四-rabbitmq添加用户">四、rabbitmq添加用户</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#添加账户，用户名test 密码123456</span><br><span class="line">rabbitmqctl add_user test 123456</span><br><span class="line"> </span><br><span class="line">#授予用户角色，总共有四种角色，这里授予的是administrator</span><br><span class="line">rabbitmqctl set_user_tags test administrator</span><br><span class="line"> </span><br><span class="line">#设置用户允许访问的vhost</span><br><span class="line">rabbitmqctl set_permissions -p /  test &apos;.*&apos; &apos;.*&apos; &apos;.*&apos;</span><br></pre></td></tr></table></figure><h2><span id="五-注意事项常见问题">五、注意事项(常见问题)</span></h2><p>错误信息1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/rabbitmq/bin/rabbitmq-server:行51: /var/lib/rabbitmq/mnesia/rabbit@test.pid: 权限不够</span><br></pre></td></tr></table></figure></p><p>解决办法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R rabbitmq:rabbitmq /var/lib/rabbitmq/mnesia/</span><br></pre></td></tr></table></figure></p><p>错误信息2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">启动rabbitmq：ERROR: distribution port 25672 in use on localhost (by non-Erlang process?)</span><br></pre></td></tr></table></figure></p><p>解决办法:<br>参考该链接即可:<br><a href="https://blog.csdn.net/silenceray/article/details/82655651" target="_blank" rel="noopener">启动rabbitmq：ERROR: distribution port 25672 in use on localhost (by non-Erlang process?)</a></p><p>参考资料如下:<br><a href="https://blog.csdn.net/jiguquan3839/article/details/91346261?utm_medium=distribute.pc_relevant_ask_down.none-task-blog-baidujs-3.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_ask_down.none-task-blog-baidujs-3.nonecase" target="_blank" rel="noopener">rabbitmq安装(centos7.8)</a></p><p><a href="https://www.cnblogs.com/passerbywl/p/13617372.html" target="_blank" rel="noopener">RabbitMQ 3.8.7 在 centos7 上安装</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>com.sun.org.apache.regexp.internal不存在</title>
      <link href="/2020/09/16/com-sun-org-apache-regexp-internal%E4%B8%8D%E5%AD%98%E5%9C%A8/"/>
      <url>/2020/09/16/com-sun-org-apache-regexp-internal%E4%B8%8D%E5%AD%98%E5%9C%A8/</url>
      
        <content type="html"><![CDATA[<p>错误原因:<br>tx-lcn(5.0.2版本)导入Idea报错。<br><a id="more"></a><br>解决办法:<br>去除这行导包代码即可。</p><p>参考解决问题链接:<br><a href="https://blog.csdn.net/superShendan/article/details/107953934" target="_blank" rel="noopener">com.sun.org.apache.regexp.internal不存在</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>closing inbound before receiving peer&#39;s close_notify</title>
      <link href="/2020/09/16/closing-inbound-before-receiving-peer-s-close-notify/"/>
      <url>/2020/09/16/closing-inbound-before-receiving-peer-s-close-notify/</url>
      
        <content type="html"><![CDATA[<p>错误详细信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">javax.net.ssl.SSLException: closing inbound before receiving peer&apos;s close_notify</span><br><span class="line">    at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:129)</span><br><span class="line">    at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:117)</span><br><span class="line">    at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:308)</span><br><span class="line">    at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:264)</span><br><span class="line">    at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:255)</span><br><span class="line">    at java.base/sun.security.ssl.SSLSocketImpl.shutdownInput(SSLSocketImpl.java:645)</span><br><span class="line">    at java.base/sun.security.ssl.SSLSocketImpl.shutdownInput(SSLSocketImpl.java:624)</span><br><span class="line">    at com.mysql.cj.protocol.a.NativeProtocol.quit(NativeProtocol.java:1312)</span><br><span class="line">    at com.mysql.cj.NativeSession.quit(NativeSession.java:182)</span><br><span class="line">    at com.mysql.cj.jdbc.ConnectionImpl.realClose(ConnectionImpl.java:1750)</span><br><span class="line">    at com.mysql.cj.jdbc.ConnectionImpl.close(ConnectionImpl.java:720)</span><br><span class="line">    at com.zaxxer.hikari.pool.PoolBase.quietlyCloseConnection(PoolBase.java:135)</span><br><span class="line">    at com.zaxxer.hikari.pool.HikariPool.lambda$closeConnection$1(HikariPool.java:441)</span><br><span class="line">    at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)</span><br><span class="line">    at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)</span><br><span class="line">    at java.base/java.lang.Thread.run(Thread.java:834)</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>解决问题办法:<br>只需在数据库连接URL加useSSL=false即可。</p><p>参考解决问题链接:<br><a href="https://blog.csdn.net/qq_36924683/article/details/90167484" target="_blank" rel="noopener">closing inbound before receiving peer’s close_notify的解决办法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Error creating bean with name &#39;entityManagerFactory&#39; defined in class path resource</title>
      <link href="/2020/09/16/Error-creating-bean-with-name-entityManagerFactory-defined-in-class-path-resource/"/>
      <url>/2020/09/16/Error-creating-bean-with-name-entityManagerFactory-defined-in-class-path-resource/</url>
      
        <content type="html"><![CDATA[<p>错误详细信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error creating bean with name &apos;entityManagerFactory&apos; defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.class]: Invocation of init method fail</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>参考解决问题链接:<br><a href="https://www.cnblogs.com/fangwu/p/10652323.html" target="_blank" rel="noopener">Error creating bean with name ‘entityManagerFactory’ defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.class]: Invocation of init method fail</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7.8之时间不对问题</title>
      <link href="/2020/09/14/centos7-8%E4%B9%8B%E6%97%B6%E9%97%B4%E4%B8%8D%E5%AF%B9%E9%97%AE%E9%A2%98/"/>
      <url>/2020/09/14/centos7-8%E4%B9%8B%E6%97%B6%E9%97%B4%E4%B8%8D%E5%AF%B9%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>按照如下命令操作，即可解决问题:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ntpdate</span><br><span class="line"></span><br><span class="line">ntpdate us.pool.ntp.org</span><br><span class="line"></span><br><span class="line">date</span><br></pre></td></tr></table></figure></p><p>完成这三条命令后，时间就回归正常了。<br><a href="https://blog.csdn.net/king_wang10086/article/details/76178711" target="_blank" rel="noopener">修改centos系统时间不对的问题</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot应用之运行jar包时指定端口</title>
      <link href="/2020/09/11/SpringBoot%E5%BA%94%E7%94%A8%E4%B9%8B%E8%BF%90%E8%A1%8Cjar%E5%8C%85%E6%97%B6%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3/"/>
      <url>/2020/09/11/SpringBoot%E5%BA%94%E7%94%A8%E4%B9%8B%E8%BF%90%E8%A1%8Cjar%E5%8C%85%E6%97%B6%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>应用场景:<br>同一个jar项目可以在一台服务器多部署。</p><p>核心命令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar XXXXX.jar --server.port=8080</span><br></pre></td></tr></table></figure></p><p>参考资料:<br><a href="https://blog.csdn.net/wangxiaofeng0010/article/details/78520018" target="_blank" rel="noopener">运行jar包指定端口</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+MyBatis+Redis(二级缓存)</title>
      <link href="/2020/09/11/SpringBoot-MyBatis-Redis-%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
      <url>/2020/09/11/SpringBoot-MyBatis-Redis-%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>应用场景:<br>保存大数据量，避免重复请求。</p><h2><span id="一-添加maven依赖">一、添加Maven依赖</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- SpringBoot Boot Redis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="二-编写redis相关类">二、编写Redis相关类</span></h2><p>RedisService.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Collection;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Set;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.data.redis.core.HashOperations;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.data.redis.core.ValueOperations;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">@Component</span><br><span class="line">public class RedisService</span><br><span class="line">&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    public RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 缓存基本的对象，Integer、String、实体类等</span><br><span class="line">     *</span><br><span class="line">     * @param key 缓存的键值</span><br><span class="line">     * @param value 缓存的值</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; void setCacheObject(final String key, final T value)</span><br><span class="line">    &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 缓存基本的对象，Integer、String、实体类等</span><br><span class="line">     *</span><br><span class="line">     * @param key 缓存的键值</span><br><span class="line">     * @param value 缓存的值</span><br><span class="line">     * @param timeout 时间</span><br><span class="line">     * @param timeUnit 时间颗粒度</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; void setCacheObject(final String key, final T value, final Integer timeout, final TimeUnit timeUnit)</span><br><span class="line">    &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置有效时间</span><br><span class="line">     *</span><br><span class="line">     * @param key Redis键</span><br><span class="line">     * @param timeout 超时时间</span><br><span class="line">     * @return true=设置成功；false=设置失败</span><br><span class="line">     */</span><br><span class="line">    public boolean expire(final String key, final long timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        return expire(key, timeout, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置有效时间</span><br><span class="line">     *</span><br><span class="line">     * @param key Redis键</span><br><span class="line">     * @param timeout 超时时间</span><br><span class="line">     * @param unit 时间单位</span><br><span class="line">     * @return true=设置成功；false=设置失败</span><br><span class="line">     */</span><br><span class="line">    public boolean expire(final String key, final long timeout, final TimeUnit unit)</span><br><span class="line">    &#123;</span><br><span class="line">        return redisTemplate.expire(key, timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获得缓存的基本对象。</span><br><span class="line">     *</span><br><span class="line">     * @param key 缓存键值</span><br><span class="line">     * @return 缓存键值对应的数据</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; T getCacheObject(final String key)</span><br><span class="line">    &#123;</span><br><span class="line">        ValueOperations&lt;String, T&gt; operation = redisTemplate.opsForValue();</span><br><span class="line">        return operation.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除单个对象</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     */</span><br><span class="line">    public boolean deleteObject(final String key)</span><br><span class="line">    &#123;</span><br><span class="line">        return redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除集合对象</span><br><span class="line">     *</span><br><span class="line">     * @param collection 多个对象</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public long deleteObject(final Collection collection)</span><br><span class="line">    &#123;</span><br><span class="line">        return redisTemplate.delete(collection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 缓存List数据</span><br><span class="line">     *</span><br><span class="line">     * @param key 缓存的键值</span><br><span class="line">     * @param dataList 待缓存的List数据</span><br><span class="line">     * @return 缓存的对象</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; long setCacheList(final String key, final List&lt;T&gt; dataList)</span><br><span class="line">    &#123;</span><br><span class="line">        Long count = redisTemplate.opsForList().rightPushAll(key, dataList);</span><br><span class="line">        return count == null ? 0 : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获得缓存的list对象</span><br><span class="line">     *</span><br><span class="line">     * @param key 缓存的键值</span><br><span class="line">     * @return 缓存键值对应的数据</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; List&lt;T&gt; getCacheList(final String key)</span><br><span class="line">    &#123;</span><br><span class="line">        return redisTemplate.opsForList().range(key, 0, -1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 缓存Set</span><br><span class="line">     *</span><br><span class="line">     * @param key 缓存键值</span><br><span class="line">     * @param dataSet 缓存的数据</span><br><span class="line">     * @return 缓存数据的对象</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; long setCacheSet(final String key, final Set&lt;T&gt; dataSet)</span><br><span class="line">    &#123;</span><br><span class="line">        Long count = redisTemplate.opsForSet().add(key, dataSet);</span><br><span class="line">        return count == null ? 0 : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获得缓存的set</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; Set&lt;T&gt; getCacheSet(final String key)</span><br><span class="line">    &#123;</span><br><span class="line">        return redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 缓存Map</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @param dataMap</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; void setCacheMap(final String key, final Map&lt;String, T&gt; dataMap)</span><br><span class="line">    &#123;</span><br><span class="line">        if (dataMap != null) &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, dataMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获得缓存的Map</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; Map&lt;String, T&gt; getCacheMap(final String key)</span><br><span class="line">    &#123;</span><br><span class="line">        return redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 往Hash中存入数据</span><br><span class="line">     *</span><br><span class="line">     * @param key Redis键</span><br><span class="line">     * @param hKey Hash键</span><br><span class="line">     * @param value 值</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; void setCacheMapValue(final String key, final String hKey, final T value)</span><br><span class="line">    &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取Hash中的数据</span><br><span class="line">     *</span><br><span class="line">     * @param key Redis键</span><br><span class="line">     * @param hKey Hash键</span><br><span class="line">     * @return Hash中的对象</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; T getCacheMapValue(final String key, final String hKey)</span><br><span class="line">    &#123;</span><br><span class="line">        HashOperations&lt;String, String, T&gt; opsForHash = redisTemplate.opsForHash();</span><br><span class="line">        return opsForHash.get(key, hKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取多个Hash中的数据</span><br><span class="line">     *</span><br><span class="line">     * @param key Redis键</span><br><span class="line">     * @param hKeys Hash键集合</span><br><span class="line">     * @return Hash对象集合</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; List&lt;T&gt; getMultiCacheMapValue(final String key, final Collection&lt;Object&gt; hKeys)</span><br><span class="line">    &#123;</span><br><span class="line">        return redisTemplate.opsForHash().multiGet(key, hKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获得缓存的基本对象列表</span><br><span class="line">     * </span><br><span class="line">     * @param pattern 字符串前缀</span><br><span class="line">     * @return 对象列表</span><br><span class="line">     */</span><br><span class="line">    public Collection&lt;String&gt; keys(final String pattern)</span><br><span class="line">    &#123;</span><br><span class="line">        return redisTemplate.keys(pattern);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>RedisConfig.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line">import org.springframework.cache.annotation.EnableCaching;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line">import com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line">import com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">@Configuration</span><br><span class="line">@EnableCaching</span><br><span class="line">public class RedisConfig extends CachingConfigurerSupport</span><br><span class="line">&#123;</span><br><span class="line">    @Bean</span><br><span class="line">    @SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot;, &quot;deprecation&quot; &#125;)</span><br><span class="line">    public RedisTemplate&lt;Object, Object&gt; redisTemplate(RedisConnectionFactory connectionFactory)</span><br><span class="line">    &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = new RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        FastJson2JsonRedisSerializer serializer = new FastJson2JsonRedisSerializer(Object.class);</span><br><span class="line"></span><br><span class="line">        ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">        mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        serializer.setObjectMapper(mapper);</span><br><span class="line"></span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line">        // 使用StringRedisSerializer来序列化和反序列化redis的key值</span><br><span class="line">        template.setKeySerializer(new StringRedisSerializer());</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        return template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>RedisCache.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.ibatis.cache.Cache;</span><br><span class="line">import org.springframework.data.redis.core.RedisCallback;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line">import java.util.concurrent.locks.ReadWriteLock;</span><br><span class="line">import java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line">public class RedisCache implements Cache &#123;</span><br><span class="line">    private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();</span><br><span class="line">    private final String id;</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line">    //redis过期时间</span><br><span class="line">    private static final long EXPIRE_TIME_IN_MINUTES = 30;</span><br><span class="line"></span><br><span class="line">    public RedisCache(String id) &#123;</span><br><span class="line">        if (id == null) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;Cache instance required an ID&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Put query result to redis</span><br><span class="line">     *</span><br><span class="line">     * @Param key</span><br><span class="line">     * @Param value</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void putObject(Object key, Object value) &#123;</span><br><span class="line">        RedisTemplate redisTemplate = getRedisTemplate();</span><br><span class="line">        ValueOperations opsForValue = redisTemplate.opsForValue();</span><br><span class="line">        System.out.println(key + &quot;: key&quot;);</span><br><span class="line">        System.out.println(key.toString() + &quot;: key.toString()&quot;);</span><br><span class="line">        System.out.println(value + &quot;: value&quot;);</span><br><span class="line">        System.out.println(value.toString() + &quot;: value.toString()&quot;);</span><br><span class="line">        opsForValue.set(key.toString(), value, EXPIRE_TIME_IN_MINUTES, TimeUnit.MINUTES);</span><br><span class="line">        System.out.println(&quot;结果成功放入缓存 and &quot; + &quot;key = &quot; + &quot;\n&quot; + key + &quot;value = &quot; + value);</span><br><span class="line">        System.out.println(opsForValue.get(key.toString()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Get cached query result to redis</span><br><span class="line">     *</span><br><span class="line">     * @Param key</span><br><span class="line">     * @Return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public Object getObject(Object key) &#123;</span><br><span class="line">        RedisTemplate redisTemplate = getRedisTemplate();</span><br><span class="line">//        redisTemplate.setHashValueSerializer(new StringRedisSerializer());</span><br><span class="line">        ValueOperations opsForValue = redisTemplate.opsForValue();</span><br><span class="line">        System.out.println(&quot;结果从缓存中获取&quot;);</span><br><span class="line">        return opsForValue.get(key.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Remove cached query result to redis</span><br><span class="line">     *</span><br><span class="line">     * @Param key</span><br><span class="line">     * @Return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public Object removeObject(Object key) &#123;</span><br><span class="line">        RedisTemplate redisTemplate = getRedisTemplate();</span><br><span class="line">        redisTemplate.delete(key);</span><br><span class="line">        System.out.println(&quot;从缓存中删除&quot;);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Clear this cache instance</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void clear() &#123;</span><br><span class="line">        RedisTemplate redisTemplate = getRedisTemplate();</span><br><span class="line">        redisTemplate.execute((RedisCallback) connection -&gt; &#123;</span><br><span class="line">            connection.flushDb();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(&quot;清空缓存&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getSize() &#123;</span><br><span class="line">        Long size = (Long) redisTemplate.execute((RedisCallback) connection -&gt; connection.dbSize());</span><br><span class="line">        return size.intValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ReadWriteLock getReadWriteLock() &#123;</span><br><span class="line">        return readWriteLock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private RedisTemplate getRedisTemplate() &#123;</span><br><span class="line">        if (redisTemplate == null) &#123;</span><br><span class="line">            redisTemplate = ApplicationContextHolder.getBean(&quot;redisTemplate&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="三-yml配置redis">三、yml配置redis</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: localhost</span><br><span class="line">    port: 6379</span><br><span class="line">    password:</span><br></pre></td></tr></table></figure><h2><span id="四-在dao类添加该注解">四、在DAO类添加该注解</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@CacheNamespace(implementation = RedisCache.class)</span><br></pre></td></tr></table></figure><h2><span id="五-实现类或者在controller加如下代码键值对保存对应的数据">五、实现类或者在Controller加如下代码，键值对保存对应的数据</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private RedisService redisService;</span><br></pre></td></tr></table></figure><h2><span id="六-如何确保redis数据实时更新">六、如何确保Redis数据实时更新</span></h2><p>我研究了下，通常如下:<br>1.先删缓存，再更新数据库<br>2.先写数据库，再删缓存<br>参考:<br><a href="https://www.cnblogs.com/AshOfTime/p/10815593.html" target="_blank" rel="noopener">Redis缓存如何保证一致性</a></p><p>补充:<br><a href="https://www.jianshu.com/p/2edbb48604bd" target="_blank" rel="noopener">Redis 和 Mysql 数据库数据如何保持一致性</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java之5分钟插入千万条数据</title>
      <link href="/2020/09/09/java%E4%B9%8B5%E5%88%86%E9%92%9F%E6%8F%92%E5%85%A5%E5%8D%83%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/09/09/java%E4%B9%8B5%E5%88%86%E9%92%9F%E6%8F%92%E5%85%A5%E5%8D%83%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>虽说不一定5分钟就插入完毕，因为取决去所插入的字段，如果字段过多会稍微慢点，但不至于太慢。10分钟内基本能看到结果。</p><p>之前我尝试用多线程来实现数据插入(百万条数据)，半个多小时才二十多万条数据。</p><p>线程池数据插入核心代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(1000000);</span><br><span class="line">        executorService.submit(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                for (int i = 0; i &lt; 150000; i++) &#123;</span><br><span class="line">                    TestUser user = new TestUser();</span><br><span class="line">                    user.setName(RandomUtil.randomString(20));</span><br><span class="line">                    userDao.insert(user);</span><br><span class="line">                    System.out.println(&quot;插入数据:&quot; + i);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + &quot;正在执行任务&quot;);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>应用场景:<br>造测试数据，如千万甚至亿万级别的数据自动快速生成。<br><a id="more"></a><br>关键核心实现类代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">long startTime = System.currentTimeMillis();</span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">        List&lt;TestUser&gt; users = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        for (int j = 0; j &lt; 1000; j++) &#123;</span><br><span class="line">            TestUser user = new TestUser();</span><br><span class="line">            user.setName(RandomUtil.randomString(20));</span><br><span class="line">            user.setName2(RandomUtil.randomString(20));</span><br><span class="line">            user.setName3(RandomUtil.randomString(20));</span><br><span class="line">            user.setName4(RandomUtil.randomString(20));</span><br><span class="line">            user.setName5(RandomUtil.randomString(20));</span><br><span class="line">            user.setName6(RandomUtil.randomString(20));</span><br><span class="line">            user.setName7(RandomUtil.randomString(20));</span><br><span class="line">            user.setName8(RandomUtil.randomString(20));</span><br><span class="line">            user.setName10(RandomUtil.randomString(20));</span><br><span class="line">            user.setName11(RandomUtil.randomString(20));</span><br><span class="line">            user.setName12(RandomUtil.randomString(20));</span><br><span class="line">            user.setName13(RandomUtil.randomString(20));</span><br><span class="line">            user.setName14(RandomUtil.randomString(20));</span><br><span class="line">            user.setName15(RandomUtil.randomString(20));</span><br><span class="line">            user.setName16(RandomUtil.randomString(20));</span><br><span class="line">            user.setName17(RandomUtil.randomString(20));</span><br><span class="line">            user.setName18(RandomUtil.randomString(20));</span><br><span class="line">            user.setName19(RandomUtil.randomString(20));</span><br><span class="line">            user.setName20(RandomUtil.randomString(20));</span><br><span class="line"></span><br><span class="line">            users.add(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int changed = userDao.batchAdd(users);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;#&quot; + i + &quot; changed=&quot; + changed);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125; catch (Exception ex) &#123;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">    long endTime = System.currentTimeMillis();</span><br><span class="line">    System.out.println(&quot;Time elapsed:&quot; + toDhmsStyle((endTime - startTime) / 1000) + &quot;.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码原理:<br>插入一千条数据后提交一次，然后重复一万次的方式。</p><p>关键核心DAO:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public interface TestUserDao extends BaseMapper&lt;TestUser&gt; &#123;</span><br><span class="line"></span><br><span class="line">    int batchAdd(@Param(&quot;users&quot;) List&lt;TestUser&gt; users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>XML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.springcloud.blog.practice.dao.TestUserDao&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id=&quot;batchAdd&quot;&gt;</span><br><span class="line">        insert into test_user(name,name2,name3,name4,name5,name6,name7,name8,name9,name10,name11,name12,name13,name14,name15,name16,name17,name18,name19,name20)</span><br><span class="line">        values</span><br><span class="line">        &lt;foreach collection=&quot;users&quot; item=&quot;item&quot; separator=&quot;,&quot;&gt;</span><br><span class="line">            (#&#123;item.name&#125;,#&#123;item.name2&#125;,#&#123;item.name3&#125;,#&#123;item.name4&#125;,#&#123;item.name5&#125;,#&#123;item.name6&#125;,#&#123;item.name7&#125;,#&#123;item.name8&#125;,#&#123;item.name9&#125;,#&#123;item.name10&#125;,#&#123;item.name11&#125;,#&#123;item.name12&#125;,#&#123;item.name13&#125;,#&#123;item.name14&#125;,#&#123;item.name15&#125;,#&#123;item.name16&#125;,#&#123;item.name17&#125;,#&#123;item.name18&#125;,#&#123;item.name19&#125;,#&#123;item.name20&#125;)</span><br><span class="line">        &lt;/foreach&gt;</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>参考链接:<br><a href="https://www.cnblogs.com/heyang78/p/11661796.html" target="_blank" rel="noopener">[MyBatis]五分钟向MySql数据库插入一千万条数据 批量插入 用时5分左右</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7.8之防火墙常用命令</title>
      <link href="/2020/09/09/centos7-8%E4%B9%8B%E9%98%B2%E7%81%AB%E5%A2%99%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/09/09/centos7-8%E4%B9%8B%E9%98%B2%E7%81%AB%E5%A2%99%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>查看防火墙状态:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>查看防火墙规则:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure></p><p>防火墙开启端口命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure></p><p>防火墙关闭端口命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --remove-port=80/udp --permanent</span><br></pre></td></tr></table></figure></p><p>防火墙重启命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p><p>查看防火墙已开启端口:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8之合并list并去重</title>
      <link href="/2020/09/09/Java8%E4%B9%8B%E5%90%88%E5%B9%B6list%E5%B9%B6%E5%8E%BB%E9%87%8D/"/>
      <url>/2020/09/09/Java8%E4%B9%8B%E5%90%88%E5%B9%B6list%E5%B9%B6%E5%8E%BB%E9%87%8D/</url>
      
        <content type="html"><![CDATA[<p>核心代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; result = Stream.of(Lists.newArrayList(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), Lists.newArrayList(&quot;A&quot;, &quot;B&quot;))</span><br><span class="line">  .flatMap(Collection::stream).distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure></p><p>最终的结果输出是A B C。</p><p>应用场景:<br>有些时候我们需要合并两个返回类型相同的结果集，就可以用这个，不必SQL查询合并结果。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端代码规范</title>
      <link href="/2020/09/05/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
      <url>/2020/09/05/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<p>这是我上家教育saas公司前端同事整理出来的(当时我们公司主要用的前端框架是React)，当时我在这家公司除了主写后端之外，还需要写一些前端代码，按照这个规范写，前端代码可读性、可维护性、可扩展性以及性能都会大大提高。</p><a id="more"></a><h2><span id="一-js篇">一、JS篇</span></h2><h3><span id="1变量包括声明函数参数">1.变量（包括声明，函数参数）</span></h3><p>(1)变量均用英文单词（不会要去翻译）</p><p>(2)变量较长时用驼峰命名（状态+变量），例如：currentCourseId</p><p>或者下划线形式区分，例如：current_courseId</p><p>注：无论那种方式代码里只能出现一种</p><p>(3)字符串中包含变量：<code>你是最${isPig ? &#39;胖&#39; : &#39;完美&#39;}的吗?</code></p><p>(4)对象属性遵循 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const itemName = &apos;优秀&apos;;</span><br><span class="line"></span><br><span class="line">const newObject = &#123; itemName &#125; </span><br><span class="line"></span><br><span class="line">const newObject = &#123; itemName: itemName &#125;;</span><br></pre></td></tr></table></figure><p>(5)对象结构赋值，兼容处理 例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const &#123; listData = [], ...props &#125; = this.props;</span><br></pre></td></tr></table></figure><p>(6)对象取值 尽量采用 … 扩展运算符完成组件间多props的情况</p><h3><span id="2方法">2.方法</span></h3><p>(1)方法命名必须遵循驼峰命名，不怕长就怕看不懂，</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">handleChangeChecked = () =&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><p>(2)方法采用es6写法（可省去react绑定当前组件代码）</p><p>(3)对于用户交互方法作用于组件的方法，遵循以下: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div onClick = &#123; handleClick = () =&gt; &#123;&#125; &#125;&gt;点击事件&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>(4)接口请求方法语义化明确 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">getListData = () =&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><p>(5)js方法（filter，map，find等等）遍历时尽可能区分到遍历的是什么item</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">listData.map（testItem =&gt; ( &lt;div&gt;&lt;/div&gt;)）</span><br></pre></td></tr></table></figure><p>(6)善于运用箭头函数来缩短代码行数,例如过滤: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">listData.filter(item =&gt; !!item.showFlag)</span><br></pre></td></tr></table></figure><h2><span id="二-标签篇">二、标签篇</span></h2><p>(1)文本展示的不要去用自带样式标签，用div/span去代替h1….h5/p</p><p>(2)减少无用标签层级，没有样式功能的层级去掉</p><h2><span id="三-样式篇">三、样式篇</span></h2><p>(1)sass/less文件必须层级嵌套（防止污染全局样式），当定义一个js文件时，需要给到当前唯一className，并在less样式文件里用className包裹样式</p><p>(2)className的值语义化明确，要用‘-’符号隔开，并且不要出现汉字</p><p>无变量情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">className = &quot;course-list-item&quot;</span><br></pre></td></tr></table></figure><p>有变量情况：不要在className里面去判断，已变量方式 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const status = isOpen ? &apos;open&apos; : &apos;close&apos;; className=&#123;`item-content-$&#123;status&#125;`&#125;</span><br></pre></td></tr></table></figure><h2><span id="四-整体优化篇">四、整体优化篇</span></h2><p>(1)遍历之后item取值做好兼容后，再赋值给标签（方便控制Dom显隐）</p><p>(2)抽离基础纯UI展示无状态组件，减少一个render方法层级和行数</p><p>(3)render方法拆分化，renderTop，renderMiddle，renderFooter，简称布局大法</p><p>(4)一个less样式文件对应一个js文件，用className联通，形成封闭区内的样式渲染</p><p>(5)控制单个文件代码&lt;500行</p>]]></content>
      
      
      
        <tags>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8新特性之List处理</title>
      <link href="/2020/09/05/java8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BList%E5%A4%84%E7%90%86/"/>
      <url>/2020/09/05/java8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BList%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>分组:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, List&lt;T&gt;&gt; yearData = allData.stream().collect(Collectors.groupingBy(T::getYear));</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>过滤筛选(单条件):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; filterList = appleList.stream().filter(a -&gt; a.getName().equals(&quot;YC&quot;)).collect(Collectors.toList());</span><br></pre></td></tr></table></figure></p><p>过滤筛选(多条件):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; filterList = dayVoList.</span><br><span class="line">                      stream().filter(a -&gt; a.getYEAR().equals(item)).collect(Collectors.toList())</span><br><span class="line">                      .stream().filter(a -&gt; a.getPrice() != &quot;0&quot; &amp;&amp; a.getPrice() != &quot;0.0&quot;).collect(Collectors.toList());</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js之linux安装(centos7.8)</title>
      <link href="/2020/09/05/node-js%E4%B9%8Blinux%E5%AE%89%E8%A3%85-centos7-8/"/>
      <url>/2020/09/05/node-js%E4%B9%8Blinux%E5%AE%89%E8%A3%85-centos7-8/</url>
      
        <content type="html"><![CDATA[<p>node.js linux安装:<br><a href="https://www.cnblogs.com/chenhaoyu/p/10237505.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenhaoyu/p/10237505.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven多模块项目出现java文件异常(蓝色标记消失，pom.xml存在但仍不能导入对应的包，不能识别java文件等)</title>
      <link href="/2020/09/05/maven%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E5%87%BA%E7%8E%B0java%E6%96%87%E4%BB%B6%E5%BC%82%E5%B8%B8-%E8%93%9D%E8%89%B2%E6%A0%87%E8%AE%B0%E6%B6%88%E5%A4%B1%EF%BC%8Cpom-xml%E5%AD%98%E5%9C%A8%E4%BD%86%E4%BB%8D%E4%B8%8D%E8%83%BD%E5%AF%BC%E5%85%A5%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8C%85%EF%BC%8C%E4%B8%8D%E8%83%BD%E8%AF%86%E5%88%ABjava%E6%96%87%E4%BB%B6%E7%AD%89/"/>
      <url>/2020/09/05/maven%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E5%87%BA%E7%8E%B0java%E6%96%87%E4%BB%B6%E5%BC%82%E5%B8%B8-%E8%93%9D%E8%89%B2%E6%A0%87%E8%AE%B0%E6%B6%88%E5%A4%B1%EF%BC%8Cpom-xml%E5%AD%98%E5%9C%A8%E4%BD%86%E4%BB%8D%E4%B8%8D%E8%83%BD%E5%AF%BC%E5%85%A5%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8C%85%EF%BC%8C%E4%B8%8D%E8%83%BD%E8%AF%86%E5%88%ABjava%E6%96%87%E4%BB%B6%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<p>解决方案:<br>A-&gt;删除.idea文件，重新导入Idea<br>B-&gt;删除整个项目，重新下载导入Idea<br>C-&gt;Project Structure Module(对应的module)重新设置source root<br>D-&gt;检查pom.xml是否出错，如主pom.xml中的<modules>标签是否包含对应的子模块等</modules></p>]]></content>
      
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot jar包部署如何不占用过多的服务器内存</title>
      <link href="/2020/09/05/springboot-jar%E5%8C%85%E9%83%A8%E7%BD%B2%E5%A6%82%E4%BD%95%E4%B8%8D%E5%8D%A0%E7%94%A8%E8%BF%87%E5%A4%9A%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AD%98/"/>
      <url>/2020/09/05/springboot-jar%E5%8C%85%E9%83%A8%E7%BD%B2%E5%A6%82%E4%BD%95%E4%B8%8D%E5%8D%A0%E7%94%A8%E8%BF%87%E5%A4%9A%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>springboot部署方案有很多，可以将其打成war部署到tomcat，也可以直接jar部署(利用内嵌的tomcat),还可以使用docker部署等。</p><p>今天主要说的是springboot jar包部署占用内存确实有些大，该怎么调整呢？其实很简单，核心代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -Xms64m -Xmx128m -jar blog-gateway-2.0.0.jar  &gt; blog-gateway.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><p>最关键的是-Xms64m -Xmx128m，与JVM有关。</p><p>关于JVM内存设置可以参考如下链接:<br><a href="https://www.cnblogs.com/jack204/archive/2012/07/02/2572932.html" target="_blank" rel="noopener">https://www.cnblogs.com/jack204/archive/2012/07/02/2572932.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pom.xml设置字符编码</title>
      <link href="/2020/09/05/pom-xml%E8%AE%BE%E7%BD%AE%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
      <url>/2020/09/05/pom-xml%E8%AE%BE%E7%BD%AE%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>为什么要设置字符编码？<br>如果不设置正确字符编码可能导致编译失败等问题。</p><p>参考解决方案:<br><a href="https://blog.csdn.net/Victoria__W/article/details/80706763" target="_blank" rel="noopener">https://blog.csdn.net/Victoria__W/article/details/80706763</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java.lang.IllegalStateException: Service id not legal hostname (/test-gw-aqa)</title>
      <link href="/2020/09/05/java-lang-IllegalStateException-Service-id-not-legal-hostname-test-gw-aqa/"/>
      <url>/2020/09/05/java-lang-IllegalStateException-Service-id-not-legal-hostname-test-gw-aqa/</url>
      
        <content type="html"><![CDATA[<p>错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Service id not legal hostname (/test-gw-aqa)</span><br></pre></td></tr></table></figure></p><p>错误原因和解决方案:</p><p>FeignClient错误写法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(&quot;/test-gw-aqa&quot;)</span><br></pre></td></tr></table></figure></p><p>FeignClient正确写法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(&quot;test-gw-aqa&quot;)</span><br></pre></td></tr></table></figure></p><p>这种错误会直接导致微服务之间调用失败，因为找不到这个微服务。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>org.springframework.context.ApplicationContextException: Unable to start web server; nested exceptio</title>
      <link href="/2020/09/05/org-springframework-context-ApplicationContextException-Unable-to-start-web-server-nested-exceptio/"/>
      <url>/2020/09/05/org-springframework-context-ApplicationContextException-Unable-to-start-web-server-nested-exceptio/</url>
      
        <content type="html"><![CDATA[<p>详细错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.context.ApplicationContextException: Unable to start ServletWebServerApplicationContext due to missing ServletWebServerFactory bean.</span><br></pre></td></tr></table></figure></p><p>常规解决办法:<br>参考如下链接即可:<br><a href="https://cloud.tencent.com/developer/article/1536938" target="_blank" rel="noopener">org.springframework.context.ApplicationContextException: Unable to start web server; nested exceptio</a></p><p>但是也分情况。比分我这次遇到是关于不同Maven多模块相互依赖关系导致此类错误，理解Maven多模块之间的依赖关系即可解决。</p><p>由此可以看出Maven多模块一定得设计好以及依赖关系一定要明确，否则项目启动报错、打包报错等各种奇葩错误弄得你怀疑人生。</p><p>不过兵来将挡，水来土淹。经过这几年得错误洗礼，面对错误，我也不再像过去烦躁或胆怯，因为我知道烦躁和胆怯是解决不了问题的。面对错误，就是要直接面对它，然后解决它。我提供我的<strong>通用思路</strong>:<br><a id="more"></a><br><strong>1.把握关键错误信息</strong></p><p><strong>2.根据错误信息推断可能是什么原因</strong></p><p><strong>3.要有详细复现步骤(页面操作，IDE Debug调试)</strong></p><p><strong>4.找到错误根本原因</strong></p><p><strong>5.最终解决它</strong></p><p>有的时候不能面面俱到做到这五步，因为项目非常紧急的情况下和任务繁重，直接把握好第一步，然后把关键错误信息放搜索引擎一搜基本上就能得到现成的解决方案。</p><p>当然了，这需要你具有甄别正确或错误的能力，不然的话，很容易被坑。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nacos的三种部署方式</title>
      <link href="/2020/09/05/nacos%E7%9A%84%E4%B8%89%E7%A7%8D%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/09/05/nacos%E7%9A%84%E4%B8%89%E7%A7%8D%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>单机模式 - 用于测试和单机试用。<br>集群模式 - 用于生产环境，确保高可用。<br>多集群模式 - 用于多数据中心场景。</p><p>参考地址(参考官方文档即可):<br><a href="https://nacos.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">https://nacos.io/zh-cn/docs/deployment.html</a><br><a id="more"></a><br>我这边直接wget nacos微小版 然后执行如下命令，就实现了单部署:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://developers-youcong.github.io/tags/https://github.com/alibaba/nacos/releases/download/1.3.0/nacos-server-1.3.0.zip</span><br><span class="line"></span><br><span class="line">unzip nacos-server-1.3.0</span><br><span class="line"></span><br><span class="line">cd nacos-server-1.3.0</span><br><span class="line"></span><br><span class="line">cd bin</span><br><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>o.s.c.a.n.c.NacosPropertySourceBuilder : get data from Nacos error,dataId:application-dev.yaml</title>
      <link href="/2020/09/02/o-s-c-a-n-c-NacosPropertySourceBuilder-get-data-from-Nacos-error-dataId-application-dev-yaml/"/>
      <url>/2020/09/02/o-s-c-a-n-c-NacosPropertySourceBuilder-get-data-from-Nacos-error-dataId-application-dev-yaml/</url>
      
        <content type="html"><![CDATA[<p>昨天部署项目到公司内部开发服务器上，部署显示是成功，结果出现了这样的错误:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o.s.c.a.n.c.NacosPropertySourceBuilder : get data from Nacos error,dataId:application-dev.yaml</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>通常这样的错误是因为IDE对应的文件字符编码，改下字符编码就可以了。</p><p>但我本地是正常的，只是部署Linux出现问题。</p><p>最后每次对应的微服务启动，都会显示无法解析共享配置文件(application-dev.yml)</p><p>共享配置文件主要的作用是请求URL不拦截、负载均衡、feign等。</p><p>现在的问题是一直访问不到请求，表示被拦截，这样加上日志输出的错误原因，我因此判定就是解析不到的原因。</p><p>但为什么解析不到呢？<br>可能与Linux字符集有关。</p><p>查看Linux对应的全局字符文件(vim /etc/locale.conf):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LANG=&quot;zh_CN&quot;</span><br></pre></td></tr></table></figure></p><p>最后我加上如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LANG=&quot;zh_CN.UTF-8&quot;</span><br></pre></td></tr></table></figure></p><p>最后问题全部得到解决了。包括之前项目启动输出日志是乱码的问题都得到了解决。</p><p>由于之前操作Ubuntu16.04一直没有出现过这样的问题，这次操作的Linux系统是CentOS7.8。</p><p>看来有些时候字符集真的要命。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java使用split注意事项</title>
      <link href="/2020/09/02/java%E4%BD%BF%E7%94%A8split%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2020/09/02/java%E4%BD%BF%E7%94%A8split%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<p>java使用split的应用场景，通常是针对字符串进行分割。<br><a id="more"></a><br>比方说:<br>前端有这样一个参数，如{“year”:”2018|2019|2020”}</p><p>而我后端接收需要进一步处理，如需要将2018|2019|2020一个个分割出来，就需要用到split方法。</p><p>我在使用split分割字符串时，遇到这样一个问题。</p><p>错误代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] year = reqDTO.getYear().split(&quot;|&quot;);</span><br></pre></td></tr></table></figure></p><p>实际上并不能分割输出如下结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br></pre></td></tr></table></figure></p><p>正确代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] year = reqDTO.getYear().split(&quot;\\|&quot;);</span><br></pre></td></tr></table></figure></p><p>那么问题来了，为什么需要转义?</p><p>查看对应的源码，如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public String[] split(String regex) &#123;</span><br><span class="line">    return split(regex, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>答案是底层根据正则表达式匹配。如果不使用转义符，java自带的转义可能就识别为将2019|2018|2020一个个分割，最后分割出来的肯定是单个，如2、0、1、9、|这样的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js存储token</title>
      <link href="/2020/08/29/js%E5%AD%98%E5%82%A8token/"/>
      <url>/2020/08/29/js%E5%AD%98%E5%82%A8token/</url>
      
        <content type="html"><![CDATA[<p>关于存储token有多种方式(针对前端而言，如react可以使用redux存储token，js可以使用cookie存储token,还有今天说的通过sessionStorage保存token等)。</p><a id="more"></a><p>sessionStorage相关操作核心代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sessionStorage.setItem(&quot;key&quot;,&quot;value&quot;); //存储数据</span><br><span class="line"></span><br><span class="line">sessionStorage.getItem(&quot;key&quot;); //获取数据</span><br><span class="line"></span><br><span class="line">sessionStorage.removeItem(&quot;key&quot;); //删除数据</span><br><span class="line"></span><br><span class="line">sessionStorage.clear(); //清除所有数据</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloudGateWay之网关跨域问题解决</title>
      <link href="/2020/08/29/SpringCloudGateWay%E4%B9%8B%E7%BD%91%E5%85%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/08/29/SpringCloudGateWay%E4%B9%8B%E7%BD%91%E5%85%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>应用场景:<br>所有的微服务是通过网关这个入口，在和前端对接口时，必然设计到有关跨域的问题。关于服务端跨域有很多方案，可以加注解(指定具体的路径允许跨域)，也可以统一配置。</p><a id="more"></a><p>另外如果不在网关入口这配置，势必会造成一个很大的影响，那就是前端通过网关入口调用其它微服务，通常会出现如下错误:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at &apos;xxx&apos; from origin &apos;xxx&apos; has been been blocked by CORS policy</span><br></pre></td></tr></table></figure></p><p>核心代码(解决方案):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.cors.CorsConfiguration;</span><br><span class="line">import org.springframework.web.cors.reactive.CorsWebFilter;</span><br><span class="line">import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;</span><br><span class="line">import org.springframework.web.util.pattern.PathPatternParser;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class CorsConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public CorsWebFilter corsFilter() &#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(new PathPatternParser());</span><br><span class="line">        source.registerCorsConfiguration(&quot;/**&quot;, buildConfig());</span><br><span class="line">        return new CorsWebFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private CorsConfiguration buildConfig() &#123;</span><br><span class="line">        CorsConfiguration corsConfiguration = new CorsConfiguration();</span><br><span class="line">        //在生产环境上最好指定域名，以免产生跨域安全问题</span><br><span class="line">        corsConfiguration.addAllowedOrigin(&quot;*&quot;);</span><br><span class="line">        corsConfiguration.addAllowedHeader(&quot;*&quot;);</span><br><span class="line">        corsConfiguration.addAllowedMethod(&quot;*&quot;);</span><br><span class="line">        return corsConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SpirngCloud GateWay解决方案:<br><a href="https://blog.csdn.net/a294634473/article/details/90715903" target="_blank" rel="noopener">Spring Cloud Gateway – Cors解决跨域问题</a></p><p>注解解决方案:<br><a href="https://blog.csdn.net/weixin_41796956/article/details/84133901" target="_blank" rel="noopener">java后端解决跨域问题（过滤器或者注解）</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下以M为单位显示文件大小</title>
      <link href="/2020/08/23/linux%E4%B8%8B%E4%BB%A5M%E4%B8%BA%E5%8D%95%E4%BD%8D%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F/"/>
      <url>/2020/08/23/linux%E4%B8%8B%E4%BB%A5M%E4%B8%BA%E5%8D%95%E4%BD%8D%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<p>此命令用于查看当前目录各文件夹及文件所占用大小:<br><code>ls -l --block-size=M</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAop之日志(读配置文件方式)</title>
      <link href="/2020/08/23/SpringAop%E4%B9%8B%E6%97%A5%E5%BF%97-%E8%AF%BB%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/08/23/SpringAop%E4%B9%8B%E6%97%A5%E5%BF%97-%E8%AF%BB%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>读配置文件的目的在于减少代码上的冗余，这个冗余通常指加注解之类的。<br><a id="more"></a></p><p>比方说，我们原来的代码是这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/list&quot;)</span><br><span class="line">@Log(title = &quot;查询用户列表&quot;, businessType = BusinessType.QUERY)</span><br><span class="line">public AjaxResult list() &#123;</span><br><span class="line"></span><br><span class="line">    return AjaxResult.success(userService.queryUserListInfo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>相当于每个我都要加上@Log，我才能在aop中将其插入日志表(识别功能)，现在我觉得这样太麻烦了。所以我可以这样做，也就是将@Log抽取一个配置文件，这个配置文件，团队定个规矩，上线前统一更改即可。</p><p>于是我的AOP代码就变成这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">public class LogAspect &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static LogAspect logAspect;</span><br><span class="line"></span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void init() &#123;</span><br><span class="line">        logAspect = this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Pointcut(&quot;execution(public * com.eqics.blog.controller..*.*(..))&quot;)</span><br><span class="line">    public void Pointcut() &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;切点&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //@Around：环绕通知</span><br><span class="line">    @Around(&quot;Pointcut()&quot;)</span><br><span class="line">    @Transactional(isolation = Isolation.DEFAULT)</span><br><span class="line">    public Object Around(ProceedingJoinPoint pjp) throws Throwable &#123;</span><br><span class="line">        Map&lt;String, Object&gt; data = new HashMap&lt;&gt;();</span><br><span class="line">        //获取目标类名称</span><br><span class="line">        String clazzName = pjp.getTarget().getClass().getName();</span><br><span class="line">        //获取目标类方法名称</span><br><span class="line">        String methodName = pjp.getSignature().getName();</span><br><span class="line"></span><br><span class="line">        // 请求的地址</span><br><span class="line">        String ip = IpUtils.getIpAddr(ServletUtils.getRequest());</span><br><span class="line"></span><br><span class="line">        String apiUrl = ServletUtils.getRequest().getRequestURI();</span><br><span class="line"></span><br><span class="line">         //关键核心代码</span><br><span class="line">        InputStream path = getClass().getResourceAsStream(&quot;/api.properties&quot;);</span><br><span class="line">        BufferedReader reader = new BufferedReader(new InputStreamReader(path));</span><br><span class="line">        System.out.println(&quot;reader:&quot; + reader);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Properties pro = new Properties();</span><br><span class="line">        pro.load(reader);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;pro:&quot; + pro.getProperty(apiUrl));</span><br><span class="line"></span><br><span class="line">        data.put(&quot;apiUrl&quot;, apiUrl);</span><br><span class="line"></span><br><span class="line">        //IP地址</span><br><span class="line">        data.put(&quot;ip&quot;, ip);</span><br><span class="line"></span><br><span class="line">        //记录类名称</span><br><span class="line">        data.put(&quot;clazzName&quot;, clazzName);</span><br><span class="line">        //记录对应方法名称</span><br><span class="line">        data.put(&quot;methodName&quot;, methodName);</span><br><span class="line">        //记录请求参数</span><br><span class="line">        data.put(&quot;params&quot;, pjp.getArgs());</span><br><span class="line"></span><br><span class="line">        //开始调用时间</span><br><span class="line">        // 计时并调用目标函数</span><br><span class="line">        long start = System.currentTimeMillis();</span><br><span class="line">        Object result = pjp.proceed();</span><br><span class="line">        Long time = System.currentTimeMillis() - start;</span><br><span class="line"></span><br><span class="line">        //记录返回参数</span><br><span class="line">        data.put(&quot;result&quot;, result);</span><br><span class="line"></span><br><span class="line">        //设置消耗总时间</span><br><span class="line">        data.put(&quot;consumeTime&quot;, time);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;日志输出:&quot; + data);</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">        </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>api.properties配置文件如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 用户管理</span><br><span class="line">/blog_user/list=get user manage</span><br><span class="line">/blog_user/list_test=用户管理测试</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务内部通信之白名单</title>
      <link href="/2020/08/23/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%86%85%E9%83%A8%E9%80%9A%E4%BF%A1%E4%B9%8B%E7%99%BD%E5%90%8D%E5%8D%95/"/>
      <url>/2020/08/23/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%86%85%E9%83%A8%E9%80%9A%E4%BF%A1%E4%B9%8B%E7%99%BD%E5%90%8D%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p>微服务通信的方式有很多，有的用Socket，也有用一些HTTP客户端工具类，还有的有现成的组件如SpringCloud Open-Feign等。</p><p>这些共同点都是通信。</p><p>不同服务之间的通信涉及很多方面，比分说内网访问，外网不能访问等。</p><p>那么微服务如何实现内部通信呢(这里说的是内网通信，外网不能访问)？<br><a id="more"></a><br>核心代码如下(采用拦截器机制):<br>代码中的if-else那段代码可以放在数据库，也可以存NoSQL或者配置文件之类的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class IPInterceptor implements HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String ip = IpUtils.getIpAddr(ServletUtils.getRequest());</span><br><span class="line"></span><br><span class="line">        if (&quot;127.0.0.1&quot;.equals(ip)) &#123;</span><br><span class="line">            System.out.println(&quot;内部IP放行&quot;);</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;外部IP禁止访问&quot;);</span><br><span class="line">            JSONObject jsonObject = new JSONObject();</span><br><span class="line">            jsonObject.put(&quot;code&quot;, &quot;403&quot;);</span><br><span class="line">            jsonObject.put(&quot;msg&quot;, &quot;Not Allowed&quot;);</span><br><span class="line"></span><br><span class="line">            response.getWriter().append(jsonObject.toJSONString());</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>采用拦截器机制后，对应的feign组件URL指向改为如下即可(主要是@FeignClient属性中的url):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(contextId = &quot;userApiService&quot;, value = ServiceNameConstants.BLOG_SERVICE, url = &quot;http://127.0.0.1:2020&quot;)</span><br><span class="line">@RestController</span><br><span class="line">public interface UserApiService &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/blog_user/list&quot;)</span><br><span class="line">    String queryUserList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot使用Maven打包时减小jar包的大小方法</title>
      <link href="/2020/08/23/SpringBoot%E4%BD%BF%E7%94%A8Maven%E6%89%93%E5%8C%85%E6%97%B6%E5%87%8F%E5%B0%8Fjar%E5%8C%85%E7%9A%84%E5%A4%A7%E5%B0%8F%E6%96%B9%E6%B3%95/"/>
      <url>/2020/08/23/SpringBoot%E4%BD%BF%E7%94%A8Maven%E6%89%93%E5%8C%85%E6%97%B6%E5%87%8F%E5%B0%8Fjar%E5%8C%85%E7%9A%84%E5%A4%A7%E5%B0%8F%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>我在没使用maven插件压缩打包的时候，一个应用打包基本上100M以上，以我个人博客中的一个管理微服务模块来说，打包成功后生成的jar就123M左右。为此我搜索了下，研究如何减少jar包体积大小的方法，不料真还找到了。<br><a id="more"></a><br>步骤总结如下:</p><h3><span id="第一步添加插件">第一步添加插件</span></h3><p>maven对应的微服务模块中pom.xml增加如下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">      &lt;plugins&gt;</span><br><span class="line">          &lt;plugin&gt;</span><br><span class="line">              &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">              &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">              &lt;configuration&gt;</span><br><span class="line">                  &lt;mainClass&gt;com.springcloud.blog.admin.BlogAdminApplication&lt;/mainClass&gt;</span><br><span class="line">                  &lt;layout&gt;ZIP&lt;/layout&gt;</span><br><span class="line">                  &lt;includes&gt;</span><br><span class="line">                      &lt;include&gt;</span><br><span class="line">                          &lt;!-- 排除所有Jar --&gt;</span><br><span class="line">                        &lt;groupId&gt;nothing&lt;/groupId&gt;</span><br><span class="line">                          &lt;artifactId&gt;nothing&lt;/artifactId&gt;</span><br><span class="line">                      &lt;/include&gt;</span><br><span class="line">                  &lt;/includes&gt;</span><br><span class="line">              &lt;/configuration&gt;</span><br><span class="line">              &lt;executions&gt;</span><br><span class="line">                  &lt;execution&gt;</span><br><span class="line">                      &lt;goals&gt;</span><br><span class="line">                          &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class="line">                      &lt;/goals&gt;</span><br><span class="line">                  &lt;/execution&gt;</span><br><span class="line">              &lt;/executions&gt;</span><br><span class="line">          &lt;/plugin&gt;</span><br><span class="line">      &lt;/plugins&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/build&gt;</span><br></pre></td></tr></table></figure></p><h4><span id="第二步执行打包命令">第二步执行打包命令</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><h4><span id="第三步运行jar包">第三步运行jar包</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dloader.path=&quot;lib/&quot; -jar blog-admin-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>blog-admin-1.0-SNAPSHOT.jar是我自己的应用，改成你们对应的即可。</p><p>注意事项:<br>在此以前必须要把lib抽取出来，lib这个文件夹主要放jar包的(微服务框架所涉及的jar文件)。</p><p>那么如何打出这个lib来的，只需去除第一步的插件即可(也就是常规打包方式)，常规打包抽取lib后，再通过减少jar包体积的步骤来进行打包。</p><p>通常打出的jar，以我blog-admin这个应用为例，原本打出来的是123M(没有使用插件)，使用插件后打包是不到2M。</p><p>本文参考资料如下:<br><a href="https://blog.csdn.net/qq_42428264/article/details/107079961" target="_blank" rel="noopener">SpringBoot使用Maven打包时减小jar包的大小方法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot+oauth2.0异常重写处理(针对token失效)</title>
      <link href="/2020/08/23/springboot-oauth2-0%E5%BC%82%E5%B8%B8%E9%87%8D%E5%86%99%E5%A4%84%E7%90%86-%E9%92%88%E5%AF%B9token%E5%A4%B1%E6%95%88/"/>
      <url>/2020/08/23/springboot-oauth2-0%E5%BC%82%E5%B8%B8%E9%87%8D%E5%86%99%E5%A4%84%E7%90%86-%E9%92%88%E5%AF%B9token%E5%A4%B1%E6%95%88/</url>
      
        <content type="html"><![CDATA[<p>近来针对微服务框架开发，其中oauth2.0默认返回XML形式的token失效，不符合我们实际的开发需求，于是我参考网上一些博客重写了它,使其符合我们开发的需求。<br><a id="more"></a></p><p>核心主要涉及两个类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import com.eqics.common.security.utils.ResultJsonUtil;</span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.security.core.AuthenticationException;</span><br><span class="line">import org.springframework.security.oauth2.common.exceptions.InvalidTokenException;</span><br><span class="line">import org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">@Component</span><br><span class="line">public class AuthExceptionEntryPoint implements AuthenticationEntryPoint &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void commence(HttpServletRequest request, HttpServletResponse response,</span><br><span class="line">                         AuthenticationException authException) throws ServletException &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        Throwable cause = authException.getCause();</span><br><span class="line"></span><br><span class="line">        response.setStatus(HttpStatus.OK.value());</span><br><span class="line">        response.setHeader(&quot;Content-Type&quot;, &quot;application/json;charset=UTF-8&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            if (cause instanceof InvalidTokenException) &#123;</span><br><span class="line"></span><br><span class="line">                response.getWriter().write(ResultJsonUtil.build(</span><br><span class="line">                        222222,</span><br><span class="line">                        &quot;token失效&quot;</span><br><span class="line">                ));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ResourceServerConfig.java类中补充如下(找到主要方法):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void configure(ResourceServerSecurityConfigurer resources) &#123;</span><br><span class="line">    resources.tokenServices(tokenServices());</span><br><span class="line">    resources.authenticationEntryPoint(new AuthExceptionEntryPoint());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还有一个工具类ResultJsonUtil.java，内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">public class ResultJsonUtil&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private int code;</span><br><span class="line">    private int statusCode;</span><br><span class="line">    private String msg;</span><br><span class="line">    private T data;</span><br><span class="line"></span><br><span class="line">    private static final int DEFAULT_STATUS_CODE = 0;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * construction</span><br><span class="line">     *</span><br><span class="line">     * @param code       请求状态码</span><br><span class="line">     * @param statusCode 信息状态码</span><br><span class="line">     * @param msg        信息</span><br><span class="line">     * @param data       数据</span><br><span class="line">     */</span><br><span class="line">    public ResultJsonUtil(int code, int statusCode, String msg, T data) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.statusCode = statusCode;</span><br><span class="line">        this.msg = msg;</span><br><span class="line">        this.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String build(int code, int statusCode, String msg) &#123;</span><br><span class="line">        ResultJsonUtil&lt;String&gt; resultJsonUtil = new ResultJsonUtil&lt;&gt;(code, statusCode, msg, &quot;&quot;);</span><br><span class="line">        return resultJsonUtil.getResultJson();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String build(int code, String msg) &#123;</span><br><span class="line">        return ResultJsonUtil.build(code, ResultJsonUtil.DEFAULT_STATUS_CODE, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String build(int code, int statusCode, String msg, JSONArray data) &#123;</span><br><span class="line">        ResultJsonUtil&lt;JSONArray&gt; resultJsonUtil = new ResultJsonUtil&lt;&gt;(code, statusCode, msg, data);</span><br><span class="line">        return resultJsonUtil.getResultJson();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String build(int code, String msg, JSONArray data) &#123;</span><br><span class="line">        return ResultJsonUtil.build(code, ResultJsonUtil.DEFAULT_STATUS_CODE, msg, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static String build(int code, int statusCode, String msg, Map data) &#123;</span><br><span class="line">        JSONObject jsonObjectData = JSONObject.parseObject(JSON.toJSONString(data));</span><br><span class="line">        ResultJsonUtil&lt;JSONObject&gt; resultJsonUtil = new ResultJsonUtil&lt;&gt;(code, statusCode, msg, jsonObjectData);</span><br><span class="line">        return resultJsonUtil.getResultJson();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String build(int code, String msg, Map data) &#123;</span><br><span class="line">        return ResultJsonUtil.build(code, ResultJsonUtil.DEFAULT_STATUS_CODE, msg, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static String build(int code, int statusCode, String msg, List data) &#123;</span><br><span class="line">        JSONArray jsonArrayData = JSONArray.parseArray(JSON.toJSONString(data));</span><br><span class="line">        return ResultJsonUtil.build(code, statusCode, msg, jsonArrayData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String build(int code, String msg, List data) &#123;</span><br><span class="line">        return ResultJsonUtil.build(code, ResultJsonUtil.DEFAULT_STATUS_CODE, msg, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String getResultJson() &#123;</span><br><span class="line">        JSONObject jsonObject = new JSONObject();</span><br><span class="line">        jsonObject.put(&quot;code&quot;, this.code);</span><br><span class="line">        jsonObject.put(&quot;msg&quot;, this.msg);</span><br><span class="line">        return JSON.toJSONString(jsonObject, SerializerFeature.DisableCircularReferenceDetect);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>本文主要参考了这篇文章:<br><a href="https://www.cnblogs.com/bndong/p/10275430.html" target="_blank" rel="noopener">Spring Cloud：Security OAuth2 自定义异常响应</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Alibaba之Nacos</title>
      <link href="/2020/08/23/SpringCloud-Alibaba%E4%B9%8BNacos/"/>
      <url>/2020/08/23/SpringCloud-Alibaba%E4%B9%8BNacos/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-运行nacos">一、运行Nacos</span></h2><a id="more"></a><p>Nacos GitHub开源地址:<br><a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener">https://github.com/alibaba/nacos</a></p><p>Nacos 官方文档:<br><a href="https://nacos.io/zh-cn/docs/quick-start.html" target="_blank" rel="noopener">https://nacos.io/zh-cn/docs/quick-start.html</a></p><p>按照如下命令即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//克隆</span><br><span class="line">git clone https://github.com/alibaba/nacos.git</span><br><span class="line"></span><br><span class="line">//进入对应目录</span><br><span class="line">cd nacos/</span><br><span class="line"></span><br><span class="line">//打包</span><br><span class="line">mvn -Prelease-nacos -Dmaven.test.skip=true clean install -U  </span><br><span class="line"></span><br><span class="line">//查看对应目录</span><br><span class="line">ls -al distribution/target/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 进入打包成功生成的目录结构(我本地nacos是1.3.1,所以对应的$version就是1.3.1)</span><br><span class="line">cd distribution/target/nacos-server-$version/nacos/bin</span><br><span class="line"></span><br><span class="line">//运行(以我本地windows为例，如果是Linux的话，执行startup.sh脚本即可)</span><br><span class="line">startup.cmd</span><br></pre></td></tr></table></figure></p><h2><span id="二-修改配置文件将nacos的分布式配置存储改为mysql">二、修改配置文件将Nacos的分布式配置存储改为MySQL</span></h2><p>进入对应的目录:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd D:\GitHub-Project\project\nacos\distribution\conf</span><br></pre></td></tr></table></figure></p><p>修改application.properties文件，增加如下内容(对应的sql脚本在同一目录下，名字叫nacos-mysql.sql):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.platform=mysql</span><br><span class="line">db.num=1</span><br><span class="line">db.url.0=jdbc:mysql://127.0.0.1:3389/nacos-config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span><br><span class="line">db.user=root</span><br><span class="line">db.password=1234</span><br></pre></td></tr></table></figure></p><h2><span id="三-重新执行运行步骤中的打包操作一定要打包成功如果是遇到之前成功这次失败可能是配置文件写错的缘故">三、重新执行运行步骤中的打包操作(一定要打包成功，如果是遇到之前成功，这次失败，可能是配置文件写错的缘故)</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -Prelease-nacos -Dmaven.test.skip=true clean install -U</span><br></pre></td></tr></table></figure><h2><span id="四-运行成功的效果图默认用户名和密码均为nacosnacos">四、运行成功的效果图(默认用户名和密码均为nacos/nacos)</span></h2><p><img src="/2020/08/23/SpringCloud-Alibaba之Nacos/01.png" alt=""></p><h2><span id="五-nacos和eureka对比">五、Nacos和Eureka对比</span></h2><h3><span id="1配置中心对比">1.配置中心对比</span></h3><ul><li>Nacos支持且用起来简单，符合SpringBoot命名风格，支持动态刷新。</li><li>Eureka不支持(需要集成额外的SpringCloud Config组件)</li></ul><h3><span id="2注册中心对比">2.注册中心对比</span></h3><h4><span id="1eureka">(1)eureka</span></h4><ul><li>应用内/外:直接集成到应用中，依赖于应用自身完成服务的注册和发现</li><li>ACP原则:遵循AP（可用性+分离容忍)原则，有较强的可用性，服务注册快，但牺牲了一定的一致性</li><li>版本迭代:目前已经不再进行升级</li><li>集成支持:只支持SpringCloud集成</li><li>访问协议:HTTP</li><li>雪崩保护:支持雪崩保护</li><li>界面:英文界面，不符合国人习惯</li><li>上手:容易</li></ul><h4><span id="2nacos">(2)nacos</span></h4><ul><li>应用内/外:属于外部应用，侵入性小</li><li>ACP原则:通知遵循CP原则(一致性+分离容忍)和AP原则(可用性+分离容忍)</li><li>版本迭代:目前仍然进行版本迭代</li><li>集成支持:支持Dubbo、SpringCloud、K8S集成</li><li>访问协议:HTTP/动态DNS/UDP</li><li>雪崩保护:支持雪崩保护</li><li>界面:中文界面，符合国人习惯(可根据自己需求，中英文任意切换)</li><li>上手:极易，中文文档，案例，社区活跃</li></ul><p>关于我为什么选择Nacos而不选择Eureka，一方面我们的微服务框架是基于SpringCloud Alibaba的，如果直接切换，整个微服务框架根基都会有很大的动摇;另外一方面，Nacos目前已集成的正是我们所需要的如分布式配置、集群、服务注册和发现等;最后一方面，Nacos目前比Eureka版本迭代确实要活跃的多。</p><p>本文参考资料:<br><a href="https://nacos.io/zh-cn/docs/quick-start.html" target="_blank" rel="noopener">Nacos官方文档</a></p><p><a href="https://www.cnblogs.com/zhucww/p/11532770.html" target="_blank" rel="noopener">consul、eureka、nacos对比</a></p><p><a href="https://www.jianshu.com/p/afd7776a64c6" target="_blank" rel="noopener">nacos简介以及作为注册/配置中心与Eureka、apollo的选型比较</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA中导入项目后的main方法右键没有Run</title>
      <link href="/2020/08/07/IDEA%E4%B8%AD%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE%E5%90%8E%E7%9A%84main%E6%96%B9%E6%B3%95%E5%8F%B3%E9%94%AE%E6%B2%A1%E6%9C%89Run/"/>
      <url>/2020/08/07/IDEA%E4%B8%AD%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE%E5%90%8E%E7%9A%84main%E6%96%B9%E6%B3%95%E5%8F%B3%E9%94%AE%E6%B2%A1%E6%9C%89Run/</url>
      
        <content type="html"><![CDATA[<p>参考解决问题链接:<br><a href="https://blog.csdn.net/q15102780705/article/details/99686399" target="_blank" rel="noopener">IDEA中导入项目后的main方法右键没有Run</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea导入jar包的两种方法</title>
      <link href="/2020/08/07/Idea%E5%AF%BC%E5%85%A5jar%E5%8C%85%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2020/08/07/Idea%E5%AF%BC%E5%85%A5jar%E5%8C%85%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>参考解决问题链接:<br><a href="https://blog.csdn.net/Golden_soft/article/details/80952243" target="_blank" rel="noopener">Idea导入jar包的两种方法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Error:java: 无效的源发行版: 11</title>
      <link href="/2020/08/07/Error-java-%E6%97%A0%E6%95%88%E7%9A%84%E6%BA%90%E5%8F%91%E8%A1%8C%E7%89%88-11/"/>
      <url>/2020/08/07/Error-java-%E6%97%A0%E6%95%88%E7%9A%84%E6%BA%90%E5%8F%91%E8%A1%8C%E7%89%88-11/</url>
      
        <content type="html"><![CDATA[<p>参考解决办法链接:<br><a href="https://www.cnblogs.com/hui-run/p/11137296.html" target="_blank" rel="noopener">Error:java: 无效的源发行版: 11</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery之遍历</title>
      <link href="/2020/07/31/jQuery%E4%B9%8B%E9%81%8D%E5%8E%86/"/>
      <url>/2020/07/31/jQuery%E4%B9%8B%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>jQuery针对不同的对象遍历的方式是不一样的。<br><a id="more"></a><br>比分说对接API时，如果是下面这样的数据:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]</span><br></pre></td></tr></table></figure></p><p>这样的数据一看多个对象，无非就是数组，就需要使用for循环的方式进行遍历才能正常渲染，否则会出现拿不到对象里包含的具体值。</p><p>for循环遍历代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var historyEvents = result.result;</span><br><span class="line">            </span><br><span class="line">for (var i = 0; i &lt; historyEvents.length; i++) &#123;</span><br><span class="line">    console.log(historyEvents[i].date)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果是这样的数据:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[object Object]</span><br></pre></td></tr></table></figure></p><p>通过JSON.stringify(obj)解析，展示就是JSON数据。<br>面对这样的数据，直接使用$.each遍历的方法即可。<br>$.each循环遍历代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$.each(posts, function (i, post) &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cannot create resource output directory</title>
      <link href="/2020/07/28/Cannot-create-resource-output-directory/"/>
      <url>/2020/07/28/Cannot-create-resource-output-directory/</url>
      
        <content type="html"><![CDATA[<p>错误背景:<br>mvn clean package下报错<br><a id="more"></a><br>错误关键信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot create resource output directory</span><br></pre></td></tr></table></figure></p><p>错误原因:<br>有其它地方占用该资源。</p><p>解决办法:<br>关闭其它占用该资源的地方即可解决该问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL优化之博客案例</title>
      <link href="/2020/07/26/SQL%E4%BC%98%E5%8C%96%E4%B9%8B%E5%8D%9A%E5%AE%A2%E6%A1%88%E4%BE%8B/"/>
      <url>/2020/07/26/SQL%E4%BC%98%E5%8C%96%E4%B9%8B%E5%8D%9A%E5%AE%A2%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>问题背景:<br>博客首页随着数据量的增加，最初是几百上千的数据，访问正常，这是开发环境，当切换测试环境(通过爬虫已有数据六万多)，这时候访问非常缓慢，长达一分钟。<br><a id="more"></a></p><p>问题SQL:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">DISTINCT post.`ID` AS postId,post.`post_title`,post.`post_content`,post.`post_excerpt`,u.`display_name`,</span><br><span class="line">(SELECT IFNULL(GROUP_CONCAT(term.name),&apos;&apos;) FROM wp_term_relationships AS r LEFT JOIN wp_term_taxonomy AS t ON(r.term_taxonomy_id = t.term_taxonomy_id) LEFT JOIN wp_terms AS term ON(term.term_id = t.term_id)</span><br><span class="line">WHERE r.object_id = post.ID AND t.taxonomy = &apos;category&apos;) AS categoryName,</span><br><span class="line">(SELECT IFNULL(GROUP_CONCAT(term.name),&apos;&apos;) FROM wp_term_relationships AS r LEFT JOIN wp_term_taxonomy AS t ON(r.term_taxonomy_id = t.term_taxonomy_id) LEFT JOIN wp_terms AS term ON(term.term_id = t.term_id)</span><br><span class="line">WHERE r.object_id = post.ID AND t.taxonomy = &apos;post_tag&apos;) AS tagName,</span><br><span class="line">post.`comment_count`,post.`post_status`,post.`post_date`</span><br><span class="line">FROM wp_posts AS post</span><br><span class="line">LEFT JOIN wp_users AS u ON(post.`post_author` = u.`ID`)</span><br><span class="line">LEFT JOIN wp_term_relationships AS relation ON(relation.`object_id` = post.`ID`)</span><br><span class="line">LEFT JOIN wp_term_taxonomy AS taxonomy ON(taxonomy.`term_taxonomy_id` =relation.`term_taxonomy_id`)</span><br><span class="line">LEFT JOIN wp_terms AS term ON(term.`term_id` = taxonomy.`term_id`)</span><br><span class="line">WHERE post.`post_type` = &apos;post&apos;</span><br><span class="line">AND post.`post_status` IN (&apos;publish&apos;)</span><br><span class="line">ORDER BY post.`post_date` DESC</span><br><span class="line">LIMIT 0,10</span><br></pre></td></tr></table></figure></p><p>将这段sql放在sqlyog里执行，结果花费时间如下:<br>执行:59.204sec 总数:59.239 10行(仅仅显示10条数据)</p><p>优化后的SQL:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">            DISTINCT post.`ID` AS postId,post.`post_title`,post.`post_content`,post.`post_excerpt`,u.`display_name`,</span><br><span class="line">            (SELECT IFNULL(GROUP_CONCAT(term.name),&apos;&apos;) FROM wp_term_relationships AS r LEFT JOIN wp_term_taxonomy AS t ON(r.term_taxonomy_id = t.term_taxonomy_id) LEFT JOIN wp_terms AS term ON(term.term_id = t.term_id)</span><br><span class="line">            WHERE r.object_id = post.ID AND t.taxonomy = &apos;category&apos;) AS categoryName,</span><br><span class="line">            (SELECT IFNULL(GROUP_CONCAT(term.name),&apos;&apos;) FROM wp_term_relationships AS r LEFT JOIN wp_term_taxonomy AS t ON(r.term_taxonomy_id = t.term_taxonomy_id) LEFT JOIN wp_terms AS term ON(term.term_id = t.term_id)</span><br><span class="line">            WHERE r.object_id = post.ID AND t.taxonomy = &apos;post_tag&apos;) AS tagName,</span><br><span class="line">            post.`comment_count`,post.`post_status`,post.`post_date`</span><br><span class="line">            FROM ( SELECT * FROM wp_posts WHERE `post_type` = &apos;post&apos;  AND `post_status` IN (&apos;publish&apos;) ORDER BY  `post_date` DESC LIMIT 0,10 ) AS post</span><br><span class="line">            LEFT JOIN wp_users AS u ON(post.`post_author` = u.`ID`)</span><br><span class="line">            LEFT JOIN wp_term_relationships AS relation ON(relation.`object_id` = post.`ID`)</span><br><span class="line">            LEFT JOIN wp_term_taxonomy AS taxonomy ON(taxonomy.`term_taxonomy_id` =relation.`term_taxonomy_id`)</span><br><span class="line">            LEFT JOIN wp_terms AS term ON(term.`term_id` = taxonomy.`term_id`)</span><br></pre></td></tr></table></figure></p><p>将这段sql放在sqlyog里执行，结果花费时间如下:<br>执行:0.056sec 总数:0.288sec 10行(仅仅显示10条数据)</p><p>优化过后，直接是毫秒级。结果项目在测试环境下访问不卡了。</p><p>主要的改动把查询和过滤条件从最后面嵌入到主表的子查询里。</p><h3><span id="那么问题sql为什么会这么慢而优化过后的sql为什么会突然一下如此迅速到毫秒级呢">那么问题SQL为什么会这么慢？而优化过后的SQL为什么会突然一下如此迅速到毫秒级呢？</span></h3><p>先看问题一，为什么问题SQL会这么慢，问题SQL:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">          DISTINCT post.`ID` AS postId,post.`post_title`,post.`post_content`,post.`post_excerpt`,u.`display_name`,</span><br><span class="line">          (SELECT IFNULL(GROUP_CONCAT(term.name),&apos;&apos;) FROM wp_term_relationships AS r LEFT JOIN wp_term_taxonomy AS t ON(r.term_taxonomy_id = t.term_taxonomy_id) LEFT JOIN wp_terms AS term ON(term.term_id = t.term_id)</span><br><span class="line">          WHERE r.object_id = post.ID AND t.taxonomy = &apos;category&apos;) AS categoryName,</span><br><span class="line">          (SELECT IFNULL(GROUP_CONCAT(term.name),&apos;&apos;) FROM wp_term_relationships AS r LEFT JOIN wp_term_taxonomy AS t ON(r.term_taxonomy_id = t.term_taxonomy_id) LEFT JOIN wp_terms AS term ON(term.term_id = t.term_id)</span><br><span class="line">          WHERE r.object_id = post.ID AND t.taxonomy = &apos;post_tag&apos;) AS tagName,</span><br><span class="line">          post.`comment_count`,post.`post_status`,post.`post_date`</span><br><span class="line">          FROM wp_posts AS post</span><br><span class="line">          LEFT JOIN wp_users AS u ON(post.`post_author` = u.`ID`)</span><br><span class="line">          LEFT JOIN wp_term_relationships AS relation ON(relation.`object_id` = post.`ID`)</span><br><span class="line">          LEFT JOIN wp_term_taxonomy AS taxonomy ON(taxonomy.`term_taxonomy_id` =relation.`term_taxonomy_id`)</span><br><span class="line">          LEFT JOIN wp_terms AS term ON(term.`term_id` = taxonomy.`term_id`)</span><br><span class="line">          WHERE post.`post_type` = &apos;post&apos;</span><br><span class="line">          AND post.`post_status` IN (&apos;publish&apos;)</span><br><span class="line">          ORDER BY post.`post_date` DESC</span><br><span class="line">          LIMIT 0,10</span><br></pre></td></tr></table></figure></p><p>程序自上而下，从左到右执行，先SELECT 再LEFT JOIN 多个表，最后再WHERE 以及 ORDER BY 和 LIMIT，咋看一下也没有问题啊，但实际上很有问题。</p><p>问题分析？？？</p><ul><li>首先，我并没有使用SELECT * 而是列举我需要的字段。</li><li>使用explain 关键字看问题SQL,结果如下:<br><img src="/2020/07/26/SQL优化之博客案例/01.png" alt=""><br>以type字段为主要的来说，表扫描方式:system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;all，最慢的是all，也就是全表扫描。</li></ul><p>再看优化后的SQL:<br><img src="/2020/07/26/SQL优化之博客案例/02.png" alt=""></p><p>为了更好的比较它们究竟有何区别，需要理解explain获取参数的含义。</p><h4><span id="explain关键字含义">explain关键字含义</span></h4><h5><span id="1id">(1)id</span></h5><p>MySQL QueryOptimizer选定的执行计划中查询的序列号，表达查询中执行select子句或操作表顺序。id值越大优先级越高，优先级越高就会先被执行。id相同，执行顺序由上至下。</p><h5><span id="2select_type">(2)select_type</span></h5><ul><li>SIMPLE(简单的select查询(不使用union及子查询))</li><li>PRIMARY(最外层的select查询，如果两表存在则查询，则外层的表操作为PRIMARY,内层(子查询)的操作为SUBQUERY)</li><li>SUBQUERY(子查询中首个SELECT(如果有多个子查询存在)，不依赖于外层的表。除from子句中包含的子查询外，其他地方出现的子查询都可能是SUBQUERY)/DEPENDENT SUBQUERY(子查询中首个SELECT(如果有多个子查询存在)，就依赖于外层的表)</li></ul><h5><span id="3table">(3)table</span></h5><p>输出行所引用的表。显示的查询表名，如果查询使用了别名，那么这里显示的是别名，如果不涉及对数据表的操作，那么这显示为null，如果显示为尖括号括起来的<derived n="">就表示这个是临时表，后边的N就是执行计划的id，表示结果来自这个查询产生。如果是尖括号括起来的<union m,n="">，与<derived n="">类似，也是一个临时表，表示这个结果来自于union查询的id为M,N的结果集。</derived></union></derived></p><h5><span id="4type">(4)type</span></h5><p>从优到差的顺序如下:system-&gt;const-&gt;eq_ref-&gt;ref-&gt;fulltext-&gt;ref_or_null-&gt;index_merge-&gt;unique_subquery-&gt;index_subquery-&gt;range-&gt;index-&gt;all<br>一般来说，开发人员写的SQL基本要求是eq_ref级别。</p><h5><span id="5possible_keys">(5)possible_keys</span></h5><p>指出能再该表中使用哪些索引有助于查询，查询可能使用的索引都会再这里列出来。如果为空，说明没有可用的索引。</p><h5><span id="6key">(6)key</span></h5><p>实际从possible_key选择使用的索引，如果为null，则没有使用索引。select_type为index_merge时，这里可能出现两个以上的索引，其他的select_type这里只会出现一个。很少的情况下，MySQL会选择优化不足的索引。这种情况下，可以再SELECT语句中使用USE INDEX来强制使用一个索引或者用IGNORE INDEX来强制MySQL忽略索引。</p><h5><span id="7key_len">(7)key_len</span></h5><p>用于处理查询的索引长度，再不损失精确性的情况下，长度越短越好。如果是单列索引，那就整个索引长度算进去，如果是多列索引，那么查询不一定都能使用到所有的列，具体使用了多少个列的索引，这里就会计算进去，没有使用的列，这里不会计算进去。key_len只计算where条件用到的索引长度，而排序和分组就算用到了索引，也不会计算到ken_len中。</p><h5><span id="8ref">(8)ref</span></h5><p>显示索引的哪一列被使用。如果使用的常数等值查询，这里会显示const，如果是连接查询，被驱动表的执行计划这里会显示驱动表的关联字段，如果条件使用了表达式或者函数，或者条件列发生内部隐式转换，这里可能会显示func。</p><h5><span id="9rows">(9)rows</span></h5><p>认为必须检查的用来返回请求数据的行数，即需要扫描的次数。</p><h5><span id="10extra">(10)extra</span></h5><p>这个列可以显示的信息很，如果出现Using filesort、Using temporary两项意味着不能使用索引，效率会受到重大影响。应尽可能对其进行优化。</p><ul><li>distinct:在select部分使用了distinct关键字</li><li>using filesort:排序时无法使用到索引时，就会出现这个。常见于order by 和group by语句中。没有办法利用现有索引进行排序，需要额外排序，建议:根据排序需要，创建相应合适的索引。</li><li>using index:查询时不需要回表查询，直接通过索引就可以获取查询的数据。利用覆盖索引，无需回表即可取得结果数据，这种结果是好的。</li><li>using temporay:表示使用了临时表存储中间结果。</li><li>using where:表示存储引擎返回的记录并不是所有的都满足查询条件，需要在server层进行过滤。</li></ul><p>理解完explain后，用explain重要参数来解释这段问题SQL:<br>即key、type 、rows、extra。<strong>以其中的rows来看，该段sql执行之初直接就扫描28386次数。而优化后的SQL仅仅扫描10次，由此可知慢在该地方，针对次进行修改。这是问题SQL慢的根本原因。</strong></p><p>但最后我发现优化后的SQL还算很冗余，因为作为首页展示，其实没必要这么多表关联，如果是查看详情的话还可以通过拆分，然后分段执行即可。</p><p>最终首页SQL如下(也相当于另外一种解法，优化为单表):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">DISTINCT post.`ID` AS postId,post.`post_title`,post.`post_content`,post.`post_excerpt`,</span><br><span class="line">(SELECT `display_name` FROM wp_users WHERE ID = post_author) AS display_name, </span><br><span class="line">post.`comment_count`,post.`post_status`,post.`post_date` </span><br><span class="line">FROM  wp_posts AS post</span><br><span class="line">WHERE `post_type` = &apos;post&apos;  AND `post_status` IN (&apos;publish&apos;)</span><br><span class="line">ORDER BY  `post_date` DESC</span><br><span class="line">LIMIT 0,10</span><br></pre></td></tr></table></figure></p><p>另外除此之外，归档查询也是用的这段SQL,这样一来也需要优化，于是我将其分离写成不同的DAO，针对性优化(如果不优化，数据量过大也会有问题)。</p><p>问题SQL(归档,消耗8.183sec):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">            DISTINCT post.`ID` AS postId,post.`post_title`,post.`post_content`,post.`post_excerpt`,u.`display_name`,</span><br><span class="line">            post.`comment_count`,post.`post_status`,post.`post_date`</span><br><span class="line">            FROM ( SELECT * FROM wp_posts WHERE `post_type` = &apos;post&apos;  AND `post_status` IN (&apos;publish&apos;) </span><br><span class="line">AND DATE_FORMAT(`post_date`, &apos;%Y年%m月&apos;) = &apos;2020年06月&apos;            </span><br><span class="line">            ORDER BY  `post_date` DESC LIMIT 0,10 ) AS post</span><br><span class="line">            LEFT JOIN wp_users AS u ON(post.`post_author` = u.`ID`)</span><br></pre></td></tr></table></figure></p><p>问题SQL再度优化(这次执行时间是55.496sec):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">            DISTINCT post.`ID` AS postId,post.`post_title`,post.`post_content`,post.`post_excerpt`,u.`display_name`,</span><br><span class="line">            post.`comment_count`,post.`post_status`,post.`post_date`</span><br><span class="line">            FROM ( SELECT * FROM wp_posts WHERE `post_type` = &apos;post&apos;  AND `post_status` IN (&apos;publish&apos;) </span><br><span class="line">AND DATE_FORMAT(`post_date`, &apos;%Y年%m月&apos;) = &apos;2020年06月&apos;            </span><br><span class="line">            ORDER BY  `post_date` DESC LIMIT 0,10 ) AS post</span><br><span class="line">            LEFT JOIN wp_users AS u ON(post.`post_author` = u.`ID`)</span><br></pre></td></tr></table></figure></p><p>最终优化版:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">           DISTINCT post.`ID` AS postId,post.`post_title`,post.`post_content`,post.`post_excerpt`,</span><br><span class="line">           (SELECT `display_name` FROM wp_users WHERE ID = post_author) AS display_name,</span><br><span class="line">            post.`comment_count`,post.`post_status`,post.`post_date` </span><br><span class="line">           FROM wp_posts AS post WHERE ID IN </span><br><span class="line">           (SELECT `ID` FROM wp_posts  WHERE `post_type` = &apos;post&apos; AND `post_status` IN (&apos;publish&apos;) AND DATE_FORMAT(`post_date`, &apos;%Y年%m月&apos;) =  &apos;2020年06月&apos;  ORDER BY `post_date` DESC)</span><br><span class="line">           LIMIT 0,10</span><br></pre></td></tr></table></figure></p><p>这个优化版本，我的思路是归档抽取为一个子查询条件查询和排序获取ID，获取ID这段SQL是毫秒级，然后再在外层LIMIT即可。</p><h3><span id="通用规律和方法">通用规律和方法</span></h3><ul><li>通过explain关键字理解SQL走向和慢的原因(explain中的id可以了解sql是如何执行的)</li><li>学会拆分，一分为二写(以查看文章详情为例，可分为两部分，一部分为获取详情，另外一部分获取文章对应的分类或标签，这样一来sql基本上都可以确保为eq_ref级别且毫秒级)</li><li>合理使用子查询(例如归档这部分查id，拿获取的id作为where查询条件，背后的原理走主键索引，那么为什么主键索引快，因为主键索引比普通索引快是因为主键索引只检索一次)</li></ul><p>以上述方法为例，解决数据量大分页性能问题(解决博客系统点击尾页加载慢问题(本质上还是SQL原因，优化了下，主要利用主键索引))，优化后的代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT post.`ID` AS postId,post.`post_title`,post.`post_content`,post.`post_excerpt`,</span><br><span class="line">(SELECT `display_name` FROM wp_users WHERE ID = post_author) AS display_name, post.`comment_count`,post.`post_status`,post.`post_date` </span><br><span class="line">FROM wp_posts AS post JOIN (SELECT ID FROM wp_posts WHERE `post_type` = &apos;post&apos; AND `post_status` IN (&apos;publish&apos;) LIMIT 2340,10) AS post_b ON(post.ID = post_b.ID) </span><br><span class="line">WHERE `post_type` = &apos;post&apos; AND `post_status` IN (&apos;publish&apos;)  ORDER BY `post_date` DESC</span><br></pre></td></tr></table></figure></p><h3><span id="faq">FAQ</span></h3><h4><span id="为什么sql查询缓慢">为什么SQL查询缓慢？</span></h4><p>通常可归纳为如下:</p><ul><li>没有索引或没有用到索引</li><li>I/O吞吐量小</li><li>内存不足</li><li>网络速度慢</li><li>查询出的数据量过大</li><li>锁或死锁</li><li>返回不必要的行和列</li></ul><p>以我本次为例，首页之所以慢，是因为最开始那段SQL扫描行数大。等到扫描完后再关联表，再子查询。</p><p>而优化过后的扫描行数仅仅就10行，然后再关联再子查询。</p><p>两者的区别是前者是全部扫描一遍再关联再条件，后者直接根据条件过滤再关联。</p><h4><span id="子查询内嵌查询的执行过程是什么">子查询(内嵌查询)的执行过程是什么？</span></h4><p>由内向外处理，对应本文举的首页文章优化语句。</p><h4><span id="为什么sql查单个字段不分页同样也是六万条数据消耗时间却是毫秒级">为什么SQL查单个字段不分页同样也是六万条数据，消耗时间却是毫秒级？</span></h4><p>因为IO的消耗(输入/输出)，输出数据量大会导致吞吐量小(吞吐量与磁盘、CPU、内存相关)。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Drools之规则中级语法</title>
      <link href="/2020/07/14/Drools%E4%B9%8B%E8%A7%84%E5%88%99%E4%B8%AD%E7%BA%A7%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/07/14/Drools%E4%B9%8B%E8%A7%84%E5%88%99%E4%B8%AD%E7%BA%A7%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-package说明">一、package说明</span></h2><p>package是定义在规则文件首行的，也是规则文件三大模块之一。<br>package为规则逻辑路径，定义时可不与物理目录相同，但为了更方便管理，强烈建议与物理目录同步。<br>package包含import、global、function、query、rule、EOF。<br>其rule是贯穿整个规则文件的核心，介绍的pattern、运行符、约束连接、规则属性等都是rule中的内容。</p><p>介绍package时不得不再次说明kmodule.xml配置，当配置文件中的KieBase设置package路径，则当前路径下的所有规则相关文件(规则文件、决策表、领域语言文件等)都会被加入规则库中，但当前路径下子文件夹的规则相关文件不包含在当前规则库中。</p><p>package参数本身是一个命名空间，并且不以任何方式关联文件或文件夹。因此，可以由多个规则目录为规则库构建源组合规则，有一个顶级的package配置，所有的规则都在其控制之下(在组合规则时)。虽然声明在不同名称下的资源不可能合并为同一个包，但是单个规则库可以用多个包来构建它。也就是说，packages可以设置多个路径，并通过逗号分隔，但这是对配置文件packages而言的。</p><h2><span id="二-global全局变量">二、global全局变量</span></h2><p>全局变量是一个很有用的元素节点，它是通过关键字global class(对象类型) name组成的。class可以任意的，能为规则提供操作数据或服务等功能，特别是在规则RHS部分中使用程序提供的服务功能，如在RHS部分添加日志功能、修改数据表、发送E-mail等。</p><p>global全局变量与Fact(事实)对象不同，不会因为值变化而影响到规则的再次激活。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Drools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《跟小贤学运营》之从初级到高阶，运营的进阶之路</title>
      <link href="/2020/07/14/%E3%80%8A%E8%B7%9F%E5%B0%8F%E8%B4%A4%E5%AD%A6%E8%BF%90%E8%90%A5%E3%80%8B%E4%B9%8B%E4%BB%8E%E5%88%9D%E7%BA%A7%E5%88%B0%E9%AB%98%E9%98%B6%EF%BC%8C%E8%BF%90%E8%90%A5%E7%9A%84%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/"/>
      <url>/2020/07/14/%E3%80%8A%E8%B7%9F%E5%B0%8F%E8%B4%A4%E5%AD%A6%E8%BF%90%E8%90%A5%E3%80%8B%E4%B9%8B%E4%BB%8E%E5%88%9D%E7%BA%A7%E5%88%B0%E9%AB%98%E9%98%B6%EF%BC%8C%E8%BF%90%E8%90%A5%E7%9A%84%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-读懂高阶运营岗位看看自己离它有多远">一、读懂高阶运营岗位，看看自己离它有多远</span></h2><h3><span id="1初级运营和高阶运营的区别">1.初级运营和高阶运营的区别</span></h3><p>不管是初级运营还算高阶运营，我们都有3个共同的目标:<strong>拉新、留存、促活。</strong></p><h4><span id="初级运营与高阶运营的能力区别">初级运营与高阶运营的能力区别</span></h4><ul><li>初级运营:技能单一、思维局限、信息无效、人脉缺乏、资源少、价值非显著。</li><li>高阶运营:技能多样、思维发散、信息优质、人脉丰富、资源多、价值显著。</li></ul><h3><span id="2高阶运营是一种怎样的工作体验">2.高阶运营是一种怎样的工作体验</span></h3><p>以阿里的高阶运营(休闲生活类)工作为例，需要做如下几个方面？</p><ul><li>用户运营:拉新、留存、唤醒、分层等。</li><li>服务者运营:招募、关系维护、成长体系等。</li><li>内容运营:建设长期稳定和高质量的内容输送体系、自媒体运营等。</li><li>活动运营:线上/线下的活动策划、执行、推广等。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之组件耦合</title>
      <link href="/2020/07/13/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E7%BB%84%E4%BB%B6%E8%80%A6%E5%90%88/"/>
      <url>/2020/07/13/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E7%BB%84%E4%BB%B6%E8%80%A6%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-无依赖原则">一、无依赖原则</span></h2><p><strong>组件依赖关系图不应该出现环。</strong></p><p>我们一定有过这样的经历:</p><p>当你花了一整天的时间，好不容易搞定了一段代码，第二天上班时却发现这段代码莫名其妙地又不能工作。这通常是因为有人在你走后修改了你所依赖的某个组件。这种情况叫做”一觉醒来综合症”。<br><a id="more"></a></p><p>这种综合症的主要病因是:</p><p>多个程序员同时修改了同一个源代码文件。虽然在规模相对较小、人员较少的项目中，这种问题或许并不严重，但是随着项目的增长，研发人员的增加，这种每天早上刚上班时都要经历一遍的痛苦就会越来越多。甚至会严重到让有的团队在长达数周的时间内都不能发布一个稳定的项目版本，因为每个人都在不停地修改自己的代码，以适应其他人所提交的变更。</p><p>针对上述问题逐渐演化出两种解决方案。一种是”每周构建”，另一种是”无依赖环原则”。</p><h3><span id="1每周构建">1.每周构建</span></h3><p>每周构建方案是中小型项目中很常见的一种管理手段。其具体做法如下:在每周的前四天中，让所有的程序员在自己的私有库上工作，忽略其他人的修改，也不考虑互相之间的集成问题;然后在每周五要求所有人将自己所做的变更提交，进行统一构建。</p><p>上述方案确实可以让程序员们每周都有四天的时间放手干活。然而一到星期五，所有人都必须要花费大量的精力来处理前四天留下来的问题。</p><p>随着项目越来越大，每周五的集成工作会越来越难以按时完成。而随着集成任务越来越重，周六的加班也会变得越来越频繁。经历过几次这样的加班之后，就会有人提出应该将集成任务提前到星期四开始，就这样一步一步地集成工作慢慢地就要占用掉差不多半周的时间。</p><p>事实上，这个问题最终还会造成更大的麻烦。因为如果我们想要保持高效率的开发，就不能频繁地进行构建操作，但是如果我们减少了构建的次数，延长了项目被构建的时间间隔，又会影响到该项目的质量，增大它的风险。整个项目会变得越来越难以构建与测试，团队反馈周期会越来越长，研发质量自然也会越来越差。</p><h3><span id="2消除循环依赖">2.消除循环依赖</span></h3><p>对于上述情景，我们的解决办法是将研发项目划分为一些可单独发布的组件，这些组件可以交由单人或者某一组程序员来独立完成。当有人或团队完成某个组件的某个版本时，他们就会通过发布机制通知其他程序员，并给该组件打一个版本号，放入一个共享目录。这样一来，每个人都可以依赖于这些组件公开发布的版本来进行开发，而组件开发者则可以继续去修改自己的私有版本。</p><p>每当一个组件发布新版本时，其他依赖这个组件的团队都可以自主决定是否立即采用新版本。若不采用，该团队可以选择继续使用旧版组件，直到他们准备采用新版本为止。</p><p>这样就不会出现团队之间相互依赖的情况了。任何一个组件上的变更都不会立刻影响到其他团队。每个团队都可以自主决定是否立即集成自己所依赖组件的新版本。更重要的是，这种方法使我们的集成工作能以一种小型渐进的方式来进行。程序员们再也不需要集中在一起，统一集成相互的变更了。</p><p>如你所述，上述整个过程既简单又很符合逻辑，因而得到各个研发团队的广泛采用。但是，如果想要成功推广这个开发流程，就必须控制好组件之间的依赖结构，绝对不能允许结构中存在着循环依赖关系。如果某项目结构中存在着循环依赖关系，那么”一觉醒来综合症”不可避免。</p><h2><span id="二-自上而下的设计">二、自上而下的设计</span></h2><p>根据上述讨论，我们可以得出一个无法逃避的结论:<strong>组件架构图是不可能自上而下被设计出来的。它必须随着软件系统的变化而变化和扩张，而不可能在系统构建的最初就被完美设计出来。</strong></p><p>组件结构图中的一个重要目标是指导如何隔离频繁的变更。我们不希望哪些频繁变更的组件影响到其他本来应该很稳定的组件，例如，我们通常不会希望无关紧要的GUI变更影响到业务逻辑组件;我们也不希望对报表的增删操作影响到其高阶策略。出于这样的考虑，软件架构师们才有必要设计并且铸造出一套组件依赖关系图来，以便将稳定的高价值组件与常变得组件隔离开，从而起到保护作用。</p><p>另外，随着应用程序的增长，创建可重用组件的需要也会逐渐重要起来。这时共同复用原则又会开始影响组件的组成。最后当循环依赖出现时，随着无循环依赖原则的应用，组件依赖关系会产生相应的抖动和扩张。</p><p>如果我们在设计具体类之前就来设计组件依赖关系，那么几乎是必然要失败的。因为在当下，我们对项目中的共同闭包一无所知，也不可能知道哪些组件可以复用，这样几乎一定会创造出循环依赖的组件。因此，组件依赖关系是必须要随着项目逻辑设计一起扩张和演进的。</p><h2><span id="三-稳定依赖原则">三、稳定依赖原则</span></h2><p><strong>依赖关系必须要指向更稳定的方向。</strong></p><p>设计这件事情不可能是完全静止的，如果我们要让一个设计是可维护性的，那么其中某些部分就必须可变的。</p><p>通过共同闭包原则(CCP)，我们可以创造出对某些变更敏感，对其他变更不敏感的组件。</p><p>任何一个我们预期会经常变更的组件都不应该被一个难于修改的组件所依赖，否则这个多变的组件也将会变得非常难以被修改。</p><h3><span id="1稳定性">1.稳定性</span></h3><p>软件组件的变更困难度与很多因素有关，例如代码的体量大小、复杂度、清晰度等。这里我们暂时忽略这些，只集中讨论一个特别因素，那就是让软件组件难以修改的一个最直接的办法就是让很多其他组件依赖于它。带有许多入向依赖关系的组件是非常稳定的，因为它的任何变更都需要应用到所有依赖它的组件上。</p><h3><span id="2稳定性指标">2.稳定性指标</span></h3><ul><li>Fan-in：入向依赖，这个指标指代了组件外部类依赖于组件内部类的数量。</li><li>Fan-out：出向依赖，这个指标指代了组件内部类依赖于组件外部类的数量。</li><li>I：不稳定性，I=Fan-out/(Fan-in+Fan-out)。改指标的范围是[0,1],I=0意味着组件是最稳定的，I=1意味着组件是最不稳定的。</li></ul><p>当I指标等于1时，说明没有组件依赖当前组件(Fan-in=0)，同时该组件却依赖于其他组件(Fan-out&gt;0)。这是组件最不稳定的一种情况，我们认为这种组件是”不负责的、对外依赖的”。由于这个组件没有被其他组件依赖，所以自然也就没有力量会干预它的变更，同时也因为该组件依赖于其他组件，所以就必然会经常需要变更。</p><p>相反，当I=0的时候，说明当前组件是其他组件所依赖的目标(Fan-in&gt;0)，同时其自身并不依赖任何其他组件(Fan-out=0)。我们通常认为这样的组件是”负责的、不对外依赖的”。这是组件最具稳定性的一种情况，其他组件对它的依赖关系会导致这个组件很难被变更，同时由于它没有对外依赖关系，所以不会有来自外部的变更理由。</p><p>稳定依赖原则(SDP)的要求是让每个组件的I指标都必须大于其所依赖组件的I指标。也就是说，组件结构依赖图中各组件的I指标必须要按其依赖关系方向递减。</p><h3><span id="3并不是所有组件都应该是最稳定的">3.并不是所有组件都应该是最稳定的</span></h3><p>如果一个系统中的所有组件都处于最高稳定性状态，那么系统就一定无法再进行变更了，这显然不是我们想要的。事实上，我们设计组件架构图的目的就是要决定让哪些组件最稳定，让哪些组件不稳定。</p><h3><span id="4抽象组件">4.抽象组件</span></h3><p>抽象组件通常会非常稳定，可以被那些相对不稳定的组件依赖。</p><h2><span id="四-稳定抽象原则">四、稳定抽象原则</span></h2><p><strong>一个组件的抽象化程度应该与其稳定性保持一致。</strong></p><h3><span id="1高阶策略应该放在哪里">1.高阶策略应该放在哪里</span></h3><p>在一个软件系统中，总有些部分是不应该经常发生变更的。这些部分通常用于表现该系统的高阶架构设计及一些策略相关的高阶决策。</p><p><strong>如何才能让一个无限稳定的组件(I=0)接受变更呢？</strong><br>开闭原则(OCP)为我们提供了答案。这个原则告诉我们:创造一个足够灵活、能够被扩展，而且不需要修改的类是可能的，而这正是我们所需要的。</p><p><strong>哪一种类符合这个原则呢？</strong><br>答案是抽象类。</p><h3><span id="2稳定抽象原则简介">2.稳定抽象原则简介</span></h3><p>稳定抽象原则(SAP)为组件的稳定性与它的抽象化程度建立了一种关联。一方面，该原则要求稳定的组件同时应该是抽象的，这样它的稳定性就不会影响到扩展性。另一方面，该原则也要求一个不稳定的组件应该包含具体的实现代码，这样它的不稳定性就可以通过具体的代码被轻易修改。</p><h3><span id="3衡量抽象化程度">3.衡量抽象化程度</span></h3><ul><li>Nc：组件中类的数量。</li><li>Na：组件中抽象类和接口的数量。</li><li>A：抽象程度，A=Na/Nc。</li></ul><p>A指标的取值范围是从0到1，值为0代表组件中没有任何抽象类，值为1就意味着组件中只有抽象类。</p><h3><span id="4主序列">4.主序列</span></h3><p>不可能所有的组件都能处于这两个位置上(0,1)和(1,0)组件通常都有各自的稳定程度和抽象化程度。</p><h3><span id="5痛苦区">5.痛苦区</span></h3><p>假设某个组件处于(0,0)位置，那么它应该是一个非常稳定但也非常具体的组件。这样的组件在设计上是不佳的，因为它很难被修改，这意味着该组件不能被扩展。这样一来，因为这个组件不是抽象的，而且它又由于稳定性的原因变得特别难以被修改，我们并不希望一个设计良好的组件贴近这个区域，因此(0,0)周围的这个区域被我们称为痛苦区。</p><h3><span id="6无用区">6.无用区</span></h3><p>靠近(1,1)这一位置点的组件。该位置上的组件不会是我们想要的，因为这些组件通常是无限抽象的，但是没有被其他组件依赖，这样的组件往往无法使用。因此我们将这个区域称为无用区。</p><h3><span id="7避开这两个区域">7.避开这两个区域</span></h3><p>在整条主序列线上，组件所能处于最优的位置是线的两端。一个优秀的软件架构师应该争取将自己设计的大部分组件尽可能地推向这两个位置。然而，以我的个人经验来说，大型系统中的组件不可能做到完全抽象，也不可能做到完全稳定。所以我们只要追求让这些组件位于主序列线上，或者贴近这条线即可。</p><h3><span id="8离主序列线的距离">8.离主序列线的距离</span></h3><p>如果让组件位于或者靠近主序列是可取的目标，那么我们就可以创建一个指标来衡量一个组件距离最佳位置的距离。</p><ul><li>D指标:距离D=|A+I-1|，该指标的取值范围是[0,1]。值为0意味着组件是直接位于主序列线上的，值为1则意味着组件在距离主序列最远的位置。</li></ul><p>通过计算每个组件的D指标，就可以量化一个系统设计与主序列的契合程度了。另外，我们也可以用D指标大于0多少来指导组件的重构与重新设计。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Drools之关键字及错误信息</title>
      <link href="/2020/07/13/Drools%E4%B9%8B%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF/"/>
      <url>/2020/07/13/Drools%E4%B9%8B%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-关键字说明">一、关键字说明</span></h2><p>Drools规则引擎有硬关键字和软关键字之分。<br><a id="more"></a><br>硬关键字为被保留，命名相关定义时，如对象、属性、方法、函数和应用于规则文本中的其他元素，编辑规则内容时不能使用硬关键字作为命名规范。硬关键字主要包括true、false、null。</p><p>编写规则时，一定要注意软关键字不像硬关键字那么强制，软关键字相比硬关键字要多，如果非要使用软关键字作为命名是没有问题的。</p><p>软关键字有:lock-on-active、date-effective、date-expires、no-loop、auto-focus、activation-group、agenda-group、ruleflow-group、entry-point、duration、package、import、dialec、salience、enabled、attributes、rule、extend、template、query、declare、function、global、eval、not、in、or、and、exists、forall、action、reverse、result、end、init等。</p><p>DRL语言的另一个改进是可以在规则文本中转移硬关键字。这个功能可以在编辑规则内容时减少使用关键字所带来的语法错误。编写规则内容时只需将当前关键字进行转义即可，如Holiday(‘when’==”july”)，只需”‘“符号括起来就可以解决语法错误问题。</p><p>规则内容的任何地方都可以使用转义，但不包含LHS或RHS代码块中表达参数的代码。</p><h2><span id="二-错误信息">二、错误信息</span></h2><p>Drools5以后引入了一个标准化的错误信息。标准化的目的在于更快、更容易帮助用户发现和解决问题。</p><p>1st Block:指错误代码。</p><p>2nd Block:指行列。</p><p>3rd Block:描述问题。</p><p>4th Block:指发生错误的规则名、函数、模板、查询等。</p><p>5th Block:指发生错误的pattern。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Drools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Drools之规则属性</title>
      <link href="/2020/07/13/Drools%E4%B9%8B%E8%A7%84%E5%88%99%E5%B1%9E%E6%80%A7/"/>
      <url>/2020/07/13/Drools%E4%B9%8B%E8%A7%84%E5%88%99%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-属性no-loop">一、属性no-loop</span></h2><p>默认值:false<br>类型:Boolean<br>属性说明:防止死循环，当规则通过update之类的函数修改了Fact对象时，可能使规则再次被激活，从而导致死循环。将no-loop设置为true的目的是避免当前规则then部分被修改后的事实对象再次被激活，从而防止死循环的发生。<br><a id="more"></a></p><h2><span id="二-属性ruleflow-group">二、属性ruleflow-group</span></h2><p>默认值:N/A<br>类型:String<br>属性说明:ruleflow-group分为rule、flow和group3个部分，分别代表规则、流程、分组，即常说的规则流。</p><h2><span id="三-属性lock-on-active">三、属性lock-on-active</span></h2><p>默认值:false<br>类型:Boolean<br>属性说明:lock-on-active是指”锁定活跃”。既然它是规则体的属性，那一定是锁定规则的，而且是锁定活跃的规则。简单地说，当规则体设置该属性为true时，则当前只会被触发一次。当ruleflow-group或agenda-group再次被激活时，即使在规则体中设置lock-on-active为true,该规则体也不能再次被激活，即无论如何更新规则事实对象，当前规则也只能被触发一次。这是no-loop的升级版，一个更强大的解决死循环的属性。</p><h2><span id="四-属性salience">四、属性salience</span></h2><p>默认值:0<br>类型:integer<br>属性说明:规则体被执行的顺序，每一个规则都有一个默认的执行顺序，如果不设置salience属性，规则体的执行顺序为由上到下。salience值可以是一个整数，但也可以是一个负数，其值越大，执行顺序越高，排名越靠前。Drools还支持动态配置优先级。</p><h2><span id="五-属性enabled">五、属性enabled</span></h2><p>默认值:true<br>类型:Boolean<br>属性说明:指规则是否可以被执行，若规则体设置为enabled false,则规则体将视为永久不被激活。</p><h2><span id="六-属性dialect">六、属性dialect</span></h2><p>可能值:Java或Mvel。<br>类型:String。<br>属性说明:用来定义规则中要使用的语言类型，支持Mvel和Java两种类型语言，默认情况下由包指定的。Java语言在特殊情况下会用到，如Ac-cumulate、引用Java中的语法等。</p><h2><span id="七-属性date-effective">七、属性date-effective</span></h2><p>默认值:N/A<br>类型:String、日期、时间。<br>属性说明:只有当前系统时间大于等于设置的时间或日期，规则才会被激活。在没有设置该属性的情况下，规则体不受时间限制。date-effective的值是一个日期型的字符串，默认情况下，date-effective可接受的日期格式为”dd-MM-yyyy”。</p><h2><span id="八-属性date-expires">八、属性date-expires</span></h2><p>默认值:N/A<br>类型:String、日期、时间。<br>属性说明:date-expires属性与date-effective属性是相反的，即只有当前系统时间小于设置的时间或日期，规则才会被激活。在没有设置该属性的情况下，规则体不受时间限制。date-expires的值为一个日期型的字符串，默认情况下，date-expires可接受的日期格式为”dd-MMM-yyyy”。</p><h2><span id="九-属性duration">九、属性duration</span></h2><p>默认值:无。<br>类型:long。<br>属性说明:表示定时器，如果当前规则LHS部分为true，那么规则继续执行;如果该属性已经被弃用，那么通过新的属性timer来控制。</p><h2><span id="十-属性activation-group">十、属性activation-group</span></h2><p>默认值:N/A。<br>类型:String。<br>属性说明:activation-group是指激活分组，通过字符串定义分组名称，具有相同组名称的规则体有且只有一个规则被激活，其他规则体的LHS部分仍然为true也不会被执行。该属性受salience属性影响，如当前规则文件中的其他规则未设计该属性，则视为规则处于被激活状态，并不受该属性的影响。</p><h2><span id="十一-属性agenda-group">十一、属性agenda-group</span></h2><p>默认值:无，需要通过Java设置。<br>类型:String。<br>属性说明:agenda-group是议程分组，属于另一种可控的规则执行方式，是指用户可以通过配置agenda-group的参数来控制规则的执行，而且只有获取焦点的规则才会被激活。</p><h2><span id="十二-属性auto-focus">十二、属性auto-focus</span></h2><p>默认值:false。<br>类型:Boolean。<br>属性说明:auto-focus属性为自动获取焦点，即当前规则是否被激活。如果一个规则被执行，那么认为auto-focus为true;如果单独设置，一般结合agenda-group，当一个议程组未获取焦点时，可以设置auto-focus来控制。</p><h2><span id="十三-属性timer">十三、属性timer</span></h2><p>默认值:无。<br>类型:与Java定时器参数类型相似。<br>属性说明:timer属性是一个定时器，用来控制规则的执行时间。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Drools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《跟小贤学运营》之带你走进真实的运营</title>
      <link href="/2020/07/13/%E3%80%8A%E8%B7%9F%E5%B0%8F%E8%B4%A4%E5%AD%A6%E8%BF%90%E8%90%A5%E3%80%8B%E4%B9%8B%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E7%9C%9F%E5%AE%9E%E7%9A%84%E8%BF%90%E8%90%A5/"/>
      <url>/2020/07/13/%E3%80%8A%E8%B7%9F%E5%B0%8F%E8%B4%A4%E5%AD%A6%E8%BF%90%E8%90%A5%E3%80%8B%E4%B9%8B%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E7%9C%9F%E5%AE%9E%E7%9A%84%E8%BF%90%E8%90%A5/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-带你走进真实的运营">一、带你走进真实的运营</span></h2><a id="more"></a><h3><span id="1应坚定选择做运营的3个理由">1.应坚定选择做运营的3个理由</span></h3><h4><span id="a运营开始被行业高度认可">a.运营开始被行业高度认可</span></h4><p>互联网+</p><h4><span id="b1年顶3年快速实现5个方向上的能力积累">b.1年顶3年，快速实现5个方向上的能力积累</span></h4><p>以腾讯的产品运营岗为例，如果想做好腾讯QQ公众平台的产品运营，至少需要对如下5个方向上的能力做到快速积累:</p><ul><li>品牌PR能力</li><li>用户运营能力</li><li>数据分析能力</li><li>市场分析能力</li><li>基础业务能力</li></ul><h4><span id="c个人品牌塑造成为斜杆青年">c.个人品牌塑造成为”斜杆青年”</span></h4><p>斜杆青年定义:他们不满足单一职业和身份的束缚，而是选择一种能够拥有多重职业和多重身份的多元生活。</p><h3><span id="2运营从业者的3条职业路径">2.运营从业者的3条职业路径</span></h3><p>找工作发展方向，最简单有效的方式:<br>看看同行前辈的职业发展。</p><h4><span id="a专业通道p序列">a.专业通道:P序列</span></h4><p>适合只想做安静美男(女)子的从业者，做好手头上的事情，不用参与团队的管理工作。</p><p>发展路径:运营专员-&gt;高级运营-&gt;运营主管-&gt;项目经理-&gt;高级项目经理</p><p>以大型互联网公司百度为例，专业通道职级从P1到P12:<br>P3-&gt;运营专员:能够在指导下完成运营工作即可。<br>P4-&gt;高级运营:需要能够独立完成领导安排的运营项目。<br>P5-&gt;运营主管:需要能发现产品存在的运营缺失，需要发起一个项目并且完成。</p><p>总之，数字越大，对运营的能力要求越高，相应地对公司的贡献也要越大。</p><h4><span id="b管理通道m序列">b.管理通道:M序列</span></h4><p>如果你走的是P序列的职业发展通道，做到项目经理后就可以把一部分工作分配给组员完成，但总的来说走P序列职级再高也还是要亲自操刀做运营。</p><p>你如果不喜欢一直做具体的执行工作，那么可以走M序列的管理职业发展通道。</p><p>M序列的职业发展路径如下:</p><p>运营专员-&gt;高级运营-&gt;运营经理(副)-&gt;运营经理-&gt;高级运营经理(副)-&gt;高级运营经理-&gt;运营总监(副)-&gt;运营总监-&gt;高级总监(副)-&gt;高级总监-&gt;CMO(首席运营官)</p><p>一线互联网企业，会有统一的管理岗位职级标准:<br>M1(M1a,M1b)、M2(M2a,M2b)、M3(M3a,M3b)、M4、M5等等。</p><h4><span id="c其他通道转岗or创业">c.其他通道:转岗or创业</span></h4><p>管理通道晋升:<br>职业目标-&gt;我要去哪儿?<br>下一级岗位要求-&gt;有哪些路径?<br>个人发展计划-&gt;要怎么去？</p><h5><span id="1选定职业发展通道">(1)选定职业发展通道</span></h5><p>清晰了解自己当前水平，选定前进的目标，目标设定的过程中要符合SMART原则(具体的、可衡量、可实现、相关性、有时限)</p><h5><span id="2明确上一级岗位的能力要求">(2)明确上一级岗位的能力要求</span></h5><p>熟知上一级岗位要求，将其设为自己的短期的任务方向。</p><h5><span id="3制定学习工作计划">(3)制定学习工作计划</span></h5><p>30%学习，70%实践内化知识</p><h3><span id="3企业都需要的4类运营">3.企业都需要的4类运营</span></h3><h4><span id="a无处不在的内容运营">a.无处不在的内容运营</span></h4><h5><span id="1什么是内容运营">(1)什么是内容运营</span></h5><p>内容运营是指通过创造、编辑、组织、呈现网站内容，从而提高互联网产品的内容价值，制造出对用户的粘性、活跃、消费产生一定促进作用的运营。</p><p>通过内容为用户服务的有:<br>电商的商品信息、门户热点的时事、企业的业务动态、政府的最新政策、搜索引擎的检索结果、论坛的话题板块等。</p><h5><span id="2内容运营的工作职责">(2)内容运营的工作职责</span></h5><p>具体可参考相关的招聘网站要求(可去拉勾、Boss上看)</p><p>这里引入小贤的看法:<br>需要能够通过规划、采集、创作、审核、编辑、包装、呈现、推送、输出等常规手段，对产品中的图片、文字、视频、音频4大内容类型进行影响和加工，进而达到产品内容运营的目的。</p><h5><span id="3内容运营的工作流程">(3)内容运营的工作流程</span></h5><p>内容运营作为产品中的内容服务提供者，将它进一步细分的话包含4个角色:内容编辑、内容运营、内容品牌、内容输出。</p><p>都遵守内容运营的基础工作流程:<br>负责生产/采集内容、通过筛选、专题策划、自动推荐、内容推送等。</p><p>内容生产与采集:内容生产和采集可以简单理解为内容的编辑，运营可以是PGC(自己编辑内容)，也可以是UGC(发动用户参与内容生产)的形式，以及通过采集站外优质内容进行二次加工的形式来生产内容。</p><p>内容审核与呈现:内容的审核就是内容质量的评估，什么样的内容可以进入产品内容库以及是否可以进入精选推荐。</p><p>内容包装和推广:为了更好地利用内容来提升产品活动度和新的用户流量，运营人员需要周期性地对产品内的优质内容进行深度包装。</p><h5><span id="4内容运营常用的4种手段">(4)内容运营常用的4种手段</span></h5><ul><li>内容专题策划</li><li>内容消息推送</li><li>内容智能推荐</li><li>内容站外输出</li></ul><p>内容运营和内容创业如何区分？<br>内容运营是面向互联网产品，基于产品用内容为用户提供更好的服务;<br>内容创业则面向的是用户，资本对它们的估值等同于内容本身的价值计算。</p><h4><span id="b逼你剁手的活动运营">b.逼你”剁手”的活动运营</span></h4><h5><span id="1什么是活动运营">(1)什么是活动运营</span></h5><p>活动运营是指针对不同目的、不同性质的活动进行的运营，包含策划、准备、实施、复盘。</p><h5><span id="2活动运营的工作职责">(2)活动运营的工作职责</span></h5><p>活动运营的工作职责按照提升的目标数据可分为下面五类:</p><ul><li>引新:通过渠道和用户邀请，新增注册量/App下载量。</li><li>转化:提升新用户购买率。</li><li>促活:大幅度提升平台交易量。</li><li>重复购买:老用户购买，提升客单价。</li><li>品牌:资产包装，扩大品牌知名度和辨识度。</li></ul><p>提升销售额的运营公式:活跃用户量x转化量x客单价</p><h5><span id="3活动运营的工作流程">(3)活动运营的工作流程</span></h5><p>作为运营，想要高效地进行活动策划与执行，需要构建属于自己的活动运营框架。</p><ul><li>明确活动目的及量化的指标<br>产品用户数据:<br>1)产品用户总量<br>2)产品活跃用户总量<br>3)产品留存率(含次日、3日、7日留存)<br>4)产品的用户平均在线时长<br>产品业务数据:<br>1)总付费人数/新增付费人数<br>2)客单价<br>3)销售额/利润</li></ul><ul><li>实现目标的活动方式(采用什么激励手段刺激用户参与活动，在有限的活动预算下怎样尽可能多的让用户参与进来，以达到我们运营的目的)</li><li>撰写活动策划案(撰写活动策划案就是对活动完整思路的梳理过程，它包含活动背景、主题、目标、产品、时间、预算、推广计划、需要配合的部门(技术/产品/设计)等基本信息)</li><li>MRD与UI设计</li><li>产品立项/技术开发</li><li>活动推广与物料准备</li><li>活动页面测试</li><li>每日数据分析</li><li>活动复盘</li></ul><p>上面九个步骤，是做一名合格活动运营人员的基本要求。做活动除了要控制好成本，达到预期的交易量，还得做出新花样、高水平。</p><h5><span id="4活动用户常见的四种噱头">(4)活动用户常见的四种噱头</span></h5><p>1)借热点<br>2)时效性<br>3)公司动态<br>4)原生造节</p><h4><span id="c非常有爱的用户运营">c.非常有爱的用户运营</span></h4><h5><span id="1什么是用户运营">(1)什么是用户运营</span></h5><p>用户运营是实现某种运营目的的一种与用户相关度最强的思维方式，在这种思维方式影响下进而做出可执行的策略组合。</p><p>运营的目的:引新、留存、促活、消费转化。</p><p>用户思维:为实现某种业务目的在思考具体运营策略时，会优先从用户角度出发，也就是说用户运营为实现拉新目的，第一时间想到的不应是渠道运营的广告投放，而是想着如何利用产品现有的用户去做拉新。</p><p>策略组合:在用户思维下实现某种运营目的的策略是多样的。</p><h5><span id="2用户运营的工作职责">(2)用户运营的工作职责</span></h5><p>1)了解用户，通过对用户的问卷调查和访谈、数据分析了解产品的用户行为情况，知道产品内的用户之间的连接关系，找到其中的特色用户和KOL用户。</p><p>2)管理用户,根据用户行为数据进行分层管理，为每一层级的用户行为预警机制。</p><p>3)活跃用户，除了日常的用户行为管理，还需要根据不同性质和层级的用户利用不同的运营手段(活动、社群、推送等)来提升用户活跃度。</p><p>4)规模化用户，根据用户需求在产品内创建固态的用户场景，让属性相近的用户在该场景下聚集，形成特定层级用户的规模化，同时调动规模化用户进行场景的站外传播。</p><h5><span id="3用户运营决策模式和4种常见用户运营策略">(3)用户运营决策模式和4种常见用户运营策略</span></h5><p>用户决策模型:</p><ul><li>A度:产品/积分体系</li><li>B度:活动策划</li><li>C度:社群管理</li><li>D度:定向推送</li></ul><p>用户运营策略:</p><ul><li>社群策略(也叫用户集中运营)</li><li>推送策略</li><li>活动策略</li><li>产品策略</li></ul><h5><span id="4微信群管理算不算用户运营">(4)微信群管理算不算用户运营</span></h5><p>微信群管理属于用户运营的一种集中运营策略，策略本身是对的，但它不算用户运营。</p><h4><span id="d很会花钱的品牌运营">d.很会花钱的品牌运营</span></h4><h5><span id="1什么是品牌运营">(1)什么是品牌运营</span></h5><p>品牌运营是指通过挖掘产品的品牌符号，在产品的生命周期内整合营销策划、创意、传播、新媒体、商家/货品，线上&amp;线下联动营销，使用户形成对企业品牌和产品的认知。</p><h5><span id="2品牌运营的常用手段">(2)品牌运营的常用手段</span></h5><p>品牌的运营者们通过”接触-认知-认识-认可”的流程对用户行为产生影响，要完成这个过程，具体来说包含这4个方向的工作:事件营销、Social营销、PR营销、广告投放。</p><p>事件营销:一个小范围的营销活动引起网友自发热议与效仿，如2015年的冰桶挑战。</p><p>Social营销:在微信、微博、知乎等社交平台形成病毒式的传播，网友也按预期的设计完成了品牌互动。</p><p>PR传播:挖掘产品相关新闻点，引起媒体的关注与主动传播，并非买媒体PR。</p><p>广告投放:传统意义上的渠道购买，如地铁广告、电视广告、DSP投放等。</p><h5><span id="3品牌运营的工作流程">(3)品牌运营的工作流程</span></h5><p>要传递什么样的品牌，如何去做品牌的创意包装才是运营人员的工作关键。我理解的正确品牌运营工作流程应该是这样:</p><ul><li>明确产品品牌形象(明确产品的品牌形象，也就是想让用户认为这是一款怎样的产品)</li><li>用实物阐述品牌形象(让用户看什么才能让他们感知这个品牌)</li><li>做品牌包装创意筛选(将第二步品牌形象包装种想到的创意，结合想要传递的品牌形象做减法，选出最优的阐述形象方案，当然也要考虑可操作性和成本)</li><li>品牌传播物料准备(为最终采用的方案准备品牌传播所需要的素材)</li><li>品牌传播执行(好的执行就是用前期准备的素材，让产品的品牌在某一个时间段，非常集中地通过各种形式展示在用户面前)</li><li>复盘第二次传播(在运营过程中有意识地挖掘品牌传播中的互动亮点，收集各个渠道的传播数据，方便后期复盘总结使用)</li></ul><h5><span id="4品牌运营与市场公关的区别">(4)品牌运营与市场公关的区别</span></h5><ul><li>品牌运营是从产品有意思的点出发去做传播，市场公关部则是从传播出发去挖产品的点，有时候市场部人员为了配合传播需要，会在产品上创造一个可以传播的点。</li><li>品牌运营本质上还是运营，80%的时间是在跟产品打交道;反观市场公关部，更多还是做传播渠道的管理。</li></ul><h3><span id="4选择运营岗位的决策流程">4.选择运营岗位的决策流程</span></h3><p>消费者购买行为模型-购买决策流程:</p><ul><li>确认需求</li><li>信息收集</li><li>商品评估</li><li>决策购买</li><li>购后行为</li></ul><h4><span id="1信息收集">(1)信息收集</span></h4><p>信息下决策的依据，你在做出选择哪一家公司的运营岗的决定之前，可以通过搜索与提问的方式收集相关信息。</p><h4><span id="2评估岗位">(2)评估岗位</span></h4><p>在掌握了较全面的信息后，我们需要根据这些信息，来对比不同企业不同方向的运营岗位，对企业所提供的岗位做出一个好与不好的评价。在评估时，可以从创业团队、部门直属领导、行业方向、工作内容、薪资报酬、投资机构、其他福利等7个维度进行。</p><h3><span id="5运营和产品的4种暧昧关系">5.运营和产品的4种”暧昧”关系</span></h3><h4><span id="1运营与产品各自为政">(1)运营与产品各自为政</span></h4><p>人力紧缺、需要团结协作的创业感受基本上不会有这种各自为政的运营与产品关系，这种关系比较容易出现在产品用户规模大的成熟产品中，类似豆瓣、知乎、QQ、贴吧、YY语音这种千亿级别的产品。</p><p>这种关系下的运营与产品，容易出现相互抢活、工作重叠的现象。要想让产品支持你的运营工作，有3种方法:</p><ul><li>第一种，做项目立项让公司高层来安排;</li><li>第二种，利用产品的KPI来做运营;</li><li>第三种，私底下处理好跟产品人员的关系，也就是人缘要好;</li></ul><h4><span id="2产品生孩子运营养孩子">(2)产品生孩子，运营养孩子</span></h4><p>产品人员把东西做出来，运营人员帮忙推广，是非常纯粹的前后关系，运营在产品设计阶段参与得非常少。这种关系，容易出现在公司的快速发展期，产品人员忙于新功能的设计，运营人员疲于用户的拉新，虽然缺乏沟通，但是每个人都能够得到快速成长，各取所需。</p><p>这种关系下的运营人员与产品人员，基本没什么矛盾，就是对运营人员而言推广需求偶尔会来得突然，运营人员积极性容易被消磨，推广做到出色比较难。</p><p>如果你刚好是这样的运营处境，我的建议是:<br>提前周知产品规划(可提前做好相应的推广准备)。<br>或者是设置一套运营需求流程，让产品人员提前安排推广需求。</p><h4><span id="3有共同的kpi目标">(3)有共同的KPI目标</span></h4><p>当运营跟产品被明确地指定为同一KPI负责时，他们的关系会更加紧密，产品人员在设计阶段也会提前告诉运营人员，并且会适当地按照运营人员的建议调整产品，但整体来说是一个产品主导的关系。</p><p>这种关系下的运营人员与产品人员，容易出现抢功局面，毕竟没有明确地规定哪些是运营工作、哪些属于产品范畴。但总的来说，荣辱育公，完成KPI才是关键，老板只关心这一点。</p><h4><span id="4深入合作">(4)深入合作</span></h4><p>深入合作一般意味着成立由运营人员和产品人员组成的项目组，并选定项目负责人。他们明确彼此的分工，在产品人员写需求文档阶段，运营人员就拥有足够的话语权，产品人员也会安排人力专门收集运营需求。他们不仅有共同的KPI，也会经常开会，汇报彼此的工作进度，了解对方能否满足自己在某个节点的关键需求。</p><h3><span id="6运营新人应该知道的10条建议">6.运营新人应该知道的10条建议</span></h3><ul><li>归零低姿态，放下过去的成绩</li><li>不要只做我告诉你的事</li><li>创业公司运营，自我价值寻找</li><li>多看、多学、多做</li><li>多总结多写，写出来的才是你的</li><li>细心、责任心，靠谱</li><li>向上沟通，借力领导做项目排期</li><li>分享信息，广积人脉</li><li>少说多做，思考清楚再出发</li><li>互帮互助做好人际交往</li></ul><h3><span id="7运营请用正确心态走进创业公司">7.运营请用正确心态走进创业公司</span></h3><ul><li>坚信跟对人比做对事更重要</li><li>别过度在乎别人的评价</li><li>运营心态的6个关键词(学习、多做、思考、极致、创新、负责)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js实现美化json数据格式</title>
      <link href="/2020/07/11/js%E5%AE%9E%E7%8E%B0%E7%BE%8E%E5%8C%96json%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/"/>
      <url>/2020/07/11/js%E5%AE%9E%E7%8E%B0%E7%BE%8E%E5%8C%96json%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-核心方法代码">一、核心方法代码</span></h2><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//json格式美化</span><br><span class="line">function prettyFormat(str) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        // 设置缩进为2个空格</span><br><span class="line">        str = JSON.stringify(JSON.parse(str), null, 2);</span><br><span class="line">        str = str</span><br><span class="line">            .replace(/&amp;/g, &apos;&amp;amp;&apos;)</span><br><span class="line">            .replace(/&lt;/g, &apos;&amp;lt;&apos;)</span><br><span class="line">            .replace(/&gt;/g, &apos;&amp;gt;&apos;);</span><br><span class="line">        return str.replace(/(&quot;(\\u[a-zA-Z0-9]&#123;4&#125;|\\[^u]|[^\\&quot;])*&quot;(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) &#123;</span><br><span class="line">            var cls = &apos;number&apos;;</span><br><span class="line">            if (/^&quot;/.test(match)) &#123;</span><br><span class="line">                if (/:$/.test(match)) &#123;</span><br><span class="line">                    cls = &apos;key&apos;;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    cls = &apos;string&apos;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else if (/true|false/.test(match)) &#123;</span><br><span class="line">                cls = &apos;boolean&apos;;</span><br><span class="line">            &#125; else if (/null/.test(match)) &#123;</span><br><span class="line">                cls = &apos;null&apos;;</span><br><span class="line">            &#125;</span><br><span class="line">            return &apos;&lt;span class=&quot;&apos; + cls + &apos;&quot;&gt;&apos; + match + &apos;&lt;/span&gt;&apos;;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">        alert(&quot;异常信息:&quot; + e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="二-函数调用">二、函数调用</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#show&quot;).html(&quot;&lt;pre&gt;&quot; + prettyFormat(data) + &quot;&lt;/pre&gt;&quot;);</span><br></pre></td></tr></table></figure><h2><span id="三-html中引用">三、html中引用</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;show&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js实现复制功能</title>
      <link href="/2020/07/11/js%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/"/>
      <url>/2020/07/11/js%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>应用场景:<br>最近我做的一个在线工具网站(参考现在的JSON网站做的)，其中有一个功能叫做JSON格式化和校验，通过复制JSON数据点击格式化后，得到美化的JSON数据，再点击按钮”复制”就能获取美化后JSON数据。<br><a id="more"></a></p><p>核心代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function selectText(element) &#123;</span><br><span class="line">    var text = document.getElementById(element);</span><br><span class="line"></span><br><span class="line">    if (document.body.createTextRange) &#123;</span><br><span class="line">        //createTextRange是用在IE中的</span><br><span class="line">        var range = document.body.createTextRange();</span><br><span class="line">        range.moveToElementText(text);</span><br><span class="line">        range.select();</span><br><span class="line">    &#125; else if (window.getSelection) &#123;</span><br><span class="line">        var selection = window.getSelection();</span><br><span class="line">        var range = document.createRange();</span><br><span class="line">        range.selectNodeContents(text);</span><br><span class="line">        selection.removeAllRanges();</span><br><span class="line">        selection.addRange(range);</span><br><span class="line">        document.execCommand(&quot;Copy&quot;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        alert(&quot;none&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之组件聚合</title>
      <link href="/2020/07/10/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E7%BB%84%E4%BB%B6%E8%81%9A%E5%90%88/"/>
      <url>/2020/07/10/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E7%BB%84%E4%BB%B6%E8%81%9A%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-复用发布原则">一、复用/发布原则</span></h2><p><strong>软件复用的最小粒度应等同于其发布的最小粒度。</strong><br><a id="more"></a><br>从软件设计与架构设计的角度来看，复用/发布原则就是指组件中的类与模块必须是彼此紧密相关的。也就是说，一个组件不能由一组毫无关联的类和模块组成，它们之间应该有一个共同的主题或者大方向。</p><p>从另一个角度来看，这个原则就没有那么简单。因为根据该原则，一个组件中包含的类与模块还应该是可以同时发布的。这意味着它们共享相同的版本号与版本跟踪，并且包含在相同的发行文档中，这些都应该同时对该组件的作者和用户有意义。</p><h2><span id="二-共同闭包原则">二、共同闭包原则</span></h2><p>我们应该将那些会同时修改，并且为相同目的而修改的类放到同一个组件中，而将不会同时修改，并且不会为了相同目的而修改的那些类放到不同的组件中。</p><p>共同闭包原则的主要作用:<br>提示我们要将所有可能会被一起修改的类集中在一处。也就是说，如果两个类紧密相关，不管是源代码层面还是抽象理念层面，永远都会一起被修改，那么它们就应该被归属为同一个组件。通过遵守这个原则，我们就可以有效地降低因软件发布、验证及部署所带来的工作压力。</p><p>共同闭包原则和开闭原则也是紧密相关的。共同闭包原则讨论的就是开闭原则中所指的”闭包”。开闭原则认为一个类应该便于扩展，而抗拒修改。由于100%的闭包是不可能的，所以我们只能战略性地选择闭包范围。在设计类的时候，我们需求根据历史经验和预测能力，尽可能地将需要被一同变更的那些点聚合在一起。</p><p>对于共同闭包原则，我们还可以在此基础上做进一步的延伸，即可以将某一类变更所涉及的所有类尽量聚合在一处。这样当此类变更出现时，我们就可以最大限度地做到使该类变更只影响到有限的相关组件。</p><p>共同闭包原则实际上是单一职责原则的组件版。在单一职责原则的指导下，我们将会把变更原因不同的函数放入不同的类中。而共同闭包原则指导我们应该将变更原因不同的类放入不同的组件中。简而言之，这两个原则都可以用下面一句话来概括:<br><strong>将由于相同原因而修改，并且需要同时修改的东西放在一起。将由于不同原因而修改，并且不同时修改的东西分开。</strong></p><h2><span id="三-共同复用原则">三、共同复用原则</span></h2><p><strong>不要强迫一个组件的用户依赖他们不需要的东西。</strong></p><p>共同复用原则是另外一个帮助我们决策类和模块归属于哪一个组件的原则。该原则建议我们将经常共同复用的类和模块放在同一个组件中。</p><p>通常情况下，类很少会被单独复用。更常见的情况是多个类同时作为某个可复用的抽象定义被共同复用。CRP原则指导我们将这些类放在同一个组件中，而在这样的组件中，我们应该预见到会存在许多相互依赖的类。</p><p>共同复用原则的作用不仅是告诉我们应该将哪些类放在一起，更重要的是要告诉我们应该将哪些类分开。因为每当一个组件引用另一个组件时，就等于增加了一条依赖关系。虽然这个引用关系仅涉及被引用组件中的一个类，但它所带来的依赖关系丝毫没有减弱。也就是说，引用组件已然依赖于被引用组件了。</p><p>由于这种依赖关系的存在，每当被引用组件发生变更时，引用它的组件一般也需要做出相应的变更。即使它们不需要进行代码级的变更，一般也免不了需要被重新编译、验证和部署。哪怕引用组件根本不关心被引用组件中的变更，也要如此。</p><p>因此，当我们决定要依赖某个组件时，最好是实际需要依赖该组件中的每个类。换句话说，我们希望组件中的所有类是不能拆分的，即不应该出现别人只需要依赖它的某几个类而不需要其他类的情况。否则，我们后续就会浪费不少时间与精力来做不必要的组件部署。</p><p>因此在共同复用原则中，关于哪些类不应该被放在一起的建议是其更为重要的内容。简而言之，共同复用原则实际上是指导我们:不要紧密相连的类不应该被放在同一个组件里。</p><p>共同复用原则实际上是接口隔离原则的一个普适版。接口隔离原则建议我们不要依赖带有不需要的函数的类，而共同复用原则则是建议我们不要依赖带有不需要的类的组件。</p><p>上述两条建议实际上都可以用下面一句话来概括:<br><strong>不要依赖不需要用到的东西。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之组件</title>
      <link href="/2020/07/09/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E7%BB%84%E4%BB%B6/"/>
      <url>/2020/07/09/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>组件是软件的部署单元，是整个软件系统在部署过程中可以独立完成部署的最小实体。<br><a id="more"></a><br>例如:<br>对于Java来说，它的组件是jar文件。而在Ruby中，它们是gem文件。在.Net中，它们则是DLL文件，组件则是一组源代码文件的集合。无论采用什么编程语言来开发软件，组件都是该软件在部署过程中的最小单元。</p><p>我们可以将多个组件链接成一个独立可执行文件，也可以将它们汇总成类似.war文件这样的部署单元，又或者，组件也可以被打包成.jar、.dll或者.exe文件，并以可动态加载的插件形式来独立部署。但无论采用哪种部署形式，设计良好的组件都应该保持可被独立部署的特性，这同时也意味着这些组件应该可以被单独开发。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js实现导出word</title>
      <link href="/2020/07/08/js%E5%AE%9E%E7%8E%B0%E5%AF%BC%E5%87%BAword/"/>
      <url>/2020/07/08/js%E5%AE%9E%E7%8E%B0%E5%AF%BC%E5%87%BAword/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-两个js文件filesaverjs和jquerywordexportjs">一、两个js文件(FileSaver.js和jquery.wordexport.js)</span></h2><a id="more"></a><p>FileSaver.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line">/* FileSaver.js</span><br><span class="line"> * A saveAs() FileSaver implementation.</span><br><span class="line"> * 1.3.2</span><br><span class="line"> * 2016-06-16 18:25:19</span><br><span class="line"> *</span><br><span class="line"> * By Eli Grey, http://eligrey.com</span><br><span class="line"> * License: MIT</span><br><span class="line"> *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/*global self */</span><br><span class="line">/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */</span><br><span class="line"></span><br><span class="line">/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */</span><br><span class="line"></span><br><span class="line">var saveAs = saveAs || (function (view) &#123;</span><br><span class="line">    &quot;use strict&quot;;</span><br><span class="line">    // IE &lt;10 is explicitly unsupported</span><br><span class="line">    if (typeof view === &quot;undefined&quot; || typeof navigator !== &quot;undefined&quot; &amp;&amp; /MSIE [1-9]\./.test(navigator.userAgent)) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    var</span><br><span class="line">        doc = view.document</span><br><span class="line">        // only get URL when necessary in case Blob.js hasn&apos;t overridden it yet</span><br><span class="line">        , get_URL = function () &#123;</span><br><span class="line">            return view.URL || view.webkitURL || view;</span><br><span class="line">        &#125;</span><br><span class="line">        , save_link = doc.createElementNS(&quot;http://www.w3.org/1999/xhtml&quot;, &quot;a&quot;)</span><br><span class="line">        , can_use_save_link = &quot;download&quot; in save_link</span><br><span class="line">        , click = function (node) &#123;</span><br><span class="line">            var event = new MouseEvent(&quot;click&quot;);</span><br><span class="line">            node.dispatchEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">        , is_safari = /constructor/i.test(view.HTMLElement)</span><br><span class="line">        , is_chrome_ios = /CriOS\/[\d]+/.test(navigator.userAgent)</span><br><span class="line">        , throw_outside = function (ex) &#123;</span><br><span class="line">            (view.setImmediate || view.setTimeout)(function () &#123;</span><br><span class="line">                throw ex;</span><br><span class="line">            &#125;, 0);</span><br><span class="line">        &#125;</span><br><span class="line">        , force_saveable_type = &quot;application/octet-stream&quot;</span><br><span class="line">        // the Blob API is fundamentally broken as there is no &quot;downloadfinished&quot; event to subscribe to</span><br><span class="line">        , arbitrary_revoke_timeout = 1000 * 40 // in ms</span><br><span class="line">        , revoke = function (file) &#123;</span><br><span class="line">            var revoker = function () &#123;</span><br><span class="line">                if (typeof file === &quot;string&quot;) &#123; // file is an object URL</span><br><span class="line">                    get_URL().revokeObjectURL(file);</span><br><span class="line">                &#125; else &#123; // file is a File</span><br><span class="line">                    file.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            setTimeout(revoker, arbitrary_revoke_timeout);</span><br><span class="line">        &#125;</span><br><span class="line">        , dispatch = function (filesaver, event_types, event) &#123;</span><br><span class="line">            event_types = [].concat(event_types);</span><br><span class="line">            var i = event_types.length;</span><br><span class="line">            while (i--) &#123;</span><br><span class="line">                var listener = filesaver[&quot;on&quot; + event_types[i]];</span><br><span class="line">                if (typeof listener === &quot;function&quot;) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        listener.call(filesaver, event || filesaver);</span><br><span class="line">                    &#125; catch (ex) &#123;</span><br><span class="line">                        throw_outside(ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        , auto_bom = function (blob) &#123;</span><br><span class="line">            // prepend BOM for UTF-8 XML and text/* types (including HTML)</span><br><span class="line">            // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF</span><br><span class="line">            if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) &#123;</span><br><span class="line">                return new Blob([String.fromCharCode(0xFEFF), blob], &#123;type: blob.type&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            return blob;</span><br><span class="line">        &#125;</span><br><span class="line">        , FileSaver = function (blob, name, no_auto_bom) &#123;</span><br><span class="line">            if (!no_auto_bom) &#123;</span><br><span class="line">                blob = auto_bom(blob);</span><br><span class="line">            &#125;</span><br><span class="line">            // First try a.download, then web filesystem, then object URLs</span><br><span class="line">            var</span><br><span class="line">                filesaver = this</span><br><span class="line">                , type = blob.type</span><br><span class="line">                , force = type === force_saveable_type</span><br><span class="line">                , object_url</span><br><span class="line">                , dispatch_all = function () &#123;</span><br><span class="line">                    dispatch(filesaver, &quot;writestart progress write writeend&quot;.split(&quot; &quot;));</span><br><span class="line">                &#125;</span><br><span class="line">                // on any filesys errors revert to saving with object URLs</span><br><span class="line">                , fs_error = function () &#123;</span><br><span class="line">                    if ((is_chrome_ios || (force &amp;&amp; is_safari)) &amp;&amp; view.FileReader) &#123;</span><br><span class="line">                        // Safari doesn&apos;t allow downloading of blob urls</span><br><span class="line">                        var reader = new FileReader();</span><br><span class="line">                        reader.onloadend = function () &#123;</span><br><span class="line">                            var url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, &apos;data:attachment/file;&apos;);</span><br><span class="line">                            var popup = view.open(url, &apos;_blank&apos;);</span><br><span class="line">                            if (!popup) view.location.href = url;</span><br><span class="line">                            url = undefined; // release reference before dispatching</span><br><span class="line">                            filesaver.readyState = filesaver.DONE;</span><br><span class="line">                            dispatch_all();</span><br><span class="line">                        &#125;;</span><br><span class="line">                        reader.readAsDataURL(blob);</span><br><span class="line">                        filesaver.readyState = filesaver.INIT;</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                    // don&apos;t create more object URLs than needed</span><br><span class="line">                    if (!object_url) &#123;</span><br><span class="line">                        object_url = get_URL().createObjectURL(blob);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (force) &#123;</span><br><span class="line">                        view.location.href = object_url;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        var opened = view.open(object_url, &quot;_blank&quot;);</span><br><span class="line">                        if (!opened) &#123;</span><br><span class="line">                            // Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html</span><br><span class="line">                            view.location.href = object_url;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    filesaver.readyState = filesaver.DONE;</span><br><span class="line">                    dispatch_all();</span><br><span class="line">                    revoke(object_url);</span><br><span class="line">                &#125;</span><br><span class="line">            ;</span><br><span class="line">            filesaver.readyState = filesaver.INIT;</span><br><span class="line"></span><br><span class="line">            if (can_use_save_link) &#123;</span><br><span class="line">                object_url = get_URL().createObjectURL(blob);</span><br><span class="line">                setTimeout(function () &#123;</span><br><span class="line">                    save_link.href = object_url;</span><br><span class="line">                    save_link.download = name;</span><br><span class="line">                    click(save_link);</span><br><span class="line">                    dispatch_all();</span><br><span class="line">                    revoke(object_url);</span><br><span class="line">                    filesaver.readyState = filesaver.DONE;</span><br><span class="line">                &#125;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fs_error();</span><br><span class="line">        &#125;</span><br><span class="line">        , FS_proto = FileSaver.prototype</span><br><span class="line">        , saveAs = function (blob, name, no_auto_bom) &#123;</span><br><span class="line">            return new FileSaver(blob, name || blob.name || &quot;download&quot;, no_auto_bom);</span><br><span class="line">        &#125;</span><br><span class="line">    ;</span><br><span class="line">    // IE 10+ (native saveAs)</span><br><span class="line">    if (typeof navigator !== &quot;undefined&quot; &amp;&amp; navigator.msSaveOrOpenBlob) &#123;</span><br><span class="line">        return function (blob, name, no_auto_bom) &#123;</span><br><span class="line">            name = name || blob.name || &quot;download&quot;;</span><br><span class="line"></span><br><span class="line">            if (!no_auto_bom) &#123;</span><br><span class="line">                blob = auto_bom(blob);</span><br><span class="line">            &#125;</span><br><span class="line">            return navigator.msSaveOrOpenBlob(blob, name);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FS_proto.abort = function () &#123;</span><br><span class="line">    &#125;;</span><br><span class="line">    FS_proto.readyState = FS_proto.INIT = 0;</span><br><span class="line">    FS_proto.WRITING = 1;</span><br><span class="line">    FS_proto.DONE = 2;</span><br><span class="line"></span><br><span class="line">    FS_proto.error =</span><br><span class="line">        FS_proto.onwritestart =</span><br><span class="line">            FS_proto.onprogress =</span><br><span class="line">                FS_proto.onwrite =</span><br><span class="line">                    FS_proto.onabort =</span><br><span class="line">                        FS_proto.onerror =</span><br><span class="line">                            FS_proto.onwriteend =</span><br><span class="line">                                null;</span><br><span class="line"></span><br><span class="line">    return saveAs;</span><br><span class="line">&#125;(</span><br><span class="line">    typeof self !== &quot;undefined&quot; &amp;&amp; self</span><br><span class="line">    || typeof window !== &quot;undefined&quot; &amp;&amp; window</span><br><span class="line">    || this.content</span><br><span class="line">));</span><br><span class="line">// `self` is undefined in Firefox for Android content script context</span><br><span class="line">// while `this` is nsIContentFrameMessageManager</span><br><span class="line">// with an attribute `content` that corresponds to the window</span><br><span class="line"></span><br><span class="line">if (typeof module !== &quot;undefined&quot; &amp;&amp; module.exports) &#123;</span><br><span class="line">    module.exports.saveAs = saveAs;</span><br><span class="line">&#125; else if ((typeof define !== &quot;undefined&quot; &amp;&amp; define !== null) &amp;&amp; (define.amd !== null)) &#123;</span><br><span class="line">    define([], function () &#123;</span><br><span class="line">        return saveAs;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>jquery.wordexport.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">if (typeof jQuery !== &quot;undefined&quot; &amp;&amp; typeof saveAs !== &quot;undefined&quot;) &#123;</span><br><span class="line">    (function ($) &#123;</span><br><span class="line">        $.fn.wordExport = function (fileName) &#123;</span><br><span class="line">            fileName = typeof fileName !== &apos;undefined&apos; ? fileName : &quot;jQuery-Word-Export&quot;;</span><br><span class="line">            var static = &#123;</span><br><span class="line">                mhtml: &#123;</span><br><span class="line">                    top: &quot;Mime-Version: 1.0\nContent-Base: &quot; + location.href + &quot;\nContent-Type: Multipart/related; boundary=\&quot;NEXT.ITEM-BOUNDARY\&quot;;type=\&quot;text/html\&quot;\n\n--NEXT.ITEM-BOUNDARY\nContent-Type: text/html; charset=\&quot;utf-8\&quot;\nContent-Location: &quot; + location.href + &quot;\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n_html_&lt;/html&gt;&quot;,</span><br><span class="line">                    head: &quot;&lt;head&gt;\n&lt;meta http-equiv=\&quot;Content-Type\&quot; content=\&quot;text/html; charset=utf-8\&quot;&gt;\n&lt;style&gt;\n_styles_\n&lt;/style&gt;\n&lt;/head&gt;\n&quot;,</span><br><span class="line">                    body: &quot;&lt;body&gt;_body_&lt;/body&gt;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            var options = &#123;</span><br><span class="line">                maxWidth: 624</span><br><span class="line">            &#125;;</span><br><span class="line">            // Clone selected element before manipulating it</span><br><span class="line">            var markup = $(this).clone();</span><br><span class="line"></span><br><span class="line">            // Remove hidden elements from the output</span><br><span class="line">            markup.each(function () &#123;</span><br><span class="line">                var self = $(this);</span><br><span class="line">                if (self.is(&apos;:hidden&apos;))</span><br><span class="line">                    self.remove();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            // Embed all images using Data URLs</span><br><span class="line">            var images = Array();</span><br><span class="line">            var img = markup.find(&apos;img&apos;);</span><br><span class="line">            for (var i = 0; i &lt; img.length; i++) &#123;</span><br><span class="line">                // Calculate dimensions of output image</span><br><span class="line">                var w = Math.min(img[i].width, options.maxWidth);</span><br><span class="line">                var h = img[i].height * (w / img[i].width);</span><br><span class="line">                // Create canvas for converting image to data URL</span><br><span class="line">                var canvas = document.createElement(&quot;CANVAS&quot;);</span><br><span class="line">                canvas.width = w;</span><br><span class="line">                canvas.height = h;</span><br><span class="line">                // Draw image to canvas</span><br><span class="line">                var context = canvas.getContext(&apos;2d&apos;);</span><br><span class="line">                context.drawImage(img[i], 0, 0, w, h);</span><br><span class="line">                // Get data URL encoding of image</span><br><span class="line">                var uri = canvas.toDataURL(&quot;image/png/jpg&quot;);</span><br><span class="line">                $(img[i]).attr(&quot;src&quot;, img[i].src);</span><br><span class="line">                img[i].width = w;</span><br><span class="line">                img[i].height = h;</span><br><span class="line">                // Save encoded image to array</span><br><span class="line">                images[i] = &#123;</span><br><span class="line">                    type: uri.substring(uri.indexOf(&quot;:&quot;) + 1, uri.indexOf(&quot;;&quot;)),</span><br><span class="line">                    encoding: uri.substring(uri.indexOf(&quot;;&quot;) + 1, uri.indexOf(&quot;,&quot;)),</span><br><span class="line">                    location: $(img[i]).attr(&quot;src&quot;),</span><br><span class="line">                    data: uri.substring(uri.indexOf(&quot;,&quot;) + 1)</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Prepare bottom of mhtml file with image data</span><br><span class="line">            var mhtmlBottom = &quot;\n&quot;;</span><br><span class="line">            for (var i = 0; i &lt; images.length; i++) &#123;</span><br><span class="line">                mhtmlBottom += &quot;--NEXT.ITEM-BOUNDARY\n&quot;;</span><br><span class="line">                mhtmlBottom += &quot;Content-Location: &quot; + images[i].location + &quot;\n&quot;;</span><br><span class="line">                mhtmlBottom += &quot;Content-Type: &quot; + images[i].type + &quot;\n&quot;;</span><br><span class="line">                mhtmlBottom += &quot;Content-Transfer-Encoding: &quot; + images[i].encoding + &quot;\n\n&quot;;</span><br><span class="line">                mhtmlBottom += images[i].data + &quot;\n\n&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            mhtmlBottom += &quot;--NEXT.ITEM-BOUNDARY--&quot;;</span><br><span class="line"></span><br><span class="line">            //TODO: load css from included stylesheet</span><br><span class="line"></span><br><span class="line">            //var styles=&apos; /* Font Definitions */@font-face&#123;font-family:宋体;panose-1:2 1 6 0 3 1 1 1 1 1;mso-font-alt:SimSun;mso-font-charset:134;mso-generic-font-family:auto;mso-font-pitch:variable;mso-font-signature:3 680460288 22 0 262145 0;&#125;  @font-face&#123;font-family:&quot;Cambria Math&quot;;panose-1:2 4 5 3 5 4 6 3 2 4;mso-font-charset:1;mso-generic-font-family:roman;mso-font-format:other;mso-font-pitch:variable;mso-font-signature:0 0 0 0 0 0;&#125;  @font-face&#123;font-family:&quot;\@宋体&quot;;panose-1:2 1 6 0 3 1 1 1 1 1;mso-font-charset:134;mso-generic-font-family:auto;mso-font-pitch:variable;mso-font-signature:3 680460288 22 0 262145 0;&#125;/* Style Definitions */p.MsoNormal, li.MsoNormal, div.MsoNormal&#123;mso-style-unhide:no;mso-style-qformat:yes;mso-style-parent:&quot;&quot;;margin:0cm;margin-bottom:.0001pt;mso-pagination:widow-orphan;font-size:14.0pt;font-family:宋体;mso-bidi-font-family:宋体;&#125;p.MsoHeader, li.MsoHeader, div.MsoHeader&#123;mso-style-noshow:yes;mso-style-priority:99;mso-style-link:&quot;页眉 Char&quot;;margin:0cm;margin-bottom:.0001pt;text-align:center;mso-pagination:widow-orphan;layout-grid-mode:char;font-size:9.0pt;font-family:宋体;mso-bidi-font-family:宋体;&#125;p.MsoFooter, li.MsoFooter, div.MsoFooter&#123;mso-style-noshow:yes;mso-style-priority:99;mso-style-link:&quot;页脚 Char&quot;;margin:0cm;margin-bottom:.0001pt;mso-pagination:widow-orphan;layout-grid-mode:char;font-size:9.0pt;font-family:宋体;mso-bidi-font-family:宋体;&#125;p.MsoAcetate, li.MsoAcetate, div.MsoAcetate&#123;mso-style-noshow:yes;mso-style-priority:99;mso-style-link:&quot;批注框文本 Char&quot;;margin:0cm;margin-bottom:.0001pt;mso-pagination:widow-orphan;font-size:9.0pt;font-family:宋体;mso-bidi-font-family:宋体;&#125;span.Char&#123;mso-style-name:&quot;页眉 Char&quot;;mso-style-noshow:yes;mso-style-priority:99;mso-style-unhide:no;mso-style-locked:yes;mso-style-link:页眉;font-family:宋体;mso-ascii-font-family:宋体;mso-fareast-font-family:宋体;mso-hansi-font-family:宋体;&#125;span.Char0&#123;mso-style-name:&quot;页脚 Char&quot;;mso-style-noshow:yes;mso-style-priority:99;mso-style-unhide:no;mso-style-locked:yes;mso-style-link:页脚;font-family:宋体;mso-ascii-font-family:宋体;mso-fareast-font-family:宋体;mso-hansi-font-family:宋体;&#125;span.Char1&#123;mso-style-name:&quot;批注框文本 Char&quot;;mso-style-noshow:yes;mso-style-priority:99;mso-style-unhide:no;mso-style-locked:yes;mso-style-link:批注框文本;font-family:宋体;mso-ascii-font-family:宋体;mso-fareast-font-family:宋体;mso-hansi-font-family:宋体;&#125;p.msochpdefault, li.msochpdefault, div.msochpdefault&#123;mso-style-name:msochpdefault;mso-style-unhide:no;mso-margin-top-alt:auto;margin-right:0cm;mso-margin-bottom-alt:auto;margin-left:0cm;mso-pagination:widow-orphan;font-size:10.0pt;font-family:宋体;mso-bidi-font-family:宋体;&#125;span.msonormal0&#123;mso-style-name:msonormal;mso-style-unhide:no;&#125;.MsoChpDefault&#123;mso-style-type:export-only;mso-default-props:yes;font-size:10.0pt;mso-ansi-font-size:10.0pt;mso-bidi-font-size:10.0pt;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-hansi-font-family:&quot;Times New Roman&quot;;mso-font-kerning:0pt;&#125;/* Page Definitions */  @page WordSection1&#123;size:595.3pt 841.9pt;margin:72.0pt 90.0pt 72.0pt 90.0pt;mso-header-margin:42.55pt;mso-footer-margin:49.6pt;mso-paper-source:0;&#125;div.WordSection1&#123;page:WordSection1;&#125;&apos;;</span><br><span class="line"></span><br><span class="line">            var styles = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">            // Aggregate parts of the file together</span><br><span class="line">            var fileContent = static.mhtml.top.replace(&quot;_html_&quot;, static.mhtml.head.replace(&quot;_styles_&quot;, styles) + static.mhtml.body.replace(&quot;_body_&quot;, markup.html())) + mhtmlBottom;</span><br><span class="line"></span><br><span class="line">            // Create a Blob with the file contents</span><br><span class="line">            var blob = new Blob([fileContent], &#123;</span><br><span class="line">                type: &quot;application/msword;charset=utf-8&quot;</span><br><span class="line">            &#125;);</span><br><span class="line">            saveAs(blob, fileName + &quot;.doc&quot;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)(jQuery);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    if (typeof jQuery === &quot;undefined&quot;) &#123;</span><br><span class="line">        console.error(&quot;jQuery Word Export: missing dependency (jQuery)&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (typeof saveAs === &quot;undefined&quot;) &#123;</span><br><span class="line">        console.error(&quot;jQuery Word Export: missing dependency (FileSaver.js)&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="二-导入">二、导入</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/FileSaver.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/jquery.wordexport.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2><span id="三-编写导出word核心代码">三、编写导出word核心代码</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#download_word&quot;).click(function () &#123;</span><br><span class="line">        $(&quot;#test-editormd&quot;).html(testEditor.getHTML()).wordExport(&apos;resume&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js实现导出pdf</title>
      <link href="/2020/07/08/js%E5%AE%9E%E7%8E%B0%E5%AF%BC%E5%87%BApdf/"/>
      <url>/2020/07/08/js%E5%AE%9E%E7%8E%B0%E5%AF%BC%E5%87%BApdf/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-下载js库">一、下载js库</span></h2><p>下载地址:<br><a href="https://github.com/eKoopmans/html2pdf.js" target="_blank" rel="noopener">https://github.com/eKoopmans/html2pdf.js</a></p><p>官方文档:<br><a href="https://ekoopmans.github.io/html2pdf.js/" target="_blank" rel="noopener">https://ekoopmans.github.io/html2pdf.js/</a><br><a id="more"></a></p><h2><span id="二-引入">二、引入</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;../js/html2pdf.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2><span id="三-编写核心js导出pdf代码">三、编写核心js导出pdf代码</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#download_pdf&quot;).click(function () &#123;</span><br><span class="line"></span><br><span class="line">    //可以是$(&quot;#id或类选择器&quot;).html()或val()</span><br><span class="line">    var element = testEditor.getHTML();</span><br><span class="line"></span><br><span class="line">    html2pdf().from(element).set(&#123;</span><br><span class="line">        margin: 1,</span><br><span class="line">        filename: &apos;resume.pdf&apos;,</span><br><span class="line">        html2canvas: &#123;scale: 2&#125;,</span><br><span class="line">        jsPDF: &#123;orientation: &apos;portrait&apos;, unit: &apos;in&apos;, format: &apos;letter&apos;, compressPDF: false&#125;</span><br><span class="line">    &#125;).save();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之依赖反转原则</title>
      <link href="/2020/07/08/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E4%BE%9D%E8%B5%96%E5%8F%8D%E8%BD%AC%E5%8E%9F%E5%88%99/"/>
      <url>/2020/07/08/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E4%BE%9D%E8%B5%96%E5%8F%8D%E8%BD%AC%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>依赖反转原则主要想告诉我们，如果想要设计一个灵活的系统，在源代码层次的依赖关系中就应该多引用抽象类型，而非具体实现。<br><a id="more"></a></p><h2><span id="一-稳定的抽象层">一、稳定的抽象层</span></h2><p>我们每次修改抽象接口的时候，一定也会去修改对应的具体实现。但反过来，当我们修改具体实现时，却很少需要去修改响应的抽象接口。所以我们可以认为接口比实现更稳定。</p><p>也就是说，如果想要在软件架构设计上追求稳定，就必须多使用稳定的抽象接口，少依赖多变的具体实现。下面，我们将该设计原则归结为以下几条具体的编码守则:</p><ul><li><strong>应在代码中多使用抽象接口，尽量避免使用那些多变的具体实现类。</strong></li><li><strong>不要再具体实现类上创建衍生类。</strong></li><li><strong>不要覆盖包含具体实现的函数。</strong></li><li><strong>应避免再代码中写入与任何具体实现相关的名字。</strong></li></ul><h2><span id="二-工厂模式">二、工厂模式</span></h2><p>如果想要遵守上述编码守则，我们就必须要对那些易变对象的创建过程做一些特殊处理，这样的谨慎是很有必要的，因为基本上在所有的编程语言中，创建对象的操作都免不了需要在源代码层次上依赖对象的具体实现。</p><p>在大部分面向对象编程语言中，人们都会选择用抽象工厂模式来解决这个源代码依赖的问题。</p><h2><span id="三-具体实现组件">三、具体实现组件</span></h2><p>我们在软件系统中并不可能完全消除违法依赖反转原则的情况。通常只需要把它们集中于少部分的具体实现组件中，将其与系统的其他部分隔离即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之接口隔离原则</title>
      <link href="/2020/07/07/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/"/>
      <url>/2020/07/07/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2><span id="接口隔离原则与软件架构">接口隔离原则与软件架构</span></h2><p>回顾一下ISP最初的成因:在一般情况下，任何层次的软件设计如果依赖于不需要的东西，都会是有害的。从源代码层次来说，这样的依赖关系会导致不必要的重新编译和重新部署，对更高层次的软件架构设计来说，问题也是类似的。<br><a id="more"></a><br>接口隔离原则告诉我们:任何层次的软件设计如果依赖了它并不需要的东西，就会带来意料之外的麻烦。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之里氏替换原则</title>
      <link href="/2020/07/06/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/"/>
      <url>/2020/07/06/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>1988年，Barbara Liskov在描述如何定义子类型时写下这样一段话:<br>这样需要的是一种可替换性:<strong>如果对于每个类型是S的对象o1都存在一个类型为T的对象o2，能使操作T类型的程序P在用o2替换o1时行为保持不变，我们就可以将S称为T的子类型</strong>。<br><a id="more"></a></p><p>在面向对象这场编程革命兴起的早起，我们的普遍认知正如上文所说，认为LSP只不过是指导如何使用继承关系的一种方法，然而随着时间的推移，LSP逐渐演变成一种更广泛、指导接口与其实现方式的设计原则。</p><p>这里提到的接口可以有多种形式-可以是Java风格的接口，具有多个实现类;也可以像Ruby一样，几个类公用一样的方法签名，甚至可以是几个服务响应同一个REST接口。</p><p>LSP适用于上述所有的应用场景，因为这些场景中的用户都依赖于一种接口，并且都期待实现该接口的类之间能具有可替换性。</p><p>LSP可以且应该被应用于软件架构层面，因为一旦违背了可替换性，该系统架构就不得不为此增添大量复杂的应对机制。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决js地址栏中传递中文乱码的问题</title>
      <link href="/2020/07/05/%E8%A7%A3%E5%86%B3js%E5%9C%B0%E5%9D%80%E6%A0%8F%E4%B8%AD%E4%BC%A0%E9%80%92%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/07/05/%E8%A7%A3%E5%86%B3js%E5%9C%B0%E5%9D%80%E6%A0%8F%E4%B8%AD%E4%BC%A0%E9%80%92%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>问题背景:<br>地址栏传参有中文，中文截取后出现乱码问题。<br><a id="more"></a><br>问题代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function getQueryString(name)</span><br><span class="line">&#123;</span><br><span class="line">     var reg = new RegExp(&quot;(^|&amp;)&quot;+ name +&quot;=([^&amp;]*)(&amp;|$)&quot;);</span><br><span class="line">     var r = window.location.search.substr(1).match(reg);</span><br><span class="line">     if(r!=null)return  unescape(r[2]); return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解决问题代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function getUrlParam(key) &#123;</span><br><span class="line">    // 获取参数</span><br><span class="line">    var url = window.location.search;</span><br><span class="line">    // 正则筛选地址栏</span><br><span class="line">    var reg = new RegExp(&quot;(^|&amp;)&quot; + key + &quot;=([^&amp;]*)(&amp;|$)&quot;);</span><br><span class="line">    // 匹配目标参数</span><br><span class="line">    var result = url.substr(1).match(reg);</span><br><span class="line">    //返回参数值</span><br><span class="line">    return result ? decodeURIComponent(result[2]) : null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参考解决问题链接:<br><a href="https://www.cnblogs.com/jorzen1984/p/6632918.html" target="_blank" rel="noopener">js地址栏获取参数的方法，解决中文乱码问题，能支持中文参数</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之开闭原则</title>
      <link href="/2020/07/05/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/"/>
      <url>/2020/07/05/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>开闭原则是Bertrand Meyer在1988年提出的，该设计原则认为:<br><strong>设计良好的计算机软件应该易于扩展，同时抗拒修改。</strong><br><a id="more"></a><br>换句话说，一个设计良好的计算机系统应该在不需要修改的前提下就可以轻易被扩展。</p><p>如果A组件不想被B组件上发生的修改所影响，那么就应该让B组件依赖于A组件。</p><p>软件架构师根据相关函数被修改的原因、修改的方式及修改的时间来对其进行分组隔离，并将这些互相隔离的函数分组整理成组件结构，使得高阶组件不会因低阶组件被修改而受到影响。</p><p>开闭原则是我们进行系统架构设计的主导原则，其主要目标是让系统易于扩展，同时限制其每次被修改所影响的范围。实现方式是通过将系统划分为一系列组件，并将这些组件间的依赖关系按层次结构进行组织，使得高阶组件不会因低阶组件被修改而受到影响。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Drools之基础语法</title>
      <link href="/2020/07/04/Drools%E4%B9%8B%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/07/04/Drools%E4%B9%8B%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-规则文件">一、规则文件</span></h2><p>标准的规则文件以”.drl”结尾。<br><a id="more"></a><br>一套完整的规则文件内容如下:</p><ul><li>package:包名，只限于逻辑上的管理，若自定义的查询或函数位于同一包名，不管物理位置如何，都可以直接调用。</li><li>import:规则引用问题，导入类或静态方法。</li><li>global:全局变量，使用时需要单独定义变量类型</li><li>function:自定义函数，可以理解为Java静态方法的一种变形，与JavaScript函数定义相似。</li><li>queried:查询。</li><li>rule end:规则内容中的规则体，是进行业务规则判断、处理业务结果的部分。</li></ul><h2><span id="二-规则体语法结构">二、规则体语法结构</span></h2><p>一个规则体包含三个部分，唯有attributes部分是可选，其他关键字都是必填信息。属性可选并不表示没有，属性是有默认值的，如规则默认是被激活的。<br>规则体语法结构如下:</p><ul><li>rule:规则开始，参数是规则的唯一名称</li><li>attributes:规则属性，是rule与when之间的参数，为可选项</li><li>when:规则条件部分，默认为true</li><li>then:规则结果部分</li><li>end:当前规则结束</li></ul><h2><span id="三-匹配模式">三、匹配模式</span></h2><p>LHS部分由一个或多个条件组成，条件又称pattern。多个pattern之间既可以使用and或or连接，又可以使用小括号确定pattern的优先级，默认条件是true。</p><p>pattern的”绑定变量名”是可选的，当前规则的RHS部分需要操作pattern匹配的参数，若要用到某些对象，则可以通过为该对象设定一个绑定变量名来实现对它的操作。对于绑定变量的命名，通常是为其添加一个”$”符号作为前缀，与对象的命名方法相同;绑定变量不仅可以用在对象上，也可以用在对象的属性上，作用是方便RHS部分的操作，同时也避免与Fact对象属性的使用相混淆。</p><p>“Field约束”是指当前对象中属性或方法的使用，如添加条件限制”name==’YC’,age==24”.</p><p>规则体中LHS部分绑定变量基本上有两种形式:一种是整个Fact变量的绑定，另一种是约束条件属性变量的绑定。</p><h2><span id="四-运算符">四、运算符</span></h2><p>运算符是在程序中最常用的计算方法，一般的运算符包括”+、-、*、/、%”等，优先级与Java相同。</p><h2><span id="五-约束连接">五、约束连接</span></h2><p>匹配模式中有多种约束符的连接，常用的有”&amp;&amp;”(and)、”||”(or)、”,”(and)。这3个连接符号如果没有用括号来显示定义的优先级，那么”&amp;&amp;”优先级大于”||”优先级。</p><p>Drools自带的约束，共有6种比较操作符。</p><h3><span id="1contains比较操作符">1.contains比较操作符</span></h3><p>contains是用来检查一个Fact对象的某个属性值是否包含一个指定的对象值。其语法格式为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object[field[Collection/Array] contains | not contains value]</span><br></pre></td></tr></table></figure></p><h3><span id="2not-contains-比较运算符">2.not contains 比较运算符</span></h3><p>not contains的作用与contains相反，它是用来判断一个Fact对象的某个字段不包含一个指定的对象。</p><h3><span id="3memberof比较运算符">3.memberOf比较运算符</span></h3><p>memberOf用来判断某个Fact对象的某个字段是否在一个或多个集合中。其语法格式为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object(fieldName memberOf | not memberOf value[Collection/Array])</span><br></pre></td></tr></table></figure></p><h3><span id="4not-memberof比较运算符">4.not memberOf比较运算符</span></h3><p>not memberOf与memberOf的作用相反，是用来判断Fact对象中某个字段不在某个集合中。</p><h3><span id="5matches比较运算符">5.matches比较运算符</span></h3><p>matches用来对某个Fact对象的字段与标准的Java正则表达式进行相似匹配，被比较的字符串可以是一个标准的Java正则表达式。但需要注意的是，正则表达式字符串中不用考虑”\”的转义问题，其语法为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object(fieldName matches | not matches &quot;正则表达式&quot;)</span><br></pre></td></tr></table></figure></p><h3><span id="6not-matches-比较运算符">6.not matches 比较运算符</span></h3><p>not matches的作用与matches相反，是用来将某个Fact对象的字段与一个Java标准正则表达式进行匹配，若与正则表达式不匹配，则规则成立。</p><h3><span id="7soundlike比较运算符">7.soundlike比较运算符</span></h3><p>soundlike用来检查单词是否具有与给定值几乎相同的声音(使用英语发音)。基于Soundex算法的语法为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object(fieldName soundlike &apos;value&apos;)</span><br></pre></td></tr></table></figure></p><h3><span id="8str比较运算符">8.str比较运算符</span></h3><p>str不仅检查String字段是否以某一值开头/结尾，还可以判断字符串长度，其语法为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object(fieldName str[startWith|endWith|length] &quot;String&quot;|1)</span><br></pre></td></tr></table></figure></p><h2><span id="六-语法扩展">六、语法扩展</span></h2><p>主要指List、Set、Map等元素操作。</p><h2><span id="七-规则文件drl">七、规则文件drl</span></h2><h3><span id="1单行注释使用进行标记">1.单行注释(使用”//“进行标记)</span></h3><h3><span id="2多行注释以开始以结束">2.多行注释(以”<code>/*</code>“开始，以”<code>*/</code>“结束)</span></h3>]]></content>
      
      
      
        <tags>
            
            <tag> Drools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之整合Drools</title>
      <link href="/2020/07/04/SpringBoot%E4%B9%8B%E6%95%B4%E5%90%88Drools/"/>
      <url>/2020/07/04/SpringBoot%E4%B9%8B%E6%95%B4%E5%90%88Drools/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-drools是什么">一、Drools是什么</span></h2><p>Drools是一个易于访问企业策略、易于调整以及易于管理的开源业务规则引擎，符合业内标准，速度快、效率高。业务分析师或审核人员可以利用它轻松查看业务规则，从而检验是否已编码的规则执行所需的业务规则。</p><h2><span id="二-drools有什么用">二、Drools有什么用</span></h2><p>从我个人所待过的公司，其中做智能酒店这个项目时就用到规则引擎Drools，将它用于处理优惠劵规则。<br><a id="more"></a></p><h2><span id="三-springboot整合drools初步实战">三、SpringBoot整合Drools初步实战</span></h2><h3><span id="1导入maven依赖">1.导入Maven依赖</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;drools.version&gt;7.14.0.Final&lt;/drools.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- drools --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.drools&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;drools-compiler&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;drools.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3><span id="2编写配置类">2.编写配置类</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.config;</span><br><span class="line"></span><br><span class="line">import org.kie.api.KieBase;</span><br><span class="line">import org.kie.api.KieServices;</span><br><span class="line">import org.kie.api.builder.*;</span><br><span class="line">import org.kie.api.runtime.KieContainer;</span><br><span class="line">import org.kie.api.runtime.KieSession;</span><br><span class="line">import org.kie.internal.io.ResourceFactory;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.core.io.Resource;</span><br><span class="line">import org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line">import org.springframework.core.io.support.ResourcePatternResolver;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class KiaSessionConfig &#123;</span><br><span class="line"></span><br><span class="line">    private static final String RULES_PATH = &quot;rules/&quot;;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public KieFileSystem kieFileSystem() throws IOException &#123;</span><br><span class="line">        KieFileSystem kieFileSystem = getKieServices().newKieFileSystem();</span><br><span class="line">        for (Resource file : getRuleFiles()) &#123;</span><br><span class="line">            kieFileSystem.write(ResourceFactory.newClassPathResource(RULES_PATH + file.getFilename(), &quot;UTF-8&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        return kieFileSystem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Resource[] getRuleFiles() throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();</span><br><span class="line">        final Resource[] resources = resourcePatternResolver.getResources(&quot;classpath*:&quot; + RULES_PATH + &quot;**/*.*&quot;);</span><br><span class="line">        return resources;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public KieContainer kieContainer() throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        final KieRepository kieRepository = getKieServices().getRepository();</span><br><span class="line">        kieRepository.addKieModule(new KieModule() &#123;</span><br><span class="line">            public ReleaseId getReleaseId() &#123;</span><br><span class="line">                return kieRepository.getDefaultReleaseId();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        KieBuilder kieBuilder = getKieServices().newKieBuilder(kieFileSystem());</span><br><span class="line">        kieBuilder.buildAll();</span><br><span class="line">        return getKieServices().newKieContainer(kieRepository.getDefaultReleaseId());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private KieServices getKieServices() &#123;</span><br><span class="line">        return KieServices.Factory.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public KieBase kieBase() throws IOException &#123;</span><br><span class="line">        return kieContainer().getKieBase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public KieSession kieSession() throws IOException &#123;</span><br><span class="line">        return kieContainer().newKieSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="3resources目录新建rules目录">3.resources目录新建rules目录</span></h3><h3><span id="4新建实体">4.新建实体</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.drools;</span><br><span class="line"></span><br><span class="line">public class People &#123;</span><br><span class="line">    private int sex;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private String drlType;</span><br><span class="line"></span><br><span class="line">    public int getSex() &#123;</span><br><span class="line">        return sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSex(int sex) &#123;</span><br><span class="line">        this.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDrlType() &#123;</span><br><span class="line">        return drlType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDrlType(String drlType) &#123;</span><br><span class="line">        this.drlType = drlType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="5编写规则文件">5.编写规则文件</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.drools</span><br><span class="line">import com.springcloud.blog.admin.drools.People</span><br><span class="line">dialect  &quot;java&quot;</span><br><span class="line"></span><br><span class="line">rule &quot;man&quot;</span><br><span class="line">    when</span><br><span class="line">        $p : People(sex == 1 &amp;&amp; drlType == &quot;people&quot;)</span><br><span class="line">    then</span><br><span class="line">        System.out.println($p.getName() + &quot;是男孩&quot;);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3><span id="6单元测试只要正常输出表示整合是ok的接下来就可以任意应用了">6.单元测试(只要正常输出，表示整合是Ok的，接下来就可以任意应用了)</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.base.controller.test.task;</span><br><span class="line"></span><br><span class="line">import com.springcloud.blog.admin.BlogAdminApplication;</span><br><span class="line">import com.springcloud.blog.admin.drools.People;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.kie.api.KieBase;</span><br><span class="line">import org.kie.api.runtime.KieSession;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest(classes = BlogAdminApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="line">public class DroolsJunitTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private KieSession session;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void people() &#123;</span><br><span class="line"></span><br><span class="line">        People people = new People();</span><br><span class="line">        people.setName(&quot;YC&quot;);</span><br><span class="line">        people.setSex(1);</span><br><span class="line">        people.setDrlType(&quot;people&quot;);</span><br><span class="line">        session.insert(people);//插入</span><br><span class="line">        session.fireAllRules();//执行规则</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="7输出结果">7.输出结果</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YC是男孩</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之单一职责原则</title>
      <link href="/2020/07/04/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/"/>
      <url>/2020/07/04/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>SRP是SOLID五大设计原则中最容易理解的一个。<br>很多程序员根据SRP这个名字想当然地认为这个原则就是指:每个模块都应该只做一件事。<br><a id="more"></a><br>没错，后者的确也是一个设计原则，即确保一个函数只完成一个功能。</p><p>将大型函数重构成小函数时经常会用到这个原则，但这只是一个面向底层实现细节的设计原则，并不是SRP的全部。</p><p>历史上，我们曾经这样描述SRP这一设计原则:<br><strong>任何一个软件模块都应该有且仅有一个被修改的原因。</strong></p><p>在现实环境中，软件系统为了满足用户和所有者的要求，必然要经常做出这样那样的修改。而该系统的用户或者所有者就是该设计原则中所指的”被修改的原因”。所以，我们可以这样描述SRP:<br><strong>任何一个软件模块都应该只对一个用户或系统利益相关者负责。</strong></p><p>这里的”用户”和”系统利益相关者”用词并不完全准确，它们很有可能指的是一个或多个用户和利益相关者，只要这些人希望对系统进行的变更是相似的，就可以归为一类(一个或多个有共同需求的人)。在这里，我们将其称为行为者。<br>所以，对于SRP的最终描述都变成了:<br><strong>任何一个软件模块都应该只对某一类行为者负责。</strong></p><p>上述提到的”软件模块”指的是一组紧密相关的函数和数据结构。</p><p>单一职责原则主要讨论的是函数和类之间的关系-但是它在两个讨论层面上会以不同的形式出现。</p><p>在组件层面，我们可以将其称为共同闭包原则，在软件架构层面，它则是用于奠定架构边界的变更轴心。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之设计原则</title>
      <link href="/2020/07/03/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
      <url>/2020/07/03/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>通常来说，要想构建一个好的软件系统，应该从写整洁的代码开始做起。<br>毕竟，如果建筑所使用的砖头质量不佳，那么架构所能起到的作用也会很有限。反之亦然，如果建筑的架构设计不佳，那么其所用的砖头质量再好也没有用。这就是SOLID设计原则所要解决的问题。</p><p>SOLID原则的主要作用就是告诉我们如何将数据和函数组织成为类，以及如何将这些类链接起来成为程序。<br><a id="more"></a><br>一般情况，我们为软件构建中层结构的主要目标如下:</p><ul><li>使软件可容忍被改动。</li><li>使软件更容易被理解。</li><li>构建可在多个软件系统中复用的组件。</li></ul><p>之所以使用”中层”这个词，是因为这些设计原则主要适用于那些进行模块级编程的程序员。SOLID原则应该直接紧贴于具体的代码逻辑之上，这些原则是用来帮助我们定义软件架构中的组件和模块的。</p><p>SOLID原则介绍如下:</p><h3><span id="srp单一职责原则">SRP:单一职责原则</span></h3><p>该设计原则是基于康威定律的一个推论:一个软件系统的最佳结构高度依赖于开发这个系统的组织的内部结构。这样，每个软件模块都有且只有一个需要被改变的理由。</p><h3><span id="ocp开闭原则">OCP:开闭原则</span></h3><p>该设计原则由Bertrand Meyer在20世纪80年代大力推广的，其核心要素是:如果软件系统想要更容易被改变，那么其设计就必须允许新增代码来修改系统行为，而非只能靠修改原来的代码。</p><h3><span id="lsp里氏替换原则">LSP:里氏替换原则</span></h3><p>该设计原则是由Berbara Liskov在1988年提出的一个著名的子类型定义。简单来说，这项原则的意思是如果想用可替换的组件来构建软件系统，那么这些组件就必须遵守同一个约定，以便让这些组件可以相互替换。</p><h3><span id="isp接口隔离原则">ISP:接口隔离原则</span></h3><p>该项设计原则主要告诫软件设计师应该在设计中避免不必要的依赖。</p><h3><span id="dip依赖反转原则">DIP:依赖反转原则</span></h3><p>该设计原则指出高层策略性的代码不应该依赖底层细节的代码，恰恰相反，那些实现底层细节的代码应该依赖高层策略性的代码。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈投资这件事</title>
      <link href="/2020/07/03/%E8%B0%88%E8%B0%88%E6%8A%95%E8%B5%84%E8%BF%99%E4%BB%B6%E4%BA%8B/"/>
      <url>/2020/07/03/%E8%B0%88%E8%B0%88%E6%8A%95%E8%B5%84%E8%BF%99%E4%BB%B6%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-什么是投资">一、什么是投资？</span></h2><p>投资，指国家或企业以及个人，为了特定目的，与对方签订协议，促进社会发展，实现互惠互利，输送资金的过程。又是特定经济主体为了在未来可预见的时期内获得收益或是资金增值，在一定时期内向一定领域投放足够数额的资金或实物的货币等价物的经济行为。可分为实物投资、资本投资和证券投资等。前者是以货币投入企业，通过生产经营活动取得一定利润，后者是以货币购买企业发行的股票和公司债券，间接参与企业的利润分配。</p><p>投资是创新创业项目孵化的一种形式，是对项目产业化综合体进行资本助推发展的经济活动。</p><p>投资是货币收入或其他任何能以货币计量其价值的财富拥有者牺牲当前消费、购买或购置资本品以期在未来实现价值增值的谋利性经营性活动。</p><h2><span id="二-投资的范围有哪些">二、投资的范围有哪些？</span></h2><h3><span id="1房产">1.房产</span></h3><h3><span id="2债劵">2.债劵</span></h3><h3><span id="3股票">3.股票</span></h3><h3><span id="4贵金属通常指的是黄金">4.贵金属(通常指的是黄金)</span></h3><h3><span id="5基金">5.基金</span></h3><h3><span id="6银行短期理财产品">6.银行短期理财产品</span></h3><h3><span id="7信托">7.信托</span></h3><h3><span id="8钱币古董的收藏">8.钱币古董的收藏</span></h3><h3><span id="9民间借贷">9.民间借贷</span></h3><h3><span id="10短期投资在一年内套现">10.短期投资(在一年内套现)</span></h3><h2><span id="三-投资不等于理财这是两码事">三、投资不等于理财，这是两码事</span></h2><p>投资就是”钱生钱”用钱去赚更多钱,以此达到利益最大化，投资看重回报，关注投入产出比。</p><p>理财就是打理自己财务的过程(包含怎么花钱、怎么省钱、怎么存钱)，注重资产布局，同时理财也包含投资，投资是理财的一种手段。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 职业生涯思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之函数式编程</title>
      <link href="/2020/07/02/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/07/02/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-整数平方">一、整数平方</span></h2><p>函数式编程语言中的变量是不可变的。<br><a id="more"></a></p><h2><span id="二-不可变性与软件架构">二、不可变性与软件架构</span></h2><p>为什么不可变性是软件架构设计需要考虑的重点呢？为什么软件架构师要操心变量的可变性呢?</p><p>答案显而易见:所有的竞争问题、死锁问题、并发更新问题都是由可变变量导致的。如果变量永远不会被更改，那就不可能产生竞争或者并发更新问题。如果锁状态是不可变的，那就永远不会产生死锁问题。</p><p>换句话说，一切并发应用遇到的问题，一切由于使用多线程、多处理器而引起的问题，如果没有可变变量的话都不可能变化。</p><h2><span id="三-可变性的隔离">三、可变性的隔离</span></h2><p>一种常见方式是将应用程序，或者是应用程序的内部服务进行拆分，划分为可变的和不可变的两种组件。</p><p>不可变组件用纯函数的方式来执行任务，期间不更改任何状态。</p><p>这些不可变的组件将通过与一个或多个非函数式组件通信的方式来修改变量状态。</p><p>由于状态的修改会导致一系列并发问题的产生，所以我们通常会采用某种事务型内存来保护可变变量，避免同步更新和竞争状态的发生。</p><p>事务型内存基本上与数据库保护磁盘数据的方式类似，通常采用事务或者重试机制。</p><p>一个架构设计良好的应用程序应该将状态修改的部分和不需要修改状态的部分隔离成单独的组件，然后用合适的机制来保护可变量。</p><p>软件架构师应该着力于将大部分处理逻辑都归于不可变组件中，可变状态组件的逻辑应该越少越好。</p><h2><span id="四-事件溯源">四、事件溯源</span></h2><p>随着存储和处理能力的大幅进步，现在拥有每秒可以执行数十亿条指令的处理器，以及数十亿字节内存的计算机已经很常见了。而内存越大，处理速度越快，我们对可变状态的依赖就会越少。</p><h2><span id="五-小结">五、小结</span></h2><ul><li>结构化编程是对程序控制权的直接转移的限制</li><li>面向对象是对程序控制权的间接转移的限制</li><li>函数式编程是对程序中赋值操作的限制</li></ul><p>这三个范式都对程序员提出了新的限制。每个范式都约束了某种编写代码的方式，没有一个编程范式是在增加新能力。</p><p>软件构建并不是一个迅速前进的技术。今天构建软件的规则和1946年阿兰.图灵写下电子计算机的第一行代码时是一样的。尽管工具变化了，硬件变化了，但是软件编程的核心没有变。</p><p>总而言之，软件，或者说计算机程序无一例外是由顺序结构、分支结构、循环结构和间接转移这几种行为组合而成，无可增加，也缺一不可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之面向对象编程</title>
      <link href="/2020/07/01/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/07/01/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>面向对象是封装、继承、多态三项的有机组成。<br><a id="more"></a></p><h2><span id="一-封装">一、封装</span></h2><p>通过采取封装特性，我们可以把一组相关联的数据和函数圈起来，使圈外面的代码只能看见部分函数，数据则完全不可见。譬如，在实际应用中，类中的公共函数和私有成员变量就是这样。</p><h2><span id="二-继承">二、继承</span></h2><p>继承的主要作用是让我们可以在某个作用域内对外部定义的某一组变量与函数进行覆盖。</p><h2><span id="三-多态">三、多态</span></h2><p>多态是函数指针的一种运用。</p><p>综上，我们可知，面向对象编程其实是对程序间接控制的转移进行了约束。</p><h2><span id="四-小结">四、小结</span></h2><p>面向对象编程到底是什么？业界在这个问题上存在着很多不同的说法和意见。然而对一个软件架构师来说，其含义应该是非常明确的:<strong>面向对象编程就是以多态为手段对源代码中的依赖关系进行控制的能力，这种能力让软件架构师可以构建出某种插件式架构，让高层策略性组件与底层实现组件相分离，底层组件可以被编译成插件，实现独立于高层组件的开发和部署。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之结构化编程</title>
      <link href="/2020/06/30/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/06/30/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-可推导性">一、可推导性</span></h2><p>Dijkstra很早就得出的结论是:编程是一项难度很大的活动。一段程序无论复杂与否，都包含了很多的细节信息。如果没有工具的帮助，这些细节的信息是远远超过一个程序员的认知能力范围的。而在一段程序中，哪怕仅仅是一个小细节的错误，也会造成整个程序出错。<br><a id="more"></a><br>Dijkstra提出的解决方案是采用数学推导方法。他的想法是借鉴数学中的公理、定理、推论和引理，形成一种欧几里得结构。Dijkstra认为程序员可以像数学家一样对自己的程序进行推理证明。换句话说，程序员可以用代码将一些已证明可用的结构串联起来，只要自行证明这些额外代码是正确的，就可以推导出整个程序的正确性。</p><h2><span id="二-goto是有害的">二、goto是有害的</span></h2><h2><span id="三-功能性降解拆分">三、功能性降解拆分</span></h2><p>既然结构化编程范式可将模块递归降解拆分为可推导的单元，这就意味着模块也可以按功能进行降解拆分。这样一来，我们就可以将一个大型问题拆分为一系列高级函数的组合，而这些高级函数各自又可以继续被拆分为一系列低级函数，如此无限递归。更重要的是，每个被拆分出来的函数也都可以用结构化编程范式来书写。</p><p>一词为理论基础，在20世纪70年代晚期到80年代中期出现的结构化分析与结构化设计工作才能广为人知。</p><p>通过采用这些技巧，程序员可以将大型系统设计拆分为模块和组件，而这些模块和组件最终可以拆分为更小的、可证明的函数。</p><h2><span id="四-形式化证明没有发生">四、形式化证明没有发生</span></h2><p>大部分人不会真正按照欧几里得结构为每个小函数书写冗长复杂的正确性证明过程。</p><p>没有几个程序员会认为形式化验证是产出高质量软件的必备条件。</p><p>形式化的、欧几里得式的数学推导证明并不是证明结构化编程正确性的唯一手段。</p><h2><span id="五-科学来救场">五、科学来救场</span></h2><p>科学和数学在证明方法上有着根本性的不同，科学理论和科学定律通常是无法被证明的，譬如我们并没有办法证明牛顿第二运动定律F=ma或者万有引力定律F=Gm1m2/r的二次方是正确的，但我们可以用实际案例来演示这些定律的正确性，并通过高精度测量来证明当相关精度达到小数点后多少位时，被测量对象仍然一直满足这个定律。但我们始终没有办法像用数学方法一样推导出这个定律。而且，不管我们进行多少次正确的实验，也无法排除今后会存在某一次实验可以推翻牛顿第二运动定律与万有引力定律的可能性。</p><p>这就是科学理论和科学定律的特点:它们可以被证伪，但是没有办法被证明。</p><p>最终，我们可以说数学是要将可证明的结论证明，而与之相反，科学研究则是要将可证明的结论证伪。</p><h2><span id="六-测试">六、测试</span></h2><p>Dijkstra曾说过”测试只能展示Bug的存在，并不能证明不存在Bug”，换句话说，一段程序可以由一个测试来证明其错误性，但是却不能被证明是正确的。测试的作用是让我们得出某段程序已经足够实现当前目标这一结论。</p><p>软件开发虽然看起来是在操作很多数学结构，其实不是一个数学研究过程。恰恰相反，软件开发更像是一门科学研究学科，我们通过无法证伪来证明软件的正确性。</p><p>结构化编程范式促使我们先将一段程序递归降解为一系列可证明的小函数，然后再编写相关的测试来试图证明这些函数是错误的。如果这些测试无法证伪这些函数，那么我们就可以认为这些函数是足够正确的，进而推导整个程序是正确的。</p><h2><span id="七-小结">七、小结</span></h2><p>结构化编程范式中最有价值的地方就是，它赋予我们创造可证伪程序单元的能力。</p><p>这就是为什么现代编程语言一般不支持无限制的goto语句。更重要的是，这也是为什么在架构设计领域，功能性降解拆分仍然是最佳实践。</p><p>无论在哪一个层面上，从最小的函数到最大的组件，软件开发的过程都和科学研究非常类似，它们都是由证伪驱动的。软件架构师需要定义可以方便地进行证伪(测试)的模块、组件以及服务。为了达到这个目的，他们需要将类似结构化编程的限制方法应用在更高的层面上。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之编程范式总览</title>
      <link href="/2020/06/30/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%E6%80%BB%E8%A7%88/"/>
      <url>/2020/06/30/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%E6%80%BB%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-结构化编程">一、结构化编程</span></h2><p>结构化编程是第一个普遍被采用的编程范式(但是不是第一个被提出的)，由Edsger Wybe Dijkstra于1968年最先提出。与此同时，Dijkstra还论证了使用goto这样的无限制跳转语句将会损害程序的整体结构。</p><p>结构化编程范式归纳:<br><strong>结构化编程对程序控制权的直接转移进行了限制和规范。</strong><br><a id="more"></a></p><h2><span id="二-面向对象编程">二、面向对象编程</span></h2><p>编程领域中第二个被广泛采用的编程范式-面向对象编程。<br>事实上，这个编程范式的提出比结构化编程早两年，是在1966年由Ole Johan Dahl和Kriste Nygaard在论文中总结归纳出来的。这两个程序员注意到在ALGOL语言中，函数调用堆栈可以被挪到堆内存区域里，这样函数定义的本地变量就可以在函数返回之后继续存在。这个函数就成为了一个类的构造函数，而它所定义的本地变量就是类的成员变量，构造函数定义的嵌套函数就成为了成员方法。这样一来，我们就可以利用多态来限制用户对函数指针的使用。</p><p>面向对象编程归纳:<br><strong>面向对象编程对程序控制权的间接进行了限制和规范。</strong></p><h2><span id="三-函数式编程">三、函数式编程</span></h2><p>事实上，函数式编程概念是基于与阿兰.图灵同时代的数学家Alonzo Church在1936年发明的λ演算的直接衍生物。1958年John Mccarthy利用其作为基础发明了LISP语言。众所周知，λ演算法的一个核心思想是不可变性-某个符号所对应的值是永远不变，所以从理论上来说，函数式编程语言中应该是没有赋值语句的。大部分函数式编程语言只允许在非常严格的限制条件下，才可以更改某个变量的值。</p><p>函数式编程范式归纳:<br><strong>函数式编程对程序中的赋值进行了限制和规范。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之两个价值维度</title>
      <link href="/2020/06/24/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E4%B8%A4%E4%B8%AA%E4%BB%B7%E5%80%BC%E7%BB%B4%E5%BA%A6/"/>
      <url>/2020/06/24/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E4%B8%A4%E4%B8%AA%E4%BB%B7%E5%80%BC%E7%BB%B4%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>对于每个软件系统，我们都可以通过行为和架构两个维度来体现它的实际价值。软件研发人员应该确保自己的系统在两个维度上的实际价值都能长时间维持在很高的状态。不幸的是，他们往往只关注一个维度，而忽视了另外一个维度。更不幸的是，他们常常关注的还是错误的维度，这导致了系统的价值最终趋降为零。<br><a id="more"></a></p><h2><span id="一-行为价值">一、行为价值</span></h2><p>软件系统的行为是其最直观的价值维度。程序员的工作就是让机器按照某种指令方式运转，给系统的使用者创造或者提高利润。</p><p>程序员们为了达到这个目的，往往需要帮助系统使用者编写一个对系统功能的定义，也就是需求文档。然后，程序员们再把需求文档转化为实际的代码。</p><p>当机器出现异常行为时，程序员负责调试，解决这些问题。</p><p>大部分程序员认为这就是他们的全部工作。他们的工作是且仅是:按照需求文档编写代码，并且修复任何Bug。这真是打错特错。</p><h2><span id="二-架构维度">二、架构维度</span></h2><p>软件系统的第二个价值维度，就体现在软件这个英文单词上:software。”ware”的意思是”产品”，而”soft”得意思，是指软件的灵活性。</p><p>软件系统必须保持灵活。软件发明的目的，就是让我们可以以一种灵活的方式来改变机器的工作行为。对机器上那些很难改变的工作行为，我们通常称之为硬件。</p><p>为了达到软件的本来目的，软件系统必须够”软”-也就是说，软件应该容易被修改。当需求方改变需求的时候，随之所需的软件变更必须可以简单而方便地实现。变更实施的难度应该和变更的范畴成等比关系，而与变更得具体形状无关。</p><h2><span id="三-哪个价值维度更重要">三、哪个价值维度更重要</span></h2><p>那么，究竟是系统行为更重要，还是系统架构的灵活性更重要？哪个价值更大？系统正常工作更重要，还是系统易于修改更重要？</p><p>如果这个问题由业务部门来回答，他们通常认为系统正常工作很重要。系统开发人员常常也就跟随采取了这种态度。但是这种态度是错误的。举例说明:</p><ul><li>如果某程序可以正常工作，但是无法修改，那么当需求变更的时候它就不再能够正常工作了，我们也无法通过修改让它能继续正常工作。因此，这个程序的价值将成为0。</li><li>如果某程序目前无法正常工作，但是我们很容易地修改它，那么将它改好，并且随着需求变化不停地修改它，都应该是很容易的事。因此，这个程序会持续产生价值。</li></ul><h2><span id="四-艾森豪威尔矩阵">四、艾森豪威尔矩阵</span></h2><p>艾森豪威尔曾说道:<br>我有两种难题:紧急的和重要的，二紧急的难题永远是不重要的，重要的永远是不紧急的。</p><p>软件系统的第一个价值维度:系统行为，是紧急的，但是并不总是特别重要。</p><p>软件系统的第二个价值维度:系统行为，是重要的，但是并不总是特别紧急。</p><p>当然，我们会有些重要且紧急，也会有一些事情不重要也不紧急。最终我们应将四类事情进行如下排序:</p><ul><li>重要且紧急</li><li>重要不紧急</li><li>不重要但紧急</li><li>不重要且不紧急</li></ul><p>在这里你可以看到，软件的系统架构-那些重要的事情-占据了该列表的前两位，而系统行为-那些紧急的事情-只占据了第一和第三位。</p><p>业务部门与研发人员经常犯的共同错误就是将第三优先级的事情提到第一优先级去做。换句话说，他们没有把真正紧急并且重要的功能和紧急但是不重要的功能分开。这个错误导致了重要的事被忽略了，重要的系统架构问题让位给了不重要的系统行为功能。</p><p>研发人员还忘了一点，那就是业务部门原本就是没有能力评估架构的重要程度的，因为这本来就是研发人员自己的工作职责，所以平衡系统架构的重要性和功能的紧急程度这件事，是软件研发人员自己的职责。</p><h2><span id="四-为好的软件架构而持续斗争">四、为好的软件架构而持续斗争</span></h2><p>为了做好上述职责,软件团队必须做好斗争的准备-或者说”长期抗争”的准备。现状就是这样。软件团队必须从公司长远利益出发与其他部门抗争，这就和管理团队的工作一样。</p><p>有成效的软件研发团队会迎难而上，毫不掩饰地与所有其他的系统相关方进行平等的争吵。请记住，作为一名软件开发人员，你也是相关者之一。软件系统的可维护性需要由你来保护，这是你角色的一部分，也是你职责中不可缺少的一部分，公司雇你的很大一部分原因就是需要有人来做这件事。</p><p>如果你是软件架构师，那么这项工作就加倍重要了。软件架构师这一职责本身就应更关注系统的整体结构，而不是具体的功能和系统行为的实现。软件架构师必须创建一个可以让功能实现起来更容易、修改起来更简单、扩展起来更轻松的软件架构。</p><p>请记住:<strong>如果忽视软件架构的价值，系统将会变得越来越难以维护，终会有一天，系统将会变得再也无法修改。如果系统变成这个样子，那么说明软件开发团队没有和需求方做足够抗争，没有完成自己应尽的职责。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《架构整洁之道》之设计与架构究竟是什么</title>
      <link href="/2020/06/22/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%9E%B6%E6%9E%84%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2020/06/22/%E3%80%8A%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E4%B9%8B%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%9E%B6%E6%9E%84%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-什么是设计什么是架构二者究竟有什么区别">一、什么是设计？什么是架构？二者究竟有什么区别?</span></h2><p>二者没有任何区别。<br><a id="more"></a><br>“架构”这个词往往使用于”高层级”的讨论中。这类讨论一般都把”底层”的实现细节排除在外。而”设计”一词，往往用来指代具体的系统底层组织结构和实现的细节。但是，从一个真正的系统架构师的日常工作来看，这样的区分是根本不成立的。</p><p>举个例子说明:</p><p>以给我设计新房子的建筑设计师要做的事情为例。新房子当然是存在着既定架构的，但这个架构具体包含哪些内容呢？首先，它应该包括房屋的形状、外观设计、垂直高度、房间的布局等。但是，如果查看建筑设计师使用的图纸，会发现其中也充斥着大量的额设计细节。譬如，我们可以看到每个插座、开关以及每个电灯具体的安装位置，同时也可以看到某个开关与所控制的电灯的具体连接信息;我们能看到壁炉的具体安装位置，热水器的大小和位置信息，甚至是污水泵的位置;同时也可以看到关于墙体、屋顶和地基都有非常详细的建造说明。</p><p>总的来说，架构图里实际包含了所有的底层设计细节，这些细节信息共同支撑了顶层的架构设计，底层设计信息和顶层架构设计共同组成了整个房屋的架构文档。</p><p>软件设计也是如此。底层设计细节和高层架构信息是不可分割的。它们组成在一起，共同定义了整个软件系统，缺一不可。所谓的底层和高层本身就是一系列政策组成的连续体，并没有清晰的分界线。</p><h2><span id="二-目标是什么">二、目标是什么</span></h2><p><strong>软件架构的终极目标是，用最小的人力成本来满足构建和维护系统的需求。</strong></p><p>一个软件架构的优劣，可以用它满足用户需求所需要的成本来衡量。如果该成本很低，并且在系统的整个生命周期内一直都能维持这样的低成本，那么这个系统的设计就是优良的。如果该系统的每次发布都会提升下一次变更的成本，那么这个设计就是不好的。就这么简单。</p><h2><span id="三-案例分析">三、案例分析</span></h2><p>以某公司为例，公司业务取得不断成功，工程师的规模不断扩大，但是生产效率却增长缓慢，以及代码变更成本不断增高、工程师生产力接近0等。</p><p>首先来说该公司的业务系统是一个典型的乱麻系统。这种系统一般都是没有经过设计，匆匆忙忙被构建起来。然后为了加快发布的速度，拼命地往团队里加入新人，同时加上决策层对代码质量提升和设计结构优化存在着持续的、长久的忽视，这种状态能持续下去就怪了。</p><p>对系统的开发者来说，这会带来很大的挫败感，因为团队中并没有人偷懒，每个人还都是和之前一样在拼命工作。</p><p>然而，不管他们投入了多少个人时间，救了多少次火，加了多少次班，他们的产出始终上不去。工程师的大部分时间都消耗在对现有系统的修修补补上，而不是真正完成实际的新功能。这些工程师真正的任务是:拆了东墙补西墙，周而往复，偶尔有精力能顺便实现一点小功能。</p><h3><span id="那么问题到底出在哪呢">那么问题到底出在哪呢？</span></h3><p>该书中提到龟兔赛跑，并总结主题思想如下:<br>1.慢但是稳，是成功的秘诀。<br>2.该比赛并不是拼谁开始跑得快，也不是拼谁更有力气得。<br>3.心态越急，反而跑得慢。</p><p>这个故事本身揭露得是过度自信的愚蠢行为。兔子由于对自己速度的过度自信，没有把乌龟当回事，结果乌龟爬过重点线取得胜利的时候，它还在睡觉。</p><p>这与现代软件研发工作有点类似，现在的软件研发工程师都有点过于自信。当然了，他们确实不会偷懒，一点也不。但是他们真正偷懒的地方在于-持续低估那些好的、良好设计的、整洁的代码的重要性。</p><p>这些工程师们普遍用一句话欺骗自己:”<strong>我们可以未来再重构代码，产品上线最重要</strong>“。但是结果大家都知道，产品上线以后重构工作就再没人提起了。市场的压力永远也不会消退，作为首先上市的产品，后面有无数的竞争对手追赶，必须要比他们跑得更快才能保持领先。</p><p>所以，重构的时机永远不会再有了。工程师们忙于完成新功能，新功能做不完哪有时间重构老的代码？循环往复，系统成了一团乱麻，生产效率持续直线下降，直至为零。</p><p>结果就像龟兔赛跑中过于自信的兔子一样，软件研发工程师们对于自己保持高产出的能力过于自信了。但是乱成一团的系统代码可没有休息时间，也不会放松。如果不严加提防，再几个月之内，整个研发团队就会陷入困境。</p><p>工程师们经常相信的另外一个错误观点是:”<strong>在工程中容忍糟糕的代码存在可以在短期内加快工程上线的速度，未来这些代码回造成一些额外的工作量，但是并没有什么大不了</strong>“。相信这些鬼话的工程师对自己清理乱麻代码的能力过于自信了。但是更重要的是，他们忽视了一个自然规律:<strong>无论是短期还是长期来看，胡乱编写代码的工作速度其实比循规蹈矩更慢。</strong></p><p>对于常年关注软件开发本质的人来说，软件开发的一个核心特点:<br><strong>要想跑得快，先要跑得稳。</strong></p><p>综上所述，管理层扭转局面的唯一选择就是扭转开发者的观念，让他们从过度自信的兔子模式转变回来，为自己构建的乱麻系统负起责来。</p><p>当然，某些软件研发工程师可能会认为挽救一个系统的唯一办法是抛弃现有系统，设计一个全新的系统来替代。但是这里仍然没有逃离过度自信。试问:如果是工程师的过度自信导致了目前的一团乱麻，那么，我们有什么理由让他们从头开始，结果就会更好呢？</p><p><strong>过度自信只会使得重构设计陷入和原项目一样的困局中。</strong></p><h2><span id="三-总结">三、总结</span></h2><p>不管怎么样看，研发团队最好的选择就是清晰地认识并避开工程师过度自信的特点，开始认真地对待自己的代码架构，对其质量负责。</p><p>要想提高自己软件架构的质量，就需要先知道什么是优秀的软件架构。而为了在系统构建过程中采用好的设计和架构以便减少构建成本，提高生产力，又需要先了解系统架构的各种属性与成本和生产力的关系。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app之实现分页</title>
      <link href="/2020/06/18/uni-app%E4%B9%8B%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5/"/>
      <url>/2020/06/18/uni-app%E4%B9%8B%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-下载库">一、下载库</span></h2><p>官方文档地址为:<br><a href="https://ext.dcloud.net.cn/plugin?id=32" target="_blank" rel="noopener">https://ext.dcloud.net.cn/plugin?id=32</a></p><p>点击下载zip压缩包即可，下载完毕后解压到放置前端相关组件目录,即components目录。<br><a id="more"></a></p><h2><span id="二-使用">二、使用</span></h2><h3><span id="1引入">1.引入</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import uniPagination from &apos;../../components/uni-pagination/uni-pagination/uni-pagination.vue&apos;</span><br></pre></td></tr></table></figure><h3><span id="2模板区域使用在里">2.模板区域使用(在<template></template>里)</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uni-pagination @change=&quot;handlePage&quot; show-icon=&quot;true&quot; :total=&quot;postCount&quot; :current=&quot;pageNum&quot; :pageSize=&quot;pageSize&quot;&gt;&lt;/uni-pagination&gt;</span><br></pre></td></tr></table></figure><h3><span id="3编写handlepage函数">3.编写handlePage函数</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">handlePage(params)&#123;</span><br><span class="line">var pageIndex = params.current;</span><br><span class="line"></span><br><span class="line">    console.log(&quot;this.pageNum:&quot;+pageIndex);</span><br><span class="line"></span><br><span class="line">this.getPostListInfo(pageIndex)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="4我的完整代码如下">4.我的完整代码如下</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class=&quot;content&quot;&gt;</span><br><span class="line">&lt;!-- &lt;image class=&quot;logo&quot; src=&quot;/static/logo.png&quot;&gt;&lt;/image&gt; --&gt;</span><br><span class="line">&lt;view class=&quot;text-area&quot;&gt;</span><br><span class="line">&lt;text class=&quot;title&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;view class=&quot;uni-list&quot;&gt;</span><br><span class="line">&lt;view class=&quot;uni-list-cell&quot; hover-class=&quot;uni-list-cell-hover&quot; v-for=&quot;(item, index) in list&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&lt;!-- &lt;view class=&quot;uni-list-cell-navigate uni-navigate-right&quot;&gt;&#123;&#123; item.Title &#125;&#125;&lt;/view&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type=&quot;default&quot; @click=&quot;getDetail(item.Title, item.Id, item.Url)&quot;&gt;&#123;&#123; item.Title &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;uni-pagination @change=&quot;handlePage&quot; show-icon=&quot;true&quot; :total=&quot;postCount&quot; :current=&quot;pageNum&quot; :pageSize=&quot;pageSize&quot;&gt;&lt;/uni-pagination&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import common from &apos;../../common/common.js&apos;;</span><br><span class="line">import uniPagination from &apos;../../components/uni-pagination/uni-pagination/uni-pagination.vue&apos;;</span><br><span class="line">export default &#123;</span><br><span class="line">components: &#123; uniPagination &#125;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">title: &apos;文章列表&apos;,</span><br><span class="line">postCount: 0,</span><br><span class="line">pageSize: 10,</span><br><span class="line">pageNum: 1,</span><br><span class="line">list: []</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">onLoad() &#123;</span><br><span class="line">this.getPostListInfo(this.pageNum);</span><br><span class="line"></span><br><span class="line">this.getPersonalBlogInfo();</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">getPostListInfo(pageIndex) &#123;</span><br><span class="line">console.log(&apos;pageIndex:&apos; + pageIndex);</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url: common.website_url + &apos;/cnblogs/getPersonalBlogPostList/&apos; + pageIndex,</span><br><span class="line">method: &apos;POST&apos;,</span><br><span class="line">success: res =&gt; &#123;</span><br><span class="line">console.log(&apos;isSuccess&apos;);</span><br><span class="line">console.log(&apos;getPostListInfo:&apos; + JSON.stringify(res.data));</span><br><span class="line">this.list = res.data;</span><br><span class="line">&#125;,</span><br><span class="line">fail: function(e) &#123;</span><br><span class="line">console.log(&apos;接口调用失败:&apos; + JSON.stringify(e));</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">getPersonalBlogInfo() &#123;</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url: common.website_url + &apos;/cnblogs/getPersonalBlogInfo&apos;,</span><br><span class="line">method: &apos;POST&apos;,</span><br><span class="line">success: res =&gt; &#123;</span><br><span class="line">//console.log(&apos;getPersonalBlogInfo:&apos; + JSON.stringify(res.data));</span><br><span class="line">this.postCount = res.data.postCount;</span><br><span class="line">this.pageSize = res.data.pageSize;</span><br><span class="line">&#125;,</span><br><span class="line">fail: function(e) &#123;</span><br><span class="line">console.log(&apos;接口调用失败:&apos; + JSON.stringify(e));</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line">getDetail(Title, Id, Url) &#123;</span><br><span class="line">console.log(&apos;Title:&apos; + Title + &apos;  Id:&apos; + Id);</span><br><span class="line"></span><br><span class="line">uni.navigateTo(&#123;</span><br><span class="line">url: &apos;../post/post/post?Title=&apos; + Title + &apos;&amp;Id=&apos; + Id</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line">handlePage(params) &#123;</span><br><span class="line">var pageIndex = params.current;</span><br><span class="line"></span><br><span class="line">console.log(&apos;this.pageNum:&apos; + pageIndex);</span><br><span class="line"></span><br><span class="line">this.getPostListInfo(pageIndex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.content &#123;</span><br><span class="line">display: flex;</span><br><span class="line">flex-direction: column;</span><br><span class="line">align-items: center;</span><br><span class="line">justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.logo &#123;</span><br><span class="line">height: 200rpx;</span><br><span class="line">width: 200rpx;</span><br><span class="line">margin-top: 200rpx;</span><br><span class="line">margin-left: auto;</span><br><span class="line">margin-right: auto;</span><br><span class="line">margin-bottom: 50rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.text-area &#123;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.title &#123;</span><br><span class="line">font-size: 36rpx;</span><br><span class="line">color: #8f8f94;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3><span id="5效果图">5.效果图</span></h3><p>界面虽然不好看，但功能是Ok的。</p><h4><span id="当前页">当前页</span></h4><p><img src="/2020/06/18/uni-app之实现分页/01.png" alt="图一"></p><h4><span id="点击下一页">点击下一页</span></h4><p><img src="/2020/06/18/uni-app之实现分页/02.png" alt="图二"></p>]]></content>
      
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app如何解析html标签</title>
      <link href="/2020/06/18/uni-app%E5%A6%82%E4%BD%95%E8%A7%A3%E6%9E%90html%E6%A0%87%E7%AD%BE/"/>
      <url>/2020/06/18/uni-app%E5%A6%82%E4%BD%95%E8%A7%A3%E6%9E%90html%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-导入rechtextjs">一、导入rechText.js</span></h2><p>参考网上资料<a href="http://dt2008.cn/?p=118" target="_blank" rel="noopener">uni-app如何完美解析富文本内容</a><br>核心内容如下:<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">graceUI rich-text 加强工具</span><br><span class="line">link : graceui.hcoder.net</span><br><span class="line">author : 5213606@qq.com 深海</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">// 正则变量</span><br><span class="line">var graceRichTextReg;</span><br><span class="line"></span><br><span class="line">// 批量替换的样式 [ 根据项目需求自行设置 ]</span><br><span class="line">var GRT = [</span><br><span class="line">// div 样式</span><br><span class="line">[&apos;div&apos;, &quot;line-height:2em;&quot;],</span><br><span class="line">// h1 样式</span><br><span class="line">[&apos;h1&apos;, &quot;font-size:3em; line-height:1.5em;&quot;],</span><br><span class="line">// h2 样式</span><br><span class="line">[&apos;h2&apos;, &quot;font-size:2em; line-height:1.8em;&quot;],</span><br><span class="line">// h3 样式</span><br><span class="line">[&apos;h3&apos;, &quot;font-size:1.6em; line-height:2em;&quot;],</span><br><span class="line">// h4 样式</span><br><span class="line">[&apos;h4&apos;, &quot;font-size:1.2em; line-height:2em;&quot;],</span><br><span class="line">// h5 样式</span><br><span class="line">[&apos;h5&apos;, &quot;font-size:1em; line-height:2em;&quot;],</span><br><span class="line">// h6 样式</span><br><span class="line">[&apos;h6&apos;, &quot;font-size:0.9em; line-height:2em;&quot;],</span><br><span class="line">// p 样式</span><br><span class="line">[&apos;p&apos;, &quot;font-size:1em; line-height:2em;&quot;],</span><br><span class="line">// b 样式</span><br><span class="line">[&apos;b&apos;, &quot;font-size:1em; line-height:2em;&quot;],</span><br><span class="line">// strong 样式</span><br><span class="line">[&apos;strong&apos;, &quot;font-size:1em; line-height:2em;&quot;],</span><br><span class="line">// code 样式</span><br><span class="line">[&apos;code&apos;, &quot;font-size:1em; line-height:1.2em; background:#F6F7F8; padding:8px 2%; width:96%;&quot;],</span><br><span class="line">// img 样式</span><br><span class="line">[&apos;img&apos;, &quot;width:100%; margin:8px 0;&quot;],</span><br><span class="line">// blockquote</span><br><span class="line">[&apos;blockquote&apos;, &quot;font-size:1em; border-left:3px solid #D1D1D1; line-height:2em; border-radius:5px; background:#F6F7F8; padding:8px 2%;&quot;],</span><br><span class="line">// li 样式</span><br><span class="line">[&apos;ul&apos;, &quot;padding:5px 0; list-style:none; padding:0; margin:0;&quot;],</span><br><span class="line">[&apos;li&apos;, &quot;line-height:1.5em; padding:5px 0; list-style:none; padding:0; margin:0; margin-top:10px;&quot;],</span><br><span class="line">// table</span><br><span class="line">[&apos;table&apos;, &quot;width:100%; border-left:1px solid #F2F3F4; border-top:1px solid #F2F3F4;&quot;],</span><br><span class="line">[&apos;th&apos;, &quot;border-right:1px solid #F2F3F4; border-bottom:1px solid #F2F3F4;&quot;],</span><br><span class="line">[&apos;td&apos;, &quot;border-right:1px solid #F2F3F4; border-bottom:1px solid #F2F3F4; padding-left:5px;&quot;]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">format : function(html)&#123;</span><br><span class="line">html = html.replace(/&lt;pre.*pre&gt;?/gis, function(word)&#123;</span><br><span class="line">word =  word.replace(/[\n]/gi,&apos;&lt;br /&gt;&apos;);</span><br><span class="line">word =  word.replace(/    /gi,&apos;&lt;span style=&quot;padding-left:2em;&quot;&gt;&lt;/span&gt;&apos;);</span><br><span class="line">return word.replace(/[\t]/gi, &apos;&lt;span style=&quot;padding-left:2em;&quot;&gt;&lt;/span&gt;&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">html = html.replace(/&lt;pre/gi, &apos;&lt;p style=&quot;font-size:1em; margin:12px 0; line-height:1.2em; background:#F6F7F8; border-radius:5px; padding:8px 4%; width:92%;&quot;&apos;);</span><br><span class="line">html = html.replace(/&lt;\/pre/gi,&quot;&lt;/p&quot;);</span><br><span class="line">for(let i = 0; i &lt; GRT.length; i++)&#123;</span><br><span class="line">graceRichTextReg = new RegExp(&apos;&lt;&apos;+GRT[i][0]+&apos;&gt;|&lt;&apos;+GRT[i][0]+&apos; (.*?)&gt;&apos;, &apos;gi&apos;);</span><br><span class="line">html = html.replace(graceRichTextReg , function(word)&#123;</span><br><span class="line">// 分析 dom 上是否带有 style=&quot;&quot;</span><br><span class="line">if(word.indexOf(&apos;style=&apos;) != -1)&#123;</span><br><span class="line">var regIn = new RegExp(&apos;&lt;&apos; + GRT[i][0] + &apos;(.*?)style=&quot;(.*?)&quot;(.*?)(/?)&gt;&apos;, &apos;gi&apos;);</span><br><span class="line">return word.replace(regIn, &apos;&lt;&apos;+ GRT[i][0] +&apos;$1style=&quot;$2 &apos; + GRT[i][1] +&apos;&quot;$3$4&gt;&apos;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">var regIn = new RegExp(&apos;&lt;&apos; + GRT[i][0] + &apos;(.*?)(/?)&gt;&apos;, &apos;gi&apos;);</span><br><span class="line">return word.replace(regIn, &apos;&lt;&apos;+ GRT[i][0] +&apos;$1 style=&quot;&apos; + GRT[i][1] +&apos;$2&quot;&gt;&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">return html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="二-uni-app引入rechtextjs">二、uni-app引入rechText.js</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import graceRichText from &apos;../../../components/richText.js&apos;;</span><br></pre></td></tr></table></figure><h2><span id="三-核心渲染代码">三、核心渲染代码</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;rich-text :nodes=&quot;article&quot;&gt;&lt;/rich-text&gt;</span><br></pre></td></tr></table></figure><h2><span id="四-最终实现效果">四、最终实现效果</span></h2><p>使用uni-app转化小程序，效果图如下:<br><img src="/2020/06/18/uni-app如何解析html标签/01.png" alt=""></p><p>浏览器手机调试，效果图如下:<br><img src="/2020/06/18/uni-app如何解析html标签/02.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app框架简介</title>
      <link href="/2020/06/17/uni-app%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/"/>
      <url>/2020/06/17/uni-app%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-开发规范">一、开发规范</span></h2><p>为了实现多端兼容(综合考虑编译速度、运行性能等因素)，uni-app约定了如下开发规范:</p><ul><li>页面文件遵循<a href="https://vue-loader.vuejs.org/zh/spec.html" target="_blank" rel="noopener">Vue单文件组件SFC规范</a></li><li>组件标签靠近小程序规范，详见<a href="https://uniapp.dcloud.io/component/README" target="_blank" rel="noopener">uni-app组件规范</a></li><li>接口能力(JS API)靠近微信小程序规范，但需将前缀wx替换为uni，详见<a href="https://uniapp.dcloud.io/api/README" target="_blank" rel="noopener">uni-app接口规范</a></li><li>数据绑定及事件处理同Vue.js规范，同时补充了App及页面的生命周期</li><li>为兼容多端运行，建议使用flex布局进行开发</li></ul><p>正所谓”磨刀不误砍柴工”，规范要重视也要遵循，不然写着写着越写越乱，最后不仅仅维护困难，同时功能扩展也非常麻烦，增加开发成本。</p><h2><span id="二-目录结构">二、目录结构</span></h2><p>使用HbuildX生成uni-app项目脚手架，如图:<br><img src="/2020/06/17/uni-app框架简介/01.png" alt=""><br><a id="more"></a><br>目录结构解释:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">┌─components            uni-app组件目录</span><br><span class="line">│  └─comp-a.vue         可复用的a组件</span><br><span class="line">├─hybrid                存放本地网页的目录，详见</span><br><span class="line">├─platforms             存放各平台专用页面的目录，详见</span><br><span class="line">├─pages                 业务页面文件存放的目录</span><br><span class="line">│  ├─index</span><br><span class="line">│  │  └─index.vue       index页面</span><br><span class="line">│  └─list</span><br><span class="line">│     └─list.vue        list页面</span><br><span class="line">├─static                存放应用引用静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此</span><br><span class="line">├─wxcomponents          存放小程序组件的目录，详见</span><br><span class="line">├─main.js               Vue初始化入口文件</span><br><span class="line">├─App.vue               应用配置，用来配置App全局样式以及监听 应用生命周期</span><br><span class="line">├─manifest.json         配置应用名称、appid、logo、版本等打包信息，详见</span><br><span class="line">└─pages.json            配置页面路由、导航条、选项卡等页面类信息，详见</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app</title>
      <link href="/2020/06/17/uni-app/"/>
      <url>/2020/06/17/uni-app/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-背景介绍">一、背景介绍</span></h2><p>uni-app官网地址:<br><a href="https://uniapp.dcloud.io/" target="_blank" rel="noopener">https://uniapp.dcloud.io/</a></p><h3><span id="当前跨平台开发存在的三个问题">当前跨平台开发存在的三个问题</span></h3><h4><span id="1多端泛滥公司增加运营成本-开发者增加学习成本">1.多端泛滥(公司增加运营成本、开发者增加学习成本)</span></h4><h4><span id="2体验不好app体验不好">2.体验不好(app体验不好)</span></h4><h4><span id="3生态不丰富跨平台框架在周边生态不丰富开发者很难得到更多更好的sdk">3.生态不丰富(跨平台框架在周边生态不丰富，开发者很难得到更多更好的SDK)</span></h4><a id="more"></a><p>于是为了解决上述跨平台开发存在的三个问题，uni-app应运而生。</p><h2><span id="二-产品特征">二、产品特征</span></h2><h3><span id="1跨平台更多">1.跨平台更多</span></h3><ul><li>真正做到”一套代码，多端发行”</li><li>条件编译:优雅的在一个项目里调用不同平台的特色功能。</li></ul><h3><span id="2运行体检更好">2.运行体检更好</span></h3><ul><li>组件、api和微信小程序一致</li><li>兼容weex原生渲染</li></ul><h3><span id="3通用技术栈学习成本更低">3.通用技术栈，学习成本更低</span></h3><ul><li>vue的语法、微信小程序的api</li><li>内嵌mpvue</li></ul><h3><span id="4开放生态组件更丰富">4.开放生态，组件更丰富</span></h3><ul><li>支持通过npm安装第三方包</li><li>支持微信小程序自定义组件及SDK</li><li>兼容mpvue组件及项目</li><li>App端支持和原生混合编码</li><li>DCloud将发布插件市场</li></ul><h2><span id="三-解决跨平台开放存在的问题">三、解决跨平台开放存在的问题</span></h2><p>1.跨更多平台<br>2.体验更好<br>3.学习成本低，容易上手<br>4.开放生态，组件更丰富</p><h2><span id="四-功能框架示意图">四、功能框架示意图</span></h2><p><img src="/2020/06/17/uni-app/01.png" alt=""></p><h2><span id="五-快速上手">五、快速上手</span></h2><p>参考uni-app:<br><a href="https://uniapp.dcloud.io/quickstart" target="_blank" rel="noopener">https://uniapp.dcloud.io/quickstart</a></p><p>通常有两种方式，一种是通过HbuildX生成uni-app脚手架，另外一种是通过vue命令行方式生成uni-app脚手架，具体可参考上述网址查看详情。</p><p>如果你看到官网还不够理解的话，可以看看如下地址的视频教程:<br><a href="https://ke.qq.com/course/343370?taid=2796517631278410" target="_blank" rel="noopener">https://ke.qq.com/course/343370?taid=2796517631278410</a></p><p>我个人觉得官网写的很不错，很容易理解。</p><p>我为此新建了一个项目(技术学习一定要勤于动手实践)，如图:<br><img src="/2020/06/17/uni-app/02.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之JSON数组解析</title>
      <link href="/2020/06/15/Java%E4%B9%8BJSON%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/06/15/Java%E4%B9%8BJSON%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>最近打通博客园相关API和其它第三方API，由于我开发的系统内部需要调用较多的第三方API，所以用到了SpringCloud中的Feign。<br><a id="more"></a><br>由于之前开发的系统基本上除了支付是用的微信或支付宝以及智能门锁用的是第三方之外，其它很少涉及。</p><p>今天在做迁移博客数据的时候发现，通过Feign调用第三方时解析数组出现问题。</p><p>出现这样类似的错误，如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A JSONObject text must begin with &apos;&#123;&apos; at character 1 of 1</span><br></pre></td></tr></table></figure></p><p>问题原因是因为我所返回的数据是这样的格式[{}],例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: 13086998,</span><br><span class="line">        &quot;Title&quot;: &quot;SLF4J: Class path contains multiple SLF4J bindings.&quot;,</span><br><span class="line">        &quot;Url&quot;: &quot;http://www.cnblogs.com/youcong/p/13086998.html&quot;,</span><br><span class="line">        &quot;Description&quot;: &quot;错误信息: SLF4J Warning: Class Path Contains Multiple SLF4J Bindings 错误原因:我个人博客系统一个爬虫组件用到webmagic，而webmagic与lomback中的slf有冲突。 解决办法(webmagic排除相关依赖即可): &lt;!-- &quot;,</span><br><span class="line">        &quot;Author&quot;: &quot;挑战者V&quot;,</span><br><span class="line">        &quot;BlogApp&quot;: &quot;youcong&quot;,</span><br><span class="line">        &quot;Avatar&quot;: &quot;https://pic.cnblogs.com/face/1255290/20190518211156.png&quot;,</span><br><span class="line">        &quot;PostDate&quot;: &quot;2020-06-10T21:15:00&quot;,</span><br><span class="line">        &quot;ViewCount&quot;: 11,</span><br><span class="line">        &quot;CommentCount&quot;: 0,</span><br><span class="line">        &quot;DiggCount&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: 13086991,</span><br><span class="line">        &quot;Title&quot;: &quot;SpringCloud之Security&quot;,</span><br><span class="line">        &quot;Url&quot;: &quot;http://www.cnblogs.com/youcong/p/13086991.html&quot;,</span><br><span class="line">        &quot;Description&quot;: &quot;Spring Security是Spring提供的一个安全框架，提供认证和授权功能，最主要的是它提供了简单的使用方式，同时又有很高的灵活性，简单，灵活，强大。 我个人博客系统采用的权限框架就是Spring Security，正好整合到SpringCloud里面。一般系统里关于角色方面通常有这么几张表&quot;,</span><br><span class="line">        &quot;Author&quot;: &quot;挑战者V&quot;,</span><br><span class="line">        &quot;BlogApp&quot;: &quot;youcong&quot;,</span><br><span class="line">        &quot;Avatar&quot;: &quot;https://pic.cnblogs.com/face/1255290/20190518211156.png&quot;,</span><br><span class="line">        &quot;PostDate&quot;: &quot;2020-06-10T21:14:00&quot;,</span><br><span class="line">        &quot;ViewCount&quot;: 150,</span><br><span class="line">        &quot;CommentCount&quot;: 0,</span><br><span class="line">        &quot;DiggCount&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: 13066768,</span><br><span class="line">        &quot;Title&quot;: &quot;SpringCloud之Config&quot;,</span><br><span class="line">        &quot;Url&quot;: &quot;http://www.cnblogs.com/youcong/p/13066768.html&quot;,</span><br><span class="line">        &quot;Description&quot;: &quot;配置中心，也就是SpringCloud中的Config组件，主要应用在哪些方面? 配置文件方便维护 配置文件内容安全和权限 更新项目配置不需要重启 本文主要围绕两个方面，一个是Config Server，另一个是Config Client。还是以我个人博客系统其中的一个模块为例。 一、搭建Confi&quot;,</span><br><span class="line">        &quot;Author&quot;: &quot;挑战者V&quot;,</span><br><span class="line">        &quot;BlogApp&quot;: &quot;youcong&quot;,</span><br><span class="line">        &quot;Avatar&quot;: &quot;https://pic.cnblogs.com/face/1255290/20190518211156.png&quot;,</span><br><span class="line">        &quot;PostDate&quot;: &quot;2020-06-08T21:07:00&quot;,</span><br><span class="line">        &quot;ViewCount&quot;: 8,</span><br><span class="line">        &quot;CommentCount&quot;: 0,</span><br><span class="line">        &quot;DiggCount&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: 13066734,</span><br><span class="line">        &quot;Title&quot;: &quot;SpringCloud之Zuul&quot;,</span><br><span class="line">        &quot;Url&quot;: &quot;http://www.cnblogs.com/youcong/p/13066734.html&quot;,</span><br><span class="line">        &quot;Description&quot;: &quot;使用SpringCloud Zuul实现网关代理。 一、Maven依赖 &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/&quot;,</span><br><span class="line">        &quot;Author&quot;: &quot;挑战者V&quot;,</span><br><span class="line">        &quot;BlogApp&quot;: &quot;youcong&quot;,</span><br><span class="line">        &quot;Avatar&quot;: &quot;https://pic.cnblogs.com/face/1255290/20190518211156.png&quot;,</span><br><span class="line">        &quot;PostDate&quot;: &quot;2020-06-08T21:06:00&quot;,</span><br><span class="line">        &quot;ViewCount&quot;: 19,</span><br><span class="line">        &quot;CommentCount&quot;: 0,</span><br><span class="line">        &quot;DiggCount&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: 13066804,</span><br><span class="line">        &quot;Title&quot;: &quot;SpringCloud之Ribbon&quot;,</span><br><span class="line">        &quot;Url&quot;: &quot;http://www.cnblogs.com/youcong/p/13066804.html&quot;,</span><br><span class="line">        &quot;Description&quot;: &quot;SpringCloud通过Ribbon实现负载均衡。 一、添加Maven依赖 &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-clien&quot;,</span><br><span class="line">        &quot;Author&quot;: &quot;挑战者V&quot;,</span><br><span class="line">        &quot;BlogApp&quot;: &quot;youcong&quot;,</span><br><span class="line">        &quot;Avatar&quot;: &quot;https://pic.cnblogs.com/face/1255290/20190518211156.png&quot;,</span><br><span class="line">        &quot;PostDate&quot;: &quot;2020-06-08T21:05:00&quot;,</span><br><span class="line">        &quot;ViewCount&quot;: 10,</span><br><span class="line">        &quot;CommentCount&quot;: 0,</span><br><span class="line">        &quot;DiggCount&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: 13066706,</span><br><span class="line">        &quot;Title&quot;: &quot;SpringCloud之Hystrix&quot;,</span><br><span class="line">        &quot;Url&quot;: &quot;http://www.cnblogs.com/youcong/p/13066706.html&quot;,</span><br><span class="line">        &quot;Description&quot;: &quot;在微服务架构中，微服务之间互相依赖较大，相互之间调用必不可免的会失败。但当下游服务A因为瞬时流量导致服务崩溃，其他依赖于A服务的B、C服务由于调用A服务超时耗费了大量的资源，长时间下去，B、C服务也会崩溃。Hystrix就是用来解决服务之间相互调用失败，避免产生蝴蝶效应的熔断器，以及提供降级选项。H&quot;,</span><br><span class="line">        &quot;Author&quot;: &quot;挑战者V&quot;,</span><br><span class="line">        &quot;BlogApp&quot;: &quot;youcong&quot;,</span><br><span class="line">        &quot;Avatar&quot;: &quot;https://pic.cnblogs.com/face/1255290/20190518211156.png&quot;,</span><br><span class="line">        &quot;PostDate&quot;: &quot;2020-06-08T21:04:00&quot;,</span><br><span class="line">        &quot;ViewCount&quot;: 14,</span><br><span class="line">        &quot;CommentCount&quot;: 0,</span><br><span class="line">        &quot;DiggCount&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: 13066686,</span><br><span class="line">        &quot;Title&quot;: &quot;SpringCloud之Feign&quot;,</span><br><span class="line">        &quot;Url&quot;: &quot;http://www.cnblogs.com/youcong/p/13066686.html&quot;,</span><br><span class="line">        &quot;Description&quot;: &quot;以我个人写的博客系统为例，请求其它微服务API。 一、添加Maven依赖 &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;&quot;,</span><br><span class="line">        &quot;Author&quot;: &quot;挑战者V&quot;,</span><br><span class="line">        &quot;BlogApp&quot;: &quot;youcong&quot;,</span><br><span class="line">        &quot;Avatar&quot;: &quot;https://pic.cnblogs.com/face/1255290/20190518211156.png&quot;,</span><br><span class="line">        &quot;PostDate&quot;: &quot;2020-06-08T21:03:00&quot;,</span><br><span class="line">        &quot;ViewCount&quot;: 8,</span><br><span class="line">        &quot;CommentCount&quot;: 0,</span><br><span class="line">        &quot;DiggCount&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: 13042794,</span><br><span class="line">        &quot;Title&quot;: &quot;SpringCloud之服务注册中心和提供者(Eureka Server和Eureka Client)&quot;,</span><br><span class="line">        &quot;Url&quot;: &quot;http://www.cnblogs.com/youcong/p/13042794.html&quot;,</span><br><span class="line">        &quot;Description&quot;: &quot;一、使用Eureka Server搭建服务注册中心 1.Maven依赖 &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-&quot;,</span><br><span class="line">        &quot;Author&quot;: &quot;挑战者V&quot;,</span><br><span class="line">        &quot;BlogApp&quot;: &quot;youcong&quot;,</span><br><span class="line">        &quot;Avatar&quot;: &quot;https://pic.cnblogs.com/face/1255290/20190518211156.png&quot;,</span><br><span class="line">        &quot;PostDate&quot;: &quot;2020-06-08T21:01:00&quot;,</span><br><span class="line">        &quot;ViewCount&quot;: 17,</span><br><span class="line">        &quot;CommentCount&quot;: 0,</span><br><span class="line">        &quot;DiggCount&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: 13027193,</span><br><span class="line">        &quot;Title&quot;: &quot;GitHub Pages Hexo 配置来自阿里云的域名或腾讯云的域名&quot;,</span><br><span class="line">        &quot;Url&quot;: &quot;http://www.cnblogs.com/youcong/p/13027193.html&quot;,</span><br><span class="line">        &quot;Description&quot;: &quot;参考地址如下(亲试有效，我的博客应该试过了，可以指向我的域名，之所以我没有指向是因为博客的阅读量和访问等目前不能迁移所以就不做指向了):Github个人博客：绑定域名 腾讯云GitHub Pages Hexo 配置来自阿里云的域名&quot;,</span><br><span class="line">        &quot;Author&quot;: &quot;挑战者V&quot;,</span><br><span class="line">        &quot;BlogApp&quot;: &quot;youcong&quot;,</span><br><span class="line">        &quot;Avatar&quot;: &quot;https://pic.cnblogs.com/face/1255290/20190518211156.png&quot;,</span><br><span class="line">        &quot;PostDate&quot;: &quot;2020-06-08T20:59:00&quot;,</span><br><span class="line">        &quot;ViewCount&quot;: 11,</span><br><span class="line">        &quot;CommentCount&quot;: 0,</span><br><span class="line">        &quot;DiggCount&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: 13066658,</span><br><span class="line">        &quot;Title&quot;: &quot;博客园开放API如何使用&quot;,</span><br><span class="line">        &quot;Url&quot;: &quot;http://www.cnblogs.com/youcong/p/13066658.html&quot;,</span><br><span class="line">        &quot;Description&quot;: &quot;业务背景:我通过weblogic这个Java爬虫框架是能够爬取得到博客园的大多数数据，但后来得知博客园有自己的开放API，通过这个开放API可以做一些事情，比方说实现一个关于博客园文章的小程序阅读、或者想学习go、node.js、flutter或uniapp用其实现一个CMS应用。 一、API KE&quot;,</span><br><span class="line">        &quot;Author&quot;: &quot;挑战者V&quot;,</span><br><span class="line">        &quot;BlogApp&quot;: &quot;youcong&quot;,</span><br><span class="line">        &quot;Avatar&quot;: &quot;https://pic.cnblogs.com/face/1255290/20190518211156.png&quot;,</span><br><span class="line">        &quot;PostDate&quot;: &quot;2020-06-08T20:55:00&quot;,</span><br><span class="line">        &quot;ViewCount&quot;: 25,</span><br><span class="line">        &quot;CommentCount&quot;: 0,</span><br><span class="line">        &quot;DiggCount&quot;: 0</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>直接用JSONObject解析是不行的，需要用JSONArray去做。</p><p>解决问题核心代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String result = cnBlogApiService.getPersonalBlogPostList(pageIndex, accessToken); //取第三方API返回的JSON数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      JSONArray jsonArray = new JSONArray(result);</span><br><span class="line">      </span><br><span class="line">      if(jsonArray.size()&gt;0)&#123;</span><br><span class="line">          for(int i = 0 ;i&lt;jsonArray.size();i++)&#123;</span><br><span class="line">              JSONObject jsonObject =jsonArray.getJSONObject(i);</span><br><span class="line">              System.out.println(&quot;js:&quot;+jsonObject.getStr(&quot;Url&quot;));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之equals和==区别</title>
      <link href="/2020/06/14/Java%E4%B9%8Bequals%E5%92%8C-%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/06/14/Java%E4%B9%8Bequals%E5%92%8C-%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>equals和==是Java中用到频率很高的，虽然不少开发者使用第三方的JAR包如hutool中的StrUtil.isEmptyIfStr(Object obj)这个方法中源代码就是==,<br>如下源代码:<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isEmptyIfStr(Object obj) &#123;</span><br><span class="line">if (null == obj) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125; else if (obj instanceof CharSequence) &#123;</span><br><span class="line">return 0 == ((CharSequence) obj).length();</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再比如我再这篇文章<a href="https://developers-youcong.github.io/2020/06/10/SpringCloud%E4%B9%8BSecurity/">SpringCloud之Security</a>中的自定义登录验证就用到equals和==。</p><p>可以说不论过去还是现在，我所开发的Java系统都涉及到这两个(凡是牵涉到判断的地方基本都这么用，不排除不少公司用第三方API封装好的，但本质上都是这些的封装和判断)。</p><p>虽然在用但对其也不是非常了解，所以有必要深入。</p><h2><span id="1先说说equals和的区别">1.先说说equals和==的区别</span></h2><p>(1)对于==<br>如果作用于基本数据类型的变量，则直接比较其存储的 “值”是否相等;如果作用于引用类型的变量，则比较的是所指向的对象的地址。</p><p>(2)对于equals方法，<br>注意：equals方法不能作用于基本数据类型的变量,如果没有对equals方法进行重写，则比较的是引用类型的变量所指向的对象的地址，如果对equals方法进行重新，则比较的就是值是否相等。</p><h2><span id="2以string源代码equals为例">2.以String源代码equals为例</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object anObject) &#123;</span><br><span class="line">    if (this == anObject) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    if (anObject instanceof String) &#123;</span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        int n = value.length;</span><br><span class="line">        if (n == anotherString.value.length) &#123;</span><br><span class="line">            char v1[] = value;</span><br><span class="line">            char v2[] = anotherString.value;</span><br><span class="line">            int i = 0;</span><br><span class="line">            while (n-- != 0) &#123;</span><br><span class="line">                if (v1[i] != v2[i])</span><br><span class="line">                    return false;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码可以这么理解:<br><strong>在String类中equals方法不仅可以用==判断对象的内存地址是否相等，相等则返回true。如果前面的判断不成立，接着判断括号内的对象上是否是String类型，接着判断两个字符串对象的的长度是否相等，最后判断内容是否相等，如果相等则返回true。</strong></p><p>来个例子，如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String s1 = &quot;blog&quot;;</span><br><span class="line"></span><br><span class="line">String s2 = new String(&quot;blog&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s2);//输出结果为false</span><br><span class="line"></span><br><span class="line">System.out.println(s1.equals(s2)); //输出结果为true</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SLF4J: Class path contains multiple SLF4J bindings.</title>
      <link href="/2020/06/10/SLF4J-Class-path-contains-multiple-SLF4J-bindings/"/>
      <url>/2020/06/10/SLF4J-Class-path-contains-multiple-SLF4J-bindings/</url>
      
        <content type="html"><![CDATA[<p>错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SLF4J Warning: Class Path Contains Multiple SLF4J Bindings</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>错误原因:<br>我个人博客系统一个爬虫组件用到webmagic，而webmagic与lomback中的slf有冲突。</p><p>解决办法(webmagic排除相关依赖即可):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- webmagic--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;us.codecraft&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;webmagic-core&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;$&#123;webmagic.version&#125;&lt;/version&gt;</span><br><span class="line">          &lt;exclusions&gt;</span><br><span class="line">              &lt;exclusion&gt;</span><br><span class="line">                  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">                  &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">              &lt;/exclusion&gt;</span><br><span class="line">              &lt;exclusion&gt;</span><br><span class="line">                  &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">                  &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">              &lt;/exclusion&gt;</span><br><span class="line">          &lt;/exclusions&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>参考解决问题地址:<br><a href="https://www.baeldung.com/slf4j-classpath-multiple-bindings" target="_blank" rel="noopener">SLF4J Warning: Class Path Contains Multiple SLF4J Bindings</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之Security</title>
      <link href="/2020/06/10/SpringCloud%E4%B9%8BSecurity/"/>
      <url>/2020/06/10/SpringCloud%E4%B9%8BSecurity/</url>
      
        <content type="html"><![CDATA[<p>Spring Security是Spring提供的一个安全框架，提供认证和授权功能，最主要的是它提供了简单的使用方式，同时又有很高的灵活性，简单，灵活，强大。</p><p>我个人博客系统采用的权限框架就是Spring Security，正好整合到SpringCloud里面。<br><a id="more"></a><br>一般系统里关于角色方面通常有这么几张表，角色表、用户-角色表、菜单表、角色-菜单表等。</p><p>不过我个人博客系统主要以wordpress作为参考，沿用其12张表,如图:<br><img src="/2020/06/10/SpringCloud之Security/05.png" alt=""></p><h2><span id="一-导入maven依赖">一、导入Maven依赖</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">       &lt;jjwt.version&gt;0.9.0&lt;/jjwt.version&gt;</span><br><span class="line">       &lt;spring-security-jwt.version&gt;1.0.9.RELEASE&lt;/spring-security-jwt.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"> &lt;!-- springsecurity--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-security-jwt&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;$&#123;spring-security-jwt.version&#125;&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;$&#123;jjwt.version&#125;&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2><span id="二-编写spring-security配置类">二、编写Spring Security配置类</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.config;</span><br><span class="line">import com.springcloud.blog.admin.security.UserAuthenticationProvider;</span><br><span class="line">import com.springcloud.blog.admin.security.UserPermissionEvaluator;</span><br><span class="line">import com.springcloud.blog.admin.security.handler.*;</span><br><span class="line">import com.springcloud.blog.admin.security.jwt.JWTAuthenticationTokenFilter;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line">import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line">import org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class="line">import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line">import org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * SpringSecurity配置类</span><br><span class="line"> * @Author youcong</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">@EnableGlobalMethodSecurity(prePostEnabled = true) //开启权限注解,默认是关闭的</span><br><span class="line">public class SecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 自定义登录成功处理器</span><br><span class="line">     */</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserLoginSuccessHandler userLoginSuccessHandler;</span><br><span class="line">    /**</span><br><span class="line">     * 自定义登录失败处理器</span><br><span class="line">     */</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserLoginFailureHandler userLoginFailureHandler;</span><br><span class="line">    /**</span><br><span class="line">     * 自定义注销成功处理器</span><br><span class="line">     */</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserLogoutSuccessHandler userLogoutSuccessHandler;</span><br><span class="line">    /**</span><br><span class="line">     * 自定义暂无权限处理器</span><br><span class="line">     */</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserAuthAccessDeniedHandler userAuthAccessDeniedHandler;</span><br><span class="line">    /**</span><br><span class="line">     * 自定义未登录的处理器</span><br><span class="line">     */</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserAuthenticationEntryPointHandler userAuthenticationEntryPointHandler;</span><br><span class="line">    /**</span><br><span class="line">     * 自定义登录逻辑验证器</span><br><span class="line">     */</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserAuthenticationProvider userAuthenticationProvider;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加密方式</span><br><span class="line">     * @Author youcong</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public BCryptPasswordEncoder bCryptPasswordEncoder()&#123;</span><br><span class="line">        return new BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 注入自定义PermissionEvaluator</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public DefaultWebSecurityExpressionHandler userSecurityExpressionHandler()&#123;</span><br><span class="line">        DefaultWebSecurityExpressionHandler handler = new DefaultWebSecurityExpressionHandler();</span><br><span class="line">        handler.setPermissionEvaluator(new UserPermissionEvaluator());</span><br><span class="line">        return handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 配置登录验证逻辑</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(AuthenticationManagerBuilder auth)&#123;</span><br><span class="line">        //这里可启用我们自己的登陆验证逻辑</span><br><span class="line">        auth.authenticationProvider(userAuthenticationProvider);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 配置security的控制逻辑</span><br><span class="line">     * @Author youcong</span><br><span class="line">     * @Param  http 请求</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                // 不进行权限验证的请求或资源(从配置文件中读取)</span><br><span class="line">                .antMatchers(JWTConfig.antMatchers.split(&quot;,&quot;)).permitAll()</span><br><span class="line">                // .antMatchers(&quot;/*&quot;).permitAll()</span><br><span class="line">                // 其他的需要登陆后才能访问</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                // 配置未登录自定义处理类</span><br><span class="line">                .httpBasic().authenticationEntryPoint(userAuthenticationEntryPointHandler)</span><br><span class="line">                .and()</span><br><span class="line">                // 配置登录地址</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginProcessingUrl(&quot;/login/userLogin&quot;)</span><br><span class="line">                // 配置登录成功自定义处理类</span><br><span class="line">                .successHandler(userLoginSuccessHandler)</span><br><span class="line">                // 配置登录失败自定义处理类</span><br><span class="line">                .failureHandler(userLoginFailureHandler)</span><br><span class="line">                .and()</span><br><span class="line">                // 配置登出地址</span><br><span class="line">                .logout()</span><br><span class="line">                .logoutUrl(&quot;/login/userLogout&quot;)</span><br><span class="line">                // 配置用户登出自定义处理类</span><br><span class="line">                .logoutSuccessHandler(userLogoutSuccessHandler)</span><br><span class="line">                .and()</span><br><span class="line">                // 配置没有权限自定义处理类</span><br><span class="line">                .exceptionHandling().accessDeniedHandler(userAuthAccessDeniedHandler)</span><br><span class="line">                .and()</span><br><span class="line">                // 开启跨域</span><br><span class="line">                .cors()</span><br><span class="line">                .and()</span><br><span class="line">                // 取消跨站请求伪造防护</span><br><span class="line">                .csrf().disable();</span><br><span class="line">        // 基于Token不需要session</span><br><span class="line">        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);</span><br><span class="line">        // 禁用缓存</span><br><span class="line">        http.headers().cacheControl();</span><br><span class="line">        // 添加JWT过滤器</span><br><span class="line">        http.addFilter(new JWTAuthenticationTokenFilter(authenticationManager()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="三-编写jwtconfig和applicationyml增加jwt相关配置">三、编写JWTConfig和application.yml增加jwt相关配置</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.config;</span><br><span class="line">import lombok.Getter;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * JWT配置类</span><br><span class="line"> * @Author youcong</span><br><span class="line"> */</span><br><span class="line">@Getter</span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;jwt&quot;)</span><br><span class="line">public class JWTConfig &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 密钥KEY</span><br><span class="line">     */</span><br><span class="line">    public static String secret;</span><br><span class="line">    /**</span><br><span class="line">     * TokenKey</span><br><span class="line">     */</span><br><span class="line">    public static String tokenHeader;</span><br><span class="line">    /**</span><br><span class="line">     * Token前缀字符</span><br><span class="line">     */</span><br><span class="line">    public static String tokenPrefix;</span><br><span class="line">    /**</span><br><span class="line">     * 过期时间</span><br><span class="line">     */</span><br><span class="line">    public static Integer expiration;</span><br><span class="line">    /**</span><br><span class="line">     * 不需要认证的接口</span><br><span class="line">     */</span><br><span class="line">    public static String antMatchers;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void setSecret(String secret) &#123;</span><br><span class="line">        this.secret = secret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTokenHeader(String tokenHeader) &#123;</span><br><span class="line">        this.tokenHeader = tokenHeader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTokenPrefix(String tokenPrefix) &#123;</span><br><span class="line">        this.tokenPrefix = tokenPrefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setExpiration(Integer expiration) &#123;</span><br><span class="line">        this.expiration = expiration * 1000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAntMatchers(String antMatchers) &#123;</span><br><span class="line">        this.antMatchers = antMatchers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yml增加如下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># JWT配置</span><br><span class="line">jwt:</span><br><span class="line">  # 密匙KEY</span><br><span class="line">  secret: JWTSecret</span><br><span class="line">  # HeaderKEY</span><br><span class="line">  tokenHeader: Authorization</span><br><span class="line">  # Token前缀字符</span><br><span class="line">  tokenPrefix: challenger-</span><br><span class="line">  # 过期时间 单位秒 1天后过期=86400 7天后过期=604800</span><br><span class="line">  expiration: 86400</span><br><span class="line">  # 配置不需要认证的接口</span><br><span class="line">  antMatchers: /index/**,/login/**,/favicon.ico</span><br><span class="line">  # 有效时间</span><br><span class="line">  validTime: 7</span><br></pre></td></tr></table></figure></p><h2><span id="四-编写过滤器处理类">四、编写过滤器处理类</span></h2><h3><span id="1userloginsuccesshandlerjava">1.UserLoginSuccessHandler.java</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.security.handler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.springcloud.blog.admin.config.JWTConfig;</span><br><span class="line">import com.springcloud.blog.admin.security.entity.SelfUserEntity;</span><br><span class="line">import com.springcloud.blog.admin.utils.AccessAddressUtil;</span><br><span class="line">import com.springcloud.blog.admin.utils.JWTTokenUtil;</span><br><span class="line">import com.springcloud.blog.admin.utils.RedisUtil;</span><br><span class="line">import com.springcloud.blog.admin.utils.ResultUtil;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.security.core.Authentication;</span><br><span class="line">import org.springframework.security.web.authentication.AuthenticationSuccessHandler;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Description 登录成功处理类</span><br><span class="line"> * @Author youcong</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class UserLoginSuccessHandler implements AuthenticationSuccessHandler &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 登录成功返回结果</span><br><span class="line">     * @Author youcong</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication)&#123;</span><br><span class="line">        // 组装JWT</span><br><span class="line">        SelfUserEntity selfUserEntity =  (SelfUserEntity) authentication.getPrincipal();</span><br><span class="line">        String token = JWTTokenUtil.createAccessToken(selfUserEntity);</span><br><span class="line">        token = JWTConfig.tokenPrefix + token;</span><br><span class="line"></span><br><span class="line">        // 封装返回参数</span><br><span class="line">        Map&lt;String,Object&gt; resultData = new HashMap&lt;&gt;();</span><br><span class="line">        resultData.put(&quot;code&quot;,&quot;200&quot;);</span><br><span class="line">        resultData.put(&quot;msg&quot;, &quot;登录成功&quot;);</span><br><span class="line">        resultData.put(&quot;token&quot;,token);</span><br><span class="line">        ResultUtil.responseJson(response,resultData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="2userloginfailurehandlerjava">2.UserLoginFailureHandler.java</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.security.handler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.springcloud.blog.admin.utils.ResultUtil;</span><br><span class="line">import org.springframework.security.authentication.BadCredentialsException;</span><br><span class="line">import org.springframework.security.authentication.LockedException;</span><br><span class="line">import org.springframework.security.core.AuthenticationException;</span><br><span class="line">import org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line">import org.springframework.security.web.authentication.AuthenticationFailureHandler;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Description 登录失败处理类</span><br><span class="line"> * @Author youcong</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class UserLoginFailureHandler implements AuthenticationFailureHandler &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 登录失败返回结果</span><br><span class="line">     * @Author youcong</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)&#123;</span><br><span class="line">        // 这些对于操作的处理类可以根据不同异常进行不同处理</span><br><span class="line">        if (exception instanceof UsernameNotFoundException)&#123;</span><br><span class="line">            System.out.println(&quot;【登录失败】&quot;+exception.getMessage());</span><br><span class="line">            ResultUtil.responseJson(response,ResultUtil.resultCode(500,&quot;用户名不存在&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        if (exception instanceof LockedException)&#123;</span><br><span class="line">            System.out.println(&quot;【登录失败】&quot;+exception.getMessage());</span><br><span class="line">            ResultUtil.responseJson(response,ResultUtil.resultCode(500,&quot;用户被冻结&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        if (exception instanceof BadCredentialsException)&#123;</span><br><span class="line">            System.out.println(&quot;【登录失败】&quot;+exception.getMessage());</span><br><span class="line">            ResultUtil.responseJson(response,ResultUtil.resultCode(500,&quot;密码错误&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        ResultUtil.responseJson(response,ResultUtil.resultCode(500,&quot;登录失败&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="3userlogoutsuccesshandlerjava">3.UserLogoutSuccessHandler.java</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.security.handler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.springcloud.blog.admin.utils.DateUtil;</span><br><span class="line">import com.springcloud.blog.admin.utils.RedisUtil;</span><br><span class="line">import com.springcloud.blog.admin.utils.ResultUtil;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.security.core.Authentication;</span><br><span class="line">import org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line">import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 登出成功处理类</span><br><span class="line"> * @Author youcong</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class UserLogoutSuccessHandler implements LogoutSuccessHandler &#123;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户登出返回结果</span><br><span class="line">     * 这里应该让前端清除掉Token</span><br><span class="line">     * @Author youcong</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication)&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; resultData = new HashMap&lt;&gt;();</span><br><span class="line">        resultData.put(&quot;code&quot;,&quot;200&quot;);</span><br><span class="line">        resultData.put(&quot;msg&quot;, &quot;登出成功&quot;);</span><br><span class="line">        SecurityContextHolder.clearContext();</span><br><span class="line">        ResultUtil.responseJson(response,ResultUtil.resultSuccess(resultData));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="4userauthaccessdeniedhandlerjava">4.UserAuthAccessDeniedHandler.java</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.security.handler;</span><br><span class="line">import com.springcloud.blog.admin.utils.ResultUtil;</span><br><span class="line">import org.springframework.security.access.AccessDeniedException;</span><br><span class="line">import org.springframework.security.web.access.AccessDeniedHandler;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Description 暂无权限处理类</span><br><span class="line"> * @Author youcong</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class UserAuthAccessDeniedHandler implements AccessDeniedHandler &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 暂无权限返回结果</span><br><span class="line">     * @Author youcong</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException exception)&#123;</span><br><span class="line">        ResultUtil.responseJson(response,ResultUtil.resultCode(403,&quot;未授权&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="5userauthenticationentrypointhandlerjava">5.UserAuthenticationEntryPointHandler.java</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.security.handler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.springcloud.blog.admin.utils.ResultUtil;</span><br><span class="line">import org.springframework.security.core.AuthenticationException;</span><br><span class="line">import org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 用户未登录处理类</span><br><span class="line"> * @Author youcong</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class UserAuthenticationEntryPointHandler implements AuthenticationEntryPoint &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 用户未登录返回结果</span><br><span class="line">     * @Author youcong</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)&#123;</span><br><span class="line">        ResultUtil.responseJson(response,ResultUtil.resultCode(401,&quot;未登录&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="6userauthenticationproviderjava">6.UserAuthenticationProvider.java</span></h3><p>自定义登录验证这个类，需要根据实际情况重写。通常来说改动不大。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.security;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.mapper.EntityWrapper;</span><br><span class="line">import com.springcloud.blog.admin.entity.Usermeta;</span><br><span class="line">import com.springcloud.blog.admin.entity.Users;</span><br><span class="line">import com.springcloud.blog.admin.security.entity.SelfUserEntity;</span><br><span class="line">import com.springcloud.blog.admin.service.UsermetaService;</span><br><span class="line">import com.springcloud.blog.admin.service.UsersService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.security.authentication.AuthenticationProvider;</span><br><span class="line">import org.springframework.security.authentication.BadCredentialsException;</span><br><span class="line">import org.springframework.security.authentication.LockedException;</span><br><span class="line">import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line">import org.springframework.security.core.Authentication;</span><br><span class="line">import org.springframework.security.core.AuthenticationException;</span><br><span class="line">import org.springframework.security.core.GrantedAuthority;</span><br><span class="line">import org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line">import org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line">import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 自定义登录验证</span><br><span class="line"> *</span><br><span class="line"> * @Author youcong</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class UserAuthenticationProvider implements AuthenticationProvider &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UsersService usersService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UsermetaService usermetaService;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Authentication authenticate(Authentication authentication) throws AuthenticationException &#123;</span><br><span class="line">        // 获取表单输入中返回的用户名</span><br><span class="line">        String userName = (String) authentication.getPrincipal();</span><br><span class="line">        // 获取表单中输入的密码</span><br><span class="line">        String password = (String) authentication.getCredentials();</span><br><span class="line">        // 查询用户是否存在</span><br><span class="line">         SelfUserEntity userInfo = usersService.getUserInfo(userName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (userInfo.getUsername() == null || userInfo.getUsername() == &quot;&quot;) &#123;</span><br><span class="line">            throw new UsernameNotFoundException(&quot;用户名不存在&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 我们还要判断密码是否正确，这里我们的密码使用BCryptPasswordEncoder进行加密的</span><br><span class="line">        if (!new BCryptPasswordEncoder().matches(password, userInfo.getPassword())) &#123;</span><br><span class="line">            throw new BadCredentialsException(&quot;密码不正确&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        // 还可以加一些其他信息的判断，比如用户账号已停用等判断</span><br><span class="line">        if (userInfo.getStatus().equals(&quot;1&quot;)) &#123;</span><br><span class="line">            throw new LockedException(&quot;该用户已被冻结&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        // 角色集合</span><br><span class="line">        Set&lt;GrantedAuthority&gt; authorities = new HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        EntityWrapper&lt;Usermeta&gt; roleWrapper = new EntityWrapper&lt;&gt;();</span><br><span class="line">        roleWrapper.eq(&quot;user_id&quot;,userInfo.getUserId());</span><br><span class="line">        roleWrapper.eq(&quot;meta_key&quot;,&quot;wp_user_level&quot;);</span><br><span class="line">        // 查询用户角色</span><br><span class="line">        List&lt;Usermeta&gt; sysRoleEntityList = usermetaService.selectList(roleWrapper);</span><br><span class="line">        for (Usermeta sysRoleEntity: sysRoleEntityList)&#123;</span><br><span class="line">            authorities.add(new SimpleGrantedAuthority(&quot;ROLE_&quot; + sysRoleEntity.getMetaValue()));</span><br><span class="line">        &#125;</span><br><span class="line">        userInfo.setAuthorities(authorities);</span><br><span class="line">        // 进行登录</span><br><span class="line">        return new UsernamePasswordAuthenticationToken(userInfo, password, authorities);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean supports(Class&lt;?&gt; authentication) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3><span id="7userpermissionevaluatorjava">7.UserPermissionEvaluator.java</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.security;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.mapper.EntityWrapper;</span><br><span class="line">import com.springcloud.blog.admin.entity.Usermeta;</span><br><span class="line">import com.springcloud.blog.admin.service.UsermetaService;</span><br><span class="line">import org.apache.catalina.User;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.security.access.PermissionEvaluator;</span><br><span class="line">import org.springframework.security.core.Authentication;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 自定义权限注解验证</span><br><span class="line"> * @Author youcong</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class UserPermissionEvaluator implements PermissionEvaluator &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UsermetaService usermetaService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * hasPermission鉴权方法</span><br><span class="line">     * 这里仅仅判断PreAuthorize注解中的权限表达式</span><br><span class="line">     * 实际中可以根据业务需求设计数据库通过targetUrl和permission做更复杂鉴权</span><br><span class="line">     * 当然targetUrl不一定是URL可以是数据Id还可以是管理员标识等,这里根据需求自行设计</span><br><span class="line">     * @Author youcong</span><br><span class="line">     * @Param  authentication  用户身份(在使用hasPermission表达式时Authentication参数默认会自动带上)</span><br><span class="line">     * @Param  targetUrl  请求路径</span><br><span class="line">     * @Param  permission 请求路径权限</span><br><span class="line">     * @Return boolean 是否通过</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public boolean hasPermission(Authentication authentication, Object targetUrl, Object permission) &#123;</span><br><span class="line">        // 获取用户信息</span><br><span class="line">        Usermeta selfUserEntity =(Usermeta) authentication.getPrincipal();</span><br><span class="line">        // 查询用户权限(这里可以将权限放入缓存中提升效率)</span><br><span class="line">        Set&lt;String&gt; permissions = new HashSet&lt;&gt;();</span><br><span class="line">        EntityWrapper&lt;Usermeta&gt; roleWrapper = new EntityWrapper&lt;&gt;();</span><br><span class="line">        roleWrapper.eq(&quot;user_id&quot;,selfUserEntity.getUserId());</span><br><span class="line">        roleWrapper.eq(&quot;meta_key&quot;,&quot;wp_user_level&quot;);</span><br><span class="line">        List&lt;Usermeta&gt; sysMenuEntityList = usermetaService.selectList(roleWrapper);</span><br><span class="line">        for (Usermeta sysMenuEntity:sysMenuEntityList) &#123;</span><br><span class="line">            permissions.add(sysMenuEntity.getMetaValue());</span><br><span class="line">        &#125;</span><br><span class="line">        // 权限对比</span><br><span class="line">        if (permissions.contains(permission.toString()))&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean hasPermission(Authentication authentication, Serializable targetId, String targetType, Object permission) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="五-编写实体类">五、编写实体类</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.security.entity;</span><br><span class="line"></span><br><span class="line">import org.springframework.security.core.GrantedAuthority;</span><br><span class="line">import org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.Collection;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * SpringSecurity用户的实体</span><br><span class="line"> * 注意:这里必须要实现UserDetails接口</span><br><span class="line"> *</span><br><span class="line"> * @Author youcong</span><br><span class="line"> */</span><br><span class="line">public class SelfUserEntity implements Serializable, UserDetails &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户ID</span><br><span class="line">     */</span><br><span class="line">    private Long userId;</span><br><span class="line">    /**</span><br><span class="line">     * 用户名</span><br><span class="line">     */</span><br><span class="line">    private String username;</span><br><span class="line">    /**</span><br><span class="line">     * 密码</span><br><span class="line">     */</span><br><span class="line">    private String password;</span><br><span class="line">    /**</span><br><span class="line">     * 状态</span><br><span class="line">     */</span><br><span class="line">    private String status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 显示名称</span><br><span class="line">     */</span><br><span class="line">    private String displayName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户参数</span><br><span class="line">     */</span><br><span class="line">    private Map&lt;String, String&gt; userParamMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户角色</span><br><span class="line">     */</span><br><span class="line">    private Collection&lt;GrantedAuthority&gt; authorities;</span><br><span class="line">    /**</span><br><span class="line">     * 账户是否过期</span><br><span class="line">     */</span><br><span class="line">    private boolean isAccountNonExpired = false;</span><br><span class="line">    /**</span><br><span class="line">     * 账户是否被锁定</span><br><span class="line">     */</span><br><span class="line">    private boolean isAccountNonLocked = false;</span><br><span class="line">    /**</span><br><span class="line">     * 证书是否过期</span><br><span class="line">     */</span><br><span class="line">    private boolean isCredentialsNonExpired = false;</span><br><span class="line">    /**</span><br><span class="line">     * 账户是否有效</span><br><span class="line">     */</span><br><span class="line">    private boolean isEnabled = true;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static long getSerialVersionUID() &#123;</span><br><span class="line">        return serialVersionUID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Long getUserId() &#123;</span><br><span class="line">        return userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserId(Long userId) &#123;</span><br><span class="line">        this.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void setAuthorities(Collection&lt;GrantedAuthority&gt; authorities) &#123;</span><br><span class="line">        this.authorities = authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void setEnabled(boolean enabled) &#123;</span><br><span class="line">        isEnabled = enabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStatus(String status) &#123;</span><br><span class="line">        this.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getStatus() &#123;</span><br><span class="line">        return status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDisplayName() &#123;</span><br><span class="line">        return displayName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDisplayName(String displayName) &#123;</span><br><span class="line">        this.displayName = displayName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Map&lt;String, String&gt; getUserParamMap() &#123;</span><br><span class="line">        return userParamMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserParamMap(Map&lt;String, String&gt; userParamMap) &#123;</span><br><span class="line">        this.userParamMap = userParamMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Collection&lt;GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        return authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isAccountNonExpired() &#123;</span><br><span class="line">        return isAccountNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isAccountNonLocked() &#123;</span><br><span class="line">        return isAccountNonLocked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isCredentialsNonExpired() &#123;</span><br><span class="line">        return isCredentialsNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isEnabled() &#123;</span><br><span class="line">        return isEnabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="六-编写jwt接口请求拦截器">六、编写JWT接口请求拦截器</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.security.jwt;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.springcloud.blog.admin.config.JWTConfig;</span><br><span class="line">import com.springcloud.blog.admin.security.entity.SelfUserEntity;</span><br><span class="line">import com.springcloud.blog.admin.utils.CollectionUtil;</span><br><span class="line">import com.springcloud.blog.admin.utils.JWTTokenUtil;</span><br><span class="line">import com.springcloud.blog.admin.utils.RedisUtil;</span><br><span class="line">import io.jsonwebtoken.Claims;</span><br><span class="line">import io.jsonwebtoken.ExpiredJwtException;</span><br><span class="line">import io.jsonwebtoken.Jwts;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line">import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line">import org.springframework.security.core.GrantedAuthority;</span><br><span class="line">import org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line">import org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line">import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;</span><br><span class="line">import org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line">import javax.servlet.FilterChain;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * JWT接口请求校验拦截器</span><br><span class="line"> * 请求接口时会进入这里验证Token是否合法和过期</span><br><span class="line"> *</span><br><span class="line"> * @Author youcong</span><br><span class="line"> */</span><br><span class="line">public class JWTAuthenticationTokenFilter extends BasicAuthenticationFilter &#123;</span><br><span class="line"></span><br><span class="line">    public JWTAuthenticationTokenFilter(AuthenticationManager authenticationManager) &#123;</span><br><span class="line">        super(authenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException &#123;</span><br><span class="line">        // 获取请求头中JWT的Token</span><br><span class="line">        String tokenHeader = request.getHeader(JWTConfig.tokenHeader);</span><br><span class="line"></span><br><span class="line">        if (null != tokenHeader &amp;&amp; tokenHeader.startsWith(JWTConfig.tokenPrefix)) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                // 截取JWT前缀</span><br><span class="line">                String token = tokenHeader.replace(JWTConfig.tokenPrefix, &quot;&quot;);</span><br><span class="line">                // 解析JWT</span><br><span class="line">                Claims claims = Jwts.parser()</span><br><span class="line">                        .setSigningKey(JWTConfig.secret)</span><br><span class="line">                        .parseClaimsJws(token)</span><br><span class="line">                        .getBody();</span><br><span class="line">                // 获取用户名</span><br><span class="line">                String username = claims.getSubject();</span><br><span class="line">                String userId = claims.getId();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                if (!StringUtils.isEmpty(username) &amp;&amp; !StringUtils.isEmpty(userId)) &#123;</span><br><span class="line">                    // 获取角色</span><br><span class="line">                    List&lt;GrantedAuthority&gt; authorities = new ArrayList&lt;&gt;();</span><br><span class="line">                    String authority = claims.get(&quot;authorities&quot;).toString();</span><br><span class="line">                    if (!StringUtils.isEmpty(authority)) &#123;</span><br><span class="line">                        List&lt;Map&lt;String, String&gt;&gt; authorityMap = JSONObject.parseObject(authority, List.class);</span><br><span class="line">                        for (Map&lt;String, String&gt; role : authorityMap) &#123;</span><br><span class="line">                            if (!StringUtils.isEmpty(role)) &#123;</span><br><span class="line">                                authorities.add(new SimpleGrantedAuthority(role.get(&quot;authority&quot;)));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //组装参数</span><br><span class="line">                    SelfUserEntity selfUserEntity = new SelfUserEntity();</span><br><span class="line">                    selfUserEntity.setUsername(claims.getSubject());</span><br><span class="line">                    selfUserEntity.setUserId(Long.parseLong(claims.getId()));</span><br><span class="line">                    selfUserEntity.setAuthorities(authorities);</span><br><span class="line">                    UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(selfUserEntity, userId, authorities);</span><br><span class="line">                    SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (ExpiredJwtException e) &#123;</span><br><span class="line">                System.out.println(&quot;Token过期&quot;);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                System.out.println(&quot;Token无效&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="七-springsecurity用户的业务实现">七、SpringSecurity用户的业务实现</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.security.service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.mapper.EntityWrapper;</span><br><span class="line">import com.springcloud.blog.admin.entity.Users;</span><br><span class="line">import com.springcloud.blog.admin.security.entity.SelfUserEntity;</span><br><span class="line">import com.springcloud.blog.admin.service.UsersService;</span><br><span class="line">import org.springframework.beans.BeanUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line">import org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * SpringSecurity用户的业务实现</span><br><span class="line"> *</span><br><span class="line"> * @Author youcong</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class SelfUserDetailsService implements UserDetailsService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UsersService usersService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询用户信息</span><br><span class="line">     *</span><br><span class="line">     * @Author youcong</span><br><span class="line">     * @Param username  用户名</span><br><span class="line">     * @Return UserDetails SpringSecurity用户信息</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public SelfUserEntity loadUserByUsername(String username) throws UsernameNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        EntityWrapper&lt;Users&gt; wrapper = new EntityWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //邮箱正则表达式</span><br><span class="line">        String expr = &quot;^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]&#123;2,4&#125;|[0-9]&#123;1,3&#125;)$&quot;;</span><br><span class="line"></span><br><span class="line">        //是否为邮箱</span><br><span class="line">        if (username.matches(expr)) &#123;</span><br><span class="line">            wrapper.eq(&quot;user_email&quot;, username);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            wrapper.eq(&quot;user_login&quot;, username);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 查询用户信息</span><br><span class="line">        Users sysUserEntity = usersService.selectOne(wrapper);</span><br><span class="line">        if (sysUserEntity != null) &#123;</span><br><span class="line">            // 组装参数</span><br><span class="line">            SelfUserEntity selfUserEntity = new SelfUserEntity();</span><br><span class="line">            BeanUtils.copyProperties(sysUserEntity, selfUserEntity);</span><br><span class="line">            return selfUserEntity;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="八-spring-security常用注解">八、Spring Security常用注解</span></h2><h3><span id="1secured">1.@Secured</span></h3><p>当@EnableGlobalMethodSecurity(securedEnabled=true)的时候，@Secured可以使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/helloUser&quot;)</span><br><span class="line">@Secured(&#123;&quot;ROLE_normal&quot;,&quot;ROLE_admin&quot;&#125;)</span><br><span class="line">public Map&lt;String, Object&gt; initDashboard() &#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = new HashMap&lt;&gt;();</span><br><span class="line">        result.put(ResponseDict.RESPONSE_TITLE_KEY, &quot;仪表盘初始化&quot;);</span><br><span class="line">        result.put(ResponseDict.RESPONSE_DATA_KEY, dashboardService.initDashboard());</span><br><span class="line">        return ResultUtil.resultSuccess(result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>说明：拥有normal或者admin角色的用户都可以方法helloUser()方法。另外需要注意的是这里匹配的字符串需要添加前缀“ROLE_“。</p><h3><span id="2preauthorize">2.@PreAuthorize</span></h3><p>Spring的 @PreAuthorize/@PostAuthorize 注解更适合方法级的安全,也支持Spring 表达式语言，提供了基于表达式的访问控制。</p><p>当@EnableGlobalMethodSecurity(prePostEnabled=true)的时候，@PreAuthorize可以使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/initDashboard&quot;)</span><br><span class="line">@PreAuthorize(&quot;hasRole(&apos;100&apos;)&quot;)</span><br><span class="line">public Map&lt;String, Object&gt; initDashboard() &#123;</span><br><span class="line">    Map&lt;String, Object&gt; result = new HashMap&lt;&gt;();</span><br><span class="line">    result.put(ResponseDict.RESPONSE_TITLE_KEY, &quot;仪表盘初始化&quot;);</span><br><span class="line">    result.put(ResponseDict.RESPONSE_DATA_KEY, dashboardService.initDashboard());</span><br><span class="line">    return ResultUtil.resultSuccess(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3><span id="3postauthorize">3.@PostAuthorize</span></h3><p> @PostAuthorize 注解使用并不多，在方法执行后再进行权限验证，适合验证带有返回值的权限，Spring EL 提供 返回对象能够在表达式语言中获取返回的对象returnObject。</p><p>当@EnableGlobalMethodSecurity(prePostEnabled=true)的时候，@PostAuthorize可以使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/getUserInfo&quot;)</span><br><span class="line">@PostAuthorize(&quot; returnObject!=null &amp;&amp;  returnObject.username == authentication.name&quot;)</span><br><span class="line">public User getUserInfo() &#123;</span><br><span class="line">        Object pricipal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">        User user;</span><br><span class="line">        if(&quot;anonymousUser&quot;.equals(pricipal)) &#123;</span><br><span class="line">            user = null;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            user = (User) pricipal;</span><br><span class="line">        &#125;</span><br><span class="line">        return user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="九-测试">九、测试</span></h2><p>(1)登录测试，拿到token,如图:<br><img src="/2020/06/10/SpringCloud之Security/01.png" alt=""></p><p>(2)请求中如果不携带token的话，请求其它接口就会显示没有登录的提示，如图:<br><img src="/2020/06/10/SpringCloud之Security/02.png" alt=""></p><p>(3)正确的请求应当携带token，就像下面这样，如图:<br><img src="/2020/06/10/SpringCloud之Security/03.png" alt=""></p><p>(4)没有权限请求，如图:<br><img src="/2020/06/10/SpringCloud之Security/04.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之Config</title>
      <link href="/2020/06/05/SpringCloud%E4%B9%8BConfig/"/>
      <url>/2020/06/05/SpringCloud%E4%B9%8BConfig/</url>
      
        <content type="html"><![CDATA[<p>配置中心，也就是SpringCloud中的Config组件，主要应用在哪些方面?</p><ul><li>配置文件方便维护</li><li>配置文件内容安全和权限</li><li>更新项目配置不需要重启</li></ul><p>本文主要围绕两个方面，一个是Config Server，另一个是Config Client。还是以我个人博客系统其中的一个模块为例。<br><a id="more"></a></p><h2><span id="一-搭建config-server">一、搭建Config Server</span></h2><h3><span id="1maven依赖">1.Maven依赖</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3><span id="2添加主类">2.添加主类</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableConfigServer</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class BlogConfigServerApplication &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(BlogConfigServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="3applicationyml配置文件修改">3.application.yml配置文件修改</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=blog-config-server</span><br><span class="line">server.port=8771</span><br><span class="line">spring.cloud.config.server.git.uri=https://github.com/developers-youcong/blog-springcloud-config</span><br><span class="line">spring.cloud.config.server.git.searchPaths=respo</span><br><span class="line">spring.cloud.config.label=master</span><br><span class="line">spring.cloud.config.server.git.username=</span><br><span class="line">spring.cloud.config.server.git.password=</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/</span><br></pre></td></tr></table></figure><h3><span id="4启动测试">4.启动测试</span></h3><p><img src="/2020/06/05/SpringCloud之Config/01.png" alt=""></p><h2><span id="二-搭建config-client">二、搭建Config Client</span></h2><h3><span id="1maven依赖">1.Maven依赖</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3><span id="2添加主类">2.添加主类</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@RestController</span><br><span class="line">@RefreshScope</span><br><span class="line">public class BlogConfigClientApplication &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(BlogConfigClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;version&#125;&quot;)</span><br><span class="line">    String version;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/getVersion&quot;)</span><br><span class="line">    public String getVersion() &#123;</span><br><span class="line">        return version;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="3bootstrapproperites配置文件">3.bootstrap.properites配置文件</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=blog-config-client</span><br><span class="line">spring.cloud.config.label=master</span><br><span class="line">spring.cloud.config.profile=dev</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/</span><br><span class="line">spring.cloud.config.discovery.enabled=true</span><br><span class="line">spring.cloud.config.uri= http://localhost:8771/</span><br><span class="line">spring.cloud.config.discovery.serviceId=blog-config-server</span><br><span class="line">server.port=8772</span><br></pre></td></tr></table></figure><h3><span id="4测试验证">4.测试验证</span></h3><p>浏览器输入:<a href="http://localhost:8772/getVersion,输出结果如下" target="_blank" rel="noopener">http://localhost:8772/getVersion,输出结果如下</a>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get version 1</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之Feign</title>
      <link href="/2020/06/05/SpringCloud%E4%B9%8BFeign/"/>
      <url>/2020/06/05/SpringCloud%E4%B9%8BFeign/</url>
      
        <content type="html"><![CDATA[<p>以我个人写的博客系统为例，请求其它微服务API。<br><a id="more"></a></p><h2><span id="一-添加maven依赖">一、添加Maven依赖</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2><span id="二-启动类增加enablefeignclients">二、启动类增加@EnableFeignClients</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class BlogAdminApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(BlogRibbonClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="三-编写服务接口类">三、编写服务接口类</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.example;</span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line">@FeignClient(&quot;blog-api&quot;)</span><br><span class="line">public interface FeignTestService &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     @GetMapping(&quot;/juhe/getIpInfo&quot;)</span><br><span class="line">     String getIpInfo(@RequestParam String ip);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特别注意:</strong></p><p>@FeignClient(“blog-api”),其中的blog-api必须是在Eureka Server注册的服务实例。</p><p>而对应的@RequestMapping的请求类型必须要写准确，Get请求就写Get，Post请求就写Post，这是其一。</p><p>还有就是请求参数是地址栏的形式还是请求体的形式也必须写清楚(记住必须要与对应的微服务URL保持一致，否则请求会出现问题)，使用@RequestParam或@RequestBody或@PathVariable的形式写清楚,这是其二。</p><h2><span id="四-编写controller">四、编写Controller</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.example;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(value = &quot;/test&quot;)</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    FeignTestService feignTestService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(value=&quot;/getIp&quot;)</span><br><span class="line">    public String getIp(String ip)&#123;</span><br><span class="line"></span><br><span class="line">        return feignTestService.getIpInfo(ip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="五-测试">五、测试</span></h2><p><img src="/2020/06/05/SpringCloud之Feign/01.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之Hystrix</title>
      <link href="/2020/06/05/SpringCloud%E4%B9%8BHystrix/"/>
      <url>/2020/06/05/SpringCloud%E4%B9%8BHystrix/</url>
      
        <content type="html"><![CDATA[<p>在微服务架构中，微服务之间互相依赖较大，相互之间调用必不可免的会失败。但当下游服务A因为瞬时流量导致服务崩溃，其他依赖于A服务的B、C服务由于调用A服务超时耗费了大量的资源，长时间下去，B、C服务也会崩溃。Hystrix就是用来解决服务之间相互调用失败，避免产生蝴蝶效应的熔断器，以及提供降级选项。Hystrix通过隔离服务之间的访问点，阻止它们之间的级联故障以及提供默认选项来实现这一目标，以提高系统的整体健壮性。</p><p><strong>它主要解决什么问题?</strong><br><a id="more"></a><br>用来避免由于服务之间依赖较重，出现个别服务宕机、停止服务导致大面积服务雪崩的情况。</p><h2><span id="一-maven依赖">一、Maven依赖</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2><span id="二-启动类配置">二、启动类配置</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableCircuitBreaker</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class BlogRibbonClientApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(BlogRibbonClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @LoadBalanced</span><br><span class="line">    RestTemplate restTemplate() &#123;</span><br><span class="line">        return new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="三-修改配置文件applicationyml">三、修改配置文件(application.yml)</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    fetchRegistry: true</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line">ribbon:</span><br><span class="line">  okhttp:</span><br><span class="line">    enabled: true #</span><br><span class="line">  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule # 默认为；轮询，这里改为随机</span><br><span class="line">  ConnectTimeout: 5000 # 连接超时时间(ms)</span><br><span class="line">  ReadTimeout: 5000 # 通信超时时间(ms)</span><br><span class="line">hystrix:</span><br><span class="line">  enabled: true</span><br><span class="line">  command:</span><br><span class="line">    default:</span><br><span class="line">      execution:</span><br><span class="line">        isolation:</span><br><span class="line">          thread:</span><br><span class="line">            timeoutInMilliseconds: 6000 #</span><br><span class="line">server:</span><br><span class="line">  port: 8765</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: blog-ribbon-client</span><br></pre></td></tr></table></figure><h2><span id="四-测试类">四、测试类</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.example;</span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line">@FeignClient(value=&quot;blog-api&quot;)</span><br><span class="line">public interface FeignTestService &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/juhe/getIpInfo&quot;)</span><br><span class="line">    String getIpInfo(@RequestParam String ip);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="五-测试效果">五、测试效果</span></h2><p>也可以自定义fallback实现返回值，只不过我觉得默认的看起来效果比较好，就直接默认的。<br><img src="/2020/06/05/SpringCloud之Hystrix/01.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客园开放API如何使用</title>
      <link href="/2020/06/04/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E5%BC%80%E6%94%BEAPI%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/06/04/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E5%BC%80%E6%94%BEAPI%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>业务背景:<br>我通过weblogic这个Java爬虫框架是能够爬取得到博客园的大多数数据，但后来得知博客园有自己的开放API，通过这个开放API可以做一些事情，比方说实现一个关于博客园文章的小程序阅读、或者想学习go、node.js、flutter或uniapp用其实现一个CMS应用。<br><a id="more"></a></p><h2><span id="一-api-key-申请">一、API KEY 申请</span></h2><p>申请地址:<br><a href="https://oauth.cnblogs.com/" target="_blank" rel="noopener">https://oauth.cnblogs.com/</a><br><img src="/2020/06/04/博客园开放API如何使用/01.png" alt=""></p><h2><span id="二-申请成功后会发一个邮件给你里面有clientid和clientsecret">二、申请成功后，会发一个邮件给你，里面有ClientId和ClientSecret</span></h2><h2><span id="三-访问博客园openapi文档">三、访问博客园OpenAPI文档</span></h2><p>地址为:<br><a href="https://api.cnblogs.com/Help" target="_blank" rel="noopener">https://api.cnblogs.com/Help</a><br><img src="/2020/06/04/博客园开放API如何使用/02.png" alt=""></p><h2><span id="四-验证请求一下">四、验证请求一下</span></h2><p><img src="/2020/06/04/博客园开放API如何使用/03.png" alt=""></p><p>如上图是我做了一层封装。</p><p>主要封装了请求体中的clien_id、client_secret、grant_type等。</p><p>基本上拿到了token，将其放到请求头中，接下来博客园开放接口都能使用(注意，是开放接口，没有开放的接口，换言之就是接口文档上没有了，就不能使用)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 第三方API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之Zuul</title>
      <link href="/2020/06/04/SpringCloud%E4%B9%8BZuul/"/>
      <url>/2020/06/04/SpringCloud%E4%B9%8BZuul/</url>
      
        <content type="html"><![CDATA[<p>使用SpringCloud Zuul实现网关代理。<br><a id="more"></a></p><h2><span id="一-maven依赖">一、Maven依赖</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2><span id="二-编写配置applicationyml">二、编写配置(application.yml)</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line">server:</span><br><span class="line">  port: 8769</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: blog-zuul-client</span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    api-a:</span><br><span class="line">      path: /blog/**</span><br><span class="line">      serviceId: blog-ribbon-client</span><br></pre></td></tr></table></figure><h2><span id="三-编写主类">三、编写主类</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableZuulProxy</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class BlogZuulClientApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run( BlogZuulClientApplication.class, args );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="四-编写过滤器">四、编写过滤器</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import com.netflix.zuul.ZuulFilter;</span><br><span class="line">import com.netflix.zuul.context.RequestContext;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class MyFilter extends ZuulFilter &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger log = LoggerFactory.getLogger(MyFilter.class);</span><br><span class="line">    @Override</span><br><span class="line">    public String filterType() &#123;</span><br><span class="line">        return &quot;pre&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int filterOrder() &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean shouldFilter() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object run() &#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        log.info(String.format(&quot;%s &gt;&gt;&gt; %s&quot;, request.getMethod(), request.getRequestURL().toString()));</span><br><span class="line">        Object accessToken = request.getHeader(&quot;Authorization&quot;);</span><br><span class="line">        if(accessToken == null) &#123;</span><br><span class="line">            log.warn(&quot;token is empty&quot;);</span><br><span class="line">            ctx.setSendZuulResponse(false);</span><br><span class="line">            ctx.setResponseStatusCode(401);</span><br><span class="line">            try &#123;</span><br><span class="line">                ctx.getResponse().getWriter().write(&quot;token is empty&quot;);</span><br><span class="line">            &#125;catch (Exception e)&#123;&#125;</span><br><span class="line"></span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(&quot;ok&quot;);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="五-测试">五、测试</span></h2><p>第一次请求，不携带token,如图:<br><img src="/2020/06/04/SpringCloud之Zuul/01.png" alt=""></p><p>第二次请求，携带token，如图:<br><img src="/2020/06/04/SpringCloud之Zuul/02.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之Ribbon</title>
      <link href="/2020/06/04/SpringCloud%E4%B9%8BRibbon/"/>
      <url>/2020/06/04/SpringCloud%E4%B9%8BRibbon/</url>
      
        <content type="html"><![CDATA[<p>SpringCloud通过Ribbon实现负载均衡。<br><a id="more"></a></p><h2><span id="一-添加maven依赖">一、添加Maven依赖</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line">       </span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2><span id="二-applicationyml配置">二、application.yml配置</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line">server:</span><br><span class="line">  port: 8765</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: blog-ribbon-client</span><br></pre></td></tr></table></figure><h2><span id="三-主类编写">三、主类编写</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableHystrix</span><br><span class="line">@EnableCircuitBreaker</span><br><span class="line">public class BlogRibbonClientApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(BlogRibbonClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @LoadBalanced</span><br><span class="line">    RestTemplate restTemplate() &#123;</span><br><span class="line">        return new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="四-编写测试相关">四、编写测试相关</span></h2><p>1.编写测试业务接口类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.example;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class TestService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    public String getPhone(String phone) &#123;</span><br><span class="line">        return restTemplate.getForObject(&quot;http://BLOG-API/juhe/getPhoneInfo?phone=&quot; + phone, String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意:<br>BLOG-API是服务实例的名字，是必须要在Eureka Server注册的，否则是无效的且请求会是404。</p><p>关于restTemplate分别实现RESTFUL相关，如POST、GET、DELETE、PUT等。</p><p>通过调用restTemplate.postForEntity(url,respResult)、restTemplate.getForEntity(url,respResult)、restTemplate.delete(url,respResult)、restTemplate.put(url,respResult)等，就能立马实现。<br>也可以使用全能的restTemplate.getForObject(url,respResult)。</p><p>其中的url一定要是eureka服务注册中心中存在的实例，同时实例后面相关的请求接口URL一定是要存在的，否则没有意义。</p><p>2.编写测试路由类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.example;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(value = &quot;/test&quot;)</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    TestService testService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(value = &quot;/getPhone&quot;)</span><br><span class="line">    public String getPhone(String phone) &#123;</span><br><span class="line"></span><br><span class="line">        return testService.getPhone(phone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="五-测试">五、测试</span></h2><p>请求的是我个人博客系统第三方集成API相关接口，图中的例子是输入个人手机号可获取该手机号相关信息<br>效果图如下:<br><img src="/2020/06/04/SpringCloud之Ribbon/01.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之服务注册中心和提供者</title>
      <link href="/2020/06/02/SpringCloud%E4%B9%8B%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%92%8C%E6%8F%90%E4%BE%9B%E8%80%85/"/>
      <url>/2020/06/02/SpringCloud%E4%B9%8B%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%92%8C%E6%8F%90%E4%BE%9B%E8%80%85/</url>
      
        <content type="html"><![CDATA[<h1><span id="一-使用eureka-server搭建服务注册中心">一、使用Eureka Server搭建服务注册中心</span></h1><a id="more"></a><h2><span id="1maven依赖">1.Maven依赖</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2><span id="2配置文件applicationyml">2.配置文件(application.yml)</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  evictionIntervalTimerInMs: 6000</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    registerWithEureka: false</span><br><span class="line">    fetchRegistry: false</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: blog-eureka-server</span><br></pre></td></tr></table></figure><h2><span id="3启动类">3.启动类</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaServer</span><br><span class="line">public class BlogEurekaServerApplication &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run( BlogEurekaServerApplication.class, args );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="4启动效果">4.启动效果</span></h2><p><img src="/2020/06/02/SpringCloud之服务注册中心和提供者/01.png" alt=""></p><h1><span id="一-使用eureka-client搭建服务提供者">一、使用Eureka Client搭建服务提供者</span></h1><h2><span id="1maven依赖">1.Maven依赖</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2><span id="2配置文件applicationyml">2.配置文件(application.yml)</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># Tomcat</span><br><span class="line">server:</span><br><span class="line">  tomcat:</span><br><span class="line">    uri-encoding: UTF-8</span><br><span class="line">    max-threads: 1000</span><br><span class="line">    min-spare-threads: 30</span><br><span class="line">  port: 2020</span><br><span class="line">  servlet:</span><br><span class="line">    context-path: /blog-admin</span><br><span class="line"></span><br><span class="line">## spring相关配置</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: blog-admin</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br><span class="line">  jackson:</span><br><span class="line">    date-format: yyyy-MM-dd HH:mm:ss</span><br><span class="line">    time-zone: GMT+8</span><br><span class="line">  servlet:</span><br><span class="line">    multipart:</span><br><span class="line">      max-file-size: 100MB</span><br><span class="line">      max-request-size: 100MB</span><br><span class="line">      enabled: true</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br></pre></td></tr></table></figure><h2><span id="3启动类">3.启动类</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication(exclude = DruidDataSourceAutoConfigure.class)</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class BlogAdminApplication&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">   </span><br><span class="line">        SpringApplication.run(BlogAdminApplication.class, args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="4启动后回过头看服务注册中心增加了一个服务提供者">4.启动后，回过头看服务注册中心，增加了一个服务提供者</span></h2><p><img src="/2020/06/02/SpringCloud之服务注册中心和提供者/02.png" alt=""></p><h1><span id="三-相关解释">三、相关解释</span></h1><h2><span id="1配置文件内容">1.配置文件内容</span></h2><ul><li>eureka.client.register-with-eureka:由于该应用为注册中心，所以设置为false，代表不向注册中心注册自己。</li><li>eureka.client.fetch-registry:由于注册中心的职责就是维护服务实例，它并不需要去检索实例，所以也设置为为false。</li><li>eureka.client.serviceUrl.defaultZone:注册中心地址</li><li>eureka.instance.lease-renewal-interval-in-seconds=30:定义服务续约任务的调用间隔时间，默认为30秒</li><li>eureka.instance.lease-expiration-duration-in-seconds=90:用于定义服务时效时间，默认为90秒</li></ul><h2><span id="2基础架构">2.基础架构</span></h2><p>Eureka服务治理基础架构的三个核心要素。</p><ul><li>服务注册中心:Eureka提供的服务端，提供服务注册与发现的功能</li><li>服务提供者:提供服务的应用，可以是SpringBoot应用，也可以是其他技术平台且遵循Eureka通信机制的应用。</li><li>服务消费者:消费者应用从服务注册中心获取服务列表，从而使消费者可以知道去何处调用其所需要的服务(很多时候服务提供者既是服务提供者也是服务消费者)</li></ul><h2><span id="3服务治理机制">3.服务治理机制</span></h2><h3><span id="服务提供者">服务提供者</span></h3><p>(1)服务注册<br>“服务提供者”在启动的时候会通过发送REST请求的方式将自己注册到Eureka Server上，同时带上了自身服务的一些元数据信息。Eureka Server 接收到这个REST请求之后，将元数据信息存储在一个双层结构Map中，其中第一层的key是服务名，第二层的key是具体服务的实例名。<br>在服务注册是，需要确认一下 eureka.client.register-with-eureka=true参数是否正确，该值默认为true。若设置为false将不会启动注册操作。</p><p>(2)服务同步<br>比方说两个服务提供者分别注册到两个不同的服务注册中心上，也就是说，它们的信息分别被两个服务注册中心所维护。此时，由于服务注册中心之间因为互相注册为服务，当服务提供者发送注册请求到一个服务注册中心是，它会将该请求转发给集群中相连的其他注册中心，从而实现注册中心之间的服务同步。通过服务同步，两个服务提供者的服务信息就可以通过这两台服务注册中心中的任意一台获取到。</p><p>(3)服务续约<br>在注册完服务之后，服务提供者会维护一个心跳用来持续告诉Eureka Server:”我还活着”,以防止Eureka Server的”剔除任务”将该服务实例从服务列表中排除出去，我们称该操作作为服务续约。</p><h3><span id="服务消费者">服务消费者</span></h3><p>(1)获取服务<br>当我们启动服务消费者的时候，它会发送一个REST请求给服务注册中心，来获取上面注册的服务清单。为了性能考虑，Eureka Server会维护一份只读的服务清单来返回给客户端，同时该缓存清单会每隔30秒更新一次。<br>获取服务是服务消费者的基础，所以必须确保eureka.client.fetch-registry=true参数没有被修改成false,该值默认为true。若希望修改缓存清单的更新时间，可以通过eureka.client.registry-fetch-interval-seconds=30参数进行修改，该参数默认值为30，单位为秒。</p><p>(2)服务调用<br>服务消费者在获取服务清单后，通过服务名可以获得具体提供服务的实例名和该实例的元数据信息。因为有了这些服务实例的详细信息，所以客户端可以根据自己的需求决定具体调用哪个实例，在Ribbon中会默认采用轮询的方式进行调用，从而实现客户端的负载均衡。<br>对于访问实例的选择，Eureka中有Region和Zone的概念，一个Region中可以包含多个Zone，每个服务客户端需要被注册到一个Zone中，所以每个客户端对应一个Region和一个Zone。在进行服务调用的时候，优先访问同处一个Zone中的服务提供方，若访问不到，就访问其他的Zone。</p><p>(3)服务下线<br>在系统运行过程中比如会面临关闭或重启服务的某个实例的情况，在服务关闭期间，我们自然不希望客户端会继续关闭了的实例。所以在客户端程序中，当服务实例进行正常的关闭操作，它会触发一个服务下线的REST请求给Eureka Server，告诉服务注册中心:”我要下线了”。服务端在接收到请求之后，将该服务状态置为下线，并把该下线事件传播出去。</p><h3><span id="服务注册中心">服务注册中心</span></h3><p>(1)失效剔除<br>有些时候，我们的服务实例并不一定会正常下线，可能由于内存溢出、网络故障灯原因使得服务不能正常工作，而服务注册中心并未收到”服务下线”的请求。为了从服务列表中将这些无法提供服务的实例剔除，Eureka Server在启动的时候会创建一个定时任务，默认每隔一段时间(默认为60秒)将当前清单中超时(默认为90秒)没有续约的服务剔除出去。</p><p>(2)自我保护<br>当我们在本地调试基于Eureka的程序时，基本上都会碰到这样一个问题，在服务注册中心的信息面板中出现类似下面的红色警告信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY&apos;RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</span><br></pre></td></tr></table></figure></p><p>实际上，该警告触发了Eureka Server的自我保护机制。</p><p>服务注册到Eureka Server之后，会维护一个心跳连接，告诉Eureka Server自己还活着。Eureka Server在运行期间，会统计心跳失败的比例在15分钟之内是否低于85%，如果出现低于的情况(在单机调试的时候很容易满足，实际在生产环境上通常是由于网络不稳定导致)，Eureka Server 会将当前的实例注册信息保护起来，让这些实例不会过期，尽可能保护这些注册信息。但是，在这段保护期间内实例若出现问题，那么客户端很容易拿到实际上不存在的服务实例，会出现调用失败的情况，所以客户端必须要有容错机制，比如可以使用请求重试、断路器等机制。</p><p>由于本地调试很容易触发注册中心的保护机制，这回使得注册中心维护的服务实例不那么准确。所以，我们在本地进行开发的时候，可以使用eureka.server.enable-self-preservation=false 参数来关闭保护机制，以确保注册中心可以将不可用的实例正确剔除。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《阿里工程师的自我修养》之阅读总结</title>
      <link href="/2020/06/01/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%E3%80%8B%E4%B9%8B%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/"/>
      <url>/2020/06/01/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%E3%80%8B%E4%B9%8B%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-技术人具备结构化思维意味着什么">一、技术人具备”结构化思维”意味着什么?</span></h2><a id="more"></a><h3><span id="1什么是结构化思维">1.什么是结构化思维？</span></h3><p>结构化思维的定义就是:思维+套路。</p><h4><span id="1表达要有逻辑">(1)表达要有逻辑</span></h4><p>所谓的逻辑是指我们的结构之间必须是有逻辑关系的。<br>想让内容有逻辑关系，我们要学会四种组织思想的逻辑关系:</p><p>a.演绎(因果)顺序:”大前提、小前提、结论”的演绎推理方法就是演绎顺序(经典三段论)。</p><p>b.时间(步骤)顺序:”第一、第二、第三”、”首先、然后、再者”等。</p><p>c.空间(结构)顺序:”前端、后端、数据”，化整为零(将整体分解为部分)等都是空间顺序)。</p><p>d.程度(重要性)顺序:比如”最重要、次重要、不重要”等。</p><h4><span id="2做事要有套路">(2)做事要有套路</span></h4><p>套路是指我们解决问题的方法论，这个也非常重要。<br>比如，5W2H分析法就是一个非常好的，可以帮助我们分析问题一个”套路”。</p><h5><span id="5w2h具体包含如下">5W2H具体包含如下:</span></h5><p>a.WHAT -&gt; 是什么？目的是什么？做什么工作？</p><p>b.WHY -&gt; 为什么要做?可不可以不做?有没有替代方案?</p><p>c.WHO -&gt; 谁?由谁来做?</p><p>d.WHEN -&gt; 何时?什么时间做?什么时机最适宜?</p><p>e.HOW -&gt; 怎么做?如何提高效率?如何实施?方法是什么?</p><p>f.HOW MUCH -&gt; 多少?做到什么程度?数量如何?质量水平如何?费用产出如何?</p><h3><span id="2如何进行结构化思考">2.如何进行结构化思考</span></h3><p>逻辑性和方法论是结构化思维的底层，那么如何进行结构化思考？<br>总的来说有两个步骤，首先是”建立中心”,然后再进行”分解”。</p><h4><span id="1建立中心">(1)建立中心</span></h4><p><strong>建立中心也就是定义清楚要解决的问题，要明确目标。</strong><br>是我们结构的顶层节点，也是一种以终为始的思考方式。也就是说，我们首先要搞清楚why，然后再进行how。</p><p>建立中心有两种方式:<br>a.自上而下:适用于问题比较明确的情况，我们只需要找到问题的核心要素即可，然后进行展开即可。</p><p>b.自下而上:对于问题不够明确的情况，我们需要对多种杂乱的内容，进行分类、剪枝、归纳汇总成一个中心。</p><h4><span id="2结构化分解">(2)结构化分解</span></h4><p>确定完中心之后，我们需要构建一个结构，使用结构化的思维对问题进行分解。</p><p>分解的策略如上所述四种逻辑顺序，即演绎顺序、时间顺序、空军顺序和程度顺序。</p><p>在做空间分解的时候，要注意满足MECE(相互独立，完全穷尽)原则。</p><h4><span id="3结构化思维如何应用">(3)结构化思维如何应用</span></h4><p>以如何落地新团队为例。<br>刚入职某家新公司，或转岗到一个新团队，作为一个技术人，你将如何落地开展你的工作呢？</p><h5><span id="熟悉业务">熟悉业务</span></h5><p>a.了解产品:任何一个团队有自己要负责的产品。申请一个厕所账号去用一下产品，是熟悉产品比较好的方式。</p><p>b.了解流程:任何业务都有自己的业务流程，而业务流里面最核心的是信息流。我们可以通过人员采访，了解关键节点的信息输入和信息输出;可以画一下泳道活动图，理清系统的主要角色，以及他们之间的交互关系。</p><p>c.客户走访:通过走访客户，我们可以更加获得业务的第一手资料，更加贴近业务和客户诉求。</p><h4><span id="熟悉技术">熟悉技术</span></h4><p>a.了解系统架构:可以让团队的技术人员介绍他们当初系统设计和架构思路。</p><p>b.了解领域模型:查看关键的核心表结构和系统API，这样可以快速了解系统的领域模型。</p><p>c.了解代码结构:下载系统工程，熟悉整个工程结构和模块职责。一一个最重要的流程为入手点，阅读代码，看清楚核心的执行逻辑。做一个小需求，掌握相关的流程和权限。</p><h4><span id="熟悉人">熟悉人</span></h4><p>a.了解组织结构:查看公司的组织树，知道公司大概是如何运作的，以及哪些是关键人(比如，一个典型的电商公司会包括产品部、运营部、销售部、技术部、人力资源部、财务部等)。</p><p>b.了解人员角色:了解公司都有哪些岗位，以及各岗位的职责范围。</p><p>c.拜山头:找到和自己工作息息相关的岗位人员，比如产品和运营。积极和他们沟通，向他们请教业务问题，多多交流。这样一方面可以建立更好的人际关系，另一方面也可以更快地熟悉业务。</p><h2><span id="二-优秀工程师必备的三大思维你拥有哪些">二、优秀工程师必备的三大思维，你拥有哪些？</span></h2><h3><span id="工程师必备三大思维">工程师必备三大思维</span></h3><h4><span id="1产品思维">1.产品思维</span></h4><p>(1)痛点(有价值)</p><p>(2)体验(易用)</p><p>(3)特性(可售)</p><p>(4)效果(闭环)</p><h4><span id="2技术思维">2.技术思维</span></h4><p>(1)需求(明确)</p><p>(2)功能(完善)</p><p>(3)性能(极致)</p><p>(4)交付(及时)</p><h4><span id="3工程思维">3.工程思维</span></h4><p>(1)流程(无缝)</p><p>(2)机制(系统性)</p><p>(3)质量(可靠)</p><p>(4)风险(可控)</p><p>(5)成本(低)</p><h2><span id="三-优秀工程师必备的一项技能你解锁了吗">三、优秀工程师必备的一项技能，你解锁了吗？</span></h2><h3><span id="1有哪些对程序员最重要的思考力">1.有哪些对程序员最重要的思考力</span></h3><h4><span id="1原理性思维找出知识背后的原理">(1)原理性思维:找出知识背后的原理</span></h4><p>案例:技术方案设计、系统架构和顶层设计、商业设计的原理等</p><h4><span id="2掌握知识背后的原理带来的好处">(2)掌握知识背后的原理，带来的好处</span></h4><ul><li>大幅度降低我们对于知识的记忆量，知识量是爆炸的，但是原理绝对是可控的</li><li>原理性的东西比直接的知识有更强的复用度</li><li>探求原理的过程，本身很有趣</li></ul><h5><span id="究竟有哪些原理性知识需要我们掌握的呢">究竟有哪些原理性知识需要我们掌握的呢?</span></h5><ul><li>Java、Linux、数据结构与算法、数据库、网络通信与分布式计算的原理</li><li>设计模式</li><li>领域向的基本原则</li><li>管理学、人际沟通学、心理学的一些基本原理，根据实际需求来看</li></ul><h5><span id="如何在工作中学习和运用这些原理最佳实践">如何在工作中学习和运用这些原理(最佳实践)</span></h5><ul><li>首先，对你可能用到的领域知识，建立一个基本的概念(通过看书、看文章、找行业资深的人去聊)</li><li>在实践中，有个意识是”多问一些为什么”，并一直”刨根问底”,最终能够追查到背后的最终远离(在此需要注意一点，需要思考一下为什么在这个地方会运用到这个原理，也就是找到了”场景”和”原理”的关联关系)</li><li>了解原理后，实践中运用，利于加深对原理的理解</li><li>如果是非常重要的原理，建议结合经典书籍系统化学习</li></ul><h4><span id="3结构化思维构建自己的知识树">(3)结构化思维:构建自己的知识树</span></h4><p>一些场景:</p><ul><li>为什么我知道很多东西，但是当场景来的时候老是记不起来使用;</li><li>完成一个方案你只能想起一些点状的手段，还有其他方案被漏掉了;</li><li>讲一件事情的时候逻辑非常混乱，前后没有逻辑性关联;</li></ul><p>为什么会出现这种悲剧?<br>与大脑中的知识结构有关，<strong>这是知识学习中”索引”没有建立，也就是说，你的知识只有点，没有线。</strong></p><p>如何训练出自己的知识树?</p><ul><li>一定要总结出自己的知识树，而不要盲从书本上或者别人的</li><li>习惯性总结</li><li>推荐一个很常见的工具:xmind</li><li>训练自己的思维习惯和做事方式变得结构化</li></ul><h4><span id="4重要观点小结">(4)重要观点小结</span></h4><p>a.思考力对程序员的成长至关重要，团队和个人都需要有意或无意识地提升思考能力<br>b.对程序员最重要的思考力有:原理性思维、结构化思维、反思性思维、扩展性思维、抓重点思维</p><ul><li>原理性思维是根基，因为没有搞懂的情况下所有的知识建构都是空谈;</li><li>结构化思维帮助我们建立了我们的知识树;</li><li>反思性思维不断对知识进行重构，是实现认知升级的必备条件;</li><li>扩展性思维可以提升知识的广度和深度</li><li>抓重点思维可以加快知识的使用效率和传递效率</li></ul><p>c.在提升思考力的实践中</p><ul><li>思考力提升最关键的是意识的转变</li><li>要对思考力的提升充满信心</li><li>多在工作中去锻炼思考力，不需要花太多额外的休息时间</li><li>多相互分享</li><li>团队Leader要把团队同学的成长和把思考力提升作为最重要的内容，并拿出实际行动。</li></ul><h2><span id="四-如何在工作中快速成长致工程师的10个简单技巧">四、如何在工作中快速成长？致工程师的10个简单技巧</span></h2><h2><span id="五-技术三板斧关于技术规划-管理-架构的思考">五、技术三板斧:关于技术规划、管理、架构的思考</span></h2><h2><span id="六-程序员如何自我学习阿里资深技术专家这样做">六、程序员如何自我学习？阿里资深技术专家这样做</span></h2><h2><span id="七-从计算机知识到落地能力你欠缺什么">七、从计算机知识到落地能力，你欠缺什么？</span></h2><h2><span id="八-阿里资深技术专家的10年感悟">八、阿里资深技术专家的10年感悟</span></h2><h2><span id="九-如何量化考核技术人的kpi">九、如何量化考核技术人的KPI?</span></h2><h2><span id="十-如何成为优秀的技术主管你要做到这三点">十、如何成为优秀的技术主管？你要做到这三点</span></h2><h2><span id="十一-在阿里做了五年技术主管我有话想说">十一、在阿里做了五年技术主管，我有话想说</span></h2><h2><span id="十二-如果我是一线技术主管">十二、如果我是一线技术主管</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Pages Hexo 配置来自阿里云的域名或腾讯云的域名</title>
      <link href="/2020/05/29/GitHub-Pages-Hexo-%E9%85%8D%E7%BD%AE%E6%9D%A5%E8%87%AA%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E5%9F%9F%E5%90%8D%E6%88%96%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9A%84%E5%9F%9F%E5%90%8D/"/>
      <url>/2020/05/29/GitHub-Pages-Hexo-%E9%85%8D%E7%BD%AE%E6%9D%A5%E8%87%AA%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E5%9F%9F%E5%90%8D%E6%88%96%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9A%84%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p>参考地址如下(亲试有效，我的博客应该试过了，可以指向我的域名，之所以我没有指向是因为博客的阅读量和访问等目前不能迁移所以就不做指向了):<br><a href="https://blog.csdn.net/heimu24/article/details/81159099" target="_blank" rel="noopener">Github个人博客：绑定域名 腾讯云</a><br><a href="https://www.cnblogs.com/JobbyM/p/8315253.html" target="_blank" rel="noopener">GitHub Pages Hexo 配置来自阿里云的域名</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL体系结构和存储引擎</title>
      <link href="/2020/05/29/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
      <url>/2020/05/29/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-定义数据库和实例">一、定义数据库和实例</span></h2><p>数据库和实例在数据库领域很容易被混淆。作为常见的数据库术语，这两个词定义如下:</p><h3><span id="数据库">数据库</span></h3><p>物理操作系统文件或其他形式文件类型的集合。在MySQL数据库中，数据库文件可以是frm、MYD、MYI、ibd结尾的文件。当使用NDB引擎时，数据库的文件可能不是操作系统上的文件，而是存放于内存之中的文件，但是定义仍然不变。</p><p><strong>那么什么是NDB引擎(这里稍微普及一下)?</strong><br>NDB也称为NDB CLUSTER, 是另一种存储引擎，但是它主要存储数据在内存中，并且独立于MySQL Server实例。它是MySQL Cluster使用的存储引擎。 NDB代表“网络数据库”。</p><p>参考资料:<br><a href="https://www.cnblogs.com/margiex/p/12706567.html" target="_blank" rel="noopener">InnoDB和NDB，MySQL群集和InnoDB群集之间有什么区别？</a></p><h3><span id="实例">实例</span></h3><p>MySQL数据库由后台线程以及一个共享内存区组成。共享内存可以被运行的后台线程所共享。需要牢记的是，<strong>数据库实例才是真正用于操作数据库文件的。</strong></p><p>两个词的可以互换使用，但两者的概念完全不同。<br>因为在MySQL数据库中，实例与数据库的关系通常是一一对应的，即一个实例对应一个数据库，一个数据库对应一个实例。但是，在集群情况下可能存在一个数据库被多个数据实例使用的情况。</p><p>关于MySQL集群可以参考:<br><a href="https://blog.csdn.net/qq_21153619/article/details/81529880" target="_blank" rel="noopener">Mysql集群搭建（多实例、主从）</a><br><a href="https://www.howtoing.com/how-to-install-a-mysql-cluster-on-ubuntu-16-04/" target="_blank" rel="noopener">如何在Ubuntu 16.04上安装MySQL集群</a></p><h2><span id="mysql体系结构">MySQL体系结构</span></h2><h3><span id="数据库和数据库实例容易混淆">数据库和数据库实例容易混淆?</span></h3><p>从概念上来说，<br>数据库是文件的集合，是依照某种数据模型组织起来并存放于二级存储器中的数据集合;<br>数据库实例是程序，是位于用户与操作系统之间的一层数据管理软件，用户对数据库数据的任何操作，包括数据库定义、数据查询、数据维护、数据库运行控制等都是在数据库实例下进行的，应用程序只有通过数据库实例才能和数据库打交道。</p><p>MySQL数据库体系结构，如下图所示:<br><img src="/2020/05/29/MySQL体系结构和存储引擎/01.png" alt=""></p><p>由图可知，MySQL由以下几部分组成:<br>连接池组件<br>管理服务和工具组件<br>SQL接口组件<br>查询分析器组件<br>优化器组件<br>缓存组件<br>插件式存储组件<br>物理文件</p><p><strong>MySQL区别于其他数据库的最重要的一个特点是骑插件式的表存储引擎。</strong></p><p><strong>存储引擎是基于表的，而不是数据库。</strong></p><h2><span id="二-mysql存储引擎">二、MySQL存储引擎</span></h2><p>存储引擎是MySQL区别于其他数据库的一个最重要特性。</p><p>存储引擎的好处是，每个存储引擎都有各自的特点，能够根据具体的应用建立不同存储引擎表。</p><h3><span id="1innodb存储">1.InnoDB存储</span></h3><p>InnoDB存储引擎支持事务，其设计目标主要面向在线事务处理的应用。</p><p>特点:行锁设置、支持外键、并支持类似于Oracle的非锁定读(默认读取操作不会产生锁)。</p><p>从MySQL数据库5.5.8版本开始InnoDB是默认的存储引擎。</p><p>每个InnoDB存储引擎的表单独放到一个独立的ibd文件中。</p><p>InnoDB存储引擎支持用裸设备用来建立表空间。</p><p>InnoDB通过使用多版本并发控制来获得高并发性，并且实现了SQL标准的4种隔离级别，默认为RE-PEATABLE级别。同时使用了next-key locking的策略避免幻读现象的产生。</p><p>InnoDB存储引擎还提供了插入缓冲、二次写、自适应哈希索引、预读等高性能和高可用的功能。</p><p>对于表中数据的存储，InnoDB存储引擎采用了聚集的方式，因此每张表的存储都是按主键的顺序进行存放。如果没有显式地在表定义时指定主键，InnoDB存储引擎会为每一行生成一个6字节的ROWID，并以此作为主键。</p><p>InnoDB存储引擎是MySQL数据库最为常用的一种引擎。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java程序员的两项通用能力</title>
      <link href="/2020/05/25/Java%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E4%B8%A4%E9%A1%B9%E9%80%9A%E7%94%A8%E8%83%BD%E5%8A%9B/"/>
      <url>/2020/05/25/Java%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E4%B8%A4%E9%A1%B9%E9%80%9A%E7%94%A8%E8%83%BD%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<p>工作这几年来，经历了很多。从小白到中级(手机里有一款叫中国象棋的游戏，里面给对弈中电脑水平分为小白、菜鸟、新手、入门、初级、中级、高级、大师、特级大师，编程我暂且按照这样来区分)。<br><a id="more"></a><br>学校教给我的是从小白到入门(当然也不乏某些学霸直接跳过这些成为高级甚至大师级别，就大多数普通人来说都是从小白到入门)。</p><p>但每个人从小白到入门的过程是不一样的。有的人是天资聪明，也有的人是基础牢固(如果你数理化很不错，那么学编程也是一件很容易的事情)，还有的人是勤奋苦练(我觉得我就属于这一类的)。</p><p>后来毕业后的第一份工作让我成为一名初级程序员，经过几年的磨练后，算是成为一个中级程序员。</p><h3><span id="为什么是算是而不是是">为什么是”算是”而不是”是”?</span></h3><p>按照年限来说，一年初级，三年中级，五年高级。那么我达到了三年，刚好是中级。</p><p>三年的中级，让我有了独立开发网站的能力。</p><h4><span id="独立开发网站的能力包括哪些">独立开发网站的能力包括哪些?</span></h4><ul><li>需求理解、需求分析、数据建模。</li><li>前后端开发能力(包含开发过程中的问题解决)。</li><li>运维能力(写一个项目部署到Linux服务器、搭建各种软件环境和安装各种软件、监控服务器(CPU、内存、硬盘、软件运行是否正常)、线上问题排查等)。</li><li>测试能力(功能测试、性能测试(压测))。</li><li>一定的项目管理能力。</li><li>技术选型和框架搭建能力。</li><li>二次开发能力。</li><li>“抄”能力。</li></ul><p>但三年的中级并未让我感到多么的高兴，因为于我而言还有很多要学习的，远远还没达到我心目中的”中级”。</p><p>不过有一点我还是很庆幸，因为这三年以来我还是处于不断成长当中。并没有将一年的工作经验重复三年。</p><p>这三年当中，给了我很多教训，也让我思考很多，于是便有了今天这篇文章。</p><h3><span id="回归正题作为java程序员我觉得有两项通用能力这两项通用能力如果让大家来说">回归正题，作为Java程序员，我觉得有两项通用能力，这两项通用能力，如果让大家来说？</span></h3><p>有人会说:</p><ul><li>编码能力(点(算法)、线(设计模式、组织代码)、面(框架和学习、理解和应用)、体(操作系统、计算机网络、编译原理等))</li><li>业务能力(理解需求或问题能力、沟通和协调资源能力、预估和安排计划能力、调研和解决问题能力)</li></ul><p>也有人会说:</p><ul><li>学习能力</li><li>解决问题能力</li><li>沟通能力</li></ul><p><strong>我今天所说的两项通用能力，不是沟通，也不是学习，也不是解决问题。而是深入理解Java和数据库。</strong></p><p><strong>因为在我看来学习能力、解决问题能力、沟通能力这些，是一个人无论工作也好还是上学也罢，必需的能力(就好像穿衣吃饭是必需的，无时无刻我们不在学，不仅仅是工作也包括生活，无时无刻我们不在解决问题，不仅仅是工作也包括生活，无时无刻我们不在沟通，不仅仅是工作也包括生活)。</strong></p><p>如果一个人22岁工作(上了四年大学)，按照60岁的退休标准，职业生涯长达38年。</p><p>另外作为IT来说，就国内这个环境，大多数程序员不可能一辈子都是程序员(有人干了几年干不动了转行了，有人走向管理层，有人继续搞技术)。</p><p>同时程序员也不一定60岁退休，也许50岁或者40多岁。那么怎么算，至少20年。</p><p>20年时间，世界会发生天翻地覆的变化。人不学习很难适应社会。</p><p>学习的目的可以理解为两个方面，一个是不想被世界淘汰，另一个方面是不被解雇(工作是为了生存，也是为了生活，但是老板雇佣你来是解决问题的而非制造问题)。</p><p>社会是共同生活的人们通过各种各样社会关系联合起来的集合(这样看来沟通是必不可少的)。</p><h3><span id="为什么说java和数据库是java程序员的通用能力">为什么说Java和数据库是Java程序员的通用能力？</span></h3><p>我的理由如下:</p><p>第一、熟练掌握并深入理解一门编程语言决定你能走多远。</p><p>第二、任何商业应用软件都需要存储，而且数据库是最多的，而其中SQL能力是基础，也是最重要的一个。</p><h3><span id="为什么说熟练掌握并深入理解一门编程语言能决定你能走多远呢">为什么说熟练掌握并深入理解一门编程语言能决定你能走多远呢？</span></h3><p>第一、当你熟练掌握一门编程语言时，接下来你去学其它的编程语言，你会发现是一件非常容易的事情(因为编程语言有很多共通之处)。</p><p>第二、学习和使用该编程语言相关框架也是一件非常容易的事情。</p><p>那么最难的是什么？是理解，理解这门编程语言。</p><p>理解包含两个方面，一个是浅度，另一个是深度。</p><p>作为一个Java程序员，说真的，我对Java至今都处于浅度方面的理解而非深度(对于深度，我觉得读懂源码是必要条件)。</p><p>同时我也觉得不少人和我一样处于浅度理解。浅度理解并不影响实际开发工作的展开(但有些时候却成为生产宕机或突发问题的原因，我曾经的一个代码问题就把生产环境搞乱了)，也不影响学习任意的框架或其它。</p><p>其实，我很痛恨浅度。因为浅度是一件很有危害的事情。原因如下:</p><ul><li>程序是由算法和数据结构组成，而开发软件中你不一定会用算法，但是数据结构是必不可少的，如字符串、链表、数组、哈希、堆、栈、树等</li><li>看似代码写的没问题，但如果不理解对应的方法(源代码)，可能会出问题(面试常考的一个，也是Java开发中用的最多的，如equals和==，你不理解写的就会出问题)</li><li>数据最终会存入数据库，但也会从数据库中拿出来展示，展示过程中不管你是XML还是JSON，你都需要用到数据结构(Java相关的如String、Array、List、ArrayList、LinkedList、Vector、Map、HashMap、Set等，Java程序员们一定不陌生)</li><li>某些时候宕机的原因并不是因为用户多了，而是代码写的有问题(不仅仅是逻辑问题，也是写的方法有问题。举个例子，在创业公司开发智能酒店项目时，曾有段时间频繁宕机，为此我临时写一个shell脚本监控着，如果宕机，自动重启，为了保障能用，只得如此了，最后某天仔细排查，发现就是一段代码问题，代码问题反映的不仅仅是逻辑，也是对这门编程语言的深度理解)</li></ul><p>我们延伸一下，回到个人职业生涯上看:<br><strong>浅度等同于不深入，不深入意味着普通和平庸，普通和平庸意味着可替代性很强。可替代性很强就意味着很容易被替换。这也就解释了为什么程序员会有中年危机(不仅仅是程序员这一行，其它行业也是通用的)。</strong></p><h3><span id="那么我们如何避免浅度而更好的深度呢">那么我们如何避免浅度而更好的深度呢？</span></h3><p>我的导师，给了我一个很好的意见，这里我分享给大家。<br>就是从读一些自己常用的代码开始(如String、ArrayList、HashMap、FastJSON等相关的)。因为常用，避免陌生感，同时因为常用读起来也就是更有意义。同时也可以参考相关的优质博文，看看前人是如何深入理解的，不过在看前人写的之前，自己必须要有自己的意见(因为这代表着你思考过)。</p><p>接下来我也会写相关的源代码理解文章。写的目的也是希望自己不再是一个”API搬砖工人(这里我就不用码农了)”。</p><h3><span id="也许有读者朋友疑惑为什么数据库也被我列为java程序员的两项通用能力之一呢">也许有读者朋友疑惑，为什么数据库也被我列为Java程序员的两项通用能力之一呢？</span></h3><p>以MySQL为例，我对于INNODB和MyISAM(单单一个InNODB没有真正的弄懂)、索引原理、视图和触发器、存储过程和游标等，仅仅是了解而非真正弄懂。</p><p>虽说即便不懂，也能正常进行简单业务、较复杂业务、复杂业务的CRUD。丝毫不影响业务开发。但是不真正弄懂的话，会成为真正高级Java开发工程师的瓶颈，到时候即便年限到了5年，理所当然成为一名高级研发工程师，但是实力并未达到，等到去面试的时候，一问三不知，最后可能会被面试官说:五年的工作经验，连这都不知道，怎么好意思要这么高的薪资呢？</p><p>我之前公司一个领导T哥曾对我说过，<strong>深入掌握Java和数据库对于一个Java程序员是非常重要的，因为无论你到那家公司，这两项都是必需，而非所谓的业务能力</strong>(每家公司的技术栈相差不是特别大，业务相差是比较大的，但对于程序员而言，业务知识不一定要求你精通100%，最多也就是20%~30%左右，业务知识通常可迁移性不是特别强，比方说，你从外包到自主创业公司或者是从创业公司到其它行业公司都可以，没有什么限制，当然了，金融方面可能对业务知识方面要求高一些)。</p><p>其实仔细想来，这些年开发过的CRM、OA、ERP、CMS、智能酒店和门锁、物联网云平台、电商、编程平台、教育平台等项目(其中也包括二次开发)，排除其中的编程语言(因为有用到Node.js、Python、PHP等)，基本上数据库都是共性，而且用的都是MySQL。仔细在从另外一个角度来看，一个项目从0到1，最终上线投入运营使用，包含高可用、高并发、高性能等，都与数据库紧密相关，因为这考验着你的数据库设计是否合理，一个设计不合理的数据库，会无限增大成本(服务器的投入，为了保证”三高”，最简单的办法就是加机器，不断的加机器，但如果设计的合理，机器可以加少点，加少点同时也意味着降低企业成本，当然也不排除一些公司盈利不错，盈利不错，意味着这些成本可以不忽略不计)。</p><h3><span id="再回过头来即便是数据库也有值得深入研究并掌握的">再回过头来，即便是数据库也有值得深入研究并掌握的？</span></h3><p>以MySQL为例，我首推INNODB。因为INNODB存储引擎是用的最多的。<br>同时还有一点十分重要，那就是SQL能力(包含能够写复杂的SQL、优化SQL、知道如何加索引等)。基本上可以说，如果你的SQL能力不错，那么工作效率和工作质量将会上一个档次或者高好几个档次。以Java的三层架构，数据访问层、业务逻辑层、视图层(又称UI层)，其中的数据访问层就考验你的SQL能力，业务逻辑层依赖于数据访问层(SQL能力)，如果你的数据访问层写的不好有问题，那么自下向上都会受到影响，关于一点我深有体会过(曾经也深受其害)。</p><p><strong>最后，我的这些年的经验教训告诉我Java程序员的两项通用技能是深入理解Java和数据库(多次强调过，希望大家不要舍本逐末，追求所谓的新技术，技术是日新月异的，而底层是不变的，把握这个不变，就足以应对万变)。因为这些是你无论到那家公司都需要的通用能力，相反我觉得框架并没有那么重要，而且熟练使用一门框架并不是很难。任何编程语言和框架，最难的就是深入理解而非简单使用(不仅仅是Java,其它语言也是一样通用的，深入理解一门编程语言和数据库，无论到哪你都能战无不胜)。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 职业生涯思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之整合Dubbo</title>
      <link href="/2020/05/22/SpringBoot%E4%B9%8B%E6%95%B4%E5%90%88Dubbo/"/>
      <url>/2020/05/22/SpringBoot%E4%B9%8B%E6%95%B4%E5%90%88Dubbo/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-下载dubbo-admin并导入本地">一、下载Dubbo-Admin并导入本地</span></h2><p>dubbo-admin地址为:<br><a href="https://github.com/apache/dubbo-admin" target="_blank" rel="noopener">https://github.com/apache/dubbo-admin</a></p><p>官方文档:<br><a href="https://github.com/apache/dubbo-admin/blob/develop/README_ZH.md" target="_blank" rel="noopener">https://github.com/apache/dubbo-admin/blob/develop/README_ZH.md</a></p><p>注意需要安装Zookeeper(因为Dubbo使用Zookeeper作为注册中心)<br><a id="more"></a></p><h2><span id="二-建立服务提供者这里是我博客的一个子项目名为blog-dubbo-provider">二、建立服务提供者(这里是我博客的一个子项目名为blog-dubbo-provider)</span></h2><h3><span id="1导入maven依赖">1.导入Maven依赖</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- dubbo的依赖 --&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-spring-boot-starter --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.7.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- zk的依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dubbo-dependencies-zookeeper&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.7.6&lt;/version&gt;</span><br><span class="line">    &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3><span id="2编写启动类和配置文件">2.编写启动类和配置文件</span></h3><p>启动类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.dubbo.blog;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class DubboProviderApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(DubboProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置文件(application.properties):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Spring boot application</span><br><span class="line">spring.application.name=blog-dubbo-provider</span><br><span class="line"># Base packages to scan Dubbo Component: @org.apache.dubbo.config.annotation.Service</span><br><span class="line">dubbo.scan.base-packages=com.dubbo.blog.provider.service.impl   </span><br><span class="line"># Dubbo Application</span><br><span class="line">## The default value of dubbo.application.name is $&#123;spring.application.name&#125;</span><br><span class="line">dubbo.application.name=$&#123;spring.application.name&#125;</span><br><span class="line"># Dubbo Protocol</span><br><span class="line">dubbo.protocol.name=dubbo</span><br><span class="line">dubbo.protocol.port=20880</span><br><span class="line">## Dubbo Registry</span><br><span class="line">dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br><span class="line">server.port=7010</span><br></pre></td></tr></table></figure></p><p>3.编写接口和对应的实现类<br>TestService:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package com.dubbo.blog.provider.service;</span><br><span class="line"></span><br><span class="line">public interface TestService &#123;</span><br><span class="line"></span><br><span class="line">    String showName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>TestServiceImpl:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.dubbo.blog.provider.service.impl;</span><br><span class="line"></span><br><span class="line">import com.dubbo.blog.provider.service.TestService;</span><br><span class="line">import org.apache.dubbo.config.annotation.Service;</span><br><span class="line"></span><br><span class="line">@Service(version = &quot;1.0.0&quot;)</span><br><span class="line">public class TestServiceImpl implements TestService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String showName() &#123;</span><br><span class="line">        return &quot;HELLO   DUBBO&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>TestService2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package com.dubbo.blog.provider.service;</span><br><span class="line"></span><br><span class="line">public interface TestService2 &#123;</span><br><span class="line">    String showName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>TestService2Impl:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.dubbo.blog.provider.service.impl;</span><br><span class="line"></span><br><span class="line">import com.dubbo.blog.provider.service.TestService2;</span><br><span class="line">import org.apache.dubbo.config.annotation.Service;</span><br><span class="line"></span><br><span class="line">@Service(version = &quot;1.0.0&quot;)</span><br><span class="line">public class TestService2Impl implements TestService2 &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String showName() &#123;</span><br><span class="line">        return &quot;HELLO   TestService2&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3><span id="4启动主类并打开dubbo-admin">4.启动主类并打开Dubbo-Admin</span></h3><p>下图表示Ok<br><img src="/2020/05/22/SpringBoot之整合Dubbo/01.png" alt=""></p><h2><span id="三-建立服务消费者这里是我博客的一个子项目名为blog-dubbo-consumer">三、建立服务消费者(这里是我博客的一个子项目名为blog-dubbo-consumer)</span></h2><h3><span id="1导入maven依赖">1.导入Maven依赖</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.challenger.blog&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;blog-dubbo-provider&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- dubbo的依赖 --&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-spring-boot-starter --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.7.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- zk的依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dubbo-dependencies-zookeeper&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.7.6&lt;/version&gt;</span><br><span class="line">    &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3><span id="2编写启动类和配置文件">2.编写启动类和配置文件</span></h3><p>启动类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.dubbo.blog;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class DubboConsumerApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(DubboConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置文件(application.properties):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=blog-dubbo-consumer</span><br><span class="line">dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br><span class="line">server.port=7000</span><br></pre></td></tr></table></figure></p><h3><span id="3编写controller">3.编写Controller</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.dubbo.blog;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.dubbo.blog.provider.service.TestService;</span><br><span class="line">import com.dubbo.blog.provider.service.TestService2;</span><br><span class="line">import org.apache.dubbo.config.annotation.Reference;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class TestDubboController &#123;</span><br><span class="line">    @Reference(version = &quot;1.0.0&quot;)</span><br><span class="line">    private TestService2 service2;</span><br><span class="line">    @Reference(version = &quot;1.0.0&quot;)</span><br><span class="line">    private TestService service;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;test1&quot;)</span><br><span class="line">    public String test1() &#123;</span><br><span class="line">        return service.showName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;test2&quot;)</span><br><span class="line">    public String test2() &#123;</span><br><span class="line">        return service2.showName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="4切换到dubbo-admin看服务关系">4.切换到dubbo-admin看服务关系</span></h3><p><img src="/2020/05/22/SpringBoot之整合Dubbo/02.png" alt=""></p><h3><span id="5可以请求controller对应的url测试一下">5.可以请求Controller对应的url测试一下</span></h3>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Xxl-Job</title>
      <link href="/2020/05/22/SpringBoot%E6%95%B4%E5%90%88Xxl-Job/"/>
      <url>/2020/05/22/SpringBoot%E6%95%B4%E5%90%88Xxl-Job/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-下载xxl-job源代码并导入本地并运行">一、下载Xxl-Job源代码并导入本地并运行</span></h2><p>Github地址:<br><a href="https://github.com/xuxueli/xxl-job" target="_blank" rel="noopener">https://github.com/xuxueli/xxl-job</a></p><p>中文文档地址:<br><a href="https://www.xuxueli.com/xxl-job/" target="_blank" rel="noopener">https://www.xuxueli.com/xxl-job/</a><br><a id="more"></a></p><h3><span id="1使用idea或eclipse导入">1.使用Idea或Eclipse导入</span></h3><h3><span id="2执行sql脚本红色标记处">2.执行sql脚本(红色标记处)</span></h3><p><img src="/2020/05/22/SpringBoot整合Xxl-Job/01.png" alt=""></p><h3><span id="3运行xxl-job-adminxxl-job后台管理主要方便管理各种各样的任务">3.运行xxl-job-admin(xxl-job后台管理，主要方便管理各种各样的任务)</span></h3><p>注意:在运行之前，需要把2的sql脚本执行完毕，并修改数据库连接池。</p><p>正常启动，访问地址为:<br><a href="http://localhost:8080/xxl-job-admin" target="_blank" rel="noopener">http://localhost:8080/xxl-job-admin</a></p><p>效果图，如下所示:<br><img src="/2020/05/22/SpringBoot整合Xxl-Job/02.png" alt=""></p><p>用户名默认为admin<br>密码为123456</p><p>输入后，进入这个界面，如图:<br><img src="/2020/05/22/SpringBoot整合Xxl-Job/03.png" alt=""></p><p>这样就表示Xxl-Job成功运行了。确保运行没问题后，就可以开始下一步。</p><h2><span id="二-添加执行器xxl-job源代码就一个example可以复用过来你也可以选择自己新建项目新建项目可以在xxl-job基础上也可以放在其它项目中">二、添加执行器(Xxl-Job源代码就一个Example，可以复用过来，你也可以选择自己新建项目，新建项目可以在Xxl-Job基础上，也可以放在其它项目中)</span></h2><h3><span id="1新建一个maven项目命名为blog-xxl-job">1.新建一个Maven项目，命名为blog-xxl-job。</span></h3><h3><span id="2导入maven依赖">2.导入Maven依赖</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.xuxueli/xxl-job-core --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.xuxueli&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;xxl-job-core&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.2.0&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3><span id="3新建applicationyml配置文件并添加如下内容">3.新建application.yml配置文件并添加如下内容</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#eureka</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/</span><br><span class="line"># web port</span><br><span class="line">server.port=8081</span><br><span class="line"># no web</span><br><span class="line">#spring.main.web-environment=false</span><br><span class="line"># log config</span><br><span class="line">logging.config=classpath:logback.xml</span><br><span class="line">### xxl-job admin address list, such as &quot;http://address&quot; or &quot;http://address01,http://address02&quot;</span><br><span class="line">xxl.job.admin.addresses=http://127.0.0.1:8080/xxl-job-admin</span><br><span class="line">### xxl-job, access token</span><br><span class="line">xxl.job.accessToken=</span><br><span class="line">### xxl-job executor appname</span><br><span class="line">xxl.job.executor.appname=blog-xxl-job-executor</span><br><span class="line">### xxl-job executor registry-address: default use address to registry , otherwise use ip:port if address is null</span><br><span class="line">xxl.job.executor.address=</span><br><span class="line">### xxl-job executor server-info</span><br><span class="line">xxl.job.executor.ip=</span><br><span class="line">xxl.job.executor.port=9999</span><br><span class="line">### xxl-job executor log-path</span><br><span class="line">xxl.job.executor.logpath=/data/applogs/xxl-job/jobhandler</span><br><span class="line">### xxl-job executor log-retention-days</span><br><span class="line">xxl.job.executor.logretentiondays=30</span><br></pre></td></tr></table></figure><p>可以不用eureka，这里我的项目中用到eureka所以增加该配置。</p><p>增加logback.xml配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration debug=&quot;false&quot; scan=&quot;true&quot; scanPeriod=&quot;1 seconds&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;contextName&gt;logback&lt;/contextName&gt;</span><br><span class="line">    &lt;property name=&quot;log.path&quot; value=&quot;/data/applogs/xxl-job/xxl-job-executor-sample-springboot.log&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appender name=&quot;console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appender name=&quot;file&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;file&gt;$&#123;log.path&#125;&lt;/file&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;log.path&#125;.%d&#123;yyyy-MM-dd&#125;.zip&lt;/fileNamePattern&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%date %level [%thread] %logger&#123;36&#125; [%file : %line] %msg%n</span><br><span class="line">            &lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root level=&quot;info&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;console&quot;/&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;file&quot;/&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><h3><span id="4编写application类">4.编写Application类</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.job.execute;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class BlogXxlJobExecutorApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(BlogXxlJobExecutorApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="5编写job执行器">5.编写Job执行器</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.job.execute.jobhandler;</span><br><span class="line"></span><br><span class="line">import com.xxl.job.core.biz.model.ReturnT;</span><br><span class="line">import com.xxl.job.core.handler.IJobHandler;</span><br><span class="line">import com.xxl.job.core.handler.annotation.XxlJob;</span><br><span class="line">import com.xxl.job.core.log.XxlJobLogger;</span><br><span class="line">import com.xxl.job.core.util.ShardingUtil;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedInputStream;</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.DataOutputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.net.HttpURLConnection;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * XxlJob开发示例（Bean模式）</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * 开发步骤：</span><br><span class="line"> * 1、在Spring Bean实例中，开发Job方法，方式格式要求为 &quot;public ReturnT&lt;String&gt; execute(String param)&quot;</span><br><span class="line"> * 2、为Job方法添加注解 &quot;@XxlJob(value=&quot;自定义jobhandler名称&quot;, init = &quot;JobHandler初始化方法&quot;, destroy = &quot;JobHandler销毁方法&quot;)&quot;，注解value值对应的是调度中心新建任务的JobHandler属性的值。</span><br><span class="line"> * 3、执行日志：需要通过 &quot;XxlJobLogger.log&quot; 打印执行日志；</span><br><span class="line"> *</span><br><span class="line"> * @author xuxueli 2019-12-11 21:52:51</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class SampleXxlJob &#123;</span><br><span class="line">    private static Logger logger = LoggerFactory.getLogger(SampleXxlJob.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 1、简单任务示例（Bean模式）</span><br><span class="line">     */</span><br><span class="line">    @XxlJob(&quot;demoJobHandler&quot;)</span><br><span class="line">    public ReturnT&lt;String&gt; demoJobHandler(String param) throws Exception &#123;</span><br><span class="line">        XxlJobLogger.log(&quot;XXL-JOB, Hello World.&quot;);</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">            XxlJobLogger.log(&quot;beat at:&quot; + i);</span><br><span class="line">            TimeUnit.SECONDS.sleep(2);</span><br><span class="line">        &#125;</span><br><span class="line">        return ReturnT.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 2、分片广播任务</span><br><span class="line">     */</span><br><span class="line">    @XxlJob(&quot;shardingJobHandler&quot;)</span><br><span class="line">    public ReturnT&lt;String&gt; shardingJobHandler(String param) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        // 分片参数</span><br><span class="line">        ShardingUtil.ShardingVO shardingVO = ShardingUtil.getShardingVo();</span><br><span class="line">        XxlJobLogger.log(&quot;分片参数：当前分片序号 = &#123;&#125;, 总分片数 = &#123;&#125;&quot;, shardingVO.getIndex(), shardingVO.getTotal());</span><br><span class="line"></span><br><span class="line">        // 业务逻辑</span><br><span class="line">        for (int i = 0; i &lt; shardingVO.getTotal(); i++) &#123;</span><br><span class="line">            if (i == shardingVO.getIndex()) &#123;</span><br><span class="line">                XxlJobLogger.log(&quot;第 &#123;&#125; 片, 命中分片开始处理&quot;, i);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                XxlJobLogger.log(&quot;第 &#123;&#125; 片, 忽略&quot;, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return ReturnT.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 3、命令行任务</span><br><span class="line">     */</span><br><span class="line">    @XxlJob(&quot;commandJobHandler&quot;)</span><br><span class="line">    public ReturnT&lt;String&gt; commandJobHandler(String param) throws Exception &#123;</span><br><span class="line">        String command = param;</span><br><span class="line">        int exitValue = -1;</span><br><span class="line"></span><br><span class="line">        BufferedReader bufferedReader = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // command process</span><br><span class="line">            Process process = Runtime.getRuntime().exec(command);</span><br><span class="line">            BufferedInputStream bufferedInputStream = new BufferedInputStream(process.getInputStream());</span><br><span class="line">            bufferedReader = new BufferedReader(new InputStreamReader(bufferedInputStream));</span><br><span class="line"></span><br><span class="line">            // command log</span><br><span class="line">            String line;</span><br><span class="line">            while ((line = bufferedReader.readLine()) != null) &#123;</span><br><span class="line">                XxlJobLogger.log(line);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // command exit</span><br><span class="line">            process.waitFor();</span><br><span class="line">            exitValue = process.exitValue();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            XxlJobLogger.log(e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (bufferedReader != null) &#123;</span><br><span class="line">                bufferedReader.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (exitValue == 0) &#123;</span><br><span class="line">            return IJobHandler.SUCCESS;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return new ReturnT&lt;String&gt;(IJobHandler.FAIL.getCode(), &quot;command exit value(&quot; + exitValue + &quot;) is failed&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 4、跨平台Http任务</span><br><span class="line">     * 参数示例：</span><br><span class="line">     * &quot;url: http://www.baidu.com\n&quot; +</span><br><span class="line">     * &quot;method: get\n&quot; +</span><br><span class="line">     * &quot;data: content\n&quot;;</span><br><span class="line">     */</span><br><span class="line">    @XxlJob(&quot;httpJobHandler&quot;)</span><br><span class="line">    public ReturnT&lt;String&gt; httpJobHandler(String param) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        // param parse</span><br><span class="line">        if (param == null || param.trim().length() == 0) &#123;</span><br><span class="line">            XxlJobLogger.log(&quot;param[&quot; + param + &quot;] invalid.&quot;);</span><br><span class="line">            return ReturnT.FAIL;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] httpParams = param.split(&quot;\n&quot;);</span><br><span class="line">        String url = null;</span><br><span class="line">        String method = null;</span><br><span class="line">        String data = null;</span><br><span class="line">        for (String httpParam : httpParams) &#123;</span><br><span class="line">            if (httpParam.startsWith(&quot;url:&quot;)) &#123;</span><br><span class="line">                url = httpParam.substring(httpParam.indexOf(&quot;url:&quot;) + 4).trim();</span><br><span class="line">            &#125;</span><br><span class="line">            if (httpParam.startsWith(&quot;method:&quot;)) &#123;</span><br><span class="line">                method = httpParam.substring(httpParam.indexOf(&quot;method:&quot;) + 7).trim().toUpperCase();</span><br><span class="line">            &#125;</span><br><span class="line">            if (httpParam.startsWith(&quot;data:&quot;)) &#123;</span><br><span class="line">                data = httpParam.substring(httpParam.indexOf(&quot;data:&quot;) + 5).trim();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // param valid</span><br><span class="line">        if (url == null || url.trim().length() == 0) &#123;</span><br><span class="line">            XxlJobLogger.log(&quot;url[&quot; + url + &quot;] invalid.&quot;);</span><br><span class="line">            return ReturnT.FAIL;</span><br><span class="line">        &#125;</span><br><span class="line">        if (method == null || !Arrays.asList(&quot;GET&quot;, &quot;POST&quot;).contains(method)) &#123;</span><br><span class="line">            XxlJobLogger.log(&quot;method[&quot; + method + &quot;] invalid.&quot;);</span><br><span class="line">            return ReturnT.FAIL;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // request</span><br><span class="line">        HttpURLConnection connection = null;</span><br><span class="line">        BufferedReader bufferedReader = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // connection</span><br><span class="line">            URL realUrl = new URL(url);</span><br><span class="line">            connection = (HttpURLConnection) realUrl.openConnection();</span><br><span class="line"></span><br><span class="line">            // connection setting</span><br><span class="line">            connection.setRequestMethod(method);</span><br><span class="line">            connection.setDoOutput(true);</span><br><span class="line">            connection.setDoInput(true);</span><br><span class="line">            connection.setUseCaches(false);</span><br><span class="line">            connection.setReadTimeout(5 * 1000);</span><br><span class="line">            connection.setConnectTimeout(3 * 1000);</span><br><span class="line">            connection.setRequestProperty(&quot;connection&quot;, &quot;Keep-Alive&quot;);</span><br><span class="line">            connection.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json;charset=UTF-8&quot;);</span><br><span class="line">            connection.setRequestProperty(&quot;Accept-Charset&quot;, &quot;application/json;charset=UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">            // do connection</span><br><span class="line">            connection.connect();</span><br><span class="line"></span><br><span class="line">            // data</span><br><span class="line">            if (data != null &amp;&amp; data.trim().length() &gt; 0) &#123;</span><br><span class="line">                DataOutputStream dataOutputStream = new DataOutputStream(connection.getOutputStream());</span><br><span class="line">                dataOutputStream.write(data.getBytes(&quot;UTF-8&quot;));</span><br><span class="line">                dataOutputStream.flush();</span><br><span class="line">                dataOutputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // valid StatusCode</span><br><span class="line">            int statusCode = connection.getResponseCode();</span><br><span class="line">            if (statusCode != 200) &#123;</span><br><span class="line">                throw new RuntimeException(&quot;Http Request StatusCode(&quot; + statusCode + &quot;) Invalid.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // result</span><br><span class="line">            bufferedReader = new BufferedReader(new InputStreamReader(connection.getInputStream(), &quot;UTF-8&quot;));</span><br><span class="line">            StringBuilder result = new StringBuilder();</span><br><span class="line">            String line;</span><br><span class="line">            while ((line = bufferedReader.readLine()) != null) &#123;</span><br><span class="line">                result.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            String responseMsg = result.toString();</span><br><span class="line"></span><br><span class="line">            XxlJobLogger.log(responseMsg);</span><br><span class="line">            return ReturnT.SUCCESS;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            XxlJobLogger.log(e);</span><br><span class="line">            return ReturnT.FAIL;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (bufferedReader != null) &#123;</span><br><span class="line">                    bufferedReader.close();</span><br><span class="line">                &#125;</span><br><span class="line">                if (connection != null) &#123;</span><br><span class="line">                    connection.disconnect();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception e2) &#123;</span><br><span class="line">                XxlJobLogger.log(e2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 5、生命周期任务示例：任务初始化与销毁时，支持自定义相关逻辑；</span><br><span class="line">     */</span><br><span class="line">    @XxlJob(value = &quot;demoJobHandler2&quot;, init = &quot;init&quot;, destroy = &quot;destroy&quot;)</span><br><span class="line">    public ReturnT&lt;String&gt; demoJobHandler2(String param) throws Exception &#123;</span><br><span class="line">        XxlJobLogger.log(&quot;XXL-JOB, Hello World.&quot;);</span><br><span class="line">        return ReturnT.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void init() &#123;</span><br><span class="line">        logger.info(&quot;init&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        logger.info(&quot;destory&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="6增加xxljobconfig配置类">6.增加XxlJobConfig配置类</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.job.execute.core.config;</span><br><span class="line"></span><br><span class="line">import com.xxl.job.core.executor.impl.XxlJobSpringExecutor;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class XxlJobConfig &#123;</span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(XxlJobConfig.class);</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;xxl.job.admin.addresses&#125;&quot;)</span><br><span class="line">    private String adminAddresses;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;xxl.job.accessToken&#125;&quot;)</span><br><span class="line">    private String accessToken;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;xxl.job.executor.appname&#125;&quot;)</span><br><span class="line">    private String appname;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;xxl.job.executor.address&#125;&quot;)</span><br><span class="line">    private String address;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;xxl.job.executor.ip&#125;&quot;)</span><br><span class="line">    private String ip;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;xxl.job.executor.port&#125;&quot;)</span><br><span class="line">    private int port;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;xxl.job.executor.logpath&#125;&quot;)</span><br><span class="line">    private String logPath;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;xxl.job.executor.logretentiondays&#125;&quot;)</span><br><span class="line">    private int logRetentionDays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public XxlJobSpringExecutor xxlJobExecutor() &#123;</span><br><span class="line">        logger.info(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;);</span><br><span class="line">        XxlJobSpringExecutor xxlJobSpringExecutor = new XxlJobSpringExecutor();</span><br><span class="line">        xxlJobSpringExecutor.setAdminAddresses(adminAddresses);</span><br><span class="line">        xxlJobSpringExecutor.setAppname(appname);</span><br><span class="line">        xxlJobSpringExecutor.setAddress(address);</span><br><span class="line">        xxlJobSpringExecutor.setIp(ip);</span><br><span class="line">        xxlJobSpringExecutor.setPort(port);</span><br><span class="line">        xxlJobSpringExecutor.setAccessToken(accessToken);</span><br><span class="line">        xxlJobSpringExecutor.setLogPath(logPath);</span><br><span class="line">        xxlJobSpringExecutor.setLogRetentionDays(logRetentionDays);</span><br><span class="line"></span><br><span class="line">        return xxlJobSpringExecutor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="三-结合xxl-job后台系统增加定时任务">三、结合Xxl-Job后台系统增加定时任务</span></h2><h3><span id="1配置执行器">1.配置执行器</span></h3><p><img src="/2020/05/22/SpringBoot整合Xxl-Job/05.png" alt=""></p><p>执行器地址为(与blog-xxl-job中application.yml配置文件里的执行器地址需要保持一致，否则会注册失败，导致任务执行不了:<br><img src="/2020/05/22/SpringBoot整合Xxl-Job/06.png" alt=""></p><h3><span id="2添加任务">2.添加任务</span></h3><p><img src="/2020/05/22/SpringBoot整合Xxl-Job/04.png" alt=""></p><h3><span id="3任务执行成功的标志">3.任务执行成功的标志</span></h3><p><img src="/2020/05/22/SpringBoot整合Xxl-Job/07.png" alt=""></p><h2><span id="四-为什么选择xxl-job">四、为什么选择Xxl-Job</span></h2><p>当初选择使用Xxl-Job有这么几个原因:<br>第一、团队里有好几个人上一家公司或上上家公司用过。<br>第二、这个生态比较丰富且开源。<br>第三、确实非常容易上手且轻量化(轻量化的一个体现就是非侵入式)</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之整合MongoDB</title>
      <link href="/2020/05/21/SpringBoot%E4%B9%8B%E6%95%B4%E5%90%88MongoDB/"/>
      <url>/2020/05/21/SpringBoot%E4%B9%8B%E6%95%B4%E5%90%88MongoDB/</url>
      
        <content type="html"><![CDATA[<p>MongoDB官网安装:<br><a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">https://www.mongodb.com/download-center/community</a></p><p>MongoDB客户端工具(Mongo Management Studio)安装:<br><a href="http://mms.litixsoft.de/#software_pricing" target="_blank" rel="noopener">http://mms.litixsoft.de/#software_pricing</a></p><a id="more"></a><h2><span id="一-添加maven依赖">一、添加Maven依赖</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mongodb--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2><span id="二-applicationyml配置">二、application.yml配置</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  data:</span><br><span class="line">    mongodb:</span><br><span class="line">      host: 127.0.0.1</span><br><span class="line">      port: 27017</span><br><span class="line">      database: blog</span><br></pre></td></tr></table></figure><h2><span id="三-代码中使用mongo">三、代码中使用Mongo</span></h2><h3><span id="1mongo适用场景">1.Mongo适用场景</span></h3><p>(1)可用于动态列;<br>(2)可用于配置方面(如一些系统配置);<br>(3)日志记录;<br>(4)用于博客开发中的评论或留言;<br>(5)物联网方面的门锁相关信息存储;<br>(6)探头;</p><p>上面六个场景是我之前开发使用过的。</p><p>当然了，Mongo还可以应用更多地方，关键在于应用的场景是否合适。</p><h3><span id="2以我最近博客开发的一个联系我为例这里我使用mongo">2.以我最近博客开发的一个联系我为例(这里我使用Mongo)</span></h3><h4><span id="1建立数据模型需要在mongo对应的库建立对应的集合">(1)建立数据模型(需要在Mongo对应的库，建立对应的集合)</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.mongo.entity;</span><br><span class="line"></span><br><span class="line">import com.springcloud.blog.admin.common.base.BaseDTO;</span><br><span class="line">import org.springframework.data.mongodb.core.mapping.Document;</span><br><span class="line">import org.springframework.data.mongodb.core.mapping.Field;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 联系我-数据模型</span><br><span class="line"> */</span><br><span class="line">@Document(collection = &quot;contact_me&quot;)</span><br><span class="line">public class ContactMe extends BaseDTO &#123;</span><br><span class="line"></span><br><span class="line">    @Field</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    @Field</span><br><span class="line">    private String email;</span><br><span class="line"></span><br><span class="line">    @Field</span><br><span class="line">    private String content;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getContent() &#123;</span><br><span class="line">        return content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setContent(String content) &#123;</span><br><span class="line">        this.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="2数据访问层">(2)数据访问层</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.mongo.dao;</span><br><span class="line"></span><br><span class="line">import com.springcloud.blog.admin.mongo.entity.ContactMe;</span><br><span class="line">        import org.springframework.data.mongodb.repository.MongoRepository;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 联系我-持久层</span><br><span class="line"> */</span><br><span class="line">public interface ContactMeRepository extends MongoRepository&lt;ContactMe, String&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="3对外api">(3)对外API</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package com.springcloud.blog.admin.mongo.controller;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.springcloud.blog.admin.common.dict.ResponseDict;</span><br><span class="line">import com.springcloud.blog.admin.mongo.dao.ContactMeRepository;</span><br><span class="line">import com.springcloud.blog.admin.mongo.entity.ContactMe;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 联系我(Mongo Example)</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/contactMe&quot;)</span><br><span class="line">public class ContactMeController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ContactMeRepository contactMeRepository;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/save&quot;)</span><br><span class="line">    public JSONObject save(@RequestBody ContactMe contactMe) &#123;</span><br><span class="line">        JSONObject jsonObject = new JSONObject();</span><br><span class="line">        contactMeRepository.save(contactMe);</span><br><span class="line">        jsonObject.put(ResponseDict.RESPONSE_CODE_KEY, ResponseDict.RESPONSE_SUCCESS_CODE);</span><br><span class="line">        jsonObject.put(ResponseDict.RESPONSE_MSG_KEY, ResponseDict.RESPONSE_SUCCESS_MSG);</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/delete&quot;)</span><br><span class="line">    public JSONObject delete(@RequestBody ContactMe contactMe) &#123;</span><br><span class="line">        JSONObject jsonObject = new JSONObject();</span><br><span class="line">        contactMeRepository.delete(contactMe);</span><br><span class="line">        jsonObject.put(ResponseDict.RESPONSE_CODE_KEY, ResponseDict.RESPONSE_SUCCESS_CODE);</span><br><span class="line">        jsonObject.put(ResponseDict.RESPONSE_MSG_KEY, ResponseDict.RESPONSE_SUCCESS_MSG);</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/update&quot;)</span><br><span class="line">    public JSONObject update(@RequestBody ContactMe contactMe) &#123;</span><br><span class="line">        JSONObject jsonObject = new JSONObject();</span><br><span class="line">        contactMeRepository.save(contactMe);</span><br><span class="line">        jsonObject.put(ResponseDict.RESPONSE_CODE_KEY, ResponseDict.RESPONSE_SUCCESS_CODE);</span><br><span class="line">        jsonObject.put(ResponseDict.RESPONSE_MSG_KEY, ResponseDict.RESPONSE_SUCCESS_MSG);</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/getAll&quot;)</span><br><span class="line">    public JSONObject getAll() &#123;</span><br><span class="line">        JSONObject jsonObject = new JSONObject();</span><br><span class="line">        List&lt;ContactMe&gt; list = contactMeRepository.findAll();</span><br><span class="line">        jsonObject.put(ResponseDict.RESPONSE_CODE_KEY, ResponseDict.RESPONSE_SUCCESS_CODE);</span><br><span class="line">        jsonObject.put(ResponseDict.RESPONSE_MSG_KEY, ResponseDict.RESPONSE_SUCCESS_MSG);</span><br><span class="line">        jsonObject.put(ResponseDict.RESPONSE_DATA_KEY, list);</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的说就是一个非常简单的增删改查，可帮助入门。<br>同时一般情况下，还是需要业务逻辑层的，一方面为了复用考虑，另外一方面不同的业务办不同的事情。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+MyBatis-Plus实现多数据源</title>
      <link href="/2020/05/21/SpringBoot-MyBatis-Plus%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
      <url>/2020/05/21/SpringBoot-MyBatis-Plus%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h1><span id="一-介绍">一、介绍</span></h1><p>dynamic-datasource-spring-boot-starter 是一个基于springboot的快速集成多数据源的启动器。</p><h2><span id="1dynamic-datasource-spring-boot-starter开源地址">1.dynamic-datasource-spring-boot-starter开源地址</span></h2><p>GitHub开源地址(具体详情可参考官方文档):<br><a href="https://github.com/baomidou/dynamic-datasource-spring-boot-starter" target="_blank" rel="noopener">https://github.com/baomidou/dynamic-datasource-spring-boot-starter</a></p><h2><span id="2说明和应用场景">2.说明和应用场景</span></h2><p>可用于主从分离、读写分离、分布式事务等。</p><h1><span id="二-详细整合步骤">二、详细整合步骤</span></h1><h2><span id="1导入maven依赖">1.导入Maven依赖</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dynamic-datasource-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.5.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2><span id="2applicationyml配置">2.application.yml配置</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    dynamic:</span><br><span class="line">      primary: db1 #设置默认的数据源,默认值为master</span><br><span class="line">      datasource:</span><br><span class="line">        db1:  #数据源db1</span><br><span class="line">          driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">          url: jdbc:mysql://127.0.0.1:3306/wordpress_master?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">          username: root</span><br><span class="line">          password: 123456</span><br><span class="line">        db2: #数据源db2</span><br><span class="line">          driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">          url: jdbc:mysql://127.0.0.1:3306/wordpress_slave?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">          username: root</span><br><span class="line">          password: 123456</span><br><span class="line">      type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">      druid:</span><br><span class="line">        initial-size: 10</span><br><span class="line">        max-active: 100</span><br><span class="line">        min-idle: 10</span><br><span class="line">        max-wait: 60000</span><br><span class="line">        pool-prepared-statements: true</span><br><span class="line">        max-pool-prepared-statement-per-connection-size: 20</span><br><span class="line">        time-between-eviction-runs-millis: 60000</span><br><span class="line">        min-evictable-idle-time-millis: 300000</span><br><span class="line">        #Oracle需要打开注释</span><br><span class="line">        #validation-query: SELECT 1 FROM DUAL</span><br><span class="line">        test-while-idle: true</span><br><span class="line">        test-on-borrow: false</span><br><span class="line">        test-on-return: false</span><br><span class="line">        stat-view-servlet:</span><br><span class="line">          enabled: true</span><br><span class="line">          url-pattern: /druid/*</span><br><span class="line">          #login-username: admin</span><br><span class="line">          #login-password: admin</span><br><span class="line">        filter:</span><br><span class="line">          stat:</span><br><span class="line">            log-slow-sql: true</span><br><span class="line">            slow-sql-millis: 1000</span><br><span class="line">            merge-sql: false</span><br><span class="line">          wall:</span><br><span class="line">            config:</span><br><span class="line">              multi-statement-allow: true</span><br></pre></td></tr></table></figure><h2><span id="3完成1-2步后启动应用">3.完成1、2步后，启动应用</span></h2><p>如果控制台不报错且出现如下图所示，就表示成功整合:<br><img src="/2020/05/21/SpringBoot-MyBatis-Plus实现多数据源/01.png" alt=""></p><h2><span id="4注意事项">4.注意事项</span></h2><p>启动主类需要排除Druid相关依赖，否则会出现如下错误:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Failed to configure a DataSource: &apos;url&apos; attribute is not specified and no embedded datasource could be configured.</span><br><span class="line"></span><br><span class="line">Reason: Failed to determine a suitable driver class</span><br></pre></td></tr></table></figure></p><p>解决办法，加上如下代码即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication(exclude = DruidDataSourceAutoConfigure.class)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Iaas、Paas、Saas对比分析</title>
      <link href="/2020/05/21/Iaas%E3%80%81Paas%E3%80%81Saas%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/"/>
      <url>/2020/05/21/Iaas%E3%80%81Paas%E3%80%81Saas%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1><span id="iaas-paas-saas对比分析">Iaas、Paas、Saas对比分析</span></h1><p>从Iaas、Paas到Saas，客户所要管理负责由多到少，成本也越来越低。下面所列举的，足以看出。<br>以我所待的公司，无论是外包还是创业公司也好。基本上采用的都是Saas这种模式，Sass对于客户而言省事省时省钱(从Applications到Compute无需管理)。对于供应商，也就是我们而言，由于从应用开发到部署，再到维护都由我们负责，从一定程度上降低一些问题排错的时间成本(过去写一套系统部署在不同的操作系统，不同的操作系统的版本环境存在差异，可能会遇到在这个系统正常运行，在那个系统出现一些问题，不排除是因为代码的原因，但有的时候也与环境有极大的关系)。<br><a id="more"></a></p><h2><span id="传统架构">传统架构</span></h2><h3><span id="客户管理">客户管理</span></h3><ul><li>Applications(应用)</li><li>Data(数据)</li><li>Runtime(运行环境)</li><li>Middleware(中间件)</li><li>O/S(操作系统)</li><li>Virtualization(虚拟化)</li><li>Servers(服务)</li><li>Storage(存储)</li><li>Compute(计算机)</li></ul><h2><span id="infrastructure-as-s-service基础设施即服务">Infrastructure as s Service(基础设施即服务)</span></h2><h3><span id="客户管理">客户管理</span></h3><ul><li>Applications</li><li>Data</li><li>Runtime</li><li>Middleware</li><li>O/S</li></ul><h3><span id="供应商管理">供应商管理</span></h3><ul><li>Virtualization</li><li>Servers</li><li>Storage</li><li>Compute</li></ul><h2><span id="platform-as-a-service平台即服务">Platform as a Service(平台即服务)</span></h2><h3><span id="客户管理">客户管理</span></h3><ul><li>Applications</li><li>Data</li></ul><h3><span id="供应商管理">供应商管理</span></h3><ul><li>Runtime</li><li>Middleware</li><li>O/S</li><li>Virtualization</li><li>Servers</li><li>Storage</li><li>Compute</li></ul><h2><span id="software-as-s-service软件即服务">Software as s Service(软件即服务)</span></h2><h3><span id="供应商管理">供应商管理</span></h3><ul><li>Applicationis</li><li>Data</li><li>Runtime</li><li>Middleware</li><li>O/S</li><li>Virtualization</li><li>Servers</li><li>Storage</li><li>Compute</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java编程思想》之对象导论</title>
      <link href="/2020/05/12/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B%E4%B9%8B%E5%AF%B9%E8%B1%A1%E5%AF%BC%E8%AE%BA/"/>
      <url>/2020/05/12/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B%E4%B9%8B%E5%AF%B9%E8%B1%A1%E5%AF%BC%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-抽象过程">一、抽象过程</span></h2><p>所有的编程语言都提供抽象机制。可以认为，人们所能够解决的问题的复杂性直接取决于抽象的类型和质量。<br><a id="more"></a><br>所谓的”类型”是指”所抽象的是什么?”<br>汇编语言是对底层机器的轻微抽象。接着出现许多所谓的”命令式”语言(如BASIC、C等)都是对汇编语言的抽象。</p><p>以Alan Key曾经总结的第一个成功的面向对象语言、同时也是Java所基于的语言之一的Smalltalk的五个特性，这些特性表现了一种纯粹的面向对象程序设计方式:</p><h3><span id="1万物皆对象">(1)万物皆对象。</span></h3><p>将对象视为奇特的变量，它可以存储数据，除此之外，你还可以要求它在自身上执行操作。理论上讲，你可以抽取待求解问题的任何概念化构件(狗、建筑物、服务等)，将其表示为程序中的对象。</p><h3><span id="2程序是对象的集合它们可以通过发送消息来告知彼此所要做的">(2)程序是对象的集合，它们可以通过发送消息来告知彼此所要做的。</span></h3><p>要想请求一个对象，就必须对该对象发送一条消息，更具体地说，可以把消息想象为对某个特定对象的方法的调用请求。</p><h3><span id="3每个对象都有自己的由其他对象所构成的存储">(3)每个对象都有自己的由其他对象所构成的存储。</span></h3><p>换句话说，可以通过创建包含现有对象的包的方式来创建新类型的对象。因此，可以在程序中构建复杂的体系，同时将其复杂性隐藏在对象的简单性背后。</p><h3><span id="4每个对象都拥有其类型">(4)每个对象都拥有其类型</span></h3><p>按照通用的说法，”每个对象都是某个类的一个实例”，这里的”类”就是”类型”的同义词。每个类最重要的区别在于其他类的特性就是”可以发送什么样的消息给它”。</p><h3><span id="5某一特定类型的所有对象都可以接受同样的消息">(5)某一特定类型的所有对象都可以接受同样的消息。</span></h3><p>这是一句意味深长的表述，你在稍后便会看到。因为”圆形”类型的对象同时也是”几何形”类型的对象，所以一个”圆形”对象必定能够接受发送”几何形”对象的消息。这意味着可以编写与”几何形”交互并自动处理所有与几何形性质相关的事物的代码。这种可替代性是OOP中最强有力的概念之一。</p><p>Bootch对对象提出了一个更加简述的描述:<strong>对象具有状态、行为和标识。</strong><br>这意味着每一个对象都可以拥有内部数据(它们给出了该对象的状态)和方法(它们产生行为)，并且每一个对象都可以拥有内部数据(它们给出了该对象的状态)和方法(它们产生行为)，并且每一个对象都可以唯一地与其他对象区分开来，具体说来，就是每一个对象在内存中都有一个唯一的地址。</p><h2><span id="二-每个对象都有一个接口">二、每个对象都有一个接口</span></h2><p>接口确定了某一特定对象所能发出的请求。但是，在程序中必须满足这些请求的代码。这些代码与隐藏的数据一起构成了实现。</p><p>从过程型编程的观点来看，这并不太复杂。在类型中，每一个可能的请求都有一个方法与之相关联，当向对象发送请求时，与之相关联的方法就会被调用。此过程通常被概括为:当某个对象”发送消息”(产生请求)，这个对象便知道此消息的目的，然后执行对应的程序代码。</p><h2><span id="三-每个对象都提供服务">三、每个对象都提供服务</span></h2><p>将对象看作是服务提供者好处如下:</p><ul><li>有助于提高对象的内聚性(高内聚)</li><li>简化问题，更好的解决问题</li></ul><h2><span id="四-被隐藏的具体实现">四、被隐藏的具体实现</span></h2><p>程序开发人员按照角色分为类创建者(那些创建新数据类型的程序员)和客户端程序员(那些在其应用中使用数据类型的类消费者)是大有裨益的。</p><p>客户端程序员的目标是收集各种用来快速应用开发的类。</p><p>类创建者的目标是构建类，这种类只向客户端程序员暴露必需的部分，而隐藏其他部分。</p><h3><span id="为什么要这样">为什么要这样?</span></h3><p>因为如果加以隐藏，那么客户端程序员将不能够访问它，这意味着类创建者可以任意修改被隐藏的部分，而不用担心对其他任何人造成影响。被隐藏的部分通常代表对象内部薄弱的部分，它们很容易被粗心的或不知内情的客户端程序员所毁坏，因此将实现隐藏起来可以减少程序bug。</p><h3><span id="访问控制存在的原因">访问控制存在的原因?</span></h3><ul><li>让客户端程序员无法触及他们不应该触及的部分-这些部分对数据类型的内部操作来说是必需的，但并不是用户解决特定问题所需的接口的一部分(这对客户端程序员来说是一项服务，因为他们可以很容易地看出哪些东西可以清晰地分离并得以保护，那么你就可以轻而易举地完成这项工作。</li><li>允许库设计者可以改变类内部的工作方式而不用担心会影响到客户端程序员(例如，你可能为了减轻开发任务而以某种简单的方式实现某个特定类，但稍后发现你必须改写它才能使其运行得更快。如果接口和实现可以清晰地分离并得以保护，那么你就可以轻而易举地完成这项工作)</li></ul><p>Java用三个关键字在类的内部设定边界:<strong>public、private、protected。</strong></p><p>public:表示紧随其后的元素对任何人都是可用的。</p><p>private:表示除类型创建者和类型的内部方法之外的任何人都不能访问。</p><p>protected:protected与private作用相当，差别仅在继承的类可以访问protected成员，但是不能访问private成员。</p><p>Java还有一种默认的访问权限，当没有使用前面提到的任何访问指定词时，它将发挥作用。<br>这种权限通常被称为包访问权限，因为在这种权限下，类可以访问在同一个包(库构件)中的其他类的成员，但是在包之外，这些成员如同private一样。</p><h2><span id="五-复用具体实现">五、复用具体实现</span></h2><p>最简单地复用某个类的方式就是直接使用该类的一个对象，此外也可以将那个类的一个对象置于某个新的类中。我们称其为”创建一个成员对象”。新的类可以由任意数量、任意类型的其他对象以任意可以实现新的类中想要的功能的方式所组成。因为是在使用现有的类合成新的类，所以这种概念被称为组合，如果组合是动态发生的，那么它通常被称为聚合。组合经常被视为”has-a”(拥有)关系，就像我们常说的”汽车拥有引擎”一样。</p><h2><span id="六-继承">六、继承</span></h2><p>is-a(是一个)和is-like-a(像是一个)</p><h2><span id="七-伴随着多态的可互换对象">七、伴随着多态的可互换对象</span></h2><h2><span id="八-单根继承">八、单根继承</span></h2><p>在单根继承结构中的所有对象都具有一个共用接口，所以它们归根到底都是相同的基本类型。<br>另一种(C++所能提供的)结构是无法确保所有对象都属于同一个基本类型。从向后兼容的角度看，这么做能够更好地适应C模型，而且受限较少，但是当要进行完全的面向对象程序员设计时，则必须构建自己的继承体系，使得它可以提供其他OOP语言内置的便利。</p><p>单根继承结构保证所有对象都具备某些功能。因此，所有对象都可以很容易地在堆上创建，而参数传递也得到了极大的简化。</p><p>单根继承结构使垃圾回收器的实现变得容易得多，而垃圾回收器正是Java相对C++的重要改进之一。由于所有对象都保证具有其类型信息，因此不会因无法确定对象的类型而陷入僵局。</p><h2><span id="九-容器">九、容器</span></h2><p>对容器有所选择，有两个原因:<br>第一、不同的容器提供了不同类型的接口和外部行为。堆栈相对队列就具备不同的接口和行为，也不同于集合和列表的接口和行为。它们之中的某种容器提供的解决方案比其他容器要灵活得多。<br>第二、不同的容器对于某些操作具有不同的效率。<br>例如ArrayList和LinkedList。<br>它们具有相同接口和外部行为的简单的序列，但是它们对某些操作所花费的代价却有天囊之别。在ArrayList中，随机访问元素是一个花费固定时间的操作;但是，对LinkedList来说，随机选取元素需要在列表中移动，这种代价是高昂的，访问越接近表尾的元素，花费的时间越长。而另一方面，如果想在序列中间插入一个元素，LinkedList的开销却比ArrayList要小。</p><h3><span id="参数化类型又称泛型">参数化类型(又称泛型)</span></h3><p>容器存储的对象都只具有Java中的通用类型:Object。单根继承结构意味着所有东西都是Object类型，所以可以存储Object的容器可以存储任何东西。这使得容器很容易被复用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>脚本是个好东西</title>
      <link href="/2020/05/06/%E8%84%9A%E6%9C%AC%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B8%9C%E8%A5%BF/"/>
      <url>/2020/05/06/%E8%84%9A%E6%9C%AC%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B8%9C%E8%A5%BF/</url>
      
        <content type="html"><![CDATA[<p>Linux下使用shell脚本可以完成很多任务，如执行脚本部署测试环境、批量添加系统用户(之前做edusoho二次开发时用到)、监控项目运行情况(如果宕机，自动重启)等。<br><a id="more"></a></p><p>总而言之，一台或者多台Linux，如果你不能熟练的掌握shell脚本的话，如巡检之类的重复性工作会累死人的。</p><p>另外不仅仅是Linux，像我本地自己平时兴趣爱好写一些小demo也用到shell脚本或bat脚本。</p><p>如最近博客项目需要启动Redis、Mongodb、ES等，但一个个手动启动实在是非常麻烦，于是我将其抽为一个bat脚本，只需桌面点击，应用全部启动，非常节约时间。</p><p>我的bat脚本内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">echo start</span><br><span class="line"></span><br><span class="line">echo mongo START</span><br><span class="line">start /d &quot;D:\Program Files\MongoDB\Server\4.2\bin&quot; mongo.exe</span><br><span class="line"></span><br><span class="line">echo redis START</span><br><span class="line">start /d &quot;D:\Program Files\Redis-x64-3.2.100&quot; redis-server.exe</span><br><span class="line"></span><br><span class="line">echo elasticsearch START</span><br><span class="line">start /d &quot;D:\Program Files\elasticsearch-5.6.16\bin&quot; elasticsearch.bat</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>availableProcessors is already set to [8], rejecting [8]</title>
      <link href="/2020/05/06/availableProcessors-is-already-set-to-8-rejecting-8/"/>
      <url>/2020/05/06/availableProcessors-is-already-set-to-8-rejecting-8/</url>
      
        <content type="html"><![CDATA[<p>错误详细信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;elasticsearchClient&apos; defined in class path resource [org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.elasticsearch.client.transport.TransportClient]: Factory method &apos;elasticsearchClient&apos; threw exception; nested exception is java.lang.IllegalStateException: availableProcessors is already set to [8], rejecting [8]</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>关键信息如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalStateException: availableProcessors is already set to [8], rejecting [8]</span><br></pre></td></tr></table></figure></p><p>通过关键字搜索，找到了解决办法，<strong>原因是因为SpringBoot的netty和elasticsearch的netty相关jar冲突</strong></p><p>只需在启动类加入如下代码即可解决(注意，这段代码要放在SpringApplication.run(Application.class, args)之前才行，否则不会生效):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(&quot;es.set.netty.runtime.available.processors&quot;, &quot;false&quot;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《读懂一本书:樊登读书法》之读书笔记</title>
      <link href="/2020/05/02/%E3%80%8A%E8%AF%BB%E6%87%82%E4%B8%80%E6%9C%AC%E4%B9%A6-%E6%A8%8A%E7%99%BB%E8%AF%BB%E4%B9%A6%E6%B3%95%E3%80%8B%E4%B9%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/05/02/%E3%80%8A%E8%AF%BB%E6%87%82%E4%B8%80%E6%9C%AC%E4%B9%A6-%E6%A8%8A%E7%99%BB%E8%AF%BB%E4%B9%A6%E6%B3%95%E3%80%8B%E4%B9%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-会读书更要会讲书">一、会读书，更要会讲书</span></h2><a id="more"></a><h3><span id="1复杂时代阅读是大众反脆弱的武器">1.复杂时代，阅读是大众反脆弱的武器</span></h3><h3><span id="2你焦虑吗如何从单向度的人变成多向度的人">2.你焦虑吗?如何从”单向度的人”变成多向度的人”</span></h3><h3><span id="3讲书是最高效的沉浸式学习方法">3.讲书是最高效的沉浸式学习方法</span></h3><h2><span id="二-工科男的讲书之路">二、工科男的讲书之路</span></h2><h3><span id="1辩论队培养我正确发声和控场">1.辩论队培养我正确发声和控场</span></h3><h3><span id="2培养幽默感吸引眼球">2.培养幽默感，吸引眼球</span></h3><h3><span id="3第一次实战三本书撑起一门课">3.第一次实战:三本书撑起一门课</span></h3><h3><span id="4刻意练习时间x积累">4.刻意练习=时间X积累</span></h3><h3><span id="5学会讲书为知识松绑">5.学会讲书，为知识松绑</span></h3><h3><span id="6讲书的五种必备能力">6.讲书的五种必备能力</span></h3><h3><span id="7对待讲书要有将然的心">7.对待讲书，要有”将然”的心</span></h3><h2><span id="三-一年只选52本书标准是什么">三、一年只选52本书，标准是什么?</span></h2><h3><span id="1对于读书的五大误解">1.对于读书的五大误解</span></h3><h3><span id="2选书原则">2.选书原则</span></h3><h3><span id="3tips原则">3.TIPS原则</span></h3><h3><span id="4科学性是选书的第一标准">4.科学性是选书的第一标准</span></h3><h3><span id="5具有建设性的好书值得你读">5.具有建设性的好书值得你读</span></h3><h3><span id="6每本好书都自带使命">6.每本好书都自带使命</span></h3><h2><span id="四-如何读懂一本书">四、如何读懂一本书</span></h2><h3><span id="1理解力的池子有多大就能够读懂多难的书">1.理解力的池子有多大，就能够读懂多难的书</span></h3><h3><span id="2知识的自我反刍">2.知识的自我反刍</span></h3><h2><span id="五-把书读薄如何解构一本书">五、把书读薄:如何解构一本书</span></h2><h3><span id="1阅读前需要摒弃的坏习惯">1.阅读前需要摒弃的坏习惯</span></h3><h3><span id="2带着目的阅读vs自由阅读">2.带着目的阅读VS自由阅读</span></h3><h3><span id="3开宗明义这本书解决了什么问题">3.开宗明义:这本书解决了什么问题?</span></h3><h3><span id="4熟悉书的写作背景">4.熟悉书的写作背景</span></h3><h3><span id="5最有价值的部分书中提供了哪些解决方案">5.最有价值的部分:书中提供了哪些解决方案</span></h3><h3><span id="6画龙点睛一句话总结价值升华">6.画龙点睛,一句话总结价值升华</span></h3><h3><span id="7图书画线有学问什么才是精华">7.图书画线有学问:什么才是精华?</span></h3><h2><span id="六-内容的再创作如何组织一个讲稿">六、内容的再创作:如何组织一个讲稿</span></h2><h3><span id="1讲书前要了解的两大原则">1.讲书前要了解的两大原则</span></h3><h3><span id="2原文和再创作的比例及尺度">2.原文和再创作的比例及尺度</span></h3><h3><span id="3讲书最重要的步骤是构建坡道">3.讲书最重要的步骤是构建坡道</span></h3><h3><span id="4选取重要章节陈述整体结构">4.选取重要章节，陈述整体结构</span></h3><h3><span id="5要不要写讲稿或书摘">5.要不要写讲稿或书摘？</span></h3><h2><span id="七-开口讲书还需要做这些准备">七、开口讲书，还需要做这些准备</span></h2><h3><span id="1复盘思维导图重新熟悉内容">1.复盘思维导图，重新熟悉内容</span></h3><h3><span id="2调整心态讲书不为取悦讲众">2.调整心态，讲书不为取悦讲众</span></h3><h3><span id="3聪明地和听众互动">3.聪明地和听众互动</span></h3><h3><span id="4对方比你认知水平高你该如何讲书">4.对方比你认知水平高，你该如何讲书?</span></h3><h3><span id="5如何提高语言组织能力">5.如何提高语言组织能力</span></h3><h3><span id="6不断地拓展认知的边界">6.不断地拓展认知的边界</span></h3><h2><span id="八-学会绘制思维导图掌握知识输出方法">八、学会绘制思维导图，掌握知识输出方法</span></h2><h3><span id="1樊登读书思维导图绘制法">1.”樊登读书”思维导图绘制法</span></h3><h3><span id="2经典私家思维导图大公开">2.经典私家思维导图大公开</span></h3>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《程序员的自我修养》之读书笔记</title>
      <link href="/2020/04/30/%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%E3%80%8B%E4%B9%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/04/30/%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%E3%80%8B%E4%B9%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2><span id="谈职业生涯">谈职业生涯</span></h2><a id="more"></a><h3><span id="一-写给年轻程序员的10点启示">一、写给年轻程序员的10点启示</span></h3><h4><span id="1正确地认识自己">1.正确地认识自己</span></h4><h4><span id="2比一般人更努力">2.比一般人更努力</span></h4><h4><span id="3适时建立个人权威">3.适时建立个人权威</span></h4><h4><span id="4遵循最佳实践">4.遵循最佳实践</span></h4><h4><span id="5保持好奇心并乐于探索新的事物">5.保持好奇心并乐于探索新的事物</span></h4><h4><span id="6抛开代码与人沟通">6.抛开代码与人沟通</span></h4><h4><span id="7要为优秀的人工作">7.要为优秀的人工作</span></h4><h4><span id="8生活-睡眠-旅行">8.生活、睡眠、旅行</span></h4><h4><span id="9相信自己的天赋和创造力">9.相信自己的天赋和创造力</span></h4><h3><span id="二-那些程序员们后知后觉得职业生涯经验">二、那些程序员们后知后觉得职业生涯经验</span></h3><h4><span id="1你的薪酬与工作量无关">1.你的薪酬与工作量无关</span></h4><h4><span id="2尽可能持续做一件事">2.尽可能持续做一件事</span></h4><h4><span id="3唯一不变的就是变化本身">3.唯一不变的就是变化本身</span></h4><h4><span id="4你的声誉非常重要">4.你的声誉非常重要</span></h4><h4><span id="5理解沟通的意义">5.理解沟通的意义</span></h4><h4><span id="6你的右脑将是你成功的关键">6.你的右脑将是你成功的关键</span></h4><h4><span id="7不要轻易说简单或不可能">7.不要轻易说简单或不可能</span></h4><h4><span id="8你不应该总是单打独斗">8.你不应该总是单打独斗</span></h4><h4><span id="9你的能力显而易见">9.你的能力显而易见</span></h4><h3><span id="三-如何招到靠谱的程序员">三、如何招到靠谱的程序员</span></h3><h4><span id="1简历看人">1.简历看人</span></h4><h4><span id="2给面试者10分钟介绍自己最擅长的">2.给面试者10分钟介绍自己最擅长的</span></h4><h4><span id="3基础打牢了吗">3.基础打牢了吗</span></h4><h4><span id="4技术深度够吗">4.技术深度够吗</span></h4><h4><span id="5选择适合所在企业文化的人">5.选择适合所在企业文化的人</span></h4><h4><span id="6行为面试法">6.行为面试法</span></h4><h4><span id="7给他们一个虚拟人物">7.给他们一个虚拟人物</span></h4><h3><span id="四-每个程序员都应该了解的一件事">四、每个程序员都应该了解的一件事</span></h3><h4><span id="1读与技术无关的书">1.读与技术无关的书</span></h4><h4><span id="2会写文档">2.会写文档</span></h4><h4><span id="3学会包装">3.学会包装</span></h4><h4><span id="4尝试多讲">4.尝试多讲</span></h4><h4><span id="5建立社会化联系">5.建立社会化联系</span></h4><h3><span id="五-程序员的烦恼">五、程序员的烦恼</span></h3><h4><span id="1是否还应该留在一线城市">1.是否还应该留在一线城市</span></h4><h4><span id="2小公司做的事情太繁杂了">2.小公司做的事情太繁杂了</span></h4><h4><span id="3创业公司中的危机感">3.创业公司中的危机感</span></h4><h4><span id="4技术单一想学习更多">4.技术单一，想学习更多</span></h4><h4><span id="5我想自学编程应该学习哪一门语言">5.我想自学编程，应该学习哪一门语言</span></h4><h4><span id="6大专学历能进大公司吗">6.大专学历，能进大公司吗</span></h4><h4><span id="7非计算机专业学生未来想从事软件开发">7.非计算机专业学生，未来想从事软件开发</span></h4><h4><span id="8总是熬夜睡眠不足">8.总是熬夜，睡眠不足</span></h4><h3><span id="六-提给年轻程序员的职业生涯建议">六、提给年轻程序员的职业生涯建议</span></h3><h4><span id="1尽早确定你想做的事情">1.尽早确定你想做的事情</span></h4><h4><span id="210000小时定律">2.10000小时定律</span></h4><h4><span id="3提高工作效率">3.提高工作效率</span></h4><h4><span id="4简明的沟通方式">4.简明的沟通方式</span></h4><h4><span id="5pkss与持续学习">5.PKSS与持续学习</span></h4><h4><span id="6学会控制情绪">6.学会控制情绪</span></h4><h4><span id="7让最优秀的人围绕在你身边">7.让最优秀的人围绕在你身边</span></h4><h4><span id="8善于归纳与表达">8.善于归纳与表达</span></h4><h4><span id="9掌握英语">9.掌握英语</span></h4><h4><span id="10睡眠助你更加强大">10.睡眠助你更加强大</span></h4><h2><span id="谈实践与认知">谈实践与认知</span></h2><h3><span id="一-突破程序员思维">一、突破程序员思维</span></h3><h4><span id="1什么是程序员思维">1.什么是程序员思维</span></h4><h4><span id="2为什么要突破程序员思维">2.为什么要突破程序员思维</span></h4><h4><span id="3如何突破程序员思维">3.如何突破程序员思维</span></h4><h3><span id="二-全栈工程师如何快速构建一个web应用">二、全栈工程师如何快速构建一个Web应用</span></h3><h4><span id="1网站定位与功能设定">1.网站定位与功能设定</span></h4><h4><span id="2信息架构">2.信息架构</span></h4><h4><span id="3ui设计">3.UI设计</span></h4><h4><span id="4应用架构">4.应用架构</span></h4><h4><span id="5开发">5.开发</span></h4><h4><span id="6部署">6.部署</span></h4><h4><span id="7性能调优">7.性能调优</span></h4><h4><span id="8网站数据统计">8.网站数据统计</span></h4><h4><span id="9开发与设计工具">9.开发与设计工具</span></h4><h3><span id="三-如何成为一名优秀的全栈工程师">三、如何成为一名优秀的全栈工程师</span></h3><h4><span id="1什么是全栈工程师">1.什么是全栈工程师</span></h4><h4><span id="2全栈工程师的价值">2.全栈工程师的价值</span></h4><h4><span id="3全栈工程师的技能栈">3.全栈工程师的技能栈</span></h4><h4><span id="4优秀的全栈工程师需要走出去">4.优秀的全栈工程师需要走出去</span></h4><h3><span id="四-为什么每个程序员都应该学会使用命令行">四、为什么每个程序员都应该学会使用命令行</span></h3><h4><span id="1有效控制你的操作系统">1.有效控制你的操作系统</span></h4><h4><span id="2用git做版本控制">2.用Git做版本控制</span></h4><h4><span id="3前端开发依赖于命令行工具">3.前端开发依赖于命令行工具</span></h4><h4><span id="4既然学习命令行对于程序员来说那么重要我们又应该如何学习呢">4.既然学习命令行对于程序员来说那么重要，我们又应该如何学习呢</span></h4><h3><span id="五-重构系统改善之道">五、重构–系统改善之道</span></h3><h4><span id="1从构建工具开始">1.从构建工具开始</span></h4><h4><span id="2让自动化测试成为重构的保障">2.让自动化测试成为重构的保障</span></h4><h4><span id="3代码级的持续重构">3.代码级的持续重构</span></h4><h4><span id="4基于微服务的重构">4.基于微服务的重构</span></h4><h3><span id="六-程序员也该懂得这样就好">六、程序员也该懂得”这样就好”</span></h3><h3><span id="七-走出软件开发法则">七、走出软件开发法则</span></h3><h4><span id="1面向对象">1.面向对象</span></h4><h4><span id="2测试非常重要">2.测试非常重要</span></h4><h4><span id="3那些层出不穷的方法论">3.那些层出不穷的方法论</span></h4><h3><span id="八-我无法写出易读的代码">八、我无法写出易读的代码</span></h3><h4><span id="1-代码本身就是难以阅读的">1、代码本身就是难以阅读的</span></h4><h4><span id="2如何让你的代码更易阅读">2.如何让你的代码更易阅读</span></h4><h3><span id="九-一名全栈工程师的mac工具箱设计-开发-效率">九、一名全栈工程师的Mac工具箱(设计、开发、效率)</span></h3><h4><span id="1设计类工具">1.设计类工具</span></h4><h4><span id="2开发类工具">2.开发类工具</span></h4><h4><span id="3效率类工具">3.效率类工具</span></h4><h3><span id="十-我似乎理解了编程的意义">十、我似乎理解了编程的意义</span></h3><h4><span id="1编程是一项技能">1.编程是一项技能</span></h4><h4><span id="2编程是去解决问题">2.编程是去解决问题</span></h4><h4><span id="3编程是在表达也是在创作">3.编程是在表达，也是在创作</span></h4><h4><span id="4编程是为了留下痕迹">4.编程是为了留下痕迹</span></h4><h2><span id="谈谈个人发展">谈谈个人发展</span></h2><h3><span id="一-那些优秀程序员身上的共同特质">一、那些优秀程序员身上的共同特质</span></h3><h4><span id="1至少深入理解一门编程语言">1.至少深入理解一门编程语言</span></h4><h4><span id="2看上去有些傻">2.看上去有些”傻”</span></h4><h4><span id="3他们都是现实主义者">3.他们都是现实主义者</span></h4><h4><span id="4从自己的失败中学习">4.从自己的失败中学习</span></h4><h4><span id="5很懒却很高效">5.很懒却很高效</span></h4><h4><span id="6善于发现并改造轮子">6.善于发现并改造轮子</span></h4><h4><span id="7并行工作有效利用时间">7.并行工作，有效利用时间</span></h4><h4><span id="8具备不错的软技能">8.具备不错的软技能</span></h4><h4><span id="9身边有一些优秀的伙伴">9.身边有一些优秀的伙伴</span></h4><h4><span id="10对生活充满热情">10.对生活充满热情</span></h4><h3><span id="二-成为一名自由程序员">二、成为一名自由程序员</span></h3><h4><span id="1自由程序员的类型">1.自由程序员的类型</span></h4><h4><span id="2成为自由程序员的益处">2.成为自由程序员的益处</span></h4><h4><span id="3成为自由程序员的挑战">3.成为自由程序员的挑战</span></h4><h4><span id="4如何成为一名成功的自由程序员">4.如何成为一名成功的自由程序员</span></h4><h4><span id="5如何开始">5.如何开始</span></h4><h4><span id="6-关于未来">6。关于未来</span></h4><h3><span id="三-专家与普通人的区别在于觉察力">三、专家与普通人的区别在于觉察力</span></h3><h3><span id="四-程序员创业你需要先避开这些坑">四、程序员创业?你需要先避开这些坑</span></h3><h4><span id="1做自己不擅长的领域">1.做自己不擅长的领域</span></h4><h4><span id="2不具操作性的商业计划">2.不具操作性的商业计划</span></h4><h4><span id="3参与者太少或太多">3.参与者太少或太多</span></h4><h4><span id="4研发周期过长产品缺乏焦点或特色">4.研发周期过长，产品缺乏焦点或特色</span></h4><h4><span id="5过度关注产品研发而忽略了市场">5.过度关注产品研发，而忽略了市场</span></h4><h4><span id="6没有与你的用户维护关系也不愿意向人求助">6.没有与你的用户维护关系，也不愿意向人求助</span></h4><h4><span id="7过分信任专家或对用户言听计从">7.过分信任专家，或对用户言听计从</span></h4><h3><span id="五-程序员之美">五、程序员之”美”</span></h3><h3><span id="六-建立自己的个人品牌">六、建立自己的个人品牌</span></h3><h4><span id="1为什么设计师更注重个人品牌">1.为什么设计师更注重个人品牌</span></h4><h4><span id="2开始建立程序员的个人品牌">2.开始建立程序员的个人品牌</span></h4><h4><span id="3如何建立个人品牌">3.如何建立个人品牌</span></h4><h3><span id="七-你不应该成为一匹独狼">七、你不应该成为一匹独狼</span></h3><h4><span id="1不切实际的梦想">1.不切实际的梦想</span></h4><h4><span id="2尝试做所有的事情">2.尝试做所有的事情</span></h4><h4><span id="3无法获得帮助和意见">3.无法获得帮助和意见</span></h4><h4><span id="4失去工作的节奏">4.失去工作的节奏</span></h4><h4><span id="5疏于归纳整理">5.疏于归纳整理</span></h4><h4><span id="6更容易放弃">6.更容易放弃</span></h4><h3><span id="八-未来有关程序员的10个预言">八、未来，有关程序员的10个预言</span></h3><h4><span id="1程序员将变得更加全能">1.程序员将变得更加全能</span></h4><h4><span id="2程序员将更具多样性">2.程序员将更具多样性</span></h4><h4><span id="3工具大爆发让程序员们效率倍增">3.工具大爆发让程序员们效率倍增</span></h4><h4><span id="4云服务加速创新">4.云服务加速创新</span></h4><h4><span id="5程序员的职能进一步扩展">5.程序员的职能进一步扩展</span></h4><h4><span id="6程序员成为更多人的终身职业">6.程序员成为更多人的终身职业</span></h4><h4><span id="7自由程序员将大量出现">7.自由程序员将大量出现</span></h4><h4><span id="8程序员更具国际化">8.程序员更具国际化</span></h4><h4><span id="9出现一些伟大的程序员">9.出现一些伟大的程序员</span></h4><h4><span id="10编程教学改变下一代">10.编程教学改变下一代</span></h4><h3><span id="九-你也可以写出优秀的技术博客">九、你也可以写出优秀的技术博客</span></h3><h4><span id="1选择合适的博客平台">1.选择合适的博客平台</span></h4><h4><span id="2如何起步">2.如何起步</span></h4><h2><span id="谈编程中的教与学">谈编程中的教与学</span></h2><h3><span id="一-自学编程之前你需要知道这些">一、自学编程之前，你需要知道这些</span></h3><h4><span id="1你是否适合自学编程">1.你是否适合自学编程</span></h4><h4><span id="2学习编程后你能做什么">2.学习编程后你能做什么</span></h4><h4><span id="3选择你的第一种编程语言">3.选择你的第一种编程语言</span></h4><h4><span id="4可以帮助你免费学习编程的在线网站">4.可以帮助你免费学习编程的在线网站</span></h4><h4><span id="5推荐几本教孩子学编程的书">5.推荐几本教孩子学编程的书</span></h4><h3><span id="二-为什么我们不再购买技术类书籍">二、为什么我们不再购买技术类书籍</span></h3><h4><span id="1我们更喜欢通过在线视频学习技术">1.我们更喜欢通过在线视频学习技术</span></h4><h4><span id="2通过在线文档进行学习">2.通过在线文档进行学习</span></h4><h4><span id="3学会提问和寻找答案">3.学会提问和寻找答案</span></h4><h4><span id="4追随那些专家和他们的优秀技术博客">4.追随那些专家和他们的优秀技术博客</span></h4><h4><span id="5我们仍然需要买书">5.我们仍然需要买书</span></h4><h3><span id="三-我眼中的技术干货和湿货">三、我眼中的技术干货和湿货</span></h3><h3><span id="四-为什么你应该让你的孩子尽早学习编程">四、为什么你应该让你的孩子尽早学习编程</span></h3><h4><span id="1学习编程能让孩子变得更好">1.学习编程能让孩子变得更好</span></h4><h4><span id="2学习编程非常简单而且快乐">2.学习编程非常简单而且快乐</span></h4><h4><span id="3对学校教育有很好的促进作用">3.对学校教育有很好的促进作用</span></h4><h4><span id="4更好地适应未来的科技社会">4.更好地适应未来的科技社会</span></h4><h3><span id="五-写作与写代码">五、写作与写代码</span></h3><h4><span id="1写作很像写代码">1.写作很像写代码</span></h4><h4><span id="2写作和写代码又是不一样的">2.写作和写代码又是不一样的</span></h4><h3><span id="六-如果要为孩子写一本编程书">六、如果要为孩子写一本编程书</span></h3><h4><span id="1一本给所有编程初学者的入门书">1.一本给所有编程初学者的入门书</span></h4><h4><span id="2教手艺而不是知识">2.教手艺，而不是知识</span></h4><h4><span id="3一门现代且面向未来的语言">3.一门现代且面向未来的语言</span></h4><h4><span id="4利用所有优秀的资源">4.利用所有优秀的资源</span></h4><h4><span id="5兼顾艺术-设计与创造">5.兼顾艺术、设计与创造</span></h4><h4><span id="6关于书的形式">6.关于书的形式</span></h4><h3><span id="七-学习编程从玩开始">七、学习编程从”玩”开始</span></h3><h4><span id="1我要玩编程">1.我要玩编程</span></h4><h4><span id="2认识编程">2.认识编程</span></h4><h4><span id="3让孩子爱上编程">3.让孩子爱上编程</span></h4><h4><span id="4准备工作">4.准备工作</span></h4><h4><span id="5界面与功能">5.界面与功能</span></h4><h2><span id="谈自学设计">谈自学设计</span></h2><h3><span id="一-自学设计你真的入门了吗">一、自学设计，你真的入门了吗?</span></h3><h4><span id="1写给ui设计初学者们">1.写给UI设计初学者们</span></h4><h4><span id="2我为什么自学ui设计">2.我为什么自学UI设计</span></h4><h4><span id="3自学路上的困扰">3.自学路上的困扰</span></h4><h4><span id="4重新认识ui设计">4.重新认识UI设计</span></h4><h4><span id="5改变设计工具">5.改变设计工具</span></h4><h4><span id="6寻找设计灵感">6.寻找设计灵感</span></h4><h3><span id="二-那些永恒的设计原则">二、那些永恒的设计原则</span></h3><h4><span id="1什么是设计什么才是优秀的设计">1.什么是设计，什么才是优秀的设计</span></h4><h4><span id="2尽可能少设计">2.尽可能少设计</span></h4><h4><span id="3这样就好与redesign">3.”这样就好”与Redesign</span></h4><h4><span id="4遵循设计的最佳实践">4.遵循设计的最佳实践</span></h4><h3><span id="三-寻找设计灵感">三、寻找设计灵感</span></h3><h4><span id="1让灵感成为习惯">1.让灵感成为习惯</span></h4><h4><span id="2读书">2.读书</span></h4><h4><span id="3收集与思考">3.收集与思考</span></h4><h4><span id="4乐于动手制作">4.乐于动手制作</span></h4><h3><span id="四-因为美而学习设计">四、因为”美”而学习设计</span></h3><h3><span id="五-浅谈企业级产品设计">五、浅谈企业级产品设计</span></h3><h4><span id="1不好的设计是如何产生的">1.不好的设计是如何产生的</span></h4><h4><span id="2优秀的设计需要将用户置回情境之中">2.优秀的设计需要将用户置回情境之中</span></h4>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之桥梁模式</title>
      <link href="/2020/04/20/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E6%A1%A5%E6%A2%81%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/04/20/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E6%A1%A5%E6%A2%81%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-桥梁模式的定义">一、桥梁模式的定义</span></h2><p>桥梁模式也叫桥接模式，是一个比较简单的模式，其定义如下:<br><strong>将抽象和实现解耦，使得两者可以独立地变化。</strong><br><a id="more"></a></p><h3><span id="桥梁模式的四个角色">桥梁模式的四个角色</span></h3><h4><span id="abstraction抽象化角色">Abstraction–抽象化角色</span></h4><p>它的主页职责是定义出该角色的行为，同时保存一个对实现画角色的引用，该角色一般是抽象类。</p><h4><span id="implementor实现化角色">Implementor–实现化角色</span></h4><p>它是接口或者抽象类，定义角色必需的行为和属性。</p><h4><span id="refindabstraction修正抽象化角色">RefindAbstraction–修正抽象化角色</span></h4><p>它引用实现化角色对抽象化角色进行修正。</p><h4><span id="concreteimplementor具体实现化角色">ConcreteImplementor–具体实现化角色</span></h4><p>它实现接口或抽象类定义的方法和属性。</p><p>桥梁模式中的几个名词比较拗口，大家记住一句话:<strong>抽象角色引用实现角色，或者说抽象角色的部分由实现角色完成的</strong></p><h2><span id="二-桥梁模式的应用">二、桥梁模式的应用</span></h2><h3><span id="1桥梁模式的优点">1.桥梁模式的优点</span></h3><h4><span id="a抽象和实现分离">a.抽象和实现分离</span></h4><h4><span id="b优秀的扩充能力">b.优秀的扩充能力</span></h4><h4><span id="c实现细节对客户透明">c.实现细节对客户透明</span></h4><h3><span id="2桥梁模式的使用场景">2.桥梁模式的使用场景</span></h3><h4><span id="a不希望或不适用于继承的场景">a.不希望或不适用于继承的场景</span></h4><p>例如继承层次过渡、无法更细化设计颗粒等场景，需要考虑使用桥梁模式。</p><h4><span id="b接口或抽象类不稳定的场景">b.接口或抽象类不稳定的场景</span></h4><p>明知道接口不稳定还想通过实行或继承来实现业务需求，那是得不偿失，也是比较失败的做法。</p><h4><span id="c重用性要求较高的场景">c.重用性要求较高的场景</span></h4><p>设计的颗粒度越细，则被重用的可能性就越大，而采用继承则受父类的限制，不可能出现太细的颗粒度。</p><h3><span id="3桥梁模式的注意事项">3.桥梁模式的注意事项</span></h3><p>桥梁模式非常简单，使用该模式时主要考虑如何拆分抽象和实现，并不是一涉及继承就要考虑使用该模式。桥梁模式的意图还是对变化的封装，尽量把可能变化的因素封装到最细、最小的逻辑单元中，避免风险扩散。</p><h2><span id="三-最佳实践">三、最佳实践</span></h2><p>继承的优点有很大，可以把公共的方法或属性抽取，父类封装共性，子类实现特性，这是继承的基本功能。但是缺点比较明显就是强侵入性，父类有这个方法，子类也必须有，会带来扩展性问题，而桥梁模式就是这一问题的解决办法之一。</p><p>代码例子:<br><a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/Bridge" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/Bridge</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之享元模式</title>
      <link href="/2020/04/14/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/04/14/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-享元模式的定义">一、享元模式的定义</span></h2><p>享元模式是池技术的重要实现方式，其定义如下:<br><strong>使用共享对象可有效地支持大量的细粒度的对象。</strong></p><p>享元模式的定义为我们提出了两个要求:细粒度的对象和共享对象。我们知道分配太多的对象到应用程序中将有损程序的性能，同时还容易造成内存溢出，那怎么避免呢？就是享元模式提到的共享技术。</p><p>要求细粒度对象，那么不可避免地使得对象数量多且性质相近，那我们就将这些对象的信息分为两个部分:内部状态和外部状态。<br><a id="more"></a></p><h3><span id="内部状态">内部状态</span></h3><p>内部状态是对象可共享出来的信息，存储在享元对象内部并且不会随环境改变而改变。</p><h3><span id="外部状态">外部状态</span></h3><p>外部状态是对象得以依赖的一个标记，是随环境改变而改变、不可以共享的状态。</p><h3><span id="类图结构">类图结构</span></h3><h4><span id="1flyweight抽象享元角色">(1)Flyweight–抽象享元角色</span></h4><p>它简单地说就是一个产品的抽象类，同时定义出对象的外部状态和内部状态的接口或实现。</p><h4><span id="2concreteflyweight具体享元角色">(2)ConcreteFlyweight–具体享元角色</span></h4><p>具体的一个产品类，实现抽象角色定义的业务。该角色中需要注意的是内部状态处理应该与环境无关，不应该出现一个操作改变了内部状态，同时修改外部状态，这是绝对不允许的。</p><h4><span id="3unsharedconcreteflyweight不可共享的享元角色">(3)unsharedConcreteFlyweight–不可共享的享元角色</span></h4><p>不存在外部状态或者安全要求(如线程安全)不能够使用共享技术的对象，该对象一般不会出现在享元工厂中。</p><h4><span id="4flyweightfactory享元工厂">(4)FlyweightFactory–享元工厂</span></h4><p>职责非常简单，就是构造一个池容器，同时提供从池中获得对象的方法。</p><p><strong>享元模式的目的在于运用共享技术，使得一些细粒度的对象可以共享，我们的设计确实也应该这样，多使用细粒度对象，便于重用或重构。</strong></p><h2><span id="二-享元模式的应用">二、享元模式的应用</span></h2><h3><span id="1享元模式的优点和缺点">1.享元模式的优点和缺点</span></h3><p>享元模式是一个非常简单的模式，它可以大大减少应用程序创建的对象，降低程序内存的占用，增强程序的性能，但它同时也提高了系统复杂性，需要分离出外部状态和内部状态，而且外部状态具有固化特性，不应该随着内部状态改变而改变，否则导致系统的逻辑混乱。</p><h3><span id="2享元模式的使用场景">2.享元模式的使用场景</span></h3><ul><li>系统中存在大量的相似对象。</li><li>细粒度的对象都具备较接近的外部状态，而且内部状态与环境无关(也就是说对象没有特定身份)。</li><li>需要缓冲池的场景</li></ul><h2><span id="三-最佳实践">三、最佳实践</span></h2><p>Flyweight是拳击比赛中的特用名词，意思是”特轻量级”，指的是51公斤级比赛，用到设计模式中是指我们的类要轻量级，粒度要小，这才是它要表达的意思。粒度小了，带来的问题就是对象太多，那就用共享技术来解决。</p><p>代码例子:<br><a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/Flyweight" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/Flyweight</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git修改commit提交信息</title>
      <link href="/2020/04/13/Git%E4%BF%AE%E6%94%B9commit%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF/"/>
      <url>/2020/04/13/Git%E4%BF%AE%E6%94%B9commit%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>有些时候不小心git commit -m ‘提交信息’中的提交信息写错了。<br><a id="more"></a><br>不怕，执行如下命令即可修改(注意，仅仅只能针对最后一次提交):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend -m &quot;新的修改提交信息&quot;</span><br></pre></td></tr></table></figure></p><p>参考解决问题地址:<br><a href="https://www.softwhy.com/article-8492-1.html" target="_blank" rel="noopener">https://www.softwhy.com/article-8492-1.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode characters in position 0-2: ordinal not in range(128)</title>
      <link href="/2020/04/05/UnicodeEncodeError-ascii-codec-can-t-encode-characters-in-position-0-2-ordinal-not-in-range-128/"/>
      <url>/2020/04/05/UnicodeEncodeError-ascii-codec-can-t-encode-characters-in-position-0-2-ordinal-not-in-range-128/</url>
      
        <content type="html"><![CDATA[<p>错误背景:<br>使用Python2.7写一个简单爬虫报的错。</p><p>错误详细信息如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode characters in position 0-2: ordinal not in range(128)</span><br></pre></td></tr></table></figure></p><p>错误原因:<br>1.python默认使用ASCII处理字符流。</p><p>2.Unicode编码与ASCII编码的不兼容，Python脚本文件是由utf-8编码的。</p><p>解决方法(在当前python文件最上面加上如下代码):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(&apos;utf-8&apos;)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之解释器模式</title>
      <link href="/2020/04/05/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/04/05/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-解释器模式的定义">一、解释器模式的定义</span></h2><p>解释器模式是一种按照指定规定语法进行解析的方案，在现在项目中使用较少，其定义如下:<br>给定一门语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。<br><a id="more"></a></p><h3><span id="解释器模式通用类">解释器模式通用类:</span></h3><h4><span id="1abstractexpression抽象解释器">(1)AbstractExpression–抽象解释器</span></h4><p>具体的解释任务由各个实现类完成，具体的解释器分别由TerminalExpression和Non-terminalExpression完成</p><h4><span id="2terminalexpression终结符表达式">(2)TerminalExpression–终结符表达式</span></h4><p>实现与文法中的元素相关联的解释操作，通常一个解释器模式中只有一个终结符表达式，但有多个实例，对应不同的终结符。具体到我们例子就是Var-Expression类，表达式中的每个终结符都在栈中产生了一个VarExpression对象。</p><h4><span id="3nonterminalexpression非终结符表达式">(3)NonterminalExpression–非终结符表达式</span></h4><p>文法中的每条规则对应于一个非终结表达式，具体到我们的例子就是加减法规则分别对应AddExpression和SubExpression两个类。非终结符表达式根据逻辑的复杂程度而增加，原则上每个文法规则都对应一个非终结符表达式。</p><h4><span id="4context环境角色">(4)Context–环境角色</span></h4><p>具体到我们的例子中是采用Hash-Map代替。</p><h2><span id="二-解释器模式的应用">二、解释器模式的应用</span></h2><h3><span id="1解释器模式的优点">1.解释器模式的优点</span></h3><p>解释器是一个简单语法分析工具，它最显著的优点就是扩展性，修改语法规则只要修改相应的非终结符表达式就可以了，若扩展语法，则只要增加非终结符类就可以了。</p><h3><span id="2解释器模式的缺点">2.解释器模式的缺点</span></h3><h4><span id="1解释器模式会引起类膨胀">(1)解释器模式会引起类膨胀</span></h4><p>每个语法都要产生一个非终结符表达式，语法规则比较复杂时，就可能产生大量的类文件，为维护带来了非常多的麻烦。</p><h4><span id="2解释器模式采用递归调用方法">(2)解释器模式采用递归调用方法</span></h4><p>每个非终结符表达式只关心与自己有关的表达式，必须一层一层地剥茧，无论是面向过程的语言还是面向对象的语言，递归都是在必要条件下使用的，它导致调试非常复杂。想想看，如果要排查一个语法错误，我们是不是要一个断点地调试下去，直到最小的语法单元。</p><h4><span id="3效率问题">(3)效率问题</span></h4><p>解释器模式由于使用了大量的循环和递归，效率是一个不容忽视的问题，特别是用于解析复杂、冗长的语法时，效率是难以忍受的。</p><h3><span id="3解释器模式使用的场景">3.解释器模式使用的场景</span></h3><h4><span id="1重复发生的问题可以使用解释器模式">(1)重复发生的问题可以使用解释器模式</span></h4><p>例如，多个应用服务器，每天产生大量的日志，需要对日志文件进行分析处理，由于各个服务器的日志格式不同，但是数据要素是相同的，按照解释器的说法就是终结符表达式都是相同的，但是非终结符表达式就需要制定了。在这种情况下，可以通过程序来一劳永逸地解决该问题。</p><h4><span id="2一个简单语法需要解释的场景">(2)一个简单语法需要解释的场景</span></h4><p>为什么是简单？<br>看看非终结表达式，文法规则越多，复杂度越高，而且类间还要进行递归调用。想想看，多个类之间的调用你需要什么样的耐心和信心去排查问题。因此，解释器模式一般用来解析比较标准的字符集，例如SQL语法分析，不过该部分逐渐被专用工具所取代。</p><h3><span id="4解释器模式的注意事项">4.解释器模式的注意事项</span></h3><p>尽量不要在重要的模块中使用解释器模式，否则维护会是一个很大的问题。在项目中可以使用shell、JRuby、Groovy等脚本语言来代替解释器模式，弥补Java编译型语言的不足。我们在一个银行的分析型项目中就采用JRuby进行运算处理，避免使用解释器模式的四则运算，效率和性能各方面表现良好。</p><h2><span id="三-最佳实践">三、最佳实践</span></h2><p>解释器模式在实际的系统开发中使用得非常少，因为它会引起效率、性能以及维护等问题，一般在大中型的框架型项目能够找到它的身影，如一些数据分析工具、报表设计工具、科学计算工具等，若你确实遇到”一种特定类型的问题发生的频率足够高”的情况，准备使用解释器模式时，可以考虑Expression4J、MESP、Jep等开源的解析工具包，功能异常强大，而且非常容易使用，效率也还不错，实现大多数的数学运算完全没有问题，自己没有必要从头开始编写解释器。<br>代码例子:<br><a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/Interpreter" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/Interpreter</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之状态模式</title>
      <link href="/2020/04/05/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/04/05/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-状态模式的定义">一、状态模式的定义</span></h2><p><strong>当一个对象内在状态改变时允许其改变行为，这个对象看起来像改变了其类。</strong><br><a id="more"></a></p><h3><span id="1状态模式中的3个角色">1.状态模式中的3个角色</span></h3><p>(1)State–抽象状态角色<br>接口或抽象类，负责对象状态定义，并且封装环境角色以实现状态切换。</p><p>(2)ConcreteState–具体状态角色<br>每一个具体状态必须完成两个职责:本状态的行为管理以及趋向状态处理，通俗地讲，就是本状态下要做的事情，以及本状态如何过渡到其他状态。</p><p>(3)Context–环境角色<br>定义客户端需要的接口，并且负责状态的切换。</p><p>状态模式相对来说比较复杂，它提供了一种对物质运动的另一个观察视角，通过状态变更促使行为的变化，就类似水的状态变更一样，一碗水的初始状态是液态，通过加热转变为气态，状态的改变同时也引起体积的扩大，然后就产生了一个新的行为:鸣笛或顶起壶盖，瓦特就是这么发明蒸汽机的。</p><h2><span id="二-状态模式的应用">二、状态模式的应用</span></h2><h3><span id="1状态模式的优点">1.状态模式的优点</span></h3><h4><span id="1结构清晰">(1)结构清晰</span></h4><p>避免过多的switch…case或者if..else语句的使用，避免了程序的复杂性，提高系统的可维护性。</p><h4><span id="2遵循设计原则">(2)遵循设计原则</span></h4><p>很好地体现了开闭原则和单一职责原则，每个状态都是一个子类，你要增加状态就要增加子类，你要修改状态，你只修改一个子类就可以了。</p><h4><span id="3封装性非常好">(3)封装性非常好</span></h4><p>这也是状态模式的基本要求，状态变换放置到类的内部来实现，外部的调用不用知道类内部如何实现状态和行为的变换。</p><h3><span id="2状态模式的缺点">2.状态模式的缺点</span></h3><p>子类会太多，也就是类膨胀。如果一个事物有很多个状态也不稀奇，如果完全使用状态模式就会有太多的子类，不好管理，这个需要大家在项目中自己衡量。其实有很多方式解决这个状态问题，如在数据库中建立一个状态表，然后根据状态执行相应的操作，这个也不复杂，看大家的习惯和嗜好。</p><h3><span id="3状态模式的使用场景">3.状态模式的使用场景</span></h3><h4><span id="1为随状态改变而改变的场景">(1)为随状态改变而改变的场景</span></h4><p>这也是状态模式的根本出发点，例如权限设计，人员的状态不同即使执行下相同的行为结果也会不同，在这种情况下需要考虑使用状态模式。</p><h4><span id="2条件-分支判断语句的替代性">(2)条件、分支判断语句的替代性</span></h4><p>在程序中大量使用switch语句或者if判断语句会导致程序结构不清晰，逻辑混乱，使用状态模式可以很好地避免这一问题，它通过扩展子类实现了条件的判断处理。</p><h3><span id="4状态模式的注意事项">4.状态模式的注意事项</span></h3><p>状态模式适用于当某个对象在它的状态发生改变时，它的行为也随着发生比较大的变化，也就是说在行为受状态约束的情况下可以使用状态模式，而且使用时对象的状态最好不要超过5个。</p><h2><span id="三-最佳实践">三、最佳实践</span></h2><p>如工作流开发，如果不是土制框架，那么就应该有个状态机管理(即使是土制框架也应该有)，如一个Activity(节点)有初始化状态(Initialized State)、挂起状态(Suspended State)、完成状态(Completed State)等，流程实例也有这么多状态，那这些状态怎么管理呢？通过状态机来管理。<br>代码示例地址如下:<br><a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/State" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/State</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之访问者模式</title>
      <link href="/2020/04/04/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/04/04/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-访问者模式的定义">一、访问者模式的定义</span></h2><p>访问者模式是一个相对简单的模式，其定义如下:<br>封装一些作用于某种数据结构中的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。<br><a id="more"></a></p><h3><span id="角色职责">角色职责</span></h3><h4><span id="visitor抽象访问者">Visitor–抽象访问者</span></h4><p>抽象类或者接口，声明访问者可以访问哪些元素，具体到程序中就是visit方法的参数定义哪些对象是可以被访问的。</p><h4><span id="concretevisitor具体访问者">ConcreteVisitor–具体访问者</span></h4><p>它影响访问者访问到一个类中该怎么干，要做什么事情。</p><h4><span id="element抽象元素">Element–抽象元素</span></h4><p>接口或者抽象类，声明接受哪一类访问者访问，程序上是通过accept方法中的参数来定义的。</p><h4><span id="concreteelement具体元素">ConcreteElement–具体元素</span></h4><p>实现accept方法，通常是visitor.visit(this)，基本上都形成了一种模式。</p><h4><span id="objectstruture结构对象">ObjectStruture–结构对象</span></h4><p>元素产生者，一般容纳在多个不同类、不同接口的容器，如List、Set、Map等，在项目中，一般很少抽象出这个角色。</p><p>换言之，大家可以这样理解访问者模式:<br>我作为一个访客(Visitor)到朋友家(Visited Class)去拜访，朋友之间聊聊天、喝喝酒，再相互吹捧吹捧，炫耀炫耀，这都正常。聊天的时候，朋友告诉我，他今年加官晋爵了，工资也涨了30%，准备再买套房子，那我就在心里盘算(Visitor-self-method)，你这么有钱，我去年要借10万你都不借，我根据朋友的信息，执行了自己一个方法。</p><h2><span id="二-访问者模式的应用">二、访问者模式的应用</span></h2><h3><span id="1访问者模式的优点">1.访问者模式的优点</span></h3><h4><span id="1符合单一职责原则">(1)符合单一职责原则</span></h4><p>具体元素角色也就是Employee抽象类的两个子类负责数据的加载，而Visitor类则负责报表的展现，两个不同的职责非常明确地分离开来，各自演绎变化。</p><h4><span id="2优秀的扩展性">(2)优秀的扩展性</span></h4><p>由于职责分开，继续增加对数据的操作是非常快捷的，例如，现在要增加一份给大老板的报表这份报表格式又有所不同，直接在Visitor中增加一个方法，传递数据后进行整理打印。</p><h4><span id="3灵活性非常高">(3)灵活性非常高</span></h4><p>例如，数据汇总。</p><h3><span id="2访问者模式的缺点">2.访问者模式的缺点</span></h3><h4><span id="1具体元素对访问者公布细节">(1)具体元素对访问者公布细节</span></h4><p>访问者要访问一个类就必然要求这个类公布一些方法和数据，也就是访问者关注了其他类的内部细节，这就是迪米特法则所不建议的。</p><h4><span id="2具体元素变更比较困难">(2)具体元素变更比较困难</span></h4><p>具体元素角色的增加、删除、修改都是比较困难的，就上面那个例子，你想想，你要是想增加一个成员变量，如年龄age，Visitor就需要修改，如果Visitor是一个还好办，多个呢？业务逻辑再复杂点呢？</p><h4><span id="3违背了依赖倒置原则">(3)违背了依赖倒置原则</span></h4><p>访问者依赖的是具体元素，而不是抽象元素，这破坏了依赖倒置原则，特别是面向对象的编程中，抛弃了对接口的依赖，而直接依赖实现类，扩展比较难。</p><h3><span id="3访问者模式的使用场景">3.访问者模式的使用场景</span></h3><ul><li>一个对象结构包含很多类对象，它们有不同的接口，而你想对这些对象实施一些依赖于其具体类的操作，也就说是用迭代器模式已经不能胜任的场景。</li><li>需要对一个对象结构中的对象进行很多不同并且不相关的操作，而你想避免让这些操作”污染”这些对象的类。</li></ul><h2><span id="四-访问者模式的扩展">四、访问者模式的扩展</span></h2><h3><span id="1统计功能汇总和报表">1.统计功能(汇总和报表)</span></h3><h3><span id="2多个访问者">2.多个访问者</span></h3><h3><span id="3双分派">3.双分派</span></h3><h2><span id="五-最佳实践">五、最佳实践</span></h2><p>访问者模式是一种集中规整模式，特别适用于大规模重构的项目，在这一个阶段需求已经非常清晰，原系统的功能点也已经明确，通过访问者模式可以很容易把一些功能进行梳理，达到最终目的–功能集中化，如一个统一的报表运算、UI展现等，我们还可以与其他模式混编建立一套自己的过滤器或者拦截器。<br>代码例子:<br><a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/Visitor" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/Visitor</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之备忘录模式</title>
      <link href="/2020/04/04/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/04/04/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-备忘录模式的定义">一、备忘录模式的定义</span></h2><p>备忘录模式提供了一种弥补真实世界缺陷的方法，让”后悔药”在程序的世界中真实可行，其定义如下:<br><strong>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</strong><br><a id="more"></a></p><h3><span id="通用类三个角色">通用类(三个角色)</span></h3><h4><span id="originator发起人角色">Originator发起人角色</span></h4><p>记录当前时刻的内部状态，负责定义哪些属于备份范围的状态，负责创建和恢复备忘录数据。</p><h4><span id="memento备忘录角色">Memento备忘录角色</span></h4><p>负责存储Originator发起人对象的内部状态，在需要的时候提供发起人需要的内部状态。</p><h4><span id="caretaker备忘录管理员角色">Caretaker备忘录管理员角色</span></h4><p>对备忘录进行管理、保存和提供备忘录。</p><h2><span id="二-备忘录模式的应用">二、备忘录模式的应用</span></h2><h3><span id="1备忘录模式的使用场景">1.备忘录模式的使用场景</span></h3><ul><li>需要保存和恢复数据的相关状态场景。</li><li>提供一个可回滚的操作;比如Word中的Ctrl+Z组合键，IE浏览器中的后退按钮，文件管理器上的backspace键等。</li><li>需要监控的副本场景中。例如要监控一个对象的属性，但是监控又不应该作为系统的主业务来调用，它只是边缘应用，即使出现监控不准，错误报警也影响不大，因此一般的做法是备份一个主线程中的对象，然后由分析程序来分析。</li><li>数据库连接的事务管理就是用的备忘录模式。</li></ul><h3><span id="2备忘录模式的注意事项">2.备忘录模式的注意事项</span></h3><h4><span id="1备忘录的生命期">(1)备忘录的生命期</span></h4><p>备忘录创建出来就要在”最近”的代码中使用，要主动管理它的生命周期，建立就要使用，不使用就要立刻删除其引用，等待垃圾回收器对它的回收处理。</p><h4><span id="2备忘录的性能">(2)备忘录的性能</span></h4><p>不要在频繁建立备份的场景中使用备忘录模式(比如一个for循环)，<br>原因有二:<br>一是控制不了备忘录建立的对象数量;<br>二是大对象的建立是要消耗资源的，系统的性能需要考虑。<br>因此，如果出现这样的代码，设计师就应该好好想想怎么修改架构了。</p><h2><span id="三-备忘录模式的扩展">三、备忘录模式的扩展</span></h2><h3><span id="1clone方式的备忘录">1.clone方式的备忘录</span></h3><p>注意:使用clone方式的备忘录模式，可以使用在比较简单的场景或者比较单一的场景中，尽量不要与其他的对象产生严重的耦合关系。</p><h3><span id="2多状态的备忘录模式">2.多状态的备忘录模式</span></h3><p>注意:如果要设计一个在运行期间决定备份状态的框架，则建议采用AOP框架来实现，避免采用动态代理无谓地增加程序逻辑复杂性。</p><h3><span id="3多备份的备忘录">3.多备份的备忘录</span></h3><p>注意:内存溢出问题，该备份一旦产生就装入内存，没有任何销毁的意向，这是非常危险的。因此，在系统设计时，要严格限定备忘录的创建，建议增加Map的上限，否则系统很容易产生内存溢出情况。</p><h3><span id="4封装得更好一些">4.封装得更好一些</span></h3><p>在系统管理上，一个备份的数据是完全、绝对不能修改的，它保证数据的洁净，避免数据污染而使备份失去意义。在我们的设计领域中，也存在着同样的问题，备份是不能随便篡改的，也就是说需要缩小备份出的备忘录的阅读权限，保证只能是发起人可读就成了。</p><h2><span id="四-最佳实践">四、最佳实践</span></h2><p>备忘录模式是我们设计上”月光宝盒”，可以让我们回到需要的年代;是程序数据的”后悔药”,吃了它就可以返回上一个状态;是设计人员的定心丸，确保即使在最坏的情况下也能获得最近的对象状态。如果大家看懂了的话，请各位在设计的时候就不要使用数据库的临时表作为缓存备份数据了，虽然是一个简单办法，但是它加大了数据库操作的频繁度，把压力下放到数据库了，最好的解决办法就是使用备忘录模式。<br>代码例子:<br><a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/Memento" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/Memento</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>user.name has multiple values</title>
      <link href="/2020/03/30/user-name-has-multiple-values/"/>
      <url>/2020/03/30/user-name-has-multiple-values/</url>
      
        <content type="html"><![CDATA[<p>详细错误信息如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">warning: user.email has multiple values</span><br><span class="line">error: cannot overwrite multiple values with a single value</span><br><span class="line">       Use a regexp, --add or --replace-all to change user.email.</span><br></pre></td></tr></table></figure></p><p><strong>错误原因:</strong><br>通过git config –list命令 发现有多个user.name<br><a id="more"></a></p><p><strong>错误导致的结果:</strong><br>直接导致git commit 后贡献度不增加，因为不识别用户提交。</p><p><strong>解决问题办法(执行如下代码即可):</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --replace-all user.name &quot;输入你的用户名&quot;</span><br><span class="line">git config --global --replace-all user.email &quot;输入你的邮箱&quot;</span><br></pre></td></tr></table></figure></p><p>最后再执行git config –list，发现不再出现重复user.name表示成功。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows配置多个git用户</title>
      <link href="/2020/03/29/windows%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgit%E7%94%A8%E6%88%B7/"/>
      <url>/2020/03/29/windows%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgit%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<p>最近想尝试在自己电脑上配置多个git用户玩玩。<br>主要参考该博客地址实现:<br><a href="https://www.cnblogs.com/zengming/p/7908171.html" target="_blank" rel="noopener">https://www.cnblogs.com/zengming/p/7908171.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之门面模式</title>
      <link href="/2020/03/28/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/03/28/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-门面模式的定义">一、门面模式的定义</span></h2><p>门面模式也叫外观模式，是一种比较常用的封装模式，<strong>其定义如下</strong>:<br><strong>要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。门面模式提供一个高层次的接口，使得子系统更易于使用。</strong><br><a id="more"></a></p><h3><span id="1facade门面角色">1.Facade门面角色</span></h3><p>客户端可以调用这个角色的方法。此角色知晓子系统的所有功能和责任。一般情况下，本角色会将所有从客户端发来的请求委派到相应的子系统去，也就是说该角色没有实际的业务逻辑，只是一个委托类。</p><h3><span id="2subsystem子系统角色">2.subsystem子系统角色</span></h3><p>可以同时有一个或者多个子系统。每一个子系统都不是一个单独的类，而是一个类的集合。子系统并不知道门面的存在。对于子系统而言，门面仅仅是另外一个客户端而已。</p><h2><span id="二-门面模式的应用">二、门面模式的应用</span></h2><h3><span id="1门面模式的优点">1.门面模式的优点</span></h3><h4><span id="门面模式有如下优点">门面模式有如下优点:</span></h4><h5><span id="1减少系统的相互依赖">(1)减少系统的相互依赖</span></h5><p>想想看，如果我们不使用门面模式，外界访问直接深入到子系统内部，相互之间是一种强耦合关系，你死我就死，你活我才能活，这样的强依赖是系统设计所不能接受的，门面模式的出现就很好地解决了该问题，所有的依赖都是对门面对象的依赖，与子系统无关。</p><h5><span id="2提高了灵活性">(2)提高了灵活性</span></h5><p>依赖减少了，灵活性自然提高了。不管子系统内部如何变化，只要不影响到门面对象，任你自由活动。</p><h5><span id="3提高安全性">(3)提高安全性</span></h5><p>想让你访问子系统的哪些业务就开通哪些逻辑，不在门面上开通的方法，你休想访问到。</p><h3><span id="2门面模式的缺点">2.门面模式的缺点</span></h3><p>门面模式最大的缺点就是不符合开闭原则，对修改关闭，对扩展开放。一旦在系统投产后发现有一个错误，你怎么解决？完全遵从开闭原则，根本没办法解决。继承？覆写？都顶不上用，唯一能做的一件事就是修改门面角色的代码，这个风险相当大，这就需要大家在涉及的时候慎之又慎，多思考几遍才会有好收获。</p><h3><span id="3门面模式的使用场景">3.门面模式的使用场景</span></h3><ul><li>为一个复杂的模块或子系统提供一个供外界访问的接口。</li><li>子系统相对独立–外界对子系统的访问只要黑箱操作即可(比如利息的计算问题，没有深厚的业务知识和扎实的技术水平是不可能开发出该子系统的，但是对于使用该系统的开发人员来说，他需要做的就是输入金额以及存期，其他的都不用关心，返回的结果就是利息，这时候，门面模式是非使用不可了)。</li><li>预防低水平人员带来的风险扩散(比如一个低水平的技术人员参与项目开发，为了降低个人代码质量对整体项目的影响风险，一般的做法是”画地为牢”，只能在指定的子系统中开发，然后再提供门面接口进行访问操作)。</li></ul><h2><span id="四-门面模式的注意事项">四、门面模式的注意事项</span></h2><h3><span id="1一个子系统可以有多个门面">1.一个子系统可以有多个门面</span></h3><h4><span id="1门面已经庞大到不能忍受的程度">(1)门面已经庞大到不能忍受的程度</span></h4><p>比如一个纯洁的门面对象已经超过了200行的代码，虽然都是非常简单的委托操作，也建议拆分成多个门面，否则会给以后的维护和扩展带来不必要的麻烦。那么怎么拆分？按照功能拆分是一个非常好的原则，比如一个数据库操作的门面可以拆分为查询门面、删除门面、更新门面等。</p><h4><span id="2子系统可以提供不同访问路径">(2)子系统可以提供不同访问路径</span></h4><p>我们以门面模式的通用源代码为例。ClassA、ClassB、ClassC是一个子系统中的3个对象，现在有两个不同的高层模块来访问该子系统，模块一可以完整的访问所有业务逻辑，也就是通用代码中的Facade类，它是子系统的信任模块;而模块二属于受限访问对象，只能访问methodB方法，那该如何处理呢？在这种情况下，就需要建立两个门面以供不同的高层模块来访问，在原有的通用源码上增加一个新的门面即可。</p><h3><span id="2门面不参与子系统内的业务逻辑">2.门面不参与子系统内的业务逻辑</span></h3><p>在门面模式中，门面角色应该是稳定，它不应该经常变化，一个系统一旦投入运行它就不应该被改变，它是一个系统对外的接口，你变来变去还怎么保证其他模块的稳定运行呢？但是，业务逻辑是会经常变化的，我们已经把它的变化封装在子系统内部，无论你如何变化，对外界的访问者来说，都还是同一个门面，同样的方法–这才是架构师最希望看到的结构。</p><h2><span id="五-最佳实践">五、最佳实践</span></h2><p>门面模式是一个很好的封装方法，一个子系统比较复杂时，比如算法或者业务比较复杂就可以封装出一个或多个门面出来，项目的结构简单，而且扩展性非常好。还有，对于一个较大项目，为了避免人员带来的风险，也可以使用门面模式，技术水平比较差的成员，尽量安排独立的模块，然后把他写的程序封装到一个门面里，尽量让其他项目成员不用看到这些人的代码，看也看不懂。使用门面模式后，对门面进行单元测试，约束项目成员的代码质量，对项目整体质量的提升也是一个比较好的帮助。</p><p>代码例子:<br><a href="https://github.com/developers-youcong/DesignPatternPractice" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL日期字符串转换</title>
      <link href="/2020/03/22/MySQL%E6%97%A5%E6%9C%9F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2/"/>
      <url>/2020/03/22/MySQL%E6%97%A5%E6%9C%9F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>最近用到两个日期转字符串(DATE_FORMAT(date,pattern))以及字符串转日期(str_to_date(dateStr,pattern))。<br><a id="more"></a></p><p>具体详情参考链接(包含MySQL日期字符串转换):<br><a href="https://blog.csdn.net/yamadeee/article/details/80137780" target="_blank" rel="noopener">https://blog.csdn.net/yamadeee/article/details/80137780</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Error:java:JDK isn&#39;t specified for module</title>
      <link href="/2020/03/22/Error-java-JDK-isn-t-specified-for-module/"/>
      <url>/2020/03/22/Error-java-JDK-isn-t-specified-for-module/</url>
      
        <content type="html"><![CDATA[<p>错误信息如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error:java:JDK isn&apos;t specified for module &quot;XXXX&quot;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>错误原因:项目中的.idea文件夹被删掉，导致项目目录出错</p><p>解决办法:<br>idea中关掉该项目并删除，然后重新import引入该项目，在弹出是否重写.idea选择是</p><p>参考解决办法链接:<br><a href="https://blog.csdn.net/zzzU5U6/article/details/88951286" target="_blank" rel="noopener">https://blog.csdn.net/zzzU5U6/article/details/88951286</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之观察者模式</title>
      <link href="/2020/03/15/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/03/15/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-观察者模式的定义">一、观察者模式的定义</span></h2><p>观察者模式也叫做发布订阅模式，它是一个在项目中经常使用的模式，其定义如下:<br><strong>定义对象间一种一对多的依赖关系，使得没当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。</strong><br><a id="more"></a></p><h3><span id="观察者模式的几种角色名称">观察者模式的几种角色名称:</span></h3><h4><span id="1subject被观察者">(1)Subject被观察者</span></h4><p>定义被观察者必须实现的职责，它必须能够动态地增加、取消观察者。它一般是抽象类或者实现类，仅仅完成作为被观察者必须实现的职责:管理观察者并通知观察者。</p><h4><span id="2observer观察者">(2)Observer观察者</span></h4><p>观察者接收到消息后，即进行update(更新方法)操作，对接收到的信息进行处理。</p><h4><span id="3concretesubject具体的被观察者">(3)ConcreteSubject具体的被观察者</span></h4><p>定义被观察者自己的业务逻辑，同时定义对哪些事件进行通知。</p><h4><span id="4concreteobject具体的观察者">(4)ConcreteObject具体的观察者</span></h4><p>每个观察在接收到消息后的处理反应是不同的，各个观察者有自己的处理逻辑。</p><h2><span id="二-观察者模式的应用">二、观察者模式的应用</span></h2><h3><span id="1观察者模式的优点">1.观察者模式的优点</span></h3><p>(1)观察者和被观察者之间是抽象耦合</p><p>(2)建立一套触发机制</p><h3><span id="2观察者模式的缺点">2.观察者模式的缺点</span></h3><p>观察者模式需要考虑一下开发效率和运行效率问题，一个被观察者，多个观察者，开发和调试就会比较复杂，而且在Java中消息的通知默认是顺序执行，一个观察者卡壳，会影响整体的执行效率。在这种情况下，一般考虑采用异步的方式。</p><h3><span id="3观察者模式的使用场景">3.观察者模式的使用场景</span></h3><ul><li>关联行为场景。需要注意的是，关联行为是可拆分的，而不是”组合”关系。</li><li>事件多级触发场景。</li><li>跨系统的消息交换场景，如消息列的处理机制。</li></ul><h3><span id="4观察者模式的注意事项">4.观察者模式的注意事项</span></h3><p>(1)广播链的问题</p><p><strong>注意:</strong>它和责任链模式的最大区别就是观察者广播链在传播的过程中消息是随时更改的，它是有相邻的两个节点协商的消息结构;而责任链模式在消息传递过程中基本上保持消息不可变，如果要改变，也只是在原有的消息上进行修正。</p><p>(2)异步处理问题<br>针对观察者比较多，处理时间较长，使用异步，异步处理就要考虑线程安全和队列的问题，如消息队列。</p><h2><span id="三-最佳实践">三、最佳实践</span></h2><p>观察者模式在实际项目和生活中非常常见，我们举例子说明。</p><h3><span id="1文件系统">1.文件系统</span></h3><p>比如，在一个目录下新建立一个文件，这个动作会同时通知目录管理器增加该目录，并通知磁盘管理器减少1KB的空间，也就是说”文件”是一个被观察者，”目录管理器”和”磁盘管理器”则是观察者。</p><h3><span id="2猫鼠游戏">2.猫鼠游戏</span></h3><p>夜里猫叫一声，家里老鼠撒腿就跑，同时也吵醒了熟睡的主人，这个场景中,”猫”就是被观察者，老鼠和人则是观察者。</p><h3><span id="3atm取钱">3.ATM取钱</span></h3><p>你到ATM机器上取钱，多次输错密码，卡就会被ATM吞掉，吞卡动作发生的时候，会触发哪些事件？</p><p>第一，摄像头连续快拍</p><p>第二，通知监控系统，吞卡发生</p><p>第三，初始化ATM机屏幕，返回最初状态</p><p>一般前两个动作都是观察者模式来完成的，后一个动作是异常来完成的。</p><h3><span id="4广播收音机">4.广播收音机</span></h3><p>电台在广播，你可以打开一个收音机，或者两个收音机来收听，电台就是被观察者，收音机就是观察者。</p><p>代码例子:<br><a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/ObServer" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/ObServer</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Date实现+天之核心代码</title>
      <link href="/2020/03/15/Java-Date%E5%AE%9E%E7%8E%B0-%E5%A4%A9%E4%B9%8B%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81/"/>
      <url>/2020/03/15/Java-Date%E5%AE%9E%E7%8E%B0-%E5%A4%A9%E4%B9%8B%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>reqDTO是传递对象，而getValidNum是具体的时间，默认为int类型,根据前台传递的数字进行天数相加。<br><a id="more"></a><br>核心代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line">c.setTime(new Date());</span><br><span class="line">c.add(Calendar.DAY_OF_MONTH, reqDTO.getValidNum());</span><br><span class="line">Date expireTime = c.getTime();</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;artifactId&#39; is missing. @ line 2, column 109</title>
      <link href="/2020/03/08/artifactId-is-missing-line-2-column-109/"/>
      <url>/2020/03/08/artifactId-is-missing-line-2-column-109/</url>
      
        <content type="html"><![CDATA[<p>错误背景:<br>本地能够正常启动和调试应用，就是打包构建失败。<br><a id="more"></a></p><p>详细错误信息如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] [ERROR] Some problems were encountered while processing the POMs:</span><br><span class="line">[FATAL] &apos;artifactId&apos; is missing. @ line 2, column 109</span><br><span class="line">[WARNING] &apos;build.plugins.plugin.(groupId:artifactId)&apos; must be unique but found duplicate declaration of plugin org.springframework.boot:spring-boot-maven-plugin @ line 90, column 21</span><br><span class="line">[WARNING] &apos;dependencies.dependency.scope&apos; for org.springframework.boot:spring-boot-devtools:jar must be one of [provided, compile, runtime, test, system] but is &apos;true&apos;. @ line 253, column 11</span><br><span class="line"> @ </span><br><span class="line">[ERROR] The build could not read 1 project -&gt; [Help 1]</span><br><span class="line">[ERROR]   </span><br><span class="line">[ERROR]   The project cn.challengertech.blog:[unknown-artifact-id]:[unknown-version] (/home/test/blog/blog-web/pom.xml) has 1 error</span><br><span class="line">[ERROR]     &apos;artifactId&apos; is missing. @ line 2, column 109</span><br><span class="line">[ERROR] </span><br><span class="line">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class="line">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class="line">[ERROR] </span><br><span class="line">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class="line">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException</span><br></pre></td></tr></table></figure></p><p>最关键的信息如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ERROR]     &apos;artifactId&apos; is missing. @ line 2, column 109</span><br></pre></td></tr></table></figure></p><p>错误原因:<br>子pom文件不经意间操作不小心去除了artifactId，导致项目构建打包时找不到对应的子模块，从而无法构建，导致报错。</p><p>解决方式:<br>加上即可,如下图所示:<br><img src="/2020/03/08/artifactId-is-missing-line-2-column-109/01.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之组合模式</title>
      <link href="/2020/03/06/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/03/06/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-组合模式的定义">一、组合模式的定义</span></h2><p>组合模式也叫合成模式，有时又叫做部分-整体模式，主要用来描述部分与整体的关系，其定义如下:<br><strong>将对象组合成的树形结构以表示”部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。</strong><br><a id="more"></a></p><h3><span id="组合模式的几个角色">组合模式的几个角色:</span></h3><h4><span id="1component抽象构件角色">(1)Component抽象构件角色</span></h4><p>定义参加组合对象的共有方法和属性，可以定义一些默认的行为或属性</p><h4><span id="2leaf叶子构件">(2)Leaf叶子构件</span></h4><p>叶子对象，其下再也没有其他的分支，也就是遍历的最小单位。</p><h4><span id="3composite树枝构件">(3)Composite树枝构件</span></h4><p>树枝对象，它的作用是组合树枝节点和叶子节点形成一个树形结构。</p><h2><span id="二-组合模式的应用">二、组合模式的应用</span></h2><h3><span id="1组合模式的优点">1.组合模式的优点</span></h3><h4><span id="1高层模块调用简单">(1)高层模块调用简单</span></h4><p>一棵树形机构中的所有节点都是Component，局部和整体对调用者来说没有区别，也就是说，高层模块不必关心自己处理的是单个对象还是整个组合结构，简化了高层模块的代码。</p><h4><span id="2节点自由增加">(2)节点自由增加</span></h4><p>使用了组合模式后，我们可以看看，如果想增加一个树枝节点是不是都很容易，只要找到它的父节点就成，非常容易扩展，符合开闭原则，对以后的维护非常有利。</p><h3><span id="2组合模式的缺点">2.组合模式的缺点</span></h3><p>组合模式又一个非常明显的缺点，直接使用实现类，这在面向接口编程上是很不恰当的，与依赖倒置原则冲突，使用时要考虑清楚，它限制了接口的影响范围。</p><h3><span id="3组合模式的使用场景">3.组合模式的使用场景</span></h3><ul><li>维护和展示部分-整体关系的场景，如树形菜单、文件和文件夹管理</li><li>从一个整体中能够独立出部分模块或功能的场景</li></ul><h3><span id="4组合模式的注意事项">4.组合模式的注意事项</span></h3><p>(1)只要是树形结构，就要考虑使用组合模式;</p><p>(2)只要是体现局部和整体的关系，而且关系还比较深，考虑一下组合模式;</p><h2><span id="三-组合模式的扩展">三、组合模式的扩展</span></h2><h3><span id="1真实的组合模式">1.真实的组合模式</span></h3><p>什么是真实的组合模式?</p><p>就是你在实际项目中使用的组合模式，而不是仅仅依照书本上学习到的模式，它是”实践出真知”。</p><h3><span id="2透明的组合模式">2.透明的组合模式</span></h3><p>组合模式有两种不同的实现:透明模式和安全模式。</p><h2><span id="四-最佳实践">四、最佳实践</span></h2><p>组合模式在项目中到处都有。</p><p>比如:</p><h3><span id="1页面结构一般都是上下结构上面放系统的logo下边分为两部分左边是导航菜单右边是展示区左边的导航菜单一般都是树形的结构">(1)页面结构一般都是上下结构，上面放系统的Logo，下边分为两部分:左边是导航菜单，右边是展示区，左边的导航菜单一般都是树形的结构。</span></h3><h3><span id="2常用的xml结构也是一个树形结构根节点-元素节点-值元素这些都与我们的组合模式相匹配">(2)常用的XML结构也是一个树形结构，根节点、元素节点、值元素这些都与我们的组合模式相匹配。</span></h3><h3><span id="3我们自己本身也是一个树形结构比如根据喔找到我的父母根据父亲能找到爷爷奶奶根据母亲找到外公外婆很典型的树形结构">(3)我们自己本身也是一个树形结构，比如根据喔找到我的父母，根据父亲能找到爷爷奶奶，根据母亲找到外公外婆，很典型的树形结构。</span></h3><p>代码例子:<br><a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/Combination" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/Combination</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之奇点、天网、计算机的未来</title>
      <link href="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A5%87%E7%82%B9%E3%80%81%E5%A4%A9%E7%BD%91%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E6%9C%AA%E6%9D%A5/"/>
      <url>/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A5%87%E7%82%B9%E3%80%81%E5%A4%A9%E7%BD%91%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E6%9C%AA%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<h2><span id="1普适计算">1.普适计算</span></h2><h2><span id="2奇点">2.奇点</span></h2><a id="more"></a><h2><span id="3把工作分为4个象限讨论自动化带来的影响">3.把工作分为4个象限，讨论自动化带来的影响</span></h2><h2><span id="4机器人的存在时间可能长过人类可以长时间探索宇宙">4.机器人的存在时间可能长过人类，可以长时间探索宇宙</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之教育科技</title>
      <link href="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%95%99%E8%82%B2%E7%A7%91%E6%8A%80/"/>
      <url>/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%95%99%E8%82%B2%E7%A7%91%E6%8A%80/</url>
      
        <content type="html"><![CDATA[<h2><span id="1通过调速暂停等技巧加强学习效率">1.通过调速，暂停等技巧，加强学习效率</span></h2><h2><span id="2大型开放式在线课程">2.大型开放式在线课程</span></h2><a id="more"></a><h2><span id="3智能辅导系统">3.智能辅导系统</span></h2><h2><span id="4判断规则">4.判断规则</span></h2><h2><span id="5域模型">5.域模型</span></h2><h2><span id="6贝叶斯知识追踪">6.贝叶斯知识追踪</span></h2><p>(1)学生已经学会的概率</p><p>(2)瞎猜的概率</p><p>(3)失误的概率</p><p>(4)做题过程中学会的概率</p><h2><span id="7教育数据挖掘">7.教育数据挖掘</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之计算机心理学</title>
      <link href="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BF%83%E7%90%86%E5%AD%A6/"/>
      <url>/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BF%83%E7%90%86%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h2><span id="1我们需要了解人类心理学做出更好的计算机">1.我们需要了解人类心理学，做出更好的计算机</span></h2><a id="more"></a><h2><span id="2易用度">2.易用度</span></h2><h2><span id="3颜色强度排序和颜色排序">3.颜色强度排序和颜色排序</span></h2><h2><span id="4分组更好记">4.分组更好记</span></h2><h2><span id="5直观功能">5.直观功能</span></h2><h2><span id="6认出-vs-回想">6.认出 vs 回想</span></h2><h2><span id="7让机器有一定情商以及facebook的研究">7.让机器有一定情商以及Facebook的研究</span></h2><h2><span id="8用软件修正注视位置-让视频通话时看起来像盯着对方而不是盯着下方">8.用软件修正注视位置。让视频通话时看起来像盯着对方，而不是盯着下方</span></h2><h2><span id="9把机器人做的像人恐怖谷理论">9.把机器人做的像人，恐怖谷理论</span></h2><h2><span id="10有很多开放式的问题心理学帮助我们明白不同选择可能带来的影响">10.有很多开放式的问题，心理学帮助我们明白不同选择可能带来的影响</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之机器人</title>
      <link href="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
      <url>/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<h2><span id="1法国吃饭鸭">1.法国吃饭鸭</span></h2><h2><span id="2土耳其行棋傀儡下国际象棋">2.土耳其行棋傀儡，下国际象棋</span></h2><a id="more"></a><h2><span id="3第一台计算机控制的机器出现在1940年代晚期叫数控机器">3.第一台计算机控制的机器出现在1940年代晚期，叫数控机器</span></h2><h2><span id="41960年unimate第一次商业贩卖的可编程工业机器人">4.1960年Unimate,第一次商业贩卖的，可编程工业机器人</span></h2><h2><span id="5简单控制回路">5.简单控制回路</span></h2><h2><span id="6负反馈回路">6.负反馈回路</span></h2><h2><span id="7比例-积分-微分控制器-pid控制器">7.比例-积分-微分控制器 PID控制器</span></h2><h2><span id="8机器人三定律">8.机器人三定律</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之自然语言处理</title>
      <link href="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
      <url>/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2><span id="1词性">1.词性</span></h2><a id="more"></a><h2><span id="2短语结构规则">2.短语结构规则</span></h2><h2><span id="3分析树">3.分析树</span></h2><h2><span id="4语音识别">4.语音识别</span></h2><h2><span id="5谱图">5.谱图</span></h2><h2><span id="6快速傅立叶变换">6.快速傅立叶变换</span></h2><h2><span id="7音素">7.音素</span></h2><h2><span id="8语音合成">8.语音合成</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之计算机视觉</title>
      <link href="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
      <url>/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/</url>
      
        <content type="html"><![CDATA[<h2><span id="1检测垂直边缘的算法">1.检测垂直边缘的算法</span></h2><a id="more"></a><h2><span id="2核过滤器">2.核/过滤器</span></h2><h2><span id="3卷积">3.卷积</span></h2><h2><span id="4prewitt-算子">4.Prewitt 算子</span></h2><h2><span id="5维奥拉琼斯-人脸检测">5.维奥拉.琼斯 人脸检测</span></h2><h2><span id="6卷积神经网络">6.卷积神经网络</span></h2><h2><span id="7识别出脸之后可以进一步用其他算法定位面部标志如眼睛和眉毛具体位置从而判断心情等信息">7.识别出脸之后，可以进一步用其他算法定位面部标志，如眼睛和眉毛具体位置，从而判断心情等信息</span></h2><h2><span id="8跟踪全身的标记点如肩部手臂">8.跟踪全身的标记点，如肩部，手臂</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之机器学习与人工智能</title>
      <link href="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
      <url>/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2><span id="1分类">1.分类</span></h2><h2><span id="2分类器">2.分类器</span></h2><h2><span id="3特征">3.特征</span></h2><a id="more"></a><h2><span id="4标记数据">4.标记数据</span></h2><h2><span id="5决策边界">5.决策边界</span></h2><h2><span id="6混淆矩阵">6.混淆矩阵</span></h2><h2><span id="7未标签数据">7.未标签数据</span></h2><h2><span id="8决策树">8.决策树</span></h2><h2><span id="9支持向量机">9.支持向量机</span></h2><h2><span id="10人工神经网络">10.人工神经网络</span></h2><h2><span id="11深度学习">11.深度学习</span></h2><h2><span id="12弱ai窄ai">12.弱AI，窄AI</span></h2><h2><span id="13强ai">13.强AI</span></h2><h2><span id="14强化学习">14.强化学习</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之加密</title>
      <link href="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%8A%A0%E5%AF%86/"/>
      <url>/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h2><span id="1多层防御">1.多层防御</span></h2><a id="more"></a><h2><span id="2加密">2.加密</span></h2><h2><span id="3凯撒加密">3.凯撒加密</span></h2><h2><span id="4替换加密">4.替换加密</span></h2><h2><span id="5移位加密">5.移位加密</span></h2><h2><span id="6列移位加密">6.列移位加密</span></h2><h2><span id="7德国enigma加密机">7.德国Enigma加密机</span></h2><h2><span id="81977年数据加密标准-des">8.1977年”数据加密标准” - DES</span></h2><h2><span id="92001年高级加密标准-aes">9.2001年”高级加密标准” - AES</span></h2><h2><span id="10密钥交换">10.密钥交换</span></h2><h2><span id="11用颜色来举例-单向函数和密钥加密的原理">11.用颜色来举例 “单向函数”和”密钥加密”的原理</span></h2><h2><span id="12迪非-赫尔曼密钥交换">12.迪非-赫尔曼密钥交换</span></h2><h2><span id="13非对称加密">13.非对称加密</span></h2><h2><span id="14非对称加密算法-rsa">14.非对称加密算法 RSA</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之黑客&amp;攻击</title>
      <link href="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%BB%91%E5%AE%A2-%E6%94%BB%E5%87%BB/"/>
      <url>/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%BB%91%E5%AE%A2-%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h2><span id="1社会工程学">1.社会工程学</span></h2><a id="more"></a><h2><span id="2钓鱼">2.钓鱼</span></h2><h2><span id="3假托">3.假托</span></h2><h2><span id="4木马">4.木马</span></h2><h2><span id="5nand镜像">5.NAND镜像</span></h2><h2><span id="6漏洞利用">6.漏洞利用</span></h2><h2><span id="7缓冲区溢出">7.缓冲区溢出</span></h2><h2><span id="8边界检查">8.边界检查</span></h2><h2><span id="9代码注入">9.代码注入</span></h2><h2><span id="10零日漏洞">10.零日漏洞</span></h2><h2><span id="11计算机蠕虫">11.计算机蠕虫</span></h2><h2><span id="12僵尸网络">12.僵尸网络</span></h2><h2><span id="13拒绝服务攻击">13.拒绝服务攻击</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之计算机安全</title>
      <link href="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8/"/>
      <url>/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h2><span id="1保密性-完整性-可用性">1.保密性、完整性、可用性</span></h2><a id="more"></a><h2><span id="2threat-model-威胁模型">2.Threat Model 威胁模型</span></h2><h2><span id="3身份验证的三种方式">3.身份验证的三种方式:</span></h2><p>What you know,你知道什么</p><p>What you have,你有什么</p><p>What you are,你是什么</p><h2><span id="4访问控制">4.访问控制</span></h2><h2><span id="5不能向上读取不能向下写入">5.不能向上读取，不能向下写入</span></h2><h2><span id="6隔离沙盒">6.隔离，沙盒</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之万维网</title>
      <link href="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%B8%87%E7%BB%B4%E7%BD%91/"/>
      <url>/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%B8%87%E7%BB%B4%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h2><span id="1超链接">1.超链接</span></h2><h2><span id="2url-统一资源定位器">2.URL - 统一资源定位器</span></h2><a id="more"></a><h2><span id="3http-超文本传输协议">3.HTTP - 超文本传输协议</span></h2><h2><span id="4html-超文本标记语言">4.HTML - 超文本标记语言</span></h2><h2><span id="5写一个简单网页用到相关html标签">5.写一个简单网页，用到相关HTML标签</span></h2><h2><span id="6第一个浏览器和服务器是tim-berners-lee-花了2个月在cern写的">6.第一个浏览器和服务器是Tim Berners-Lee 花了2个月在CERN写的</span></h2><h2><span id="71991年正式发布万维网就此诞生">7.1991年正式发布，万维网就此诞生</span></h2><h2><span id="8开始讲搜索引擎的故事">8.开始讲搜索引擎的故事</span></h2><h2><span id="9jerry和david的万维网指南-后来改名yahoo">9.Jerry和David的万维网指南 后来改名Yahoo</span></h2><h2><span id="10搜索引擎-jumpstation">10.搜索引擎 JumpStation</span></h2><h2><span id="11搜索引擎-google">11.搜索引擎 Google</span></h2><h2><span id="12网络中立性">12.网络中立性</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之互联网</title>
      <link href="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BA%92%E8%81%94%E7%BD%91/"/>
      <url>/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BA%92%E8%81%94%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h2><span id="1ip-互联网协议">1.IP - 互联网协议</span></h2><h2><span id="2udp-用户数据报协议">2.UDP - 用户数据报协议</span></h2><a id="more"></a><h2><span id="3校验和-checksum">3.校验和 - Checksum</span></h2><h2><span id="4tcp-传输控制协议">4.TCP - 传输控制协议</span></h2><h2><span id="5dns-域名系统">5.DNS - 域名系统</span></h2><h2><span id="6osi-开放式系统互联网通信参考模型">6.OSI - 开放式系统互联网通信参考模型</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之计算机网络</title>
      <link href="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h2><span id="1局域网">1.局域网</span></h2><h2><span id="2媒体访问控制地址">2.媒体访问控制地址</span></h2><a id="more"></a><h2><span id="3载波侦听多路访问">3.载波侦听多路访问</span></h2><h2><span id="4指数退避">4.指数退避</span></h2><h2><span id="5冲突域">5.冲突域</span></h2><h2><span id="6电路交换">6.电路交换</span></h2><h2><span id="7报文交换">7.报文交换</span></h2><h2><span id="8分组交换">8.分组交换</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之3D图形</title>
      <link href="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B3D%E5%9B%BE%E5%BD%A2/"/>
      <url>/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B3D%E5%9B%BE%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<h2><span id="1线框渲染">1.线框渲染</span></h2><h2><span id="2正交投影">2.正交投影</span></h2><h2><span id="3透视投射">3.透视投射</span></h2><a id="more"></a><h2><span id="4网格">4.网格</span></h2><h2><span id="5三角形更常用因为能定义唯一的平面">5.三角形更常用因为能定义唯一的平面</span></h2><h2><span id="6扫描线渲染">6.扫描线渲染</span></h2><h2><span id="7遮挡">7.遮挡</span></h2><h2><span id="8画家算法">8.画家算法</span></h2><h2><span id="9深度缓存">9.深度缓存</span></h2><h2><span id="10z-fighting-错误">10.Z Fighting 错误</span></h2><h2><span id="11背面剔除">11.背面剔除</span></h2><h2><span id="12表面法线">12.表面法线</span></h2><h2><span id="13平面着色">13.平面着色</span></h2><h2><span id="14高洛德着色">14.高洛德着色</span></h2><h2><span id="15纹理映射">15.纹理映射</span></h2><h2><span id="16图形处理单元">16.图形处理单元</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之图形用户界面</title>
      <link href="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/"/>
      <url>/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h2><span id="1图形界面先驱道格拉斯恩格尔巴特">1.图形界面先驱:道格拉斯.恩格尔巴特</span></h2><h2><span id="21970年成立帕洛阿尔托研究中心">2.1970年成立帕洛阿尔托研究中心</span></h2><a id="more"></a><h2><span id="31973年完成xerox-alto施乐奥托计算机">3.1973年完成Xerox Alto(施乐奥托)计算机</span></h2><h2><span id="4举例写一个简单的gui程序">4.举例:写一个简单的GUI程序</span></h2><h2><span id="51981年的xerox-star-system施乐之星系统">5.1981年的Xerox Star System(施乐之星系统)</span></h2><h2><span id="6史蒂夫乔布斯去施乐参观">6.史蒂夫.乔布斯去施乐参观</span></h2><h2><span id="7所见即所得">7.所见即所得</span></h2><h2><span id="81983年推出apple-lisa">8.1983年推出Apple Lisa</span></h2><h2><span id="91984年推出macintosh">9.1984年推出Macintosh</span></h2><h2><span id="101985年推出windows10之后出到31">10.1985年推出Windows1.0,之后出到3.1</span></h2><h2><span id="111995年推出windows95提供图形界面">11.1995年推出Windows95提供图形界面</span></h2><h2><span id="121995年微软做失败的microsoft-bob">12.1995年微软做失败的Microsoft Bob</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之个人计算机革命</title>
      <link href="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%B8%AA%E4%BA%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9D%A9%E5%91%BD/"/>
      <url>/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%B8%AA%E4%BA%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9D%A9%E5%91%BD/</url>
      
        <content type="html"><![CDATA[<h2><span id="11970年代初成本下降个人计算机变得可行">1.1970年代初成本下降，个人计算机变得可行</span></h2><a id="more"></a><h2><span id="2altair-8800">2.Altair 8800</span></h2><h2><span id="3比尔盖茨和保罗艾伦写basic解释器">3.比尔.盖茨和保罗.艾伦写BASIC解释器</span></h2><h2><span id="4乔布斯提议卖组装好的计算机apple-l诞生">4.乔布斯提议卖组装好的计算机，Apple-l诞生</span></h2><h2><span id="51977年出现3款开箱即用计算机">5.1977年出现3款开箱即用计算机</span></h2><p>“Apple-ll”,”TRS-80 Model l”,”Commodore PET 20001”</p><h2><span id="6ibm意识到个人计算机市场">6.IBM意识到个人计算机市场</span></h2><p>IBM PC发布，采用开放架构，兼容的机器都叫IBM Compatible(IBM兼容)</p><p>生态系统产生雪球效应:</p><p>因为用户多，软硬件开放人员更愿意花精力在这个平台</p><p>因为软硬件多，用户也更乐意买”IBM兼容”的计算机。</p><h2><span id="7苹果选封闭架构一切都自己来只有苹果在非ibm兼容下保持了足够市场份额">7.苹果选封闭架构，一切都自己来，只有苹果在非”IBM兼容”下保持了足够市场份额</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之冷战和消费主义</title>
      <link href="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%86%B7%E6%88%98%E5%92%8C%E6%B6%88%E8%B4%B9%E4%B8%BB%E4%B9%89/"/>
      <url>/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%86%B7%E6%88%98%E5%92%8C%E6%B6%88%E8%B4%B9%E4%B8%BB%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>冷战导致美国往计算机领域投入大量资源。<br><a id="more"></a></p><p>范内瓦.布什遇见了计算机的潜力，提出假想机器Memex</p><p>帮助建立国家科学基金，给科学研究提供资金。</p><p>1950年代消费者开始买晶体管收音机，为日本半导体行业崛起埋下种子。</p><p>苏联1961年把宇航员加加林送上天空，导致美国提出登月NASA预算大大增加，用集成电路来制作登月计算机。</p><p>集成电路的发展实际是由军事应用大大推进的，阿波罗登月毕竟只有17次</p><p>美国造超级计算机进一步推进集成电路。</p><p>美国半导体行业一开始靠政府高利润合同活着，忽略消费者市场，1970年代冷战渐消，行业开始衰败，很多公司倒闭，英特尔转型处理器。</p><p>末尾总结:政府和消费者推动了计算机的发展。<br>早期靠政府资金，让技术发展到足够商用，然后消费者购买商用产品继续推动产品发展。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之屏幕与2D图形显示</title>
      <link href="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%B1%8F%E5%B9%95%E4%B8%8E2D%E5%9B%BE%E5%BD%A2%E6%98%BE%E7%A4%BA/"/>
      <url>/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%B1%8F%E5%B9%95%E4%B8%8E2D%E5%9B%BE%E5%BD%A2%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2><span id="1pdp-1计算机-键盘和显示器分开屏幕显示临时值">1.PDP-1计算机。键盘和显示器分开，屏幕显示临时值</span></h2><a id="more"></a><h2><span id="2阴极射线管cathode-ray-tube">2.阴极射线管(Cathode Ray Tube)</span></h2><h2><span id="3crt有两种绘图方式">3.CRT有两种绘图方式</span></h2><p>矢量扫描</p><p>光栅扫描</p><h2><span id="4液晶显示器">4.液晶显示器</span></h2><h2><span id="5字符生成器">5.字符生成器</span></h2><h2><span id="6屏幕缓冲区">6.屏幕缓冲区</span></h2><h2><span id="7矢量命令画图">7.矢量命令画图</span></h2><h2><span id="8sketchpad光笔">8.Sketchpad，光笔</span></h2><h2><span id="9函数画线矩形">9.函数画线，矩形</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之命令行界面</title>
      <link href="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2/"/>
      <url>/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>计算机早期同时输入程序和数据(用纸卡/纸带)<br>运行开始到结束，中间没有人类进行操作。<br>原因是计算机很贵，不能等人类慢慢输入，执行完结果打印到纸上。<br><a id="more"></a></p><p>到1950年代，计算机足够便宜+快，人类和计算机交互式操作变得可行。</p><p>为了让人类输入到计算机，改造之前就有的打字机，变成电传打字机。</p><p>到1970年代末，屏幕成本足够低，屏幕代替电传打字机，屏幕成为标配。</p><h2><span id="1人机交互">1.人机交互</span></h2><h2><span id="2早期输出数据是打印到纸上而输入是用纸卡纸带一次性把程序和数据都给进去">2.早期输出数据是打印到纸上，而输入是用纸卡/纸带一次性把程序和数据都给进去</span></h2><h2><span id="3qwerty打字机的发展克里斯托弗莱瑟姆肖尔斯发明于1868年">3.QWERTY打字机的发展，克里斯托弗.莱瑟姆.肖尔斯发明于1868年</span></h2><h2><span id="4电传打字机">4.电传打字机</span></h2><h2><span id="5命令行界面">5.命令行界面</span></h2><h2><span id="6ls命令">6.ls命令</span></h2><h2><span id="7早期文字游戏-zork1977年">7.早期文字游戏 Zork(1977年)</span></h2><h2><span id="8cd命令">8.cd命令</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之迭代器模式</title>
      <link href="/2020/02/29/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/29/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-迭代器模式的定义">一、迭代器模式的定义</span></h2><p><strong>它提供一种方法访问一个容器对象中各个元素，而又不需暴露该对象的内部细节。</strong><br><a id="more"></a><br>迭代器是为容器服务的，那什么是容器?</p><p>能容纳对象的所有类型都可以称之为容器，例如Collection集合类型、Set类型等，迭代器就是为解决遍历这些容器中的元素而诞生的。</p><h3><span id="iterator抽象迭代器">Iterator抽象迭代器</span></h3><p>抽象迭代器负责定义访问和遍历元素的接口，而且基本上是有固定的3个方法:first()获得第一个元素，next()访问下一个元素，isDone()是否已经访问到底部(Java叫做hasNext()方法)</p><h3><span id="concreateiterator具体迭代器">ConcreateIterator具体迭代器</span></h3><p>具体迭代器角色要实现迭代器接口，完成容器元素的遍历。</p><h3><span id="aggregate抽象容器">Aggregate抽象容器</span></h3><p>容器角色负责提供创建具体迭代器角色的接口，必然提供一个类似creteIterator()这样的方法，在Java中一般是iterator()方法。</p><h3><span id="concrete-aggregate具体容器">Concrete Aggregate具体容器</span></h3><p>具体容器实现容器接口定义的方法，创建出容纳迭代器的对象。</p><h2><span id="二-迭代器的应用">二、迭代器的应用</span></h2><p>一些大师级人物甚至建议把迭代器模式从23个模式中删除，为什么呢？<br>就是因为它太普通了，已经融入到各个语言和工具中，比如PHP中你能找到它的身影，Perl也有它的存在，甚至是前台页面技术Ajax也可以有它的出现。基本上，只要你不是在使用那些古董级的编程语言的话，都不用自己动手写迭代器。</p><h2><span id="三-最佳实践">三、最佳实践</span></h2><p>如果你是做Java开发，尽量不要自己写迭代器模式，使用Java提供的Iterator一般就能满足你的要求。</p><p>代码例子:<br><a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/Iterator" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/Iterator</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Idea安装插件问题</title>
      <link href="/2020/02/28/%E5%85%B3%E4%BA%8EIdea%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/28/%E5%85%B3%E4%BA%8EIdea%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>今天安装一个叫apidoc的插件出现了问题，Idea安装插件同Eclipse安装插件一样简单，都支持线上搜索直接安装和本地下载后安装。<br><a id="more"></a></p><p>我的Idea是2018年的版本，不知道由于什么原因搜索不到插件。</p><p>然后我参考这个链接解决搜索不到插件问题:</p><p>Idea搜索不了插件解决办法:<br><a href="https://blog.csdn.net/chenchunlin526/article/details/85339082" target="_blank" rel="noopener">https://blog.csdn.net/chenchunlin526/article/details/85339082</a></p><p>使用这个方法解决后，突然发现还是不行，插件虽然都出来了，但是搜索关键字失效，没有用。实在没有办法我只能采取本地安装插件的方式。</p><p>Idea插件市场(PC端):<br><a href="https://plugins.jetbrains.com/idea" target="_blank" rel="noopener">https://plugins.jetbrains.com/idea</a></p><p>本地安装插件很简单，步骤如下:</p><p>(1)下载地址:<a href="https://plugins.jetbrains.com/idea" target="_blank" rel="noopener">https://plugins.jetbrains.com/idea</a></p><p>(2)搜索插件名称</p><p>(3)下载IDEA对应版本号的插件</p><p>(4)将插件解压到IDEA安装目录的plugs文件夹下后重启Idea</p><p>如果不太明白的话，可以参考如下链接进行本地安装:<br><a href="https://jingyan.baidu.com/article/3d69c5513e5953f0cf02d7b4.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/3d69c5513e5953f0cf02d7b4.html</a></p><p>不过有一个注意事项，就是IDEA插件与IDEA版本需要匹配，不然可能会报如下错误(英语不错的，看到该信息就明白了原因，所以作为程序员必须要把英语学好):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugin xxxx is incompatible</span><br></pre></td></tr></table></figure></p><p>该错误解决办法就是安装与Idea版本相匹配的插件。</p><p>对该错误有疑惑的话，可参考如下链接:</p><p>Intellij IDEA 安装插件 报 ‘plugin xxxx is incompatible‘ 解决方案:<br><a href="https://blog.csdn.net/github_38410229/article/details/79475745" target="_blank" rel="noopener">https://blog.csdn.net/github_38410229/article/details/79475745</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>attempted to return null from a method with a primitive return type (int).</title>
      <link href="/2020/02/28/attempted-to-return-null-from-a-method-with-a-primitive-return-type-int/"/>
      <url>/2020/02/28/attempted-to-return-null-from-a-method-with-a-primitive-return-type-int/</url>
      
        <content type="html"><![CDATA[<p>错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">attempted to return null from a method with a primitive return type (int).</span><br></pre></td></tr></table></figure></p><p>错误原因:<br>实际查询sql并没有这个值，出现空值，就会报这个异常。<br><a id="more"></a></p><p>错误sql(发生问题):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sum(id) from post where post.author = ?</span><br></pre></td></tr></table></figure></p><p>正确sql(解决问题):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select IFNULL(sum(id),0) from post where post.author = ?</span><br></pre></td></tr></table></figure></p><p>关键在于使用了IFNULL，有了这个判断可避免任何情况空值导致的错误。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之压缩</title>
      <link href="/2020/02/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%8E%8B%E7%BC%A9/"/>
      <url>/2020/02/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%8E%8B%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[<h2><span id="1压缩的好处是能存更多文件传输也更快">1.压缩的好处是能存更多文件，传输也更快</span></h2><a id="more"></a><h2><span id="2游程编码">2.游程编码</span></h2><h2><span id="3无损压缩">3.无损压缩</span></h2><h2><span id="4霍夫曼树">4.霍夫曼树</span></h2><h2><span id="5消除冗余和用更紧凑的表示方法这两种方法通常会组合使用">5.”消除冗余”和”用更紧凑的表示方法”,”这两种方法通常会组合使用</span></h2><h2><span id="6字典编码">6.字典编码</span></h2><h2><span id="7感知编码">7.感知编码</span></h2><h2><span id="8有损压缩">8.有损压缩</span></h2><h2><span id="9时间冗余">9.时间冗余</span></h2><h2><span id="10mpeg-4视频编码">10.MPEG-4视频编码</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之适配器模式</title>
      <link href="/2020/02/22/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/22/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-适配器模式的定义">一、适配器模式的定义</span></h2><p>将一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。<br><a id="more"></a></p><h3><span id="适配器模式的三个角色">适配器模式的三个角色:</span></h3><h4><span id="1target目标角色">1.Target目标角色</span></h4><p>该角色定义把其他类转换为何种接口，也就是我们的期望接口。</p><h4><span id="2adapter源角色">2.Adapter源角色</span></h4><p>你想把谁转换成目标角色，这个”谁”就是源角色，它是已经存在的、运行良好的类或对象，经过适配器角色的包装，它会成为一个崭新、靓丽的角色。</p><h4><span id="3adapter适配器角色">3.Adapter适配器角色</span></h4><p>适配器模式的核心角色，其他两个角色都是已经存在的角色，而适配器角色是需要新建立的，它的职责非常简单:把源角色转换为目标角色，怎么转换?通过继承或是类关联的方式。</p><h2><span id="适配器模式的应用">适配器模式的应用</span></h2><h3><span id="1适配器模式的优点">1.适配器模式的优点</span></h3><ul><li><strong>适配器模式可以让两个没有任何关系的类在一起运行，只要适配器这个角色能够搞定他们就成。</strong></li><li><strong>增加类的透明性</strong>(我们访问的Target目标角色，但是具体的实现都委托给源角色，而这些对高层次模块是透明的，也是它不需要关心的)</li><li><strong>提高类的复用度</strong>(源角色在原有的系统中还是可以正常使用，而在模板角色中也可以充当新的演员)</li><li><strong>灵活性非常好</strong>(某一天，突然不想要适配器，没问题，删除掉这个适配器就可以了，其他的代码都不用修改，基本上就类似一个灵活地构件，想用就用，不用就卸载)</li></ul><h3><span id="2适配器模式的使用场景">2.适配器模式的使用场景</span></h3><p>适配器应用的场景只要记住一点:<br>你有动机修改一个已经投产中的接口时，适配器模式可能是最适合你的模式。</p><p>比如系统扩展了，需要使用一个已有或新建立的类，但这个类又不符合系统的接口？这时使用适配器模式就能解决这个问题。</p><h2><span id="3适配器模式的注意事项">3.适配器模式的注意事项</span></h2><p>适配器模式最好在详细设计阶段不要考虑它，它不是为了解决还处在开发阶段的问题，而是解决正在服役的项目问题，没有一个系统分析师会在做详细设计的时候考虑使用适配器模式。</p><p><strong>着重提醒</strong>:项目一定要遵守依赖倒置原则和里氏替换原则，否则即使在适合使用适配器的场合下，也会带来非常大的改造。</p><h2><span id="最佳实践">最佳实践</span></h2><p>适配器模式是一个补偿模式，或者说是一个”补救”模式，通常用来解决接口不相容的问题，在百分之百的完美设计中是不可能使用到的。但是实际中是不可能出现这样的设计。</p><p>不管系统设计得多么完美，都无法逃避新业务的发生，技术只是一个工具而已，是因为它推动了其他行业的进步和发展而具有价值，通俗地说，技术是为业务服务的，因此业务在日新月异的同时，也对技术提出了同样的要求，在这种要求下，就需要我们有一种或一些这样的补救模式诞生，使用这些补救模式可以保证我们的系统在生命周期内能够稳定、可靠、健壮的运行，而适配器模式就是这样的一个”救世主”，它在需求巨变、业务飞速而导致你极度郁闷、烦躁、崩溃的时候横空出世，它通过把非本系统接口的对象包装成本系统可以接受的对象，从而简化了系统大规模变更风险的存在。</p><p>代码例子:<br><a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/Adapter" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/Adapter</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axure RP 8注册码</title>
      <link href="/2020/02/22/axure-RP-8%E6%B3%A8%E5%86%8C%E7%A0%81/"/>
      <url>/2020/02/22/axure-RP-8%E6%B3%A8%E5%86%8C%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>我当初是参考该地址破解的:<br><a href="https://www.cnblogs.com/feiquan/p/10209332.html" target="_blank" rel="noopener">https://www.cnblogs.com/feiquan/p/10209332.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Axure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axure如何导入svn</title>
      <link href="/2020/02/22/axure%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5svn/"/>
      <url>/2020/02/22/axure%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5svn/</url>
      
        <content type="html"><![CDATA[<p>Axure RP是一款专业的快速原型设计工具。让负责定义需求和规格、设计功能和界面的专家能够快速创建应用软件或Web网站的线框图、流程图、原型和规格说明文档。作为专业的原型设计工具，它能快速、高效的创建原型，同时支持多人协作设计和版本控制管理。<br><a id="more"></a></p><p>Axure RP的主要使用者包括商业分析师、信息架构师、产品经理、IT咨询师、用户体验设计师、交互设计师、UI设计师等，另外，架构师、程序员也在使用Axure.</p><p>关于Axure rp如何导入SVN，具体参考该地址:<a href="http://www.woshipm.com/rp/332822.html" target="_blank" rel="noopener">http://www.woshipm.com/rp/332822.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Axure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之文件系统</title>
      <link href="/2020/02/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/02/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2><span id="1文件格式可以随便存文件数据但按格式存会更方便">1.文件格式:可以随便存文件数据，但按格式存会更方便</span></h2><h2><span id="2txt-文本文件ascii">2.TXT 文本文件:ASCII</span></h2><h2><span id="3wav音频文件每秒上千次的音频采样数字">3.WAV音频文件:每秒上千次的音频采样数字</span></h2><a id="more"></a><h2><span id="4bmp图片文件像素的红绿蓝rgb值">4.BMP图片文件:像素的红绿蓝RGB值</span></h2><h2><span id="5文件系统很早期空间少整个存储器就像一整个文件-后来随容量增长多文件非常必要">5.文件系统:很早期空间少，整个存储器就像一整个文件。后来随容量增长，多文件非常必要</span></h2><h2><span id="6目录文件用来解决多文件问题存其他文件的信息比如开头结尾创建时间等">6.目录文件:用来解决多文件问题，存其他文件的信息，比如开头，结尾，创建时间等。</span></h2><h2><span id="7平面文件系统-flat-file-system文件都在同一个层次早期空间小只有十几个文件平面系统够用">7.平面文件系统-Flat File System:文件都在同一个层次，早期空间小，只有十几个文件，平面系统够用。</span></h2><h2><span id="8如果文件紧密的一个个前后排序会造成问题所以文件系统会">8.如果文件紧密的一个个前后排序会造成问题，所以文件系统会:</span></h2><p>1.把文件划分成一块块</p><p>2.文件拆分存在多个块里</p><h2><span id="9文件的增删改查会不可避免的造成文件散落在各个块里如果是磁带这样的存储介质就会造成问题所以做碎片整理">9.文件的增删改查会不可避免的造成文件散落在各个块里，如果是磁带这样的存储介质就会造成问题，所以做碎片整理</span></h2><h2><span id="10分层文件系统有不同文件夹文件夹可以层层嵌套">10.分层文件系统:有不同文件夹，文件夹可以层层嵌套</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之内存&amp;储存介质</title>
      <link href="/2020/02/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%86%85%E5%AD%98-%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8/"/>
      <url>/2020/02/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%86%85%E5%AD%98-%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8/</url>
      
        <content type="html"><![CDATA[<h2><span id="1纸卡">1.纸卡</span></h2><a id="more"></a><h2><span id="2延迟线存储器">2.延迟线存储器</span></h2><h2><span id="3磁芯">3.磁芯</span></h2><h2><span id="4磁带">4.磁带</span></h2><h2><span id="5磁鼓">5.磁鼓</span></h2><h2><span id="6硬盘">6.硬盘</span></h2><h2><span id="7内存层次结构">7.内存层次结构</span></h2><h2><span id="8软盘">8.软盘</span></h2><h2><span id="9光盘">9.光盘</span></h2><h2><span id="10固态硬盘">10.固态硬盘</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之操作系统</title>
      <link href="/2020/02/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/02/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2><span id="1操作系统">1.操作系统</span></h2><h2><span id="2批处理">2.批处理</span></h2><h2><span id="3计算机变便宜变多有不同配置写程序处理不同硬件细节很痛苦因此操作系统负责抽象硬件">3.计算机变便宜变多，有不同配置，写程序处理不同硬件细节很痛苦，因此操作系统负责抽象硬件</span></h2><a id="more"></a><h2><span id="4外部设备">4.外部设备</span></h2><h2><span id="5设备驱动程序">5.设备驱动程序</span></h2><h2><span id="6多任务处理">6.多任务处理</span></h2><h2><span id="7虚拟内存">7.虚拟内存</span></h2><h2><span id="8动态内存分配">8.动态内存分配</span></h2><h2><span id="9内存保护">9.内存保护</span></h2><h2><span id="101970年代计算机足够便宜大学买了让学生用多个学生用多个终端连接到主机">10.1970年代，计算机足够便宜，大学买了让学生用，多个学生用多个”终端”连接到主机</span></h2><h2><span id="11多用户分时操作系统multics">11.多用户分时操作系统,Multics</span></h2><h2><span id="12unix">12.Unix</span></h2><h2><span id="13ms-dos">13.MS-DOS</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之集成电路&amp;摩尔定律</title>
      <link href="/2020/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF-%E6%91%A9%E5%B0%94%E5%AE%9A%E5%BE%8B/"/>
      <url>/2020/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF-%E6%91%A9%E5%B0%94%E5%AE%9A%E5%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2><span id="1分立元件">1.分立元件</span></h2><h2><span id="2数字暴政是1960年代工程师碰到的问题">2.数字暴政是1960年代工程师碰到的问题</span></h2><p>意思是如果想加强电脑性能，就要更多部件，这导致更多线路，更复杂。所以很难做。</p><h2><span id="3光刻">3.光刻</span></h2><a id="more"></a><h2><span id="4晶圆">4.晶圆</span></h2><h2><span id="5光刻胶">5.光刻胶</span></h2><h2><span id="6光掩膜">6.光掩膜</span></h2><h2><span id="7掺杂">7.掺杂</span></h2><h2><span id="8摩尔定律">8.摩尔定律</span></h2><h2><span id="9英特尔">9.英特尔</span></h2><h2><span id="10晶体管数量大幅度增长1980年三万个1990年一百万个2000年三千万个2010年是十亿个">10.晶体管数量大幅度增长，1980年三万个，1990年一百万个，2000年三千万个，2010年是十亿个</span></h2><h2><span id="11进一步小型化会碰到两个问题">11.进一步小型化会碰到两个问题</span></h2><p>1.光的波长不足以制作更精细的设计</p><p>2.量子隧穿效应</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之软件工程</title>
      <link href="/2020/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
      <url>/2020/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2><span id="1对象-object">1.对象 Object</span></h2><h2><span id="2面向对象编程-ojbect">2.面向对象编程 Ojbect</span></h2><h2><span id="3api-application-programming-interface">3.API Application Programming Interface</span></h2><a id="more"></a><h2><span id="4publicprivate">4.public,private</span></h2><h2><span id="5集成开发环境-ide">5.集成开发环境 IDE</span></h2><h2><span id="6调试">6.调试</span></h2><h2><span id="7文档和注释">7.文档和注释</span></h2><h2><span id="8版本控制">8.版本控制</span></h2><h2><span id="9质量控制">9.质量控制</span></h2><h2><span id="10betaalpha">10.Beta,Alpha</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之阿兰.图灵</title>
      <link href="/2020/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%98%BF%E5%85%B0-%E5%9B%BE%E7%81%B5/"/>
      <url>/2020/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%98%BF%E5%85%B0-%E5%9B%BE%E7%81%B5/</url>
      
        <content type="html"><![CDATA[<h2><span id="1介绍图灵">1.介绍图灵</span></h2><h2><span id="2可判定性问题">2.可判定性问题</span></h2><h2><span id="3阿隆佐丘奇lambda算子">3.阿隆佐.丘奇,Lambda算子</span></h2><h2><span id="4图灵机">4.图灵机</span></h2><h2><span id="5停机问题">5.停机问题</span></h2><h2><span id="6破解德军英格玛加密机">6.破解德军英格玛加密机</span></h2><h2><span id="7图灵测试">7.图灵测试</span></h2><h2><span id="8图灵的个人生活">8.图灵的个人生活</span></h2><h2><span id="9图灵奖">9.图灵奖</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之数据结构</title>
      <link href="/2020/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2020/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2><span id="1数组">1.数组</span></h2><a id="more"></a><h2><span id="2字符串">2.字符串</span></h2><h2><span id="3矩阵">3.矩阵</span></h2><h2><span id="4结构体">4.结构体</span></h2><h2><span id="5指针">5.指针</span></h2><h2><span id="6节点">6.节点</span></h2><h2><span id="7链表">7.链表</span></h2><h2><span id="8队列">8.队列</span></h2><h2><span id="9栈">9.栈</span></h2><h2><span id="10树">10.树</span></h2><h2><span id="11二叉树">11.二叉树</span></h2><h2><span id="12图">12.图</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之算法入门</title>
      <link href="/2020/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"/>
      <url>/2020/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2><span id="1选择排序">1.选择排序</span></h2><h2><span id="2大o表示法">2.大O表示法</span></h2><h2><span id="3归并排序">3.归并排序</span></h2><h2><span id="4dijkstra算法">4.Dijkstra算法</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之编译原理-语句和函数</title>
      <link href="/2020/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%87%BD%E6%95%B0/"/>
      <url>/2020/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2><span id="1变量-赋值语句">1.变量、赋值语句</span></h2><h2><span id="2grace-hopper拍虫子游戏">2.Grace Hopper拍虫子游戏</span></h2><h2><span id="3if判断">3.if判断</span></h2><h2><span id="4while循环">4.while循环</span></h2><h2><span id="5for循环">5.for循环</span></h2><h2><span id="6函数">6.函数</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之编程语言发展史</title>
      <link href="/2020/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%8F%91%E5%B1%95%E5%8F%B2/"/>
      <url>/2020/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%8F%91%E5%B1%95%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<p>编程:二进制-&gt;助记符(汇编器)-&gt;A-0(编译器)-&gt;FORTRAIN<br><a id="more"></a></p><h2><span id="1二进制写程序先纸上写伪代码手工转二进制">1.二进制写程序，先纸上写伪代码，手工转二进制</span></h2><h2><span id="2用助记符写代码load_a-14-为了把助记符转二进制汇编器诞生">2.用”助记符”写代码(LOAD_A 14) 为了把助记符转二进制，汇编器诞生</span></h2><h2><span id="3葛丽丝霍普-哈佛1号计算机首批程序员">3.葛丽丝.霍普-哈佛1号计算机首批程序员</span></h2><h2><span id="4grace设计编程语言a-0">4.Grace设计编程语言A-0</span></h2><h2><span id="5grace-1952年做了第一个编译器实现a-0">5.Grace 1952年做了第一个编译器，实现A-0</span></h2><h2><span id="6变量">6.变量</span></h2><h2><span id="7fortran">7.FORTRAN</span></h2><h2><span id="8cobol">8.COBOL</span></h2><h2><span id="9新语言">9.新语言</span></h2><p>1960年代:ALGOL,LISP,BASIC</p><p>1970年代:Pascal,C,Smalltalk</p><p>1980年代:C++,Object-C,Perl</p><p>1990年代:Python,Ruby,Java</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之早期的编程方式</title>
      <link href="/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%97%A9%E6%9C%9F%E7%9A%84%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%97%A9%E6%9C%9F%E7%9A%84%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>打孔纸卡-&gt;插线板-&gt;面板拔开关<br><a id="more"></a></p><h2><span id="1程序如何进入计算机">1.程序如何进入计算机</span></h2><h2><span id="2拿纺织业距离给机器编程的需求远在计算机出现前就有了">2.拿纺织业距离，给机器编程的需求远在计算机出现前就有了</span></h2><h2><span id="3打孔纸卡">3.打孔纸卡</span></h2><h2><span id="4插线板">4.插线板</span></h2><h2><span id="5冯诺依曼架构">5.冯诺依曼架构</span></h2><h2><span id="6面板编程">6.面板编程</span></h2><h2><span id="7第一款取得商业成功的家用计算机altair8800">7.第一款取得商业成功的家用计算机:Altair8800</span></h2><h2><span id="8编程依然很困难人们需要更友好更简单的方式编程">8.编程依然很困难，人们需要更友好更简单的方式编程</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之高级CPU设计</title>
      <link href="/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7CPU%E8%AE%BE%E8%AE%A1/"/>
      <url>/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7CPU%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2><span id="1早期是加快晶体管切换速度来提升cpu速度">1.早期是加快晶体管切换速度，来提升CPU速度</span></h2><a id="more"></a><h2><span id="2给cpu专门的除法电路其他电路来做复杂操作比如游戏视频解码">2.给CPU专门的除法电路+其他电路来做复杂操作，比如游戏，视频解码</span></h2><h2><span id="3给cpu加缓存提高数据存取速度更快喂给cpu用计算餐馆销售额举例">3.给CPU加缓存，提高数据存取速度，更快喂给CPU，用计算餐馆销售额举例</span></h2><h2><span id="4脏位-dirty-bit">4.脏位-Dirty bit</span></h2><h2><span id="5流水线设计用1个洗衣机和1个干燥机举例">5.流水线设计，用1个洗衣机和1个干燥机举例</span></h2><h2><span id="6并行处理">6.并行处理</span></h2><h2><span id="7乱序执行">7.乱序执行</span></h2><h2><span id="8推测执行">8.推测执行</span></h2><h2><span id="9分支预测">9.分支预测</span></h2><h2><span id="10多个alu">10.多个ALU</span></h2><h2><span id="11多核">11.多核</span></h2><h2><span id="12多个独立cpu">12.多个独立CPU</span></h2><h2><span id="13超级计算机中国的神威太湖之光">13.超级计算机，中国的”神威太湖之光”</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之指令和程序</title>
      <link href="/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%8C%87%E4%BB%A4%E5%92%8C%E7%A8%8B%E5%BA%8F/"/>
      <url>/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%8C%87%E4%BB%A4%E5%92%8C%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="1介绍指令集的概念">1.介绍’指令集’的概念</span></h2><p>LOAD_A,LOAD_B,SUB,JUMP,ADD,HALT等指令</p><h2><span id="2带条件跳转jump-negative是负数才跳转还有其他类型的jump">2.带条件跳转，JUMP NEGATIVE是负数才跳转，还有其他类型的JUMP</span></h2><h2><span id="3真正现代cpu用更多指令集-位数更长">3.真正现代CPU用更多指令集。位数更长。</span></h2><h2><span id="41971年的英特尔4004处理器有46个指令">4.1971年的英特尔4004处理器，有46个指令</span></h2><h2><span id="5如今英特尔酷睿i7有上千条指令">5.如今英特尔酷睿i7，有上千条指令。</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之中央处理器</title>
      <link href="/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8/"/>
      <url>/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2><span id="1拼个cpu出来">1.拼个CPU出来</span></h2><h2><span id="2cpu怎么执行命令">2.CPU怎么执行命令</span></h2><h3><span id="aram寄存器alu做个cpu">a.RAM+寄存器+ALU做个CPU</span></h3><h3><span id="b解释取指令-gt解释-gt执行这个循环">b.解释取指令-&gt;解释-&gt;执行这个循环</span></h3><h3><span id="c时钟是什么时钟速度和赫兹">c.时钟是什么，时钟速度和赫兹</span></h3><h3><span id="d超频提升性能降频省电">d.超频提升性能，降频省电</span></h3>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之寄存器和内存</title>
      <link href="/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%AF%84%E5%AD%98%E5%99%A8%E5%92%8C%E5%86%85%E5%AD%98/"/>
      <url>/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%AF%84%E5%AD%98%E5%99%A8%E5%92%8C%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h1><span id="存储内存两种含义">存储/内存两种含义</span></h1><a id="more"></a><h2><span id="1存1位gated-latch-锁存器">1.存1位(Gated Latch-锁存器)</span></h2><h2><span id="2存8位register-寄存器">2.存8位(Register-寄存器)</span></h2><h2><span id="316x16的矩阵存256位">3.16x16的矩阵存256位</span></h2><p>数据选择器/多路复用器(Multiplexer)解码8位地址，定位到单个锁存器</p><h2><span id="44位代表行4位代表列">4.4位代表行，4位代表列</span></h2><h2><span id="5组合256位内存多路复用器">5.组合256位内存+多路复用器</span></h2><h2><span id="6可寻址的256字节内存">6.可寻址的256字节内存</span></h2><p>一条1980年代的内存，1M大小</p><h2><span id="78个模块每个模块有32个小方块">7.8个模块，每个模块有32个小方块</span></h2><p>每个小方块有4个小块，每个小块是128位X64位</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之算数逻辑单元-ALU</title>
      <link href="/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%AE%97%E6%95%B0%E9%80%BB%E8%BE%91%E5%8D%95%E5%85%83-ALU/"/>
      <url>/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%AE%97%E6%95%B0%E9%80%BB%E8%BE%91%E5%8D%95%E5%85%83-ALU/</url>
      
        <content type="html"><![CDATA[<h2><span id="1简单介绍alu英特尔74181">1.简单介绍ALU，英特尔74181</span></h2><h2><span id="2alu有2个单元1个算术单元和1一个逻辑单元">2.ALU有2个单元，1个算术单元和1一个逻辑单元</span></h2><a id="more"></a><h2><span id="3算术单元">3.算术单元</span></h2><p>半加器(处理1个bit，2个输入)</p><p>全加器(处理1个bit，3个输入)</p><p>8bit加法(1个半加器，7个全加器)</p><p>溢出的概念，吃豆人的例子</p><p>乘法除法</p><h2><span id="4逻辑单元">4.逻辑单元</span></h2><p>检测数字是否为0的电路(一堆OR门最后加个NOT门)</p><p>ALU抽象成一个V符号</p><p>Flag标志(是否相等，是否小于，是否溢出等等)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之二进制</title>
      <link href="/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
      <url>/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BA%8C%E8%BF%9B%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2><span id="1用十进制举例二进制的原理演示二进制加法-存储单位mb-gb-tb等">1.用十进制举例二进制的原理，演示二进制加法。存储单位MB GB TB等</span></h2><h2><span id="2正数负数整数浮点数的表示">2.正数，负数，整数，浮点数的表示</span></h2><h2><span id="3美国信息交换标准代码-ascii用来表示字符">3.美国信息交换标准代码-ASCII,用来表示字符</span></h2><h2><span id="4unicode-1992年诞生是字符编码标准解决asciibug表达所有语言的问题">4.UNICODE 1992年诞生，是字符编码标准，解决ASCIIbug表达所有语言的问题</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之布尔逻辑和逻辑门</title>
      <link href="/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%B8%83%E5%B0%94%E9%80%BB%E8%BE%91%E5%92%8C%E9%80%BB%E8%BE%91%E9%97%A8/"/>
      <url>/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%B8%83%E5%B0%94%E9%80%BB%E8%BE%91%E5%92%8C%E9%80%BB%E8%BE%91%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2><span id="1什么是二进制为什么用二进制布尔逻辑">1.什么是二进制，为什么用二进制，布尔逻辑</span></h2><h2><span id="23个基本操作notandor">2.3个基本操作:NOT,AND,OR</span></h2><h2><span id="3解释3个基本操作">3.解释3个基本操作</span></h2><h2><span id="4xor-异或">4.XOR 异或</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之电子计算机</title>
      <link href="/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%94%B5%E5%AD%90%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
      <url>/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%94%B5%E5%AD%90%E8%AE%A1%E7%AE%97%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>提到的设备:继电器-&gt;真空管-&gt;晶体管<br><a id="more"></a></p><h2><span id="120世纪的发展要求更强的计算能力-柜子大小的计算机发展到房间大小">1.20世纪的发展要求更强的计算能力。柜子大小的计算机发展到房间大小。</span></h2><h2><span id="2哈佛mark1号ibm1944年做的">2.哈佛Mark1号，IBM1944年做的。</span></h2><h2><span id="3继电器继电器一秒最多50次开关">3.继电器，继电器一秒最多50次开关。</span></h2><h2><span id="4继电器出bug">4.继电器出bug</span></h2><h2><span id="51904年热电子管出现第一个真空管-改进后变成和继电器的功能一样">5.1904年，热电子管出现，第一个真空管。改进后变成和继电器的功能一样。</span></h2><h2><span id="6巨人1号计算机在英国布莱切利园首次大规模使用真空管-但编程麻烦还要配置">6.”巨人1号”计算机在英国布莱切利园首次大规模使用真空管。但编程麻烦，还要配置。</span></h2><h2><span id="71946年宾夕法尼亚大学的eniac是第一个通用可编程计算机">7.1946年，宾夕法尼亚大学的ENIAC是第一个通用可编程计算机</span></h2><h2><span id="81947年贝尔实验室做出了晶体管晶体管有诸多好处ibm很快全面转向晶体管">8.1947年，贝尔实验室做出了晶体管，晶体管有诸多好处，IBM很快全面转向晶体管。</span></h2><h2><span id="9硅谷的典故很多晶体管和半导体的开发都是这里做的-而生产半导体最常见的材料是硅">9.硅谷的典故:很多晶体管和半导体的开发都是这里做的。而生产半导体最常见的材料是硅</span></h2><h2><span id="10肖克利半导体-gt仙童半导体-gt英特尔">10.肖克利半导体-&gt;仙童半导体-&gt;英特尔</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课笔记之计算机早期历史</title>
      <link href="/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%97%A9%E6%9C%9F%E5%8E%86%E5%8F%B2/"/>
      <url>/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%97%A9%E6%9C%9F%E5%8E%86%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<p>提到的设备:算盘-&gt;步进计算器-&gt;差分机-&gt;分析机-&gt;打孔卡片制表机</p><p>提到的人名:Charles Babbage,Ada Lovelace<br><a id="more"></a></p><h2><span id="1最早的计算设备是算盘">1.最早的计算设备是算盘</span></h2><h2><span id="2computer从指代职业变成指代机器">2.Computer从指代职业变成指代机器</span></h2><h2><span id="3机器里有名的是步进计算器-第一个可以做加减乘除的机器">3.机器里有名的是:步进计算器。第一个可以做加减乘除的机器。</span></h2><h2><span id="4炮弹为了精准要计算弹道二战是查表来做二战中炮兵-但每次改设计了就需要做一张新表">4.炮弹为了精准，要计算弹道，二战是查表来做(二战中炮兵)。但每次改设计了就需要做一张新表。</span></h2><h2><span id="5charles-babbage提出了差分机在构造差分机期间想出了分析机分析机是通用计算机">5.Charles Babbage提出了”差分机”，在构造差分机期间，想出了分析机，分析机是通用计算机。</span></h2><h2><span id="6lovelace给分析机械了假想程序因此成为了第一位程序员">6.Lovelace给分析机械了假想程序，因此成为了第一位程序员。</span></h2><h2><span id="7人口普查10年一次herman-hollerith的打孔卡片制表机大大提升了效率">7.人口普查10年一次，Herman Hollerith的打孔卡片制表机大大提升了效率。</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学速成课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之策略模式</title>
      <link href="/2020/02/12/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/12/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-策略模式的定义">一、策略模式的定义</span></h2><p>策略模式是一种比较简单的模式，也叫做政策模式，其定义如下:定义一组算法，将每个算法都封装起来，并且使它们之间可以互换。<br><a id="more"></a></p><p>策略模式使用的是面向对象的继承和多态机制，我们看看策略模式的三个角色:</p><h3><span id="1context封装角色">1.Context封装角色</span></h3><p>它也叫上下文角色，起承上启下封装作用，屏蔽高层模块对策略、算法的直接访问，封装可能存在的变化。</p><h3><span id="2strategy抽象策略角色">2.Strategy抽象策略角色</span></h3><p>策略、算法家族的抽象，通常为接口，定义每个策略或算法必须具有的方法和属性。</p><h3><span id="3concretestrategy具体策略角色">3.ConcreteStrategy具体策略角色</span></h3><p>实现抽象策略中的操作，该类含有具体的算法。</p><h2><span id="二-策略模式的应用">二、策略模式的应用</span></h2><h3><span id="1策略模式的优点">1.策略模式的优点</span></h3><h4><span id="a算法可以自由切换">a.算法可以自由切换</span></h4><p>这是策略模式本身定义的，只要实现抽象策略，它就成为策略家族的一个成员，通过封装角色对其进行封装，保证对外提供”可自由切换”的策略。</p><h4><span id="b避免使用多重条件判断">b.避免使用多重条件判断</span></h4><p>如果没有策略模式，我们想想看会是什么样子？<br>一个策略家族有5个策略算法，一会要使用A策略，一会要使用B策略，怎么设计呢？使用多重的条件语句？多重条件语句不易维护，而且出错的概率大大增强。使用策略模式后，可以由其他模块决定采用何种策略，策略家族对外提供的访问接口就是封装类，简化了操作，同时避免了条件语句判断。</p><h4><span id="c扩展性良好">c.扩展性良好</span></h4><p>只要实现接口就可以，其他都不用修改，类似于一个可反复拆卸的插件，大大符合OCP原则(开闭原则)。</p><h3><span id="2策略模式的缺点">2.策略模式的缺点</span></h3><h4><span id="a策略类数量增多">a.策略类数量增多</span></h4><p>每个策略都是一个类，复用的可能性很小，类的数量增多</p><h4><span id="b所有的策略类都需要对外暴露">b.所有的策略类都需要对外暴露</span></h4><p>上层模块必须知道有哪些策略，然后才能决定使用哪一个策略，这与迪米特法则相违背的，我只想使用一个策略，我凭什么就要了解这个策略呢？那要你的封装类还有什么意义?这是原装策略模式的一个缺点，幸运的是，我们可以使用其他模式来修正这个缺陷，如工厂方法模式、代理模式或享元模式。</p><h3><span id="3策略模式的使用场景">3.策略模式的使用场景</span></h3><h4><span id="a多个类只有在算法或行为上稍有不同的场景">a.多个类只有在算法或行为上稍有不同的场景。</span></h4><h4><span id="b算法需要自由切换的场景">b.算法需要自由切换的场景。</span></h4><p>例如，算法的选择是由使用者决定的，或者是算法始终在进化，特别是一些站在技术前沿的行业，连业务专家都无法给你保证这样的系统规则能够存在多长时间，在这种情况下策略模式是你最好的助手。</p><h4><span id="c需要屏蔽算法规则的场景">c.需要屏蔽算法规则的场景。</span></h4><p>现在的科技发展得很快，人脑记忆是有限得，太多得算法你只要知道一个名字就可以了，传递相关得数字进来，反馈一个运算结果，就Ok了。</p><h3><span id="4策略模式的注意事项">4.策略模式的注意事项</span></h3><p>如果系统中得一个策略家族得具体策略数量超过4个，则需要考虑使用混合模式，解决策略类膨胀和对外暴露的问题，否则日后的系统维护就会成为一个烫手山芋，谁都不想接。</p><p>注意:<br>策略枚举是一个非常优秀和方便的模式，但是它受枚举类型的限制，每个枚举项都是public、final、static的，扩展性受到了一定的约束，因此在系统开发中，策略枚举一般担当不经常发生变化的角色。</p><h2><span id="三-最佳实践">三、最佳实践</span></h2><p>策略模式是一个非常简便的模式。它在项目中使用得非常多，但它单独使用得地方就比较少了，因为它有致命缺陷:所有得策略都需要暴露出去，这样才方便客户端决定使用哪一个策略。</p><p>代码例子:<a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/Strategy" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/Strategy</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java爬虫框架之WebMagic</title>
      <link href="/2020/02/09/Java%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E4%B9%8BWebMagic/"/>
      <url>/2020/02/09/Java%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E4%B9%8BWebMagic/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-介绍">一、介绍</span></h2><p>WebMagic是一个简单灵活的Java爬虫框架。基于WebMagic，你可以快速开发出一个高效、易维护的爬虫。<br><a id="more"></a></p><h2><span id="二-如何学习">二、如何学习</span></h2><h3><span id="1查看官网">1.查看官网</span></h3><p>官网地址为:<a href="http://webmagic.io/" target="_blank" rel="noopener">http://webmagic.io/</a><br>官网详细文档:<a href="http://webmagic.io/docs/zh/" target="_blank" rel="noopener">http://webmagic.io/docs/zh/</a></p><h3><span id="2跑通hello-world示例具体可以参考官网也可以参考博客">2.跑通hello world示例(具体可以参考官网，也可以参考博客)</span></h3><p>我下面写的单元测试案例，可作为Hello World示例。</p><p>注意需要导入Maven依赖:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;us.codecraft&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;webmagic-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.7.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;us.codecraft&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;webmagic-extension&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.7.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h3><span id="3带着一个目的">3.带着一个目的</span></h3><p>说说我的目的，最近我开发的博客系统，其中有个导入第三方博客的插件，这个插件比较简单就是一个搜索框，在对应的搜索框里面填写URL，点击搜索即可导入到自己的博客。</p><p>以导入博客园单篇文章为例:</p><p>下面是我的源代码(单篇文章导入,我已经将其封装成一个工具类):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">import cn.hutool.core.date.DateUtil;</span><br><span class="line">import com.blog.springboot.dto.CnBlogModelDTO;</span><br><span class="line">import com.blog.springboot.entity.Posts;</span><br><span class="line">import com.blog.springboot.service.PostsService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import us.codecraft.webmagic.Page;</span><br><span class="line">import us.codecraft.webmagic.Site;</span><br><span class="line">import us.codecraft.webmagic.Spider;</span><br><span class="line">import us.codecraft.webmagic.pipeline.ConsolePipeline;</span><br><span class="line">import us.codecraft.webmagic.processor.PageProcessor;</span><br><span class="line">import us.codecraft.webmagic.selector.Selectable;</span><br><span class="line">import javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 导入博客园文章工具类</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class WebMagicCnBlogUtils implements PageProcessor &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private PostsService postService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static WebMagicCnBlogUtils magicCnBlogUtils;</span><br><span class="line"></span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void init() &#123;</span><br><span class="line">        magicCnBlogUtils = this;</span><br><span class="line">        magicCnBlogUtils.postService = this.postService;</span><br><span class="line">    &#125;</span><br><span class="line">    private Site site = Site.me()</span><br><span class="line">            .setDomain(&quot;https://www.cnblogs.com/&quot;)</span><br><span class="line">            .setSleepTime(1000)</span><br><span class="line">            .setUserAgent(&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void process(Page page) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Selectable obj = page.getHtml().xpath(&quot;//div[@class=&apos;post&apos;]&quot;);</span><br><span class="line">        Selectable title = obj.xpath(&quot;//h1[@class=&apos;postTitle&apos;]//a&quot;);</span><br><span class="line">        Selectable content = obj.xpath(&quot;//div[@class=&apos;blogpost-body&apos;]&quot;);</span><br><span class="line">        System.out.println(&quot;title:&quot; + title.replace(&quot;&lt;[^&gt;]*&gt;&quot;, &quot;&quot;));</span><br><span class="line">        System.out.println(&quot;content:&quot; + content);</span><br><span class="line">        CnBlogModelDTO blog = new CnBlogModelDTO();</span><br><span class="line">        blog.setTitle(title.toString());</span><br><span class="line">        blog.setContent(content.toString());</span><br><span class="line"></span><br><span class="line">        Posts post = new Posts();</span><br><span class="line"></span><br><span class="line">        String date = DateUtil.date().toString();</span><br><span class="line">        post.setPostAuthor(1L);</span><br><span class="line">        post.setPostTitle(title.replace(&quot;&lt;[^&gt;]*&gt;&quot;, &quot;&quot;).toString());</span><br><span class="line">        post.setPostContent(content.toString());</span><br><span class="line">        post.setPostExcerpt(content.replace(&quot;&lt;[^&gt;]*&gt;&quot;, &quot;&quot;).toString());</span><br><span class="line">        post.setPostDate(date);</span><br><span class="line">        post.setPostDate(date);</span><br><span class="line">        post.setPostModified(date);</span><br><span class="line">        boolean importPost = magicCnBlogUtils.postService.insert(post);</span><br><span class="line"></span><br><span class="line">        if (importPost) &#123;</span><br><span class="line">            System.out.println(&quot;success&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;fail&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Site getSite() &#123;</span><br><span class="line">        return site;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 导入单篇博客园文章数据</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     */</span><br><span class="line">    public static void importSinglePost(String url) &#123;</span><br><span class="line">        Spider.create(new WebMagicCnBlogUtils())</span><br><span class="line">                .addUrl(url)</span><br><span class="line">                .addPipeline(new ConsolePipeline())</span><br><span class="line">                .run();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>单元测试代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import com.blog.springboot.dto.CnBlogModelDTO;</span><br><span class="line">import us.codecraft.webmagic.Page;</span><br><span class="line">import us.codecraft.webmagic.Site;</span><br><span class="line">import us.codecraft.webmagic.Spider;</span><br><span class="line">import us.codecraft.webmagic.pipeline.ConsolePipeline;</span><br><span class="line">import us.codecraft.webmagic.processor.PageProcessor;</span><br><span class="line">import us.codecraft.webmagic.selector.Selectable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class WebMagicJunitTest implements PageProcessor &#123;</span><br><span class="line">    private Site site = Site.me()</span><br><span class="line">            .setDomain(&quot;https://www.cnblogs.com/&quot;)</span><br><span class="line">            .setSleepTime(1000)</span><br><span class="line">            .setUserAgent(&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void process(Page page) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Selectable obj = page.getHtml().xpath(&quot;//div[@class=&apos;post&apos;]&quot;);</span><br><span class="line">        Selectable title = obj.xpath(&quot;//h1[@class=&apos;postTitle&apos;]//a&quot;);</span><br><span class="line">        Selectable content = obj.xpath(&quot;//div[@class=&apos;blogpost-body&apos;]&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;title:&quot; + title.replace(&quot;&lt;[^&gt;]*&gt;&quot;, &quot;&quot;));</span><br><span class="line">        System.out.println(&quot;content:&quot; + content);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Site getSite() &#123;</span><br><span class="line">        return site;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void importSinglePost(String url) &#123;</span><br><span class="line">        Spider.create(new WebMagicJunitTest())</span><br><span class="line">                .addUrl(url)</span><br><span class="line">                .addPipeline(new ConsolePipeline())</span><br><span class="line">                .run();</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        WebMagicJunitTest.importSinglePost(&quot;https://www.cnblogs.com/youcong/p/9404007.html&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>另外我是怎么知道要爬取哪些数据呢?</strong><br>需求第一，然后通过Chrome或Firefox浏览器检查元素，如图:<br><img src="/2020/02/09/Java爬虫框架之WebMagic/01.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何快速且深入地学习一门新技术</title>
      <link href="/2020/02/08/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E4%B8%94%E6%B7%B1%E5%85%A5%E5%9C%B0%E5%AD%A6%E4%B9%A0%E4%B8%80%E9%97%A8%E6%96%B0%E6%8A%80%E6%9C%AF/"/>
      <url>/2020/02/08/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E4%B8%94%E6%B7%B1%E5%85%A5%E5%9C%B0%E5%AD%A6%E4%B9%A0%E4%B8%80%E9%97%A8%E6%96%B0%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-学习流程">一、学习流程</span></h2><a id="more"></a><h3><span id="1快速阅读掌握大量思想">1.快速阅读，掌握大量思想</span></h3><h3><span id="2深入细节内容">2.深入细节内容</span></h3><h2><span id="二-快速寻找技术的代码结构">二、快速寻找技术的代码结构</span></h2><h3><span id="1快速地-跳跃性地查阅资料技术官网-看书-看博客-看教学视频">1.快速地、跳跃性地查阅资料(技术官网、看书、看博客、看教学视频)</span></h3><h3><span id="2出现频率较多的代码">2.出现频率较多的代码</span></h3><h2><span id="三-两个重要问题">三、两个重要问题</span></h2><h3><span id="1对知识的掌握足够吗">1.对知识的掌握足够吗?</span></h3><h3><span id="2刚学会的新技术会不会很快又给忘掉了">2.刚学会的新技术，会不会很快又给忘掉了?</span></h3><h2><span id="四-技术整合的好处">四、技术整合的好处</span></h2><h3><span id="1通过开发进行查漏补缺">1.通过开发，进行查漏补缺</span></h3><h3><span id="2在联调时对旧技术进行复习">2.在联调时，对旧技术进行复习</span></h3><h2><span id="五-技术难点">五、技术难点</span></h2><h3><span id="1偏理论型的">1.偏理论型的</span></h3><p>数据结构与算法、架构、设计模式等</p><p>先拆解目标，再集中消化</p><p>以学习算法为例</p><p>计算数量-&gt;难易度排序-&gt;碎片化时间</p><p>高效利用碎片化时间攻克难点</p><h3><span id="2偏实战型的">2.偏实战型的</span></h3><p>阅读框架源码-&gt;以Matis为例，掌握MyBatis的理论知识，有一定的应用经验，从最简单最基础的生命周期出发，由易到难，充分利用Debug调试。</p><h2><span id="六-提高个人学习的氛围">六、提高个人学习的氛围</span></h2><h3><span id="1分享学习成果提高学习氛围">1.分享学习成果，提高学习氛围</span></h3><h3><span id="2做好技术沉底提高影响力">2.做好技术沉底，提高影响力</span></h3><h2><span id="七-总结">七、总结</span></h2><h3><span id="1快速预览">1.快速预览</span></h3><h3><span id="2积累案例库">2.积累案例库</span></h3><h3><span id="3与其他技术整合">3.与其他技术整合</span></h3><h3><span id="4难点学习偏理论碎片化学习偏实践实践前已有理论基础">4.难点学习(偏理论:碎片化学习，偏实践:实践前已有理论基础)</span></h3><h3><span id="5技术分享">5.技术分享</span></h3>]]></content>
      
      
      
        <tags>
            
            <tag> 极客时间笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql查询结果多列拼接查询</title>
      <link href="/2020/02/08/mysql%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E5%A4%9A%E5%88%97%E6%8B%BC%E6%8E%A5%E6%9F%A5%E8%AF%A2/"/>
      <url>/2020/02/08/mysql%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E5%A4%9A%E5%88%97%E6%8B%BC%E6%8E%A5%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>mysql查询结果多列拼接查询,主要场景是，列表中其中一列涉及另外一张表的多条数据，但是我只需要多条数据中的其中某一列(主子表场景)</p><p>关键字:GROUP_CONCAT</p><p>sql语句如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">            r.id,b.NAME AS group_name,GROUP_CONCAT( a.`name` ) province_name</span><br><span class="line">            FROM config_rule AS r</span><br><span class="line">            LEFT JOIN group AS g ON ( r.svg_id = g.id )</span><br><span class="line">            LEFT JOIN config_rule_detail AS rd ON ( r.id = rd.chat_config_rule_id )</span><br><span class="line">            LEFT JOIN area AS a ON ( rd.province_id = a.id )</span><br><span class="line">            WHERE r.company_id = 1 AND r.delete_flag = &apos;N&apos; AND rd.delete_flag = &apos;N&apos; and r.chat_mongo_id = &apos;123456&apos;</span><br></pre></td></tr></table></figure></p><p>参考地址:<a href="https://blog.csdn.net/qq_35548288/article/details/81771978" target="_blank" rel="noopener">https://blog.csdn.net/qq_35548288/article/details/81771978</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《高性能MySQL》之EXPLAIN</title>
      <link href="/2020/02/02/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B%E4%B9%8BEXPLAIN/"/>
      <url>/2020/02/02/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B%E4%B9%8BEXPLAIN/</url>
      
        <content type="html"><![CDATA[<h2><span id="使用explain关键字获取sql执行性能">使用explain关键字获取sql执行性能</span></h2><a id="more"></a><p>语法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from table</span><br></pre></td></tr></table></figure></p><p>explain 中的列<br>expain出来的信息有10列，<br>分别是id,select_type,table、type,partitions,possible_keys,key,key_len,ref,rows,Extra,下面对这些字段出现的可能进行解释：</p><h3><span id="1id">1.ID</span></h3><p>SQL执行的顺序的标识,SQL从大到小的执行</p><p>ID相同时，执行顺序由上至下<br>如果是子查询，ID的序号会递增，ID值越大优先级越高，越先被执行<br>ID如果相同，可以认为是一组，从上往下顺序执行；在所有组中，ID值越大，优先级越高，越先执行。</p><h3><span id="2select_type">2.select_type</span></h3><p>示查询中每个select子句的类型</p><p>SIMPLE：简单的SELECT，不实用UNION或者子查询。</p><p>PRIMARY：最外层SELECT。</p><p>UNION：第二层，在SELECT之后使用了UNION。</p><p>DEPENDENT UNION：UNION语句中的第二个SELECT，依赖于外部子查询。</p><p>UNION RESULT：UNION的结果。</p><p>SUBQUERY：子查询中的第一个SELECT。</p><p>DEPENDENT SUBQUERY：子查询中的第一个SELECT，取决于外面的查询。</p><p>DERIVED：导出表的SELECT（FROM子句的子查询）</p><p>MATERIALIZED：物化子查询</p><p>UNCACHEABLE SUBQUERY：无法缓存结果的子查询，必须为外部查询的每一行重新计算</p><p>UNCACHEABLE UNION：UNION 属于不可缓存的子查询的第二个或后一个选择</p><h3><span id="3table">3.table</span></h3><p>输出行引用的表的名称。这也可以是以下值之一：</p><p>&lt;unionM,N,…&gt;：该行指的是id值为M和id值为N的并集。</p><p><derivedn>：该行是指用于与该行的派生表结果id的值 N。例如，派生表可以来自FROM子句中的子查询</derivedn></p><p><subqueryn>：该行指的是id 值为的行的具体化子查询的结果N</subqueryn></p><h3><span id="4type">4.type</span></h3><p>表示MySQL在表中找到所需行的方式，又称“访问类型”。</p><p>常用的类型有： NULL, system, const, eq_ref, ref, range, index, ALL（从左到右，性能从差到好）<br>以下列表描述了从最佳类型到最差类型的连接类型</p><h4><span id="1null">(1)NULL</span></h4><p>MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。</p><h4><span id="2system">(2)system</span></h4><p>该表只有一行（如：系统表）。这是const连接类型的特例</p><h4><span id="3const">(3)const</span></h4><p>该表最多只有一个匹配行，在查询开头读取。因为只有一行，所以优化器的其余部分可以将此行中列的值视为常量。 const表非常快，因为它们只读一次。</p><p>获取单个文章详细信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT post_title,post_content,post_date FROM wp_posts WHERE ID = 1</span><br></pre></td></tr></table></figure></p><p>查询指定分类所有文章:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">EXPLAIN SELECT u.`user_nicename`,p.`ID`,p.`post_title`,p.`post_content`,p.`post_date`,p.`post_excerpt`,term.`name`,relation.`term_taxonomy_id`,term.`name` FROM wp_users AS u </span><br><span class="line">LEFT JOIN wp_posts p ON(u.`ID` = p.`post_author`) </span><br><span class="line">LEFT JOIN wp_term_relationships AS relation ON(p.`ID` = relation.`object_id`)</span><br><span class="line">LEFT JOIN wp_term_taxonomy AS taxonomy ON(relation.`term_taxonomy_id` = taxonomy.`term_taxonomy_id`)</span><br><span class="line">LEFT JOIN wp_terms AS term ON(taxonomy.`term_id` = term.`term_id`)</span><br><span class="line">WHERE relation.`term_taxonomy_id` = 2</span><br><span class="line">ORDER BY p.`post_date`</span><br></pre></td></tr></table></figure><h4><span id="4eq_ref">(4)eq_ref</span></h4><p>对于前面表格中的每个行组合，从该表中读取一行。除了 system和 const类型之外，这是最好的连接类型。当连接使用索引的所有部分且索引是 索引PRIMARY KEY或UNIQUE NOT NULL索引时使用它。</p><p>获取所有文章分类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">term.`term_id`,term.`name` FROM wp_term_taxonomy AS taxonomy LEFT JOIN</span><br><span class="line">wp_terms AS term ON(term.`term_id` = taxonomy.`term_id`)</span><br><span class="line">WHERE</span><br><span class="line">taxonomy.`taxonomy` = &apos;category&apos;</span><br></pre></td></tr></table></figure></p><h4><span id="5ref">(5)ref</span></h4><p>表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值。</p><p>获取指定用户所有文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT</span><br><span class="line">u.display_name,u.user_nicename,p.ID,p.post_title,p.post_content,p.post_date,p.post_modified,p.post_date,p.post_status,p.comment_count</span><br><span class="line">FROM wp_users AS u INNER JOIN wp_posts AS p ON(u.ID=p.post_author) </span><br><span class="line">WHERE p.post_status = &quot;publish&quot;</span><br><span class="line">AND u.user_nicename = &apos;youcongtech&apos;</span><br><span class="line">ORDER BY p.post_modified DESC LIMIT 0,10</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT p.`ID`,p.`post_title`,p.`post_content` FROM wp_posts AS p  WHERE p.`post_author` IN(SELECT u.`ID` FROM wp_users AS u WHERE u.`ID` = 1);</span><br></pre></td></tr></table></figure><h4><span id="6fulltext">(6)fulltext</span></h4><p>使用FULLTEXT 索引执行连接。</p><p>添加FULLTEXT:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE wp_posts ADD FULLTEXT INDEX ngram_idx(post_title) WITH PARSER ngram;</span><br></pre></td></tr></table></figure></p><p>全文检索:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM wp_posts WHERE MATCH(post_title) AGAINST(&apos;HustOJ%&apos; IN BOOLEAN MODE);</span><br></pre></td></tr></table></figure></p><h4><span id="7ref_or_null">(7)ref_or_null</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM ref_table WHERE key_column IS NULL;</span><br></pre></td></tr></table></figure><h4><span id="8range">(8)range</span></h4><p>仅检索给定范围内的行，使用索引选择行的key 输出行中的列指示使用哪个索引。将key_len包含已使用的时间最长的关键部分。该ref列 NULL适用于此类型。<br>range当一个键柱使用任何的相比于恒定可使用 =， &lt;&gt;， &gt;， &gt;=， &lt;， &lt;=， IS NULL， &lt;=&gt;， BETWEEN， LIKE，或 IN()：</p><p>根据作者ID查询指定范围内的文章:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM wp_posts AS p WHERE p.`post_author` = 1 AND p.`ID` IN(1,2)</span><br></pre></td></tr></table></figure></p><h4><span id="9index">(9)index</span></h4><p>该index联接类型是一样的 ALL，只是索引树被扫描。这种情况有两种：</p><p>a.如果索引是查询的覆盖索引，并且可用于满足表中所需的所有数据，则仅扫描索引树。在这种情况下，Extra专栏说 Using index。仅索引扫描通常比ALL索引的大小通常小于表数据更快 。</p><p>b.使用索引中的读取执行全表扫描，以按索引顺序查找数据行。 Uses index没有出现在 Extra列中。当查询仅使用属于单个索引的列时，MySQL可以使用此连接类型。</p><p>获取某一段时间发布的文章总数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT COUNT(p.`ID`) FROM wp_posts AS p WHERE p.post_status = &apos;publish&apos; AND p.`post_date` BETWEEN &apos;2019-08-11 00:00:00&apos; AND &apos;2019-12-15 23:59:59&apos;</span><br></pre></td></tr></table></figure><h4><span id="10all">(10)ALL</span></h4><p>对前面表格中的每个行组合进行全表扫描。如果表是第一个未标记的表 const，通常不好，并且在所有其他情况下通常 非常糟糕。通常，您可以ALL通过添加基于常量值或早期表中的列值从表中启用行检索的索引来避免。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT p.`post_title`,p.`post_content` FROM wp_posts AS p</span><br></pre></td></tr></table></figure><h3><span id="5possible_keys">5.possible_keys</span></h3><p>该possible_keys列指示MySQL可以选择在此表中查找行的索引，指出MySQL能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用</p><p>该列完全独立于EXPLAIN输出所示的表的次序。这意味着在possible_keys中的某些键实际上不能按生成的表次序使用。<br>如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查WHERE子句看是否它引用某些列或适合索引的列来提高你的查询性能。如果是这样，创造一个适当的索引并且再次用EXPLAIN检查查询</p><h3><span id="6key">6.Key</span></h3><p>key列显示MySQL实际决定使用的键（索引）</p><p>如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX。</p><h3><span id="7key_len">7.key_len</span></h3><p>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度（key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）</p><p>不损失精确性的情况下，长度越短越好</p><h3><span id="8ref">8.ref</span></h3><p>表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</p><h3><span id="9rows">9.rows</span></h3><p>表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数</p><h3><span id="10extra">10.Extra</span></h3><p>该Extra列 EXPLAIN输出包含MySQL解决查询的额外信息。以下列表说明了此列中可能出现的值。每个项目还指示JSON格式的输出哪个属性显示Extra值。对于其中一些，有一个特定的属性。其他显示为message 属性的文本</p><h3><span id="11partitions扩展">11.partitions（扩展）</span></h3><p>记录将与查询匹配的分区。仅在使用PARTITIONS关键字时才显示此列 。非分区表显示null</p><p>参考资料链接:<br><a href="https://segmentfault.com/a/1190000017751405" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017751405</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《高性能MySQL》之MySQL查询性能优化</title>
      <link href="/2020/02/02/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B%E4%B9%8BMySQL%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2020/02/02/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B%E4%B9%8BMySQL%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2><span id="为什么查询会慢">为什么查询会慢?</span></h2><p>响应时间过长。如果把查询看做是一个任务，那么它由一系列子任务组成，每个子任务都会消耗一定的时间。如果要优化查询，实际上优化其子任务，要么消除其中一些子任务，要么减少子任务的执行次数，要么让子任务运行得更快。<br><a id="more"></a><br>查询的生命周期:</p><p>客户端-&gt;服务器-&gt;服务器上解析-&gt;生成执行计划-&gt;执行-&gt;返回结果给客户端。</p><p>其中”执行”包括大量为了检索数据到存储引擎的调用以及调用后的数据处理，包括排序、分组等。</p><h2><span id="慢查询优化数据访问">慢查询:优化数据访问</span></h2><p>查询性能低下最基本的原因:访问的数据太多。</p><p>低效查询分析:</p><p>1.确认应用程序是否在检索大量超过需要的数据;</p><p>2.确认MySQL服务器层是否在分析大量超过需要的数据行;</p><h3><span id="是否向数据库请求了不需要的数据">是否向数据库请求了不需要的数据</span></h3><p>典型案例(主要体现为了省事，使用SELECT *):</p><ul><li>查询不需要的记录</li><li>多表关联时返回全部列</li><li>总是取出全部列</li><li>重复查询相同数据</li></ul><h3><span id="mysql是否在扫描额外的记录">MySQL是否在扫描额外的记录</span></h3><p>在确定查询只返回需要的数据以后，接下来看查询为了返回结果是否扫描过多的数据。对于MySQL,最简单的衡量查询开销的三个指标:</p><h4><span id="响应时间">响应时间</span></h4><p>响应时间包含服务时间和排队时间。</p><p>服务时间是指数据库处理这个查询真正花了多长时间。</p><p>排队时间是指服务器因为等待某些资源而没有真正执行查询的时间，可能等I/O操作完成，也可能等待行锁。</p><h4><span id="扫描的行数和返回的列数">扫描的行数和返回的列数</span></h4><p>在一定程度上能够说明该查询找出需要的数据的效率高不高。<br>理想情况下扫描行数和返回的行数应该是相同的。</p><h4><span id="扫描的行数和访问类型">扫描的行数和访问类型</span></h4><p>访问类型主要指全表扫描、索引扫描、范围扫描、唯一索引查询、常数引用。</p><p>一般MySQL能够使用如下三种方式应用WHERE条件，从好到坏依次为:</p><ul><li>在索引中使用WHERE条件来过滤不匹配的记录。这是存储引擎层完成的。</li><li>使用索引覆盖扫描(在Extra列中出现了Using index)来返回记录，直接从索引中过滤不需要的记录并返回命中的结果。这是在MySQL服务器层完成的，但无须再回表查询记录。</li><li>从数据表中返回数据，然后过滤不满足条件的记录(在Extra列中出现Using Where)。这在MySQL服务器层完成，MySQL需要先从数据表读出记录然后过滤。</li></ul><p>如果发现查询需要扫描大量的数据但只返回少数的行，那么通常可以尝试下面的技巧去优化它:</p><ul><li>使用索引覆盖扫描，把所有需要用的列都放在索引中，这样存储引擎无须回表获取对应行就可以返回结果了。</li><li>改变库表结构。例如使用单独的汇总表。</li><li>重写这个复杂查询，让MySQL优化器能够以更优化的方式执行这个查询。</li></ul><h3><span id="重构查询的方式">重构查询的方式</span></h3><h4><span id="复杂查询拆分多个简单查询">复杂查询拆分多个简单查询</span></h4><h4><span id="切分查询">切分查询</span></h4><p>将大查询拆分为小查询，每个查询功能完全一样，只完成一小部分，每次只返回一小部分查询结果。</p><h4><span id="分解关联查询">分解关联查询</span></h4><p>用分解关联查询的方式重构查询有如下优势:</p><ul><li>让缓存效率更高。</li><li>将查询分解后，执行单个查询可以减少锁的竞争。</li><li>在应用层做关联，可以更容易对数据库进行拆分，更容易做到高性能和可扩展。</li><li>查询本身效率也可能会有所提升。</li><li>可以减少冗余记录的查询。</li><li>相当于在应用中实现了哈希关联，而不是使用MySQL的嵌套循环关联。</li><li><h3><span id="查询执行的基础">查询执行的基础</span></h3>1.客户端发送一条查询给服务器。</li></ul><p>2.服务器先检查查询缓存，如果命中缓存，则立刻返回存储在缓存中的结果。否则进入下一阶段。</p><p>3.服务器端进行SQL解析、预处理，再由优化器生成对应的执行计划。</p><p>4.MySQL根据优化器生成的执行计划，调用存储引擎的API来执行查询。</p><p>5.将结果返回给客户端。</p><h3><span id="优化特定类型的查询">优化特定类型的查询</span></h3><h4><span id="优化count查询">优化COUNT()查询</span></h4><h4><span id="优化关联查询">优化关联查询</span></h4><ul><li>确保ON或USING子句中的列上有索引。</li><li>确保任何GROUP BY和ORDER BY 中的表达式只涉及到一个表中的列，这样MySQL才有可能使用索引来优化这个过程。</li><li>当升级MySQL的时候需要注意:关联语法、运算符优先级等其他可能会发生变化的地方。因为以前是普通关联的地方可能会变成笛卡尔积，不同类型的关联可能会生成不同的结果等。</li></ul><h4><span id="优化子查询">优化子查询</span></h4><p>对于子查询的优化，尽可能使用关联查询代替。</p><h4><span id="优化group-by-和-order-by">优化GROUP BY 和 ORDER BY</span></h4><p>最有效的优化办法是使用索引。</p><p>当无法使用索引时，可以使用临时表或者文件排序来做分组。</p><p>另外如果需要对关联查询做分组，并且是按照查找表中的某个列进行分组，那么通常采用查找表的标识列分组的效率会比其他列更高。</p><h4><span id="优化limit-分页">优化LIMIT 分页</span></h4><p>在系统中需要进行分页操作的时候，我们通常会使用LIMIT 加上偏移量的办法实现，同时加上合适的ORDER BY子句。如果有对应的索引，通常效率会不错，否则，MySQL需要做大量的文件排序操作。</p><h4><span id="优化union查询">优化UNION查询</span></h4><h4><span id="静态查询分析">静态查询分析</span></h4><h4><span id="使用用户自定义变量">使用用户自定义变量</span></h4><p>那些场景不能使用用户自定义变量:</p><ul><li>使用自定义变量的查询，无法使用查询缓存;</li><li>不能再使用常量或者标识符的地方使用自定义变量，例如表名、列名和LIMIT子句中。</li><li>用户自定义变量的生命周期是在一个连接中有效，所以不能用它们来做连接间的通信。</li><li>如果使用连接池或者持久化连接，自定义变量可能让看起来毫无关系的代码发生交互。</li><li>在5.0之前的版本，是大小写敏感的，所以要注意代码在不同MySQL版本间的兼容性问题。</li><li>不能显式地声明自定义变量的类型。确定未定义变量的具体类型的时机在不同MySQL版本中也可能不一样。如果你希望变量是整数类型，那么最好在初始化的时候就赋值为0，如果希望是浮点型则赋值为0.0，如果希望是字符串则赋值为’’，用户自定义变量的类型在赋值的时候会改变。MySQL的用户自定义变量是一个动态类型。</li><li>MySQL优化器在某项些场景下可能会将这些变量优化掉，这可能导致代码不按预想的方式运行。</li><li>赋值的顺序和赋值的时间点并不总是固定的，这依赖于优化器的决定，实际情况可能很让人困惑，后面我们将看到这一点。</li><li>赋值符号:=的优先级非常低，所以需要注意，赋值表达式应该使用明确的括号。</li><li>使用未定义变量不会产生任何语法错误，如果没有意识到这一点，非常容易犯错。</li></ul><p>用户自定义变量的用法:</p><ul><li>查询运行时计算总数和平均值。</li><li>模拟GROUP BY语句中的函数FIRST()和LAST()。</li><li>对大量数据做一些数据计算。</li><li>计算一个大表的MD5散列值。</li><li>编写一个样本处理函数，当样本中的数值超过某个边界值的时候将其变为0。</li><li>模拟读/写游标。</li><li>在SHOW语句的WHERE子句中加入变量值。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《学会提问》阅读笔记</title>
      <link href="/2020/02/02/%E3%80%8A%E5%AD%A6%E4%BC%9A%E6%8F%90%E9%97%AE%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/02/02/%E3%80%8A%E5%AD%A6%E4%BC%9A%E6%8F%90%E9%97%AE%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-正确提问的好处和方法">一、正确提问的好处和方法</span></h2><a id="more"></a><h3><span id="1我们生活的这个世界是嘈杂-混乱的">1.我们生活的这个世界是嘈杂、混乱的</span></h3><h3><span id="2专家说得再动听也无法替我们救急">2.专家说得再动听，也无法替我们救急</span></h3><h3><span id="3我们有必要依靠自己的大脑">3.我们有必要依靠自己的大脑</span></h3><h3><span id="4激发你的批判性思维">4.激发你的批判性思维</span></h3><h3><span id="5两种思维方式海绵式思维和淘金式思维">5.两种思维方式:海绵式思维和淘金式思维</span></h3><h3><span id="6弱势批判性思维和强势批判性思维">6.弱势批判性思维和强势批判性思维</span></h3><h3><span id="7价值观决定人与人之间的互动">7.价值观决定人与人之间的互动</span></h3><h3><span id="8让对话进行下去">8.让对话进行下去</span></h3><h2><span id="二-干扰批判性思维的障碍">二、干扰批判性思维的障碍</span></h2><h3><span id="1正确提问带给人的不快">1.正确提问带给人的不快</span></h3><h3><span id="2思考过快">2.思考过快</span></h3><h3><span id="3刻板形象">3.刻板形象</span></h3><h3><span id="4这些思维习惯会背叛我们">4.这些思维习惯会背叛我们</span></h3><h3><span id="5自我中心">5.自我中心</span></h3><h3><span id="6一厢情愿批判性思维最大的障碍">6.一厢情愿–批判性思维最大的障碍</span></h3><h2><span id="三-论题和结论是什么">三、论题和结论是什么</span></h2><h3><span id="1论题的种类">1.论题的种类</span></h3><h3><span id="2寻找论题">2.寻找论题</span></h3><h3><span id="3寻找作者或演说者的结论">3.寻找作者或演说者的结论</span></h3><h3><span id="4发现之旅的几点线索怎样才能找到结论">4.发现之旅的几点线索:怎样才能找到结论</span></h3><h3><span id="5批判性思维与你的书面和口头表达能力">5.批判性思维与你的书面和口头表达能力</span></h3><h2><span id="四-理由是什么">四、理由是什么</span></h2><h3><span id="1开始质疑的过程">1.开始质疑的过程</span></h3><h3><span id="2找到理由有提示词来帮忙">2.找到理由有提示词来帮忙</span></h3><h3><span id="3理由的类型">3.理由的类型</span></h3><h3><span id="4让理由和结论一目了然">4.让理由和结论一目了然</span></h3><h3><span id="5使用这个关键问题">5.使用这个关键问题</span></h3><h3><span id="6批判性思维与你的书面和口头表达能力">6.批判性思维与你的书面和口头表达能力</span></h3><h2><span id="五-哪些词语意思不明确">五、哪些词语意思不明确</span></h2><h3><span id="1词语的多义性和易混淆性">1.词语的多义性和易混淆性</span></h3><h3><span id="2找准关键词和短语">2.找准关键词和短语</span></h3><h3><span id="3检查有没有歧义">3.检查有没有歧义</span></h3><h3><span id="4使用这个关键问题">4.使用这个关键问题</span></h3><h3><span id="5判定歧义">5.判定歧义</span></h3><h3><span id="6语境与歧义">6.语境与歧义</span></h3><h3><span id="7使用这个关键问题">7.使用这个关键问题</span></h3><h3><span id="8歧义-定义和字典">8.歧义、定义和字典</span></h3><h3><span id="9歧义与附加感情色彩的语言">9.歧义与附加感情色彩的语言</span></h3><h3><span id="10谁想说服你谁就要负责解释清楚">10.谁想说服你，谁就要负责解释清楚</span></h3><h3><span id="11歧义与你的书面和口头表达能力">11.歧义与你的书面和口头表达能力</span></h3><h2><span id="六-价值观假设与描述性假设">六、价值观假设与描述性假设</span></h2><h3><span id="1到哪儿去找假设">1.到哪儿去找假设</span></h3><h3><span id="2价值观冲突和价值观假设">2.价值观冲突和价值观假设</span></h3><h3><span id="3从价值观到价值观假设">3.从价值观到价值观假设</span></h3><h3><span id="4典型的价值观冲突">4.典型的价值观冲突</span></h3><h3><span id="5将立论者的背景作为寻找价值观假设的一个线索">5.将立论者的背景作为寻找价值观假设的一个线索</span></h3><h3><span id="6将可能发生的后果作为寻找价值观假设的重要线索">6.将可能发生的后果作为寻找价值观假设的重要线索</span></h3><h3><span id="7找到价值观假设的其他提示">7.找到价值观假设的其他提示</span></h3><h3><span id="8了解其他人价值倾向的价值所在">8.了解其他人价值倾向的价值所在</span></h3><h3><span id="9使用这个关键问题">9.使用这个关键问题</span></h3><h3><span id="10价值观与相对性">10.价值观与相对性</span></h3><h3><span id="11找出并评价描述性假设">11.找出并评价描述性假设</span></h3><h3><span id="12描述性假设举例说明">12.描述性假设举例说明</span></h3><h3><span id="13常见的描述性假设">13.常见的描述性假设</span></h3><h3><span id="14定位描述性假设的一些线索">14.定位描述性假设的一些线索</span></h3><h3><span id="15避免分析无意义的假设">15.避免分析无意义的假设</span></h3><h3><span id="16假设与你的书面和口头表达能力">16.假设与你的书面和口头表达能力</span></h3><h2><span id="七-论证中有没有谬误">七、论证中有没有谬误</span></h2><h3><span id="1用质疑的方法找出论证中的谬误">1.用质疑的方法找出论证中的谬误</span></h3><h3><span id="2让我们从评价各种假设出发">2.让我们从评价各种假设出发</span></h3><h3><span id="3发现其他常见的论证谬误">3.发现其他常见的论证谬误</span></h3><h3><span id="4找出分散注意力的干扰项">4.找出分散注意力的干扰项</span></h3><h3><span id="5愚弄人的循环论证">5.愚弄人的循环论证</span></h3><h3><span id="6利用以下这个关键问题">6.利用以下这个关键问题</span></h3><h3><span id="7推理错误小结">7.推理错误小结</span></h3><h3><span id="8扩展关于谬误的知识">8.扩展关于谬误的知识</span></h3><h3><span id="9谬误与你的书面和口头交流能力">9.谬误与你的书面和口头交流能力</span></h3><h2><span id="八-证据的效力如何直觉-个人经历-典型案例-当事人证言和专家意见">八、证据的效力如何:直觉、个人经历、典型案例、当事人证言和专家意见</span></h2><h3><span id="1我们需要证据">1.我们需要证据</span></h3><h3><span id="2找出事实断言">2.找出事实断言</span></h3><h3><span id="3证据的来源">3.证据的来源</span></h3><h3><span id="4将直觉作为证据">4.将直觉作为证据</span></h3><h3><span id="5个人经历作为证据">5.个人经历作为证据</span></h3><h3><span id="6将典型案例作为证据">6.将典型案例作为证据</span></h3><h3><span id="7将当事人证言作为证据">7.将当事人证言作为证据</span></h3><h3><span id="8将专家意见作为证据">8.将专家意见作为证据</span></h3><h3><span id="9使用这个关键问题">9.使用这个关键问题</span></h3><h3><span id="10你的学术写作与证据">10.你的学术写作与证据</span></h3><h2><span id="九-证据的效力如何个人观察-研究报告和类比">九、证据的效力如何:个人观察、研究报告和类比</span></h2><h3><span id="1个人观察作为证据">1.个人观察作为证据</span></h3><h3><span id="2研究报告作为证据">2.研究报告作为证据</span></h3><h3><span id="3从研究的样本来概括">3.从研究的样本来概括</span></h3><h3><span id="4从研究的测量方法来概括">4.从研究的测量方法来概括</span></h3><h3><span id="5片面的调查和问卷">5.片面的调查和问卷</span></h3><h3><span id="6将类比作为证据">6.将类比作为证据</span></h3><h3><span id="7专家观点什么时候最可信">7.专家观点什么时候最可信</span></h3><h2><span id="十-有没有替代原因">十、有没有替代原因</span></h2><h3><span id="1什么时候应该去寻找替代原因">1.什么时候应该去寻找替代原因</span></h3><h3><span id="2替代原因的说服力">2.替代原因的说服力</span></h3><h3><span id="3找到替代原因">3.找到替代原因</span></h3><h3><span id="4唯一的原因还是原因之一">4.唯一的原因，还是原因之一</span></h3><h3><span id="5多种视角可作为寻找替代原因的指导">5.多种视角可作为寻找替代原因的指导</span></h3><h3><span id="6组间差异的替代原因">6.组间差异的替代原因</span></h3><h3><span id="7相关性不能证明因果关系">7.相关性不能证明因果关系</span></h3><h3><span id="8混淆在这之后与因为这个之间的关系">8.混淆”在这之后”与”因为这个”之间的关系</span></h3><h3><span id="9很多事件并非只有一种解释">9.很多事件并非只有一种解释</span></h3><h3><span id="10评价替代原因">10.评价替代原因</span></h3><h3><span id="11替代原因和你自己的表达和交流">11.替代原因和你自己的表达和交流</span></h3><h3><span id="12发掘潜在的原因">12.发掘潜在的原因</span></h3><h2><span id="十一-数据有没有欺骗性">十一、数据有没有欺骗性</span></h2><h3><span id="1不知来历和带有偏见的数据">1.不知来历和带有偏见的数据</span></h3><h3><span id="2令人困惑的平均值">2.令人困惑的平均值</span></h3><h3><span id="3把一件事的结论用来证明另一件事">3.把一件事的结论用来证明另一件事</span></h3><h3><span id="4通过省略信息欺骗">4.通过省略信息欺骗</span></h3><h3><span id="5-在自己的写作中使用统计数字">5、在自己的写作中使用统计数字</span></h3><h2><span id="十二-有什么重要信息被省略">十二、有什么重要信息被省略</span></h2><h3><span id="1找到省略掉的信息有好处">1.找到省略掉的信息有好处</span></h3><h3><span id="2不完整的论证在所难免">2.不完整的论证在所难免</span></h3><h3><span id="3可以帮你识别省略信息的问题">3.可以帮你识别省略信息的问题</span></h3><h3><span id="4但是我们需要知道确切的数字">4.但是我们需要知道确切的数字</span></h3><h3><span id="5考虑是否有负面效果">5.考虑是否有负面效果</span></h3><h3><span id="6省略的信息还是找不到">6.省略的信息还是找不到</span></h3><h2><span id="十三-能得出什么合理的结论">十三、能得出什么合理的结论</span></h2><h3><span id="1二分式思维方法妨碍我们考虑多种可能的结论">1.二分式思维方法:妨碍我们考虑多种可能的结论</span></h3><h3><span id="2两面还是多面">2.两面还是多面</span></h3><h3><span id="3寻找多个结论">3.寻找多个结论</span></h3><h3><span id="4条件句的衍生能力">4.条件句的衍生能力</span></h3><h3><span id="5备选的解决办法作为结论">5.备选的解决办法作为结论</span></h3><h3><span id="6让思维更灵活">6.让思维更灵活</span></h3>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之装饰模式</title>
      <link href="/2020/02/01/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/01/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-装饰模式的定义">一、装饰模式的定义</span></h2><p>装饰模式是一种笔记常见的模式，其定义如下:<br>动态地给一个对象添加一些额外的职责。就增加功能来说，装饰模式相比生成子类更为灵活。<br><a id="more"></a></p><h3><span id="装饰模式通用类说明">装饰模式通用类说明</span></h3><h4><span id="component抽象构件">Component抽象构件</span></h4><p>Component是一个接口或者是抽象类，就是定义我们最核心的对象。也就是最原始的对象。</p><p><strong>注意:</strong><br>在装饰模式中，必然有一个最基本、最核心、最原始的接口或抽象类充当Component抽象构件。</p><h4><span id="concretecomponent具体构件">ConcreteComponent具体构件</span></h4><p>ConcreteComponent是最核心、最原始、最基本的接口或抽象类的实现，你要装饰的就是它。</p><h4><span id="decorator装饰角色">Decorator装饰角色</span></h4><p>一般是一个抽象类，做什么用呢？实现接口或者抽象方法，它里面可不一定有抽象的方法，在它的属性里必然有一个private变量指向Component抽象构件。</p><h4><span id="具体装饰角色">具体装饰角色</span></h4><p>ConcreteDecoratorA和ConcreteDecoratorB是两个具体的装饰类，你要把最核心的、最原始的、最基本的东西装饰成其他东西。</p><p><strong>注意:</strong><br>原始方法和装饰方法的执行顺序在具体的装饰类是固定的，可以通过方法重载实现多种执行顺序。</p><h2><span id="二-装饰模式应用">二、装饰模式应用</span></h2><h3><span id="1装饰模式的优点">1.装饰模式的优点</span></h3><h4><span id="a装饰类和被装饰类可以独立发展而不会相互耦合-换句话说component类无须知道decorator类decorator类是从外部来扩展component类的功能而decorator也不用知道具体的构件">a.装饰类和被装饰类可以独立发展，而不会相互耦合。换句话说，Component类无须知道Decorator类，Decorator类是从外部来扩展Component类的功能，而Decorator也不用知道具体的构件。</span></h4><h4><span id="b装饰模式是继承关系的一个替代方案-我们看装饰类decorator不管装饰多少层返回的对象还是component实现的还是is-a的关系">b.装饰模式是继承关系的一个替代方案。我们看装饰类Decorator，不管装饰多少层，返回的对象还是Component，实现的还是is-a的关系。</span></h4><h4><span id="c装饰模式可以动态地扩展一个实现类的功能">c.装饰模式可以动态地扩展一个实现类的功能。</span></h4><h3><span id="2装饰模式的缺点">2.装饰模式的缺点</span></h3><h4><span id="如果装饰类的数量过高会增加系统的复杂性">如果装饰类的数量过高，会增加系统的复杂性。</span></h4><h3><span id="3装饰模式的使用场景">3.装饰模式的使用场景</span></h3><h4><span id="a需要扩展一个类的功能或给一个类增加附加功能">a.需要扩展一个类的功能，或给一个类增加附加功能。</span></h4><h4><span id="b需要动态给一个对象增加功能这些功能可以再动态地撤销">b.需要动态给一个对象增加功能，这些功能可以再动态地撤销。</span></h4><h4><span id="c需要为一批的兄弟类进行改装或加装功能">c.需要为一批的兄弟类进行改装或加装功能。</span></h4><h2><span id="三-最佳实践">三、最佳实践</span></h2><p>装饰模式是对继承的有力补充。你要知道继承并不是万能的，继承可以解决实际的问题，但是在项目中你要考虑诸如易维护、易扩展、易复用等，而且在一些情况下，你要是用继承就会增加很多子类，灵活性非常差，也就是说装饰模式可以替代继承，解决类膨胀问题。</p><p>代码例子:<a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/Decorator" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/Decorator</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《金字塔原理》阅读笔记</title>
      <link href="/2020/01/31/%E3%80%8A%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/01/31/%E3%80%8A%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1><span id="表达的逻辑">表达的逻辑</span></h1><h2><span id="一-为什么要用金字塔结构">一、为什么要用金字塔结构</span></h2><a id="more"></a><h3><span id="1归类分组将思想组织成金字塔">1.归类分组，将思想组织成金字塔</span></h3><h3><span id="2自上而下表达结论先行">2.自上而下表达，结论先行</span></h3><h3><span id="3自下而上思考总结概况">3.自下而上思考，总结概况</span></h3><h2><span id="二-金字塔内部的结构">二、金字塔内部的结构</span></h2><h3><span id="1纵向关系">1.纵向关系</span></h3><h3><span id="2横向关系">2.横向关系</span></h3><h3><span id="3序言的结构">3.序言的结构</span></h3><h2><span id="三-如何构建金字塔">三、如何构建金字塔</span></h2><h3><span id="1自上而下法">1.自上而下法</span></h3><h3><span id="2自下而上法">2.自下而上法</span></h3><h3><span id="3初学者注意事项">3.初学者注意事项</span></h3><h2><span id="四-序言的具体写法">四、序言的具体写法</span></h2><h3><span id="1序言的讲故事结构">1.序言的讲故事结构</span></h3><h3><span id="2序言的常见模式">2.序言的常见模式</span></h3><h3><span id="3序言的常见模式以咨询为例">3.序言的常见模式–以咨询为例</span></h3><h2><span id="五-演绎推理与归纳推理">五、演绎推理与归纳推理</span></h2><h3><span id="1演绎推理">1.演绎推理</span></h3><h3><span id="2归纳推理">2.归纳推理</span></h3><h3><span id="3演绎推理与归纳推理的区别">3.演绎推理与归纳推理的区别</span></h3><h1><span id="思考的逻辑">思考的逻辑</span></h1><h2><span id="一-应用逻辑顺序">一、应用逻辑顺序</span></h2><h3><span id="1时间顺序">1.时间顺序</span></h3><h3><span id="2结构顺序">2.结构顺序</span></h3><h3><span id="3程度顺序">3.程度顺序</span></h3><h2><span id="二-概括各组思想">二、概括各组思想</span></h2><h3><span id="1总结句避免使用缺乏思想的句子">1.总结句避免使用”缺乏思想”的句子</span></h3><h3><span id="2总结句要说明行动产生的结果目标">2.总结句要说明行动产生的结果/目标</span></h3><h3><span id="3找出各结论之间的共性">3.找出各结论之间的共性</span></h3><h1><span id="解决问题的逻辑">解决问题的逻辑</span></h1><h2><span id="一-界定问题">一、界定问题</span></h2><h3><span id="1界定问题的框架">1.界定问题的框架</span></h3><h3><span id="2展开问题的各要素">2.展开问题的各要素</span></h3><h3><span id="3发掘读者的疑问">3.发掘读者的疑问</span></h3><h3><span id="4开始写序言">4.开始写序言</span></h3><h3><span id="5实战案例">5.实战案例</span></h3><h2><span id="二-结构化分析问题">二、结构化分析问题</span></h2><h3><span id="1从信息资料入手">1.从信息资料入手</span></h3><h3><span id="2设计诊断框架">2.设计诊断框架</span></h3><h3><span id="3使用诊断框架">3.使用诊断框架</span></h3><h3><span id="4建立逻辑树">4.建立逻辑树</span></h3><h3><span id="5是非问题分析">5.是非问题分析</span></h3><h1><span id="演示的逻辑">演示的逻辑</span></h1><h2><span id="一-在书面上呈现金字塔">一、在书面上呈现金字塔</span></h2><h3><span id="1突出显示文章的框架结构">1.突出显示文章的框架结构</span></h3><h3><span id="2上下文之间要有过渡">2.上下文之间要有过渡</span></h3><h2><span id="二-在ppt演示文稿中呈现金字塔">二、在PPT演示文稿中呈现金字塔</span></h2><h3><span id="1设计文字ppt幻灯片">1.设计文字PPT幻灯片</span></h3><h3><span id="2设计图表ppt幻灯片">2.设计图表PPT幻灯片</span></h3><h3><span id="3故事梗概">3.故事梗概</span></h3><h2><span id="三-在字里行间呈现金字塔">三、在字里行间呈现金字塔</span></h2><h3><span id="1画脑图在大脑中画图像">1.画脑图(在大脑中画图像)</span></h3><h3><span id="2把图像复制成文字">2.把图像复制成文字</span></h3>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《游戏改变世界》阅读笔记</title>
      <link href="/2020/01/29/%E3%80%8A%E6%B8%B8%E6%88%8F%E6%94%B9%E5%8F%98%E4%B8%96%E7%95%8C%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/01/29/%E3%80%8A%E6%B8%B8%E6%88%8F%E6%94%B9%E5%8F%98%E4%B8%96%E7%95%8C%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1><span id="游戏通往未来的线索">游戏，通往未来的线索</span></h1><h2><span id="一-游戏化互联时代的重要趋势">一、游戏化，互联时代的重要趋势</span></h2><a id="more"></a><h3><span id="1提升人的幸福感">1.提升人的幸福感</span></h3><h3><span id="2构建更美好的现实社会">2.构建更美好的现实社会</span></h3><h2><span id="二-游戏化的4大目标">二、游戏化的4大目标</span></h2><h3><span id="1更满意的工作">1.更满意的工作</span></h3><h3><span id="2更有把握的成功">2.更有把握的成功</span></h3><h3><span id="3更强的社会联系">3.更强的社会联系</span></h3><h3><span id="4更宏大的意义">4.更宏大的意义</span></h3><h2><span id="三-游戏化的运作机制">三、游戏化的运作机制</span></h2><h3><span id="1全情投入当下游戏化的参与机制">1.全情投入当下游戏化的参与机制</span></h3><h3><span id="2实时反馈游戏化的激励机制">2.实时反馈游戏化的激励机制</span></h3><h3><span id="3和陌生人结盟创造更强大的社群游戏化的团队机制">3.和陌生人结盟，创造更强大的社群游戏化的团队机制</span></h3><h3><span id="4让幸福成为一种习惯游戏化的持续性">4.让幸福成为一种习惯游戏化的持续性</span></h3><h2><span id="四-游戏化带给互联时代的现实价值">四、游戏化带给互联时代的现实价值</span></h2><h3><span id="1可持续参与式经济">1.可持续参与式经济</span></h3><h3><span id="2伟大的人人时代">2.伟大的人人时代</span></h3><h3><span id="3认知盈余的红利">3.认知盈余的红利</span></h3><h3><span id="4超级合作者">4.超级合作者</span></h3>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《微服务设计》阅读笔记</title>
      <link href="/2020/01/28/%E3%80%8A%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/01/28/%E3%80%8A%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-微服务">一、微服务</span></h2><a id="more"></a><h3><span id="1什么是微服务">1.什么是微服务</span></h3><h4><span id="a很小专注于做好一件事情">a.很小，专注于做好一件事情</span></h4><h4><span id="b自治性">b.自治性</span></h4><h3><span id="2主要好处">2.主要好处</span></h3><h4><span id="a技术异构性">a.技术异构性</span></h4><h4><span id="b弹性">b.弹性</span></h4><h4><span id="c扩展">c.扩展</span></h4><h4><span id="d简化部署">d.简化部署</span></h4><h4><span id="e与组织结构相匹配">e.与组织结构相匹配</span></h4><h4><span id="d对可替代性的优化">d.对可替代性的优化</span></h4><h3><span id="3面向服务的架构">3.面向服务的架构</span></h3><h3><span id="4其他分解技术">4.其他分解技术</span></h3><h4><span id="a共享库">a.共享库</span></h4><h4><span id="b模块">b.模块</span></h4><h3><span id="4没有银弹">4.没有银弹</span></h3><h2><span id="二-演化式架构师">二、演化式架构师</span></h2><h3><span id="1不准确的比较">1.不准确的比较</span></h3><h3><span id="2架构师的演化视角">2.架构师的演化视角</span></h3><h3><span id="3分区">3.分区</span></h3><h3><span id="4一个原则性的方法">4.一个原则性的方法</span></h3><h4><span id="a战略目标">a.战略目标</span></h4><h4><span id="b原则">b.原则</span></h4><h4><span id="c实践">c.实践</span></h4><h4><span id="d将原则和实践相结合">d.将原则和实践相结合</span></h4><h4><span id="e真实世界的例子">e.真实世界的例子</span></h4><h3><span id="5要求的标准">5.要求的标准</span></h3><h4><span id="a监控">a.监控</span></h4><h4><span id="b接口">b.接口</span></h4><h4><span id="c架构安全性">c.架构安全性</span></h4><h3><span id="6代码治理">6.代码治理</span></h3><h4><span id="a范例">a.范例</span></h4><h4><span id="b裁剪服务代码模板">b.裁剪服务代码模板</span></h4><h3><span id="7技术债务">7.技术债务</span></h3><h3><span id="8例外管理">8.例外管理</span></h3><h3><span id="9集中治理和领导">9.集中治理和领导</span></h3><h3><span id="10建设团队">10.建设团队</span></h3><h2><span id="三-如何建模服务">三、如何建模服务</span></h2><h3><span id="1musiccorp简介">1.MusicCorp简介</span></h3><h3><span id="2什么样的服务是好服务">2.什么样的服务是好服务</span></h3><h4><span id="a松耦合">a.松耦合</span></h4><h4><span id="b高内聚">b.高内聚</span></h4><h3><span id="3限界上下文">3.限界上下文</span></h3><h4><span id="a共享的隐藏模型">a.共享的隐藏模型</span></h4><h4><span id="b模块和服务">b.模块和服务</span></h4><h4><span id="c过早划分">c.过早划分</span></h4><h3><span id="4业务功能">4.业务功能</span></h3><h3><span id="5逐步划分上下文">5.逐步划分上下文</span></h3><h3><span id="6关于业务概念的沟通">6.关于业务概念的沟通</span></h3><h3><span id="7技术边界">7.技术边界</span></h3><h2><span id="四-集成">四、集成</span></h2><h3><span id="1寻找理想的集成技术">1.寻找理想的集成技术</span></h3><h4><span id="a避免破坏性修改">a.避免破坏性修改</span></h4><h4><span id="b保证api的技术无关性">b.保证API的技术无关性</span></h4><h4><span id="c使你的服务易于消费方使用">c.使你的服务易于消费方使用</span></h4><h4><span id="d隐藏内部实现细节">d.隐藏内部实现细节</span></h4><h3><span id="2为用户创建接口">2.为用户创建接口</span></h3><h3><span id="3共享数据库">3.共享数据库</span></h3><h3><span id="4同步与异步">4.同步与异步</span></h3><h3><span id="5编排与协同">5.编排与协同</span></h3><h3><span id="6远程过程调用">6.远程过程调用</span></h3><h4><span id="a技术的耦合">a.技术的耦合</span></h4><h4><span id="b本地调用和远程调用并不相同">b.本地调用和远程调用并不相同</span></h4><h4><span id="c脆弱性">c.脆弱性</span></h4><h4><span id="drpc很糟糕吗">d.RPC很糟糕吗</span></h4><h3><span id="7rest">7.REST</span></h3><h4><span id="arest和http">a.REST和HTTP</span></h4><h4><span id="b超媒体作为程序状态的引擎">b.超媒体作为程序状态的引擎</span></h4><h4><span id="cjson-xml还是其他">c.JSON、XML还是其他</span></h4><h4><span id="d留心过多的约定">d.留心过多的约定</span></h4><h4><span id="e基于http的rest的缺点">e.基于HTTP的REST的缺点</span></h4><h3><span id="8实现基于事件的异步协作方式">8.实现基于事件的异步协作方式</span></h3><h4><span id="a技术选择">a.技术选择</span></h4><h4><span id="b异步架构的复杂性">b.异步架构的复杂性</span></h4><h3><span id="9服务即状态机">9.服务即状态机</span></h3><h3><span id="10响应式扩展">10.响应式扩展</span></h3><h3><span id="11微服务世界中的dry和代码重用的危险">11.微服务世界中的DRY和代码重用的危险</span></h3><h3><span id="12按引用访问">12.按引用访问</span></h3><h3><span id="13版本管理">13.版本管理</span></h3><h4><span id="a尽可能推迟">a.尽可能推迟</span></h4><h4><span id="b及早发现破坏性修改">b.及早发现破坏性修改</span></h4><h4><span id="c使用语义化的版本管理">c.使用语义化的版本管理</span></h4><h4><span id="d不同的接口共存">d.不同的接口共存</span></h4><h4><span id="e同时使用多个版本的服务">e.同时使用多个版本的服务</span></h4><h3><span id="14用户界面">14.用户界面</span></h3><h4><span id="a走向数字化">a.走向数字化</span></h4><h4><span id="b约束">b.约束</span></h4><h4><span id="capi组合">c.API组合</span></h4><h4><span id="dui片段的组合">d.UI片段的组合</span></h4><h4><span id="e一种混合方式">e.一种混合方式</span></h4><h3><span id="15与第三方软件集成">15.与第三方软件集成</span></h3><h4><span id="a缺乏控制">a.缺乏控制</span></h4><h4><span id="b定制化">b.定制化</span></h4><h4><span id="c意大利面式的集成">c.意大利面式的集成</span></h4><h4><span id="d在自己可控的平台进行定制化">d.在自己可控的平台进行定制化</span></h4><h4><span id="e绞杀者模式">e.绞杀者模式</span></h4><h2><span id="五-分解单块系统">五、分解单块系统</span></h2><h3><span id="1关键是接缝">1.关键是接缝</span></h3><h3><span id="2分解musiccorp">2.分解MusicCorp</span></h3><h3><span id="3分解单块系统的原因">3.分解单块系统的原因</span></h3><h4><span id="a改变的速度">a.改变的速度</span></h4><h4><span id="b团队结构">b.团队结构</span></h4><h4><span id="c安全">c.安全</span></h4><h4><span id="d技术">d.技术</span></h4><h3><span id="4杂乱的依赖">4.杂乱的依赖</span></h3><h3><span id="5数据库">5.数据库</span></h3><h3><span id="6找到问题的关键">6.找到问题的关键</span></h3><h3><span id="7例子打破外键关系">7.例子:打破外键关系</span></h3><h3><span id="8例子共享静态数据">8.例子:共享静态数据</span></h3><h3><span id="9例子共享数据">9.例子:共享数据</span></h3><h3><span id="10例子共享表">10.例子:共享表</span></h3><h3><span id="11重构数据库">11.重构数据库</span></h3><h3><span id="12事务边界">12.事务边界</span></h3><h4><span id="a再试一次">a.再试一次</span></h4><h4><span id="b终止整个操作">b.终止整个操作</span></h4><h4><span id="c分布式事务">c.分布式事务</span></h4><h4><span id="d应该怎么办呢">d.应该怎么办呢</span></h4><h3><span id="13报表">13.报表</span></h3><h3><span id="14报表数据库">14.报表数据库</span></h3><h3><span id="15通过服务调用来获取数据">15.通过服务调用来获取数据</span></h3><h3><span id="16数据导出">16.数据导出</span></h3><h3><span id="17事件数据导出">17.事件数据导出</span></h3><h3><span id="18数据导出的备份">18.数据导出的备份</span></h3><h3><span id="19走向实时">19.走向实时</span></h3><h3><span id="20修改的代价">20.修改的代价</span></h3><h3><span id="21理解根本原因">21.理解根本原因</span></h3><h2><span id="六-部署">六、部署</span></h2><h3><span id="1持续集成简介">1.持续集成简介</span></h3><h3><span id="2把持续集成映射到微服务">2.把持续集成映射到微服务</span></h3><h3><span id="3构建流水线和持续交付">3.构建流水线和持续交付</span></h3><h3><span id="4平台特定的构建物">4.平台特定的构建物</span></h3><h3><span id="5操作系统构建物">5.操作系统构建物</span></h3><h3><span id="6定制化镜像">6.定制化镜像</span></h3><h4><span id="a将镜像作为构建物">a.将镜像作为构建物</span></h4><h4><span id="b不可变服务器">b.不可变服务器</span></h4><h3><span id="7环境">7.环境</span></h3><h3><span id="8服务配置">8.服务配置</span></h3><h3><span id="9服务与主机之间的映射">9.服务与主机之间的映射</span></h3><h4><span id="a单主机多服务">a.单主机多服务</span></h4><h4><span id="b应用程序容器">b.应用程序容器</span></h4><h4><span id="c每个主机一个服务">c.每个主机一个服务</span></h4><h4><span id="d平台即服务">d.平台即服务</span></h4><h3><span id="10自动化">10.自动化</span></h3><h3><span id="11从物理机到虚拟机">11.从物理机到虚拟机</span></h3><h4><span id="a传统的虚拟化技术">a.传统的虚拟化技术</span></h4><h4><span id="bvagrant">b.Vagrant</span></h4><h4><span id="clinux容器">c.Linux容器</span></h4><h4><span id="ddocker">d.Docker</span></h4><h3><span id="12一个部署接口">12.一个部署接口</span></h3><h2><span id="七-测试">七、测试</span></h2><h3><span id="1测试类型">1.测试类型</span></h3><h3><span id="2测试范围">2.测试范围</span></h3><h4><span id="a单元测试">a.单元测试</span></h4><h4><span id="b服务测试">b.服务测试</span></h4><h4><span id="c端到端测试">c.端到端测试</span></h4><h4><span id="d权衡">d.权衡</span></h4><h4><span id="e比例">e.比例</span></h4><h3><span id="3实现服务测试">3.实现服务测试</span></h3><h4><span id="amock还是打桩">a.mock还是打桩</span></h4><h4><span id="b智能的打桩服务">b.智能的打桩服务</span></h4><h3><span id="4微妙的端到端测试">4.微妙的端到端测试</span></h3><h3><span id="5端到端测试的缺点">5.端到端测试的缺点</span></h3><h3><span id="6脆弱的测试">6.脆弱的测试</span></h3><h4><span id="a谁来写这些测试">a.谁来写这些测试</span></h4><h4><span id="b测试多长时间">b.测试多长时间</span></h4><h4><span id="c大量的堆积">c.大量的堆积</span></h4><h4><span id="d元版本">d.元版本</span></h4><h3><span id="7测试场景而不是故事">7.测试场景，而不是故事</span></h3><h3><span id="8拯救我们的消费者驱动的测试">8.拯救我们的消费者驱动的测试</span></h3><h4><span id="apact">a.Pact</span></h4><h4><span id="b关于沟通">b.关于沟通</span></h4><h3><span id="9还应该使用端到端测试吗">9.还应该使用端到端测试吗</span></h3><h3><span id="10部署后再测试">10.部署后再测试</span></h3><h4><span id="a区分部署和上线">a.区分部署和上线</span></h4><h4><span id="b金丝雀发布">b.金丝雀发布</span></h4><h4><span id="c平均修复时间胜过平均故障间隔时间">c.平均修复时间胜过平均故障间隔时间</span></h4><h3><span id="11跨功能的测试">11.跨功能的测试</span></h3><h2><span id="八-监控">八、监控</span></h2><h3><span id="1单一服务单一服务器">1.单一服务，单一服务器</span></h3><h3><span id="2单一服务多个服务器">2.单一服务，多个服务器</span></h3><h3><span id="3多个服务多个服务器">3.多个服务，多个服务器</span></h3><h3><span id="4日志日志更多的日志">4.日志，日志，更多的日志</span></h3><h3><span id="5多个服务的指标跟踪">5.多个服务的指标跟踪</span></h3><h3><span id="6服务指标">6.服务指标</span></h3><h3><span id="7综合监控">7.综合监控</span></h3><h3><span id="8关联标识">8.关联标识</span></h3><h3><span id="9级联">9.级联</span></h3><h3><span id="10标准化">10.标准化</span></h3><h3><span id="11考虑受众">11.考虑受众</span></h3><h3><span id="12未来">12.未来</span></h3><h2><span id="九-安全">九、安全</span></h2><h3><span id="1身份验证和授权">1.身份验证和授权</span></h3><h4><span id="a常见的单点登录实现">a.常见的单点登录实现</span></h4><h4><span id="b单点登录网关">b.单点登录网关</span></h4><h4><span id="c细粒度的授权">c.细粒度的授权</span></h4><h3><span id="2服务间的身份验证和授权">2.服务间的身份验证和授权</span></h3><h4><span id="a在边界内允许一切">a.在边界内允许一切</span></h4><h4><span id="bhttps基本身份验证">b.HTTP(S)基本身份验证</span></h4><h4><span id="c使用saml或openid-connnect">c.使用SAML或OpenID Connnect</span></h4><h4><span id="d客户端证书">d.客户端证书</span></h4><h4><span id="ehttp之上的hmac">e.HTTP之上的HMAC</span></h4><h4><span id="fapi密钥">f.API密钥</span></h4><h4><span id="g代理问题">g.代理问题</span></h4><h3><span id="3静态数据的安全">3.静态数据的安全</span></h3><h4><span id="a使用众所周知的加密算法">a.使用众所周知的加密算法</span></h4><h4><span id="b一切皆与密钥相关">b.一切皆与密钥相关</span></h4><h4><span id="c选择你的目标">c.选择你的目标</span></h4><h4><span id="d按需解密">d.按需解密</span></h4><h4><span id="e加密备份">e.加密备份</span></h4><h3><span id="4深度防御">4.深度防御</span></h3><h4><span id="1防火墙">1.防火墙</span></h4><h4><span id="2日志">2.日志</span></h4><h4><span id="3入侵检测和预防系统">3.入侵检测(和预防)系统</span></h4><h4><span id="4网络隔离">4.网络隔离</span></h4><h4><span id="5操作系统">5.操作系统</span></h4><h3><span id="5一个示例">5.一个示例</span></h3><h3><span id="6保持节俭">6.保持节俭</span></h3><h3><span id="7人的因素">7.人的因素</span></h3><h3><span id="8黄金法则">8.黄金法则</span></h3><h3><span id="9内建安全">9.内建安全</span></h3><h3><span id="10外部安全">10.外部安全</span></h3><h2><span id="十-康威定律和系统设计">十、康威定律和系统设计</span></h2><h3><span id="1证据">1.证据</span></h3><h4><span id="a松耦合组织和紧耦合组织">a.松耦合组织和紧耦合组织</span></h4><h4><span id="bwindows-vista">b.Windows Vista</span></h4><h3><span id="2netflix和amazon">2.Netflix和Amazon</span></h3><h3><span id="3我们可以做什么">3.我们可以做什么</span></h3><h3><span id="4适应沟通途径">4.适应沟通途径</span></h3><h3><span id="5服务所有权">5.服务所有权</span></h3><h3><span id="6共享服务的原因">6.共享服务的原因</span></h3><h4><span id="a难以分割">a.难以分割</span></h4><h4><span id="b特性团队">b.特性团队</span></h4><h4><span id="c交付瓶颈">c.交付瓶颈</span></h4><h3><span id="7内部开源">7.内部开源</span></h3><h4><span id="a守护者的角色">a.守护者的角色</span></h4><h4><span id="b成熟">b.成熟</span></h4><h4><span id="c工具">c.工具</span></h4><h3><span id="8限界上下文和团队结构">8.限界上下文和团队结构</span></h3><h3><span id="9孤儿服务">9.孤儿服务</span></h3><h3><span id="10案例研究realestatecomau">10.案例研究:RealEstate.com.au</span></h3><h3><span id="11反向的康威定律">11.反向的康威定律</span></h3><h3><span id="12人">12.人</span></h3><h2><span id="十一-规模化微服务">十一、规模化微服务</span></h2><h3><span id="1故障无处不在">1.故障无处不在</span></h3><h3><span id="2多少是太多">2.多少是太多</span></h3><h3><span id="3功能降级">3.功能降级</span></h3><h3><span id="4架构性安全措施">4.架构性安全措施</span></h3><h3><span id="5反脆弱的组织">5.反脆弱的组织</span></h3><h4><span id="a超时">a.超时</span></h4><h4><span id="b断路器">b.断路器</span></h4><h4><span id="c舱壁">c.舱壁</span></h4><h4><span id="d隔离">d.隔离</span></h4><h3><span id="6幂等">6.幂等</span></h3><h3><span id="7扩展">7.扩展</span></h3><h4><span id="a更强大的主机">a.更强大的主机</span></h4><h4><span id="b拆分负载">b.拆分负载</span></h4><h4><span id="c分散风险">c.分散风险</span></h4><h4><span id="d负载均衡">d.负载均衡</span></h4><h4><span id="d基于worker的系统">d.基于worker的系统</span></h4><h4><span id="e重新设计">e.重新设计</span></h4><h3><span id="8扩展数据库">8.扩展数据库</span></h3><h4><span id="a服务的可用性和数据的持久性">a.服务的可用性和数据的持久性</span></h4><h4><span id="b扩展读取">b.扩展读取</span></h4><h4><span id="c扩展写操作">c.扩展写操作</span></h4><h4><span id="d共享数据库基础设施">d.共享数据库基础设施</span></h4><h4><span id="ecqrs">e.CQRS</span></h4><h3><span id="9缓存">9.缓存</span></h3><h4><span id="a客户端-代理和服务器端缓存">a.客户端、代理和服务器端缓存</span></h4><h4><span id="bhttp缓存">b.HTTP缓存</span></h4><h4><span id="c为写使用缓存">c.为写使用缓存</span></h4><h4><span id="d为弹性使用缓存">d.为弹性使用缓存</span></h4><h4><span id="e隐藏源服务">e.隐藏源服务</span></h4><h4><span id="f保持简单">f.保持简单</span></h4><h4><span id="g缓存中毒一个警示">g.缓存中毒:一个警示</span></h4><h3><span id="10自动伸缩">10.自动伸缩</span></h3><h3><span id="11cap定理">11.CAP定理</span></h3><h4><span id="a牺牲一致性">a.牺牲一致性</span></h4><h4><span id="b牺牲可用性">b.牺牲可用性</span></h4><h4><span id="c牺牲分区容忍性">c.牺牲分区容忍性</span></h4><h4><span id="dap还是cp">d.AP还是CP</span></h4><h4><span id="e-这不是全部或全不">e。这不是全部或全不</span></h4><h4><span id="f真实世界">f.真实世界</span></h4><h3><span id="12服务发现">12.服务发现</span></h3><h3><span id="13动态服务注册">13.动态服务注册</span></h3><h4><span id="azookeeper">a.Zookeeper</span></h4><h4><span id="bconsul">b.Consul</span></h4><h4><span id="ceureka">c.Eureka</span></h4><h4><span id="d构造你自己的系统">d.构造你自己的系统</span></h4><h4><span id="e别忘了人">e.别忘了人</span></h4><h3><span id="14文档服务">14.文档服务</span></h3><h4><span id="aswagger">a.Swagger</span></h4><h4><span id="bhal和hal浏览器">b.HAL和HAL浏览器</span></h4><h3><span id="15自描述系统">15.自描述系统</span></h3><h2><span id="十二-总结">十二、总结</span></h2><h3><span id="1微服务的原则">1.微服务的原则</span></h3><h4><span id="a围绕业务概念建模">a.围绕业务概念建模</span></h4><h4><span id="b接受自动化文化">b.接受自动化文化</span></h4><h4><span id="c隐藏内部实现细节">c.隐藏内部实现细节</span></h4><h4><span id="d让一切都去中心化">d.让一切都去中心化</span></h4><h4><span id="e隔离失败">e.隔离失败</span></h4><h4><span id="f高度可观察">f.高度可观察</span></h4><h3><span id="2什么时候你不应该使用微服务">2.什么时候你不应该使用微服务</span></h3><h3><span id="3临别赠言">3.临别赠言</span></h3>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《格鲁夫给经理人的第一课》阅读笔记</title>
      <link href="/2020/01/28/%E3%80%8A%E6%A0%BC%E9%B2%81%E5%A4%AB%E7%BB%99%E7%BB%8F%E7%90%86%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E8%AF%BE%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/01/28/%E3%80%8A%E6%A0%BC%E9%B2%81%E5%A4%AB%E7%BB%99%E7%BB%8F%E7%90%86%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E8%AF%BE%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2><span id="序言-从20世纪80年代的巨变谈起">序言 从20世纪80年代的巨变谈起</span></h2><a id="more"></a><h3><span id="1全球化浪潮">1.全球化浪潮</span></h3><h3><span id="2顺应新环境">2.顺应新环境</span></h3><h3><span id="3认识你的组织">3.认识你的组织</span></h3><h3><span id="4经营你的职业生涯">4.经营你的职业生涯</span></h3><h2><span id="一-早餐店的生产线">一、早餐店的生产线</span></h2><h3><span id="1生产包含什么">1.“生产”包含什么</span></h3><h3><span id="2从早餐店的库存谈起">2.从早餐店的库存谈起</span></h3><h2><span id="二-打好团体战">二、打好团体战</span></h2><h3><span id="1管理杠杠率">1.管理杠杠率</span></h3><h3><span id="2管理的必经之路开会">2.管理的必经之路:开会</span></h3><h3><span id="3不挥舞权杖的决策">3.不挥舞权杖的决策</span></h3><h3><span id="4规划是为了明天">4.规划是为了明天</span></h3><h2><span id="三-推动组织的巧手">三、推动组织的巧手</span></h2><h3><span id="1当早餐店开始繁衍">1.当早餐店开始繁衍</span></h3><h3><span id="2混合型组织">2.混合型组织</span></h3><h3><span id="3双重报告">3.双重报告</span></h3><h3><span id="4每个人都听命三个长官">4.每个人都听命三个”长官”</span></h3><h2><span id="四-谋事在人">四、谋事在人</span></h2><h3><span id="1激励下属参加比赛">1.激励下属参加比赛</span></h3><h3><span id="2工作成熟度">2.工作成熟度</span></h3><h3><span id="3再难也得做绩效评估">3.再难也得做:绩效评估</span></h3><h3><span id="4招人与留人">4.招人与留人</span></h3><h3><span id="5报酬的诱惑">5.报酬的诱惑</span></h3><h3><span id="6别等火烧眉毛才培训">6.别等火烧眉毛才培训</span></h3>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《演讲的力量(TED思想的力量系列)》阅读笔记</title>
      <link href="/2020/01/28/%E3%80%8A%E6%BC%94%E8%AE%B2%E7%9A%84%E5%8A%9B%E9%87%8F-TED%E6%80%9D%E6%83%B3%E7%9A%84%E5%8A%9B%E9%87%8F%E7%B3%BB%E5%88%97-%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/01/28/%E3%80%8A%E6%BC%94%E8%AE%B2%E7%9A%84%E5%8A%9B%E9%87%8F-TED%E6%80%9D%E6%83%B3%E7%9A%84%E5%8A%9B%E9%87%8F%E7%B3%BB%E5%88%97-%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-演讲基础">一、演讲基础</span></h2><a id="more"></a><h3><span id="1展示技巧培养必要的技巧">1.展示技巧:培养必要的技巧</span></h3><h3><span id="2思想植入伟大演讲的馈赠">2.思想植入:伟大演讲的馈赠</span></h3><h3><span id="3常见陷阱应该避免的四种演讲风格">3.常见陷阱:应该避免的四种演讲风格</span></h3><h3><span id="4主线你的观点是什么">4.主线:你的观点是什么?</span></h3><h2><span id="二-演讲工具">二、演讲工具</span></h2><h3><span id="1联系与观众建立起信任的纽带">1.联系:与观众建立起信任的纽带</span></h3><h3><span id="2叙述故事的强大魅力">2.叙述:故事的强大魅力</span></h3><h3><span id="3解释如何解释艰涩的概念">3.解释:如何解释艰涩的概念?</span></h3><h3><span id="4说服用推理一步步征服观众">4.说服:用推理一步步征服观众</span></h3><h3><span id="5展示请给我惊喜">5.展示:请给我惊喜</span></h3><h2><span id="三-准备过程">三、准备过程</span></h2><h3><span id="1视觉资料有害的幻灯片">1.视觉资料:有害的幻灯片</span></h3><h3><span id="2演讲稿背诵还是不背">2.演讲稿:背诵还是不背?</span></h3><h3><span id="3串词等等我需要排练吗">3.串词:等等，我需要排练吗?</span></h3><h3><span id="4开场与结尾你想给观众留下什么的印象">4.开场与结尾:你想给观众留下什么的印象?</span></h3><h2><span id="四-舞台呈现">四、舞台呈现</span></h2><h3><span id="1衣橱我该穿什么">1.衣橱:我该穿什么？</span></h3><h3><span id="2心理准备如何控制紧张">2.心理准备:如何控制紧张?</span></h3><h3><span id="3装备演讲台-提词器-卡片或者什么都没有">3.装备:演讲台、提词器、卡片或者什么都没有?</span></h3><h3><span id="4声音和仪态赋予文字以生命">4.声音和仪态:赋予文字以生命</span></h3><h3><span id="5版式革新全谱演讲的前景和危险">5.版式革新：全谱演讲的前景(和危险)</span></h3><h2><span id="五-反思">五、反思</span></h2><h3><span id="1演讲的复兴知识的相关性">1.演讲的复兴:知识的相关性</span></h3><h3><span id="2为什么重要人与人的互联性">2.为什么重要:人与人的互联性</span></h3><h3><span id="3你的时机已到哲学家的秘密">3.你的时机已到:哲学家的秘密</span></h3>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《赢》阅读笔记</title>
      <link href="/2020/01/28/%E3%80%8A%E8%B5%A2%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/01/28/%E3%80%8A%E8%B5%A2%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-基础篇">一、基础篇</span></h2><a id="more"></a><h3><span id="1使命和价值观">1.使命和价值观</span></h3><h3><span id="2坦诚">2.坦诚</span></h3><h3><span id="3考评">3.考评</span></h3><h2><span id="二-公司如何才能赢">二、公司如何才能赢</span></h2><h3><span id="1领导力">1.领导力</span></h3><h3><span id="2招聘">2.招聘</span></h3><h3><span id="3人员管理">3.人员管理</span></h3><h3><span id="4分手">4.”分手”</span></h3><h2><span id="三-如何赢得竞争">三、如何赢得竞争</span></h2><h3><span id="1战略">1.战略</span></h3><h3><span id="2预算">2.预算</span></h3><h3><span id="3有机的成长">3.有机的成长</span></h3><h3><span id="4企业并购">4.企业并购</span></h3><h3><span id="5六西格玛">5.六西格玛</span></h3><h2><span id="四-个人职业生涯如何才能赢">四、个人职业生涯如何才能赢</span></h2><h3><span id="1合适的工作">1.合适的工作</span></h3><h3><span id="2晋升">2.晋升</span></h3><h3><span id="3糟糕的老板">3.糟糕的老板</span></h3><h3><span id="4工作与生活的平衡">4.工作与生活的平衡</span></h3><h2><span id="五-有关赢得其他问题">五、有关赢得其他问题</span></h2><h3><span id="1问题无处不在">1.问题无处不在</span></h3>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之责任链模式</title>
      <link href="/2020/01/12/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/01/12/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-责任链模式的定义">一、责任链模式的定义</span></h2><p>使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它为止。</p><p>责任链模式的重点是在”链”上，由一条链去处理相似的请求在链中决定谁来处理这个请求。<br><a id="more"></a></p><h2><span id="二-责任链模式的应用">二、责任链模式的应用</span></h2><h3><span id="1责任链模式的优点">1.责任链模式的优点</span></h3><p>责任链模式非常显著的优点是将请求和处理分开。请求者可以不用知道是谁处理的，处理者可以不用知道请求全貌(例如在J2EE项目开发中，可以剥离出无状态Bean由责任链处理)，两者解耦，提高系统的灵活性。</p><h3><span id="2责任链模式的缺点">2.责任链模式的缺点</span></h3><p>责任链有两个非常显著的缺点:<br>一是性能问题，每个请求都是从链头遍历到链尾，特别是在链比较长的时候，性能是一个非常大的问题。<br>二是调试不很方便，特别是链条比较长，环节比较多的时候，由于采用了类似递归的方式，调试的时候逻辑可能比较复杂。</p><h3><span id="3责任链模式的注意事项">3.责任链模式的注意事项</span></h3><p>链中节点数量需要控制，避免出现超长链的情况，一般的做法是在Handler中设置一个最大节点数量，在setNext方法中判断是否已经是超过其阀值，超过则不允许该链建立，避免无意识破坏系统性能。</p><h2><span id="三-最佳实践">三、最佳实践</span></h2><p>责任链模式屏蔽了请求的处理过程，你发起一个请求到底是谁处理的，这个你不用关心，只要你把请求抛给责任链的第一个处理者，最终会返回一个处理结果(当然也可以不做任何处理)，作为请求者可以不用知道到底是需要谁来处理的，这是责任链模式的核心，同时责任链模式也可以作为一种补救模式来用。<br>举个简单例子:<br>如项目开发的时候，需求确认是这样的:一个请求，一个处理者，但是随着业务的发展，处理者的数量和类型有所增加，你这时候就可以在第一个处理者后面建立一个链，也就是责任链来处理请求，如果是人民币，好，还是第一个业务逻辑来处理;如果是美元，好，传递到第二个业务逻辑来处理;日元、欧元…这些都不用在对原有的业务逻辑产生很大改变，通过扩展实现类就可以很好地解决这些需求变更时间。</p><p>代码例子:<a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/ChainOfResponsibility" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/ChainOfResponsibility</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之命令模式</title>
      <link href="/2020/01/11/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/01/11/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-命令模式定义">一、命令模式定义</span></h2><p>将一个请求封装成一个对象，从而让你使用不同的请求把客户端参数化，对请求排队或记录请求日志，可以提供命令的撤销和恢复功能。</p><p>命令模式的通用类图(这里我抽象为如下):<br><a id="more"></a></p><h3><span id="1receive接收者角色">1.Receive接收者角色</span></h3><p>该角色就是干活的角色，命令传递到这里是应该被执行的。</p><h3><span id="2command命令角色">2.Command命令角色</span></h3><p>需要执行的所有命令都在这里声明。</p><h3><span id="3invoker调用者角色">3.Invoker调用者角色</span></h3><p>接收到命令，并执行命令。</p><h2><span id="二-命令模式的应用">二、命令模式的应用</span></h2><h3><span id="1命令模式的优点">1.命令模式的优点</span></h3><h4><span id="a类间解耦">a.类间解耦</span></h4><p>调用者角色与接受者角色之间没有任何依赖关系，调用者实现功能时只需调用Command抽象类的execute方法就可以，不需要了解到底是哪个接收者执行。</p><h4><span id="b可扩展性">b.可扩展性</span></h4><p>Command的子类可以非常容易地扩展，而调用者Invoker和高层次的模式Client不产生严重的代码耦合。</p><h4><span id="c命令模式结合其他模式会更优秀">c.命令模式结合其他模式会更优秀</span></h4><p>命令模式可以结合责任链模式，实现命令族解析任务;结合模板方法模式，则可以减少Command子类的膨胀问题。</p><h3><span id="2命令模式的缺点">2.命令模式的缺点</span></h3><p>命令模式也有其缺点的，请看Command的子类:如果有N个命令，问题就出来了，Command的子类就可不是几个，而是N个，这个类膨胀得非常大，这个就需要读者在项目中慎重考虑使用。</p><h3><span id="3命令模式的使用场景">3.命令模式的使用场景</span></h3><p>只要你认为是命令的地方就可以采用命令模式，例如GUI开发中，一个按钮的点击是一个命令，可以采用命令模式;模拟DOS命令的时候也是要采用命令模式;触发-反馈机制的处理也亦如此。</p><h2><span id="三-最佳实践">三、最佳实践</span></h2><p>每一个模式到实际应用的时候都会有一些变形，命令模式的Receiver在实际应用中一般都会被封装掉(除非非常必要，例如撤销处理)，那是因为在项目中:约定的优先级最高，每一个命令是对一个或多个的Receiver的封装，我们可以在项目中通过有意义的类名或命令名处理命令角色和接收者角色的耦合关系(这就是约定)，减少高层模块(Client类)对低层模块(Receiver角色类)的依赖关系，提高系统整体的稳定性。因此，建议大家在实际的项目开发时采用封闭Receiver的方式，减少Client对Reciver的依赖，该方案只是对Command抽象类及其子类有一定的修改。<br>代码地址:<a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/Command" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/Command</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之中介者模式</title>
      <link href="/2020/01/05/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/01/05/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-中介者模式的定义">一、中介者模式的定义</span></h2><p>用一个中介对象封装一系列的对象交互，中介者使各对象不需要显示地相互作用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><p>中介者模式主要由以下几个部分组成:<br><a id="more"></a></p><h3><span id="1mediator-抽象中介者角色">1.Mediator 抽象中介者角色</span></h3><p>抽象中介者角色定义统一的接口，用于各同事角色之间的通信.</p><h3><span id="2concreate-mediator-具体中介者角色">2.Concreate Mediator 具体中介者角色</span></h3><p>具体中介者角色通过协调各同事角色实现协作行为，因此它必须依赖于各个同事角色</p><h3><span id="3colleague-同事角色">3.Colleague 同事角色</span></h3><p>每一个同事角色都知道中介者角色，而且与其他的同事角色通信的时候，一定要通过中介者角色协作。每个同事类的行为分为两种:</p><p>一种是同事本身的行为，比如改变对象本身的状态，处理自己的行为等，这种行为叫做自发行为，与其他的同事类或中介者没有任何的依赖;</p><p>第二种是必须依赖中介者才能完成的行为，叫做依赖方法。</p><h2><span id="二-中介者模式的应用">二、中介者模式的应用</span></h2><h3><span id="1中介者模式的优点">1.中介者模式的优点</span></h3><p>中介者模式的优点就是减少类间的依赖，把原有的一对多的依赖变成一对一的依赖，同事类只依赖中介者，减少了依赖，当然同时也降低了类间的耦合。</p><h3><span id="2中介者模式的缺点">2.中介者模式的缺点</span></h3><p>中介者模式的缺点就是中介者会膨胀得很大，而且逻辑复杂，原本N个对象直接的相互依赖关系转换为中介者和同事类的依赖关系，同事类越多，中介者的逻辑就越复杂。</p><h3><span id="3中介者模式的使用场景">3.中介者模式的使用场景</span></h3><p>中介者适用于多个对象之间紧密耦合的情况。</p><p>紧密耦合的标准是:在类图中出现了蜘蛛网状结构。在这种情况下一定要考虑使用中介者模式，这有利于把蜘蛛网梳理为星型结构，使原本复杂混乱的关系变得清晰简单。</p><h2><span id="三-中介者模式的实际应用">三、中介者模式的实际应用</span></h2><p>中介者模式也叫做调停者模式，是什么意思呢？一个对象要和N多个对象交流，就像对象间的战争，很混乱。这时，需要加入一个中心，所有的类都和中心交流，中心说怎么处理就怎么处理。</p><p>例子列举:</p><h3><span id="1机场调度中心">1.机场调度中心</span></h3><h3><span id="2mvc框架">2.MVC框架</span></h3><h3><span id="3媒体网关">3.媒体网关</span></h3><h3><span id="4中介服务">4.中介服务</span></h3><h2><span id="四-最佳实践">四、最佳实践</span></h2><p>如下情况可尝试使用中介者模式:</p><ul><li>N个对象之间产生了相互的依赖关系(N&gt;2)</li><li>多个对象有依赖关系，但是依赖的行为尚不确定或者有发生改变的可能，在这种情况下一般建议采用中介者模式，降低变更引起的风险扩散。</li><li>产品开发。一个明显的例子就是MVC框架，把中介者模式应用到产品中，可以提升产品的性能和扩展性，但是对于项目开发就未必，因为项目是以交付投产为目标，而产品则以稳定、高效、扩展为宗旨。</li></ul><p>代码例子，已放到我个人GitHub:<br><a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/Mediator" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/Mediator</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之原型模式</title>
      <link href="/2019/12/29/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/12/29/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-原型模式定义">一、原型模式定义</span></h2><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。<br><a id="more"></a></p><h2><span id="二-原型模式的应用">二、原型模式的应用</span></h2><h3><span id="1原型模式的优点">1.原型模式的优点</span></h3><h4><span id="1性能优良">(1)性能优良</span></h4><p>原型模式是在内存二进制流的拷贝，要比直接new一个对象性能好很多，特别是要在一个循环体内产生大量的对象时，原型模式可以更好地体现其优点。</p><h4><span id="2逃避构造函数的约束">(2)逃避构造函数的约束</span></h4><p>这既是它的优点也是它的缺点，直接在内存中拷贝，构造函数是不会执行的。优点就是减少了约束，缺点也是减少了约束，需要大家在实际应用时考虑。</p><h3><span id="2原型模式的使用场景">2.原型模式的使用场景</span></h3><h4><span id="1资源优化场景">(1)资源优化场景</span></h4><p>类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。</p><h4><span id="2性能和安全要求的场景">(2)性能和安全要求的场景</span></h4><p>通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。</p><h4><span id="3一个对象多个修改者的场景">(3)一个对象多个修改者的场景</span></h4><p>一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。</p><p>在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过clone的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与Java融为一体，大家可以随手拿来使用。</p><h2><span id="三-原型模式的注意事项">三、原型模式的注意事项</span></h2><h3><span id="1构造函数不会被执行">1.构造函数不会被执行</span></h3><h3><span id="2浅拷贝和深拷贝">2.浅拷贝和深拷贝</span></h3><p>注意1:深拷贝和浅拷贝建议不要混合使用，特别是在涉及类的继承时，父类有多个引用的情况就非常复杂，建议的方案是深拷贝和浅拷贝分开实现。</p><p>注意2:使用原型模式时，引用的成员变量必须满足两个条件才不会被拷贝:一是类的成员变量，而不是方法内变量;二是必须是一个可变的引用对象，而不是一个原始类型或不可变对象。</p><h3><span id="3clone和final">3.clone和final</span></h3><p>注意:要使用clone方法，类的成员变量上不要增加final关键字</p><h2><span id="四-代码例子">四、代码例子</span></h2><p>已放到github仓库，地址为:<a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/Prototype" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/Prototype</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea设置热加载</title>
      <link href="/2019/12/28/Idea%E8%AE%BE%E7%BD%AE%E7%83%AD%E5%8A%A0%E8%BD%BD/"/>
      <url>/2019/12/28/Idea%E8%AE%BE%E7%BD%AE%E7%83%AD%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>最近转使用Idea,Idea热加载据说很不友好，但是我没有试过，由于个人项目迁移到Idea上面开发，发现连改个HTML，都要重启，太TM气人了。<br>最后果断的搜索Idea热加载怎么做，先不管友好不，先试试看，最后改完后，发现并没有想象中的那么坏，也许是个人项目比较小的缘故。</p><p>参考解决办法链接:<a href="https://blog.csdn.net/qq_42685050/article/details/81588584" target="_blank" rel="noopener">Idea之热加载实现</a><br><a id="more"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Command line is too long. Shorten command line for *** or also for Spring Boot default configuration</title>
      <link href="/2019/12/21/Command-line-is-too-long-Shorten-command-line-for-or-also-for-Spring-Boot-default-configuration/"/>
      <url>/2019/12/21/Command-line-is-too-long-Shorten-command-line-for-or-also-for-Spring-Boot-default-configuration/</url>
      
        <content type="html"><![CDATA[<p>错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Command line is too long. Shorten command line for *** or also for Spring Boot default configuration</span><br></pre></td></tr></table></figure></p><p>通常会导致的后果是无法启动项目。</p><p>解决办法:</p><p>修改项目下 .idea\workspace.xml，找到标签 <component name="PropertiesComponent"> ， 在标签里加一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> &lt;property name=&quot;dynamic.classpath&quot; value=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure></component></p><p>参考解决办法链接:<a href="https://blog.csdn.net/weixin_41235754/article/details/100514000" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41235754/article/details/100514000</a><br><a id="more"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之代理模式</title>
      <link href="/2019/12/08/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/12/08/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-代理模式的定义">一、代理模式的定义</span></h2><p>为其他对象提供一种代理以控制对这个对象的访问。</p><p>代理模式也叫委托模式，它是一项基本设计技巧。许多其他的模式，如状态模式、策略模式、访问者模式本质上是在更特殊的场合采用了委托模式，而且在日常的应用中，代理模式可以提供非常好的访问控制。如Struts2的Form元素映射就是采用了代理模式。<br><a id="more"></a><br>代理模式通用类:</p><h3><span id="1subject抽象主题角色">1.Subject抽象主题角色</span></h3><p>抽象主题类可以是抽象类也可以是接口，是一个最普通的业务类型定义，无特殊要求。</p><h3><span id="2realsubject具体主题角色">2.RealSubject具体主题角色</span></h3><p>也叫做被委托角色、被代理角色。它才是业务逻辑的具体执行者。</p><h3><span id="3proxy代理主题角色">3.Proxy代理主题角色</span></h3><p>也叫做委托类、代理类。它负责对真实角色的应用，把所有抽象主题类定义的方法限制委托给真实主题角色的实现，并且在真实主题角色处理完毕前后做预处理和善后处理工作。</p><h2><span id="二-代理模式的应用">二、代理模式的应用</span></h2><h3><span id="1代理模式的优点">1.代理模式的优点</span></h3><h4><span id="1职责清晰">(1)职责清晰</span></h4><p>真实的角色就是实现实际的业务逻辑，不用关心其他非本职责的事务，通过后期的代理完成一件事务，附带的结果就是编程简洁清晰。</p><h4><span id="2高扩展性">(2)高扩展性</span></h4><p>具体主题角色是随时都会发生变化的，只要它实现了接口，不管它如何变化，都逃不脱接口，那我们的代理类完全就可以在不做任何修改的情况下使用。</p><h4><span id="3智能化">(3)智能化</span></h4><p>动态代理可以体现出来</p><h3><span id="2代理模式的使用场景">2.代理模式的使用场景</span></h3><p>结合现实生活，以打官司为例，打官司为什么要找个律师？因为你不想参与中间过程的是是非非，只要完成自己的答辩就成，其他的如事前调查、事后追查都由律师来搞定，这就是为了减轻你的负担。SpringAop，就是一个非常典型的动态代理。</p><h2><span id="三-最佳实践">三、最佳实践</span></h2><p>代理模式的应用非常广泛，大到一个系统框架、企业平台，小到代码片段、事务处理，稍不留意就用到代理模式。</p><p>注意:<br>在学习AOP框架时，弄清楚几个名词就成:切面(Aspect)、切入点(JoinPoint)、通知(Advice)、织入(Weave)就足够了，理解了这几个名词，有助于更好的学习和理解其原理。</p><p>github示例代码:<a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/Proxy" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/Proxy</a></p><p>此章有待补充普通代理、强制代理、动态代理……</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>portal项目启动问题</title>
      <link href="/2019/12/04/portal%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2019/12/04/portal%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Disconnected from the target VM, address: &apos;127.0.0.1:58909&apos;, transport: &apos;socket&apos;</span><br><span class="line"></span><br><span class="line">Process finished with exit code -1</span><br></pre></td></tr></table></figure></p><p>解决办法:<br>替换application-qa.properties文件，并将application.properties上面的profile指定为qa,并启动PortalApplication.java即可解决该问题。<br><a id="more"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分页条件传参bug之解决</title>
      <link href="/2019/12/04/%E5%88%86%E9%A1%B5%E6%9D%A1%E4%BB%B6%E4%BC%A0%E5%8F%82bug%E4%B9%8B%E8%A7%A3%E5%86%B3/"/>
      <url>/2019/12/04/%E5%88%86%E9%A1%B5%E6%9D%A1%E4%BB%B6%E4%BC%A0%E5%8F%82bug%E4%B9%8B%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>问题描述:以对象作为参数，对象中包含PageNum、PageSize、Condition对象等。对应的@RequestBody为如PageReqDTO<t> reqDTO时，如果使用postman时，不在body中指定如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;pageNum&quot;:1,&quot;pageSize&quot;:10,&quot;condition&quot;:&#123;&#125;&#125;</span><br></pre></td></tr></table></figure></t></p><a id="more"></a><p>而是这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;pageNum&quot;:1,&quot;pageSize&quot;:10&#125;</span><br></pre></td></tr></table></figure></p><p>就可能出现拿不到数据，拿不到数据又分为两种情况:</p><p>一种是传递对象没有做判断，例如没有在动态sql中<code>&lt;if test=&quot;reqDTO!=null&quot;&gt;&lt;/if&gt;</code>，而是直接<code>&lt;if test=&quot;reqDTO.value!=&#39;&#39; and reqDTO.value!=null&quot;&gt;&lt;/if&gt;</code></p><p>可能会报如下错误:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.apache.ibatis.ognl.OgnlException: source is null for getProperty(null, &quot;userName&quot;)</span><br><span class="line">mybatis</span><br></pre></td></tr></table></figure></p><p>另外一种就是参数不对应，这种情况不是特别多，通常控制台也会报错，很容易解决这个错误。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win7升级win10</title>
      <link href="/2019/12/04/win7%E5%8D%87%E7%BA%A7win10/"/>
      <url>/2019/12/04/win7%E5%8D%87%E7%BA%A7win10/</url>
      
        <content type="html"><![CDATA[<p>win7的系统看起来不是特别爽，还是win10用得顺手。</p><p>win7升级win10: <a href="https://jingyan.baidu.com/article/066074d60391e2c3c31cb04e.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/066074d60391e2c3c31cb04e.html</a></p><p>参考上述地址即可完成升级，注意千万不要在工作时间或自己的学习时间上升级，消耗时间比较长，这个需要注意。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea3.6破解(含注册码)及其注册码失效问题解决</title>
      <link href="/2019/12/04/idea3-6%E7%A0%B4%E8%A7%A3-%E5%90%AB%E6%B3%A8%E5%86%8C%E7%A0%81-%E5%8F%8A%E5%85%B6%E6%B3%A8%E5%86%8C%E7%A0%81%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2019/12/04/idea3-6%E7%A0%B4%E8%A7%A3-%E5%90%AB%E6%B3%A8%E5%86%8C%E7%A0%81-%E5%8F%8A%E5%85%B6%E6%B3%A8%E5%86%8C%E7%A0%81%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>破解Idea也不容易，现在注册码也不好找，找到了后不一定行。不过按照如下破解应该是没有问题的，我本机实验过，没有问题。</p><p>idea2018.3.6破解: <a href="https://blog.csdn.net/sinat_30228861/article/details/88595374https://blog.csdn.net/sinat_30228861/article/details/88595374" target="_blank" rel="noopener">https://blog.csdn.net/sinat_30228861/article/details/88595374https://blog.csdn.net/sinat_30228861/article/details/88595374</a></p><p>注册码ok，但是又弹出来，可以参考这个网址: <a href="https://blog.csdn.net/qq_27093465/article/details/70763536" target="_blank" rel="noopener">https://blog.csdn.net/qq_27093465/article/details/70763536</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB出现The default storage engine &#39;wiredTiger&#39; is not available之问题解决</title>
      <link href="/2019/12/04/MongoDB%E5%87%BA%E7%8E%B0The-default-storage-engine-wiredTiger-is-not-available%E4%B9%8B%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2019/12/04/MongoDB%E5%87%BA%E7%8E%B0The-default-storage-engine-wiredTiger-is-not-available%E4%B9%8B%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>问题描述:低版本MongoDB存在该问题(版本为3.x)，高版本则无该问题。</p><p>参考解决问题链接:<br>MongoDB学习—（1）安装时出现The default storage engine ‘wiredTiger’ is not available问题解决 <a href="https://blog.csdn.net/u013457382/article/details/50775268" target="_blank" rel="noopener">https://blog.csdn.net/u013457382/article/details/50775268</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea之导入Eclipse Maven项目</title>
      <link href="/2019/11/30/idea%E4%B9%8B%E5%AF%BC%E5%85%A5Eclipse-Maven%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/11/30/idea%E4%B9%8B%E5%AF%BC%E5%85%A5Eclipse-Maven%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>Idea之导入Eclipse Maven项目:<a href="https://blog.csdn.net/qq_33442160/article/details/81876428" target="_blank" rel="noopener">https://blog.csdn.net/qq_33442160/article/details/81876428</a><br>参考上述链接即可，这里不再赘述。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeanCreationException: Error creating bean with name &#39;classPathFileSystemWatcher&#39;之解决办法</title>
      <link href="/2019/11/30/BeanCreationException-Error-creating-bean-with-name-classPathFileSystemWatcher-%E4%B9%8B%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2019/11/30/BeanCreationException-Error-creating-bean-with-name-classPathFileSystemWatcher-%E4%B9%8B%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>错误关键信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanCreationException: Error creating bean with name &apos;classPathFileSystemWatcher&apos;</span><br></pre></td></tr></table></figure></p><p>错误原因:<br>Idea不支持热加载，application-test.yml中的热加载配置去除后，就能正常启动了，对应的服务也能正常访问。<br><a id="more"></a></p><p>解决办法:<br>去除热加载中的代码配置，如可修改为这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   devtools:</span><br><span class="line">      restart:</span><br><span class="line">         enabled: true</span><br><span class="line">#        additional-paths: src/main/java</span><br><span class="line">         execlude: test/**</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;jpaMappingContext&#39;: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException之解决办法</title>
      <link href="/2019/11/30/org-springframework-beans-factory-BeanCreationException-Error-creating-bean-with-name-jpaMappingContext-Invocation-of-init-method-failed-nested-exception-is-java-lang-IllegalArgumentException%E4%B9%8B%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2019/11/30/org-springframework-beans-factory-BeanCreationException-Error-creating-bean-with-name-jpaMappingContext-Invocation-of-init-method-failed-nested-exception-is-java-lang-IllegalArgumentException%E4%B9%8B%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>错误产生背景:<br>将之前用Eclipse写的Blog项目迁移到Idea上面。Ecilpse项目一直是没有问题的。<br><a id="more"></a><br>错误原因分析:<br>原因是项目依赖中引入的jpa,另外也与Idea比较智能也有关系</p><p>解决办法:</p><p>第一，在启动类中加上如下注解代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class,JpaRepositoriesAutoConfiguration.class,HibernateJpaAutoConfiguration.class&#125;)</span><br></pre></td></tr></table></figure></p><p>第二，maven依赖中排除该依赖(尽管在pom.xml去除了，但是不要忘记maven有依赖传递的特性)</p><p>参考解决办法链接(stackoverflow上面找到的解决方案):<br><a href="https://stackoverflow.com/questions/40738818/illegalargumentexception-at-least-one-jpa-metamodel-must-be-present" target="_blank" rel="noopener">https://stackoverflow.com/questions/40738818/illegalargumentexception-at-least-one-jpa-metamodel-must-be-present</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postman测试后台使用@RequestBody接收参数的坑</title>
      <link href="/2019/11/30/Postman%E6%B5%8B%E8%AF%95%E5%90%8E%E5%8F%B0%E4%BD%BF%E7%94%A8-RequestBody%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%9A%84%E5%9D%91/"/>
      <url>/2019/11/30/Postman%E6%B5%8B%E8%AF%95%E5%90%8E%E5%8F%B0%E4%BD%BF%E7%94%A8-RequestBody%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>问题原因:我在使用PostMan测试接口时发现数据传递不过来，是因为请求体定义为JSON数据，自动就传递不过来，虽然问题简单，但由于之前这个用的较少，所以就忽略了这点。</p><p>解决问题链接:<a href="https://blog.csdn.net/qq_24484085/article/details/82800798" target="_blank" rel="noopener">https://blog.csdn.net/qq_24484085/article/details/82800798</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea必知必会</title>
      <link href="/2019/11/30/Idea%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
      <url>/2019/11/30/Idea%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<p>声明:此文章根据后续用的越来越多，将会不断补充，之所以以链接的形式，是因为不想在这种使用层面上重复造轮子，写很多重复文章，后续我打算写一些更深入的文章。</p><p>idea常用操作:<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">idea如何Debug调试:https://blog.csdn.net/yxl_1207/article/details/80973622（调试开发必备)</span><br><span class="line"></span><br><span class="line">alibaba代码质量检测分析插件安装(idea如何安装插件):https://blog.csdn.net/u010597189/article/details/83619544(提高代码质量)</span><br><span class="line"></span><br><span class="line">idea如何配置tomcat server:https://blog.csdn.net/sinat_28530913/article/details/80117186(war包部署需要servlet容器)</span><br><span class="line"></span><br><span class="line">idea如何自定义代码模板:https://blog.csdn.net/zhou520yue520/article/details/82713820（提高开发效率，将常用代码抽取出来,整成个模板，以快捷键或键盘字母来调出)</span><br><span class="line"></span><br><span class="line">idea自动导包设置:https://blog.csdn.net/zhou520yue520/article/details/82713820(Java常用包，默认导入，减少alt/enter导包操作)</span><br><span class="line"></span><br><span class="line">idea如何查看maven依赖结构:https://www.cnblogs.com/acm-bingzi/p/idea-maven-construction.html(当项目打包失败时，查看maven依赖，看那个依赖是否有冲突)</span><br><span class="line"></span><br><span class="line">idea 提示方法参数鼠标悬停提示:https://blog.csdn.net/qq_38250124/article/details/79837366(查看方法体验较好)</span><br><span class="line"></span><br><span class="line">idea中的git操作:https://blog.csdn.net/lovesummerforever/article/details/50032937(充分利用idea自带可视化git，减少命令行提交带来的不可控因素，如代码未格式化等问题)</span><br><span class="line"></span><br><span class="line">IDEA正确设置编码统一为UTF-8:https://blog.csdn.net/u011275684/article/details/79691316(主要体现，导入项目部分注释是乱码，如果定义成UTF-8，就不会出现这个问题)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows之Java开发环境快速搭建</title>
      <link href="/2019/11/30/Windows%E4%B9%8BJava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/11/30/Windows%E4%B9%8BJava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>说明:Node.js非必须，通常中小公司或创业公司，基本上都要求全栈。</p><p>补充说明:</p><p>除此之外，当公司固定JDK、Maven、Idea、Git、Node.js及其相关IDE等版本时，运维人员或者TeamLeader可将其上传至FTP或者是公司其他文件服务器上面，打成一个较大的zip包，以供新人或者旧人换电脑后，开发环境迁移。</p><a id="more"></a><p>流程:</p><p>1.安装JDK</p><p>2.安装Maven</p><p>3.安装Tomcat</p><p>4.安装Git</p><p>5.安装Node.js</p><p>6.安装Idea</p><p>7.安装WebStorm</p><p>下面除注册码是选自博客文章外，其它均来自官方网站，作为一名开发者应用英语是必须要掌握的:</p><p>安装Idea(ideaIU-2019.2.4):<a href="https://www.jetbrains.com/idea/download/other.html" target="_blank" rel="noopener">https://www.jetbrains.com/idea/download/other.html</a><br>(选择2.4版本下载，下面的注册码破解亲试有效)</p><p>ideaIU-2019.2.4 注册码：<a href="http://www.swzhinan.com/post/247.html" target="_blank" rel="noopener">http://www.swzhinan.com/post/247.html</a></p><p>jdk下载:<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><br>(注意:Oracle有点变态，需要有Oracle对应的账户才能下载，不然最后点击同意协议后，也会跳转到登陆界面)</p><p>Maven下载:<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a><br>(去官网找对应的版本即可)</p><p>tomcat下载:<a href="https://tomcat.apache.org/" target="_blank" rel="noopener">https://tomcat.apache.org/</a><br>(去官网找对应的版本即可)</p><p>Node.js:<a href="https://nodejs.org/en/download/releases/" target="_blank" rel="noopener">https://nodejs.org/en/download/releases/</a><br>(先前版本，选择合适的版本下载)</p><p>webstorm3注册码:<a href="https://blog.csdn.net/yejinxiong001/article/details/90262960" target="_blank" rel="noopener">https://blog.csdn.net/yejinxiong001/article/details/90262960</a></p><p>git下载地址:<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a><br>(主要针对部分公司以Git作为版本控制)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax之解析xml</title>
      <link href="/2019/11/26/ajax%E4%B9%8B%E8%A7%A3%E6%9E%90xml/"/>
      <url>/2019/11/26/ajax%E4%B9%8B%E8%A7%A3%E6%9E%90xml/</url>
      
        <content type="html"><![CDATA[<p>今天之所以要分享这个例子，也是因为最近做博客开发，将第三方博客相关文章迁移到我自己的平台来。</p><p>通常迁移到自己的平台上有这么几种方式(以博客园为例):<br>1.导出xml，使用java程序遍历读取并存入对应的数据表;<br>2.博客园有自己公开的API，可以通过请求API拿到对应的xml数据，插入数据表;<br>3.使用爬虫技术;</p><p>上述三种我都尝试过，今天我要说的是其中2，也就是根据博客园API拿到xml数据。</p><p>今天不说后端，后端我已经将博客园API做了一定的封装，今天主要说ajax如何解析xml，并获得想要的数据。<br><a id="more"></a><br>前端代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;blog-analyze-xml-example&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src=&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">type: &quot;GET&quot;,</span><br><span class="line">url: &quot;http://localhost:2019/blog-web/cnblogs/get48HoursTopViewPosts/20&quot;,</span><br><span class="line">dataType: &quot;xml&quot;,</span><br><span class="line">success: function (ResponseText) &#123;</span><br><span class="line">alert(ResponseText);</span><br><span class="line"></span><br><span class="line">$(ResponseText).find(&apos;author&apos;).each(function () &#123;</span><br><span class="line">var name = $(this).find(&apos;name&apos;).text();</span><br><span class="line"></span><br><span class="line">console.log(&quot;name:&quot;+name);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>这段代码关键就是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$(ResponseText).find(&apos;author&apos;).each(function () &#123;</span><br><span class="line">var name = $(this).find(&apos;name&apos;).text();</span><br><span class="line"></span><br><span class="line">console.log(&quot;name:&quot;+name);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>xml是一个文档树形结构数据，通过find()找到你想要的节点，拿到对应的值，这时你想做什么就做什么。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之建造者模式</title>
      <link href="/2019/11/23/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/11/23/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-建造者模式的定义">一、建造者模式的定义</span></h2><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。<br><a id="more"></a></p><h2><span id="二-建造者模式的应用">二、建造者模式的应用</span></h2><h3><span id="1建造者模式的优点">1.建造者模式的优点</span></h3><h4><span id="1封装性">(1)封装性</span></h4><p>使用建造者模式可以使客户端不必知道产品内部组成的细节，如例子中我们就不需要关心每一个具体的模型内部是如何实现的，产生的对象类型就是CarModel。</p><h4><span id="2建造者独立容易扩展">(2)建造者独立，容易扩展</span></h4><p>BenzBuilder和BMWBuidler是相互独立的，对系统的扩展非常有利。</p><h4><span id="3便于控制细节风险">(3)便于控制细节风险</span></h4><p>由于具体的建造者是独立的，因此可以对建造过程逐步细化，而不对其他的模块产生任何影响。</p><h3><span id="2建造者模式的使用场景">2.建造者模式的使用场景</span></h3><ul><li>相同的方法，不同的执行顺序，产生不同的事件结果时，可以采用建造者模式;</li><li>多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不相同时，则可以使用该模式;</li><li>产品类非常复杂，或者产品类中的调用顺序不同产生不同的效能，这个时候使用建造者模式非常合适;</li><li>在对象创建过程中会使用系统中的一些其他对象，这些对象在产品对象的创建过程中不易得到时，也可以采用建造者模式封装该对象的创建过程。这种场景只能是一个补偿方法，因为一个对象不容易获得，而在设计阶段竟然没有发觉，而要通过创建者模式柔化创建过程，本身已经违反设计的最初目标;</li></ul><h3><span id="3建造者模式的注意事项">3.建造者模式的注意事项</span></h3><p>建造者模式关注的是零件类型和装配工艺(顺序)，这是它与工厂方法模式最大不同的地方，虽然同为创建类模式，但是注重点不同。</p><h2><span id="三-最佳实践">三、最佳实践</span></h2><p>实际中使用建造者模式时，考虑下模板方法模式，别孤立地思考一个模式，僵化地套用一个模式会让你受害无穷。</p><p>代码示例:<a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/Builder" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/Builder</a></p><p>建议最好写代码实践，可以以我github这个例子作为基准。通过写代码能够更好的理解建造者模式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之模板方法模式</title>
      <link href="/2019/11/11/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/11/11/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-模板方法模式定义">一、模板方法模式定义</span></h2><p>定义一个操作中的算法的框架，二将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。<br><a id="more"></a><br>Abstract-Class叫抽象模板，它的方法分为两类:</p><h3><span id="1基本方法">1.基本方法</span></h3><p>基本方法也叫做基本操作，是由子类实现的方法，并且在模板方法被调用。</p><h3><span id="2模板方法">2.模板方法</span></h3><p>可以有一个或几个，一般是一个具体方法，也就是一个框架，实现对基本方法的调度，完成固定的逻辑。</p><p>注意:<br>(1)为了防止恶意操作，一般模板方法都加上final关键字，不允许被覆写(重写);</p><p>(2)抽象模板中的基本方法尽量设计为protected类型，符合迪米特法则，不需要暴露的属性或方法尽量不要设置为protected类型。实现类若非必要，尽量不要扩大父类中的访问权限;</p><h2><span id="二-模板方法模式的应用">二、模板方法模式的应用</span></h2><h3><span id="1模板方法模式的优点">1.模板方法模式的优点</span></h3><ul><li>封装不变部分，扩展可变部分;</li><li>提取公共代码，便于维护;</li><li>行为由父类控制，子类实现;</li></ul><h3><span id="2模板方法模式的缺点">2.模板方法模式的缺点</span></h3><p>按照我们的设计习惯，抽象类负责声明最抽象、最一般的事物属性和方法，实现类完成具体的事物属性和方法。但模板方法模式却颠倒了，抽象类定义部分抽象方法，由子类实现，子类执行的结果影响了父类的结果，也就是子类对父类产生了影响，这在复杂的项目中，会带来代码阅读的难度，而且也会让新手产生不适感。</p><h3><span id="3模板方法模式的使用场景">3.模板方法模式的使用场景</span></h3><ul><li>多个子类有公有的方法，并且逻辑基本相同时;</li><li>重要、复杂的算法，可以把核心算法设计为模板方法，周边的相关细节功能则由各个子类实现;</li><li>重构时，模板方法模式是一个经常使用的模式把相同的代码抽取到父类中，然后通过钩子函数约束其行为;</li></ul><h2><span id="三-最佳实践">三、最佳实践</span></h2><p>本次代码例子:<a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/Template" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/Template</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之抽象工厂模式</title>
      <link href="/2019/11/10/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/11/10/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-抽象工厂模式的定义">一、抽象工厂模式的定义</span></h2><p>为创建一组相关或相互依赖的对象提供一个接口，而且无须指定它们的具体类。<br><a id="more"></a></p><h2><span id="二-抽象工厂模式的应用">二、抽象工厂模式的应用</span></h2><h3><span id="1抽象工厂模式的优点">1.抽象工厂模式的优点</span></h3><ul><li><strong>封装性</strong>，每个产品的实现类不是高层模块要关心的，它要关心的是什么？是接口，是抽象，它不关心对象是如何创建出来的，这由谁负责呢？工厂类，只要知道工厂类是谁，我就能创建出一个需要的对象，省时省力，优秀设计就应该如此;</li><li><strong>产品族内的约束为非公开状态</strong>。例如生产男女比例的问题上，猜想女娲娘娘肯定有自己的打算，不能让女盛男衰，否则女性的优点不就体现不出来了吗?那在抽象工厂模式，就应该有这样的约束:每生产1个女性，就同时生产出1.2个男性，这样的生产过程对调用工厂类的高层模块来说是透明的，它不需要知道这个约束，我就是要一个黄色女性产品就可以，具体的产品族内的约束是在工厂内实现的;</li></ul><h3><span id="2抽象工厂模式的缺点">2.抽象工厂模式的缺点</span></h3><p>抽象工厂模式的最大缺点就产品族<strong>扩展非常困难</strong>，为什么这么说呢？我们以通用代码为例，如果要增加一个产品C，也就是说产品家族由原来的2个增加到3个，抽象类AbstractCreator要增加一个方法createProductC()，然后两个实现类毒药修改，想想看，这严重违背了开闭原则，而且我们一直说明抽象类和接口是一个契约。改变契约，所有与契约有关系的代码都要修改，那么这段代码叫有毒代码，只要与这段代码有关系，就可能产生侵害的危险。</p><h3><span id="3抽象工厂模式的使用场景">3.抽象工厂模式的使用场景</span></h3><p>抽象工厂模式的使用场景定义非常简单:一个对象族(或是一组没有任何关系的对象)都有相同的约束，则可以使用抽象工厂模式。<br>什么意思呢?例如一个文本编辑器和一个图片处理器，都是软件实体，但是*nix下的文本编辑器和Window下的文本编辑器虽然功能和界面都相同，但是代码实现是不同的，图片处理器也有类似情况。也就是具有了共同的约束条件:操作系统类型。于是我们可以使用抽象工厂模式，产生不同操作系统下的编辑器和图片处理器。</p><h3><span id="4抽象工厂模式的注意实现">4.抽象工厂模式的注意实现</span></h3><p>在抽象工厂模式的缺点中，我们提到抽象工厂模式的产品族扩展比较困难，但是一定要清楚，是产品族扩展困难，而不是产品等级。在该模式下，产品等级是非常容易扩展的，增加一个产品等级，只要增加一个工厂类负责新增加出来的产品生产任务即可。也就是说<strong>横向扩展容易，纵向扩展困难</strong>。以人类为例子，产品等级中只有男、女两个性别，现实世界还有一种性别:双性人，既是男人也是女人，那我们要扩展这个产品等级也是非常容易，增加三个产品类，分别对应不同肤色，然后再创建一个工厂类，专门负责不同肤色人的双性人的创建任务，完全通过扩展来实现需求的变更，从这一点上看，抽象工厂模式是符合开闭原则的。</p><h2><span id="三-最佳实践">三、最佳实践</span></h2><p>抽象工厂模式是一个简单的模式，使用的场景非常多，大家在软件产品开发过程中，涉及不同操作系统的时候，都可以考虑使用抽象工厂模式，例如一个应用需要在三个不同平台(Window、Linux、Android)上运行，你会怎么设计?分别设计三套不同的应用？非也，通过抽象工厂模式屏蔽掉操作系统对应用的影响。三个不同操作系统上的软件功能、应用逻辑、UI都应该是非常类似的，唯一不同的是调用不同的工厂方法，由不同的产品类去处理与操作系统交互的信息。</p><p>相关代码示例:<a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/AbstractFactory" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/AbstractFactory</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之工厂方法模式</title>
      <link href="/2019/11/08/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/11/08/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-工厂方法模式定义">一、工厂方法模式定义</span></h2><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。<br><a id="more"></a></p><h2><span id="二-工厂方法模式的应用">二、工厂方法模式的应用</span></h2><h3><span id="1工厂方法模式的优点">1.工厂方法模式的优点</span></h3><ul><li>首先，良好的封装性，代码结构清晰。一个对象创建是有条件约束的，如一个调用者需要一个具体的产品对象，只要知道这个产品的类名(或约束字符串)就可以了，不用知道创建对象的艰辛过程，降低模块间的耦合;</li><li>其次，工厂方法模式的扩展性非常优秀。在增加产品类的情况下，只要适当地修改具体的工厂类或扩展一个工厂类，就可以完成”拥抱变化”。例如在我们的例子中，需要增加一个棕色人种，则只需要增加一个BrownHuman类，工厂类不用任何修改就可以完成系统扩展;</li><li>再次，屏蔽产品类。这一特点非常重要，产品类的实现如何变化，调用者都不需要关心，它只需要关心产品的接口，只要接口保持不变，系统中的上层模块就不要发生变化。因为产品类的实例化工作是由工厂类负责的，一个产品对象具体由哪个产品生成是由工厂类决定的。在数据库开发中，大家应该能够深刻体会到工厂方法模式的好处:如果使用JDBC连接数据库，数据库从MySQL切换到Oracle，需要改动的地方就是切换一下驱动名称(前提条件是SQL语句是标准语句)，其他的都不需要修改，这是工厂方法模式灵活性的一个直接案例;</li><li>最后，工厂方法模式是典型的解耦框架。高层模块只需要知道产品的抽象类，其他的实现类都不用关心，符合迪米特法则，我不需要的就不要去交流；也符合依赖倒置原则，只依赖产品类的抽象；当然也符合里氏替换原则，使用产品子类替换产品父类;</li></ul><h3><span id="2工厂方法模式的应用场景">2.工厂方法模式的应用场景</span></h3><ul><li>首先，工厂方法模式是new一个对象的替代品，所以在所有需要生成对象的地方都可以使用，但是需要慎重地考虑是否要增加一个工厂类进行管理，增加代码的复杂度;</li><li>其次，需要灵活地、可扩展的框架时，可以考虑采用工厂方法模式。万物皆对象，那万物也就皆产品类,例如需要设计一个连接邮件服务器的框架，有三种网络协议可供选择:POP3、IMAP、HTTP，我们就可以把这三种连接方法，用不同的方法实现三个具体的产品类(也就是连接方式)再定义一个工厂方法，按照不同的传入文件，选择不同的连接方式。如此设计，可以做到完美的扩展，如某些邮件服务器提供了WebService接口，很好，我们只要增加一个产品类就可以了;</li><li>再次，工厂方法模式可以用在异构项目中，例如通过WebService与一个非Java的项目交互，虽然WebService号称可以做到异构系统的同构化，但是在实际的开发中，还是会碰到很多问题，如类型问题、WSDL文件的支持问题，等等;从WSDL中产生的对象都认为是一个产品，然后由一个具体的工厂类进行管理，减少与外围系统的耦合;</li><li>最后，可以使用在测试驱动开发的框架下。例如，测试一个类A，就需要把与类A有关联关系的类B也同时产生出来，我们可以使用工厂方法模式把类B虚拟出来，避免类A和类B的耦合。目前由于JMock和EasyMock的诞生，该使用场景已经弱化了，读者可以在遇到此种情况时直接考虑使用JMock或EasyMock;</li></ul><h2><span id="三-工厂方法模式的扩展">三、工厂方法模式的扩展</span></h2><ul><li>缩小为简单工厂模式;</li><li>升级为多个工厂类;</li><li>替代单例模式;</li><li>延迟初始化;</li></ul><h2><span id="四-最佳实践">四、最佳实践</span></h2><p>工厂方法模式在项目中使用得非常频繁，以至于很多代码中都包含工厂方法模式。该模式几乎尽人皆知，但不是每个人都能用得好。熟能生巧，熟练掌握该模式，多思考工厂方法如何应用，而且工厂方法模式还可以与其他模式混合使用(例如模板方法模式、单例模式、原型模式等)，变化出无穷的优秀设计，这也是软件设计和开发的乐趣所在;</p><p>代码例子:<a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/Factory" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/Factory</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之单例模式</title>
      <link href="/2019/11/07/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/11/07/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-单例模式定义">一、单例模式定义</span></h2><p>确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。<br><a id="more"></a></p><h2><span id="二-单例模式的应用">二、单例模式的应用</span></h2><h3><span id="1单例模式的优点">1.单例模式的优点</span></h3><ul><li>由于单例模式再内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁地创建、销毁时，而且创建或销毁时性能又无法优化，单例模式的优势就非常明显;</li><li>由于单例模式只生成一个实例，所以减少了系统的性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后用永久驻留内存的方式解决(在JavaEE中采用单例模式时需要注意JVM垃圾回收机制);</li><li>单例模式可以避免对资源的多重占用，例如一个写文件动作，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作;</li><li>单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理;</li></ul><h3><span id="2单例模式的缺点">2.单例模式的缺点</span></h3><ul><li>单例模式一般没有接口，扩展很困难，若要扩展，除了修改代码基本上没有第二种途径可以实现。单例模式为什么不能增加接口呢?因为接口对单例模式是没有意义的，它要求”自行实例化”，并且提供单一实例、接口或抽象类是不可能被实例化的。当然，在特殊情况下，单例模式可以实现接口、被继承等，需要在系统开发中根据环境判断;</li><li>单例模式对测试是不利的。在并行开发环境中，如果单例模式没有完成，是不能进行测试的，没有接口也不能使用mock的方式虚拟一个对象;</li><li>单例模式与单一职责原则有冲突。一个类应该只实现一个逻辑，而不关心它是否是单例的，是不是要单例取决于环境，单例模式把”要单例”和业务逻辑融合在一个类中;</li></ul><h3><span id="3单例模式的使用场景">3.单例模式的使用场景</span></h3><ul><li>要求生成唯一序列号的环境;</li><li>在整个项目中需要把一个共享访问点或共享数据，例如一个Web页面上的计数器，可以不用把每次刷新都记录到数据库中，使用单例模式保持计数器的值，并确保是线程安全的;</li><li>创建一个对象需要消耗的资源过多，如要访问IO和数据库等资源;</li><li>需要定义大量的静态常量和静态方法(如工具类)的环境，可以采用单例模式(当然，也可以直接声明为static的方式);</li></ul><h2><span id="三-最佳实践">三、最佳实践</span></h2><p>单例模式是23个模式中比较简单的模式，应该也非常广泛，如在Spring中，每个Bean默认就是单例的，这样做的优点是Spring容器可以管理这些Bean的生命期，决定什么时候创建出来，什么时候销毁，销毁的时候要如何处理，等等。如果采用非单例模式，则Bean初始化后的管理交由J2EE容器，Spring容器不再跟踪管理Bean的生命周期。</p><p>代码例子:<a href="https://github.com/developers-youcong/DesignPatternPractice/tree/master/Singleton" target="_blank" rel="noopener">https://github.com/developers-youcong/DesignPatternPractice/tree/master/Singleton</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之六大设计原则下篇</title>
      <link href="/2019/11/06/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E5%85%AD%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8B%E7%AF%87/"/>
      <url>/2019/11/06/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E5%85%AD%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8B%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>本文主要讲迪米特法则和开闭原则。<br><a id="more"></a></p><h2><span id="一-迪米特法则">一、迪米特法则</span></h2><h3><span id="1定义">1.定义</span></h3><p>迪米特法则也称最少知道原则，虽然名字不同，但描述的是同一个规则:一个对象应该对其他对象有最少的了解。通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，你(被耦合或调用的类)的内部是如何复杂都和我没关系，那是你的事情，我就知道你提供的这么多public方法，我就调用这么多，其他的我一概不关心。</p><h3><span id="2迪米特法则对类的低耦合提出明确的要求">2.迪米特法则对类的低耦合提出明确的要求</span></h3><p>4层含义如下:</p><h4><span id="1只和朋友交流">(1)只和朋友交流</span></h4><p>迪米特法则还有一个解释是:只与直接的朋友通信。</p><p>什么叫直接的朋友?<br>每个对象都必然会与其他对象有耦合关系，两个对象之间的耦合就成为朋友关系，这种关系的类型有很多，例如组合、聚合、依赖等。</p><p>注意:<br>一个类只和朋友交流，不与陌生类交流，不要出现getA().getB().getC().getD()这种情况(在一种极端的情况下允许出现这种访问，即每个点号后面的返回类型都相同)，类与类之间的关系是建立在类间的，而不是方法间，因此一个方法尽量不引入一个类中不存在的对象，当然，JDK API提供的类例外。</p><h4><span id="2朋友间也是有距离的">(2)朋友间也是有距离的</span></h4><p>人和人之间是有距离的，太远关系逐渐疏离，最终形同陌路；太近就相互刺伤。对朋友关系描述最贴切的故事就是:两只刺猬取暖，太远取不到温暖，太近刺伤对方，必须保持一个既能取暖又不刺伤对方的距离。迪米特法则就是对这个距离进行描述，即使是朋友类之间也不能无话不说，无所不知。</p><p>注意:迪米特法则要求类”羞涩”一点，尽量不要对外公布太多public方法和非静态的public变量，尽量内敛，多使用private、package-private、protected等访问权限。</p><h4><span id="3是自己的就是自己的">(3)是自己的就是自己的</span></h4><p>在实际应用中经常会出现这样一个方法:放在本类中也可以，放在其他类中也没有错，那怎么去衡量呢?你可以坚持这样一个原则:如果一个方法放在本类中，既不增加类间关系，也对本类不产生负面影响，那就放置在本类中。</p><h4><span id="4谨慎使用serializable">(4)谨慎使用Serializable</span></h4><h3><span id="3最佳实践">3.最佳实践</span></h3><p>迪米特法则的核心观念:<br>类间解耦，弱耦合，只有弱耦合了以后，类的复用率才可以提高。其要求的结果就是:产生了大量的中转或跳转类，导致系统的复杂性提高，同时也为维护带来了难度。所以我们在采用迪米特法则时，需要反复权衡，既做到让结构清晰，又做到高内聚低耦合。</p><h2><span id="二-开闭原则">二、开闭原则</span></h2><h3><span id="1定义">1.定义</span></h3><p>一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。</p><p>注意:<br>开闭原则对扩展开放，对修改关闭，并不意味着不做任何修改，低层模块的变更，必然要有高层模块进行耦合，否则就是一个孤立无意义的代码片段。</p><p>变化可以归纳为如下三类:</p><h4><span id="1逻辑变化">(1)逻辑变化</span></h4><p>只变化一个逻辑，而不涉及其他模块，比如原有的一个算法是a<em>b+c，现在需要修改为a</em>b*c，可以通过修改原有类中的方法的方式来完成，前提条件是所有依赖或关联类都按照相同的逻辑处理。</p><h4><span id="2子模块变化">(2)子模块变化</span></h4><p>一个模块变化，会对其他的模块产生影响，特别是一个低层次的模块变化必然引起高层模块的变化，因此在通过扩展完成变化时，高层次的模块修改是必然的。</p><h4><span id="3可见视图变化">(3)可见视图变化</span></h4><p>可见视图是提供给客户使用的界面，如JSP程序、Swing界面等，该部分的变化一般会引起连锁反应(这个连锁反应，我相信使用过JSP作为视图层的朋友们都深有感触)</p><h3><span id="2为什么要采用开闭原则">2.为什么要采用开闭原则</span></h3><p>都说开闭原则是非常重要的，可通过以下几个方面来理解其重要性:</p><h4><span id="1开闭原则对测试的影响">(1)开闭原则对测试的影响</span></h4><h4><span id="2开闭原则可以提高复用性">(2)开闭原则可以提高复用性</span></h4><h4><span id="3开闭原则可以提高可维护性">(3)开闭原则可以提高可维护性</span></h4><h4><span id="4面向对象开发的要求">(4)面向对象开发的要求</span></h4><h3><span id="3如何使用开闭原则">3.如何使用开闭原则</span></h3><h4><span id="1抽象约束">(1)抽象约束</span></h4><p>抽象是对一组事物的通用描述，没有具体的实现，也就表示它可以由非常多的可能性，可以跟随需求的变化而变化。因此，通过接口或抽象类可以约束一组可能变化的行为，并且能够实现对扩展开放，其包含三层含义:<br>第一,通过接口或抽象类约束扩展，对扩展进行边界限定，不允许出现在接口或抽象类中不存在的public方法;<br>第二,参数类型、引用对象尽量使用接口或抽象类，而不是实现类;<br>第三,抽象层尽量保持稳定，一旦确定即不允许修改;</p><h4><span id="2元数据控制模块行为">(2)元数据控制模块行为</span></h4><p>尽量使用元数据来控制程序的行为，减少重复开放。</p><p>什么是元数据?<br>用来描述环境和数据的数据，通俗地说就是配置参数，参数可以从文件中获得，也可以从数据库中获得。</p><h4><span id="3指定项目章程">(3)指定项目章程</span></h4><p>在一个团队中，建立项目章程是非常重要的，因为章程中指定了所有人员都必须遵守的约定，对项目来说，约定优于配置。</p><h4><span id="4封装变化">(4)封装变化</span></h4><p>对变化的封装包含两层含义:<br>第一，将相同的变化封装到一个接口或抽象类中;<br>第二，将不同的变化封装到不同的接口或抽象类中，不应该由两个不同的变化出现在同一个接口或抽象类中;</p><p>封装变化，也就是受保护的变化，找出预计有变化或不稳定的点，我们为这些变化点创建稳定的接口，准确地讲是封装可能发生的变化，一旦预测或”第六感”发觉有变化，就可以进行封装，23种设计模式都是从各个不同的角度对变化进行封装的。</p><h3><span id="4最佳实践">4.最佳实践</span></h3><p>我们在使用开闭原则时要注意以下几个问题?</p><ul><li>开闭原则也只是一个原则(开闭原则只是精神口号，实现拥抱变化的方法非常多，并不局限于6大设计原则，但是遵循这6大设计原则基本上可以应对大多数变化);</li><li>项目规章非常重要(优秀的章程可以给项目带来很多好处，如提高开放效率、降低缺陷率、提高团队士气、提高技术成员水平等);</li><li>预知变化(适应未来的变化，比如未来新增某项功能需求，在不影响现有的架构下，轻松扩展就能实现等);</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之六大设计原则中篇</title>
      <link href="/2019/11/05/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E5%85%AD%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%AD%E7%AF%87/"/>
      <url>/2019/11/05/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E5%85%AD%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%AD%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>本文主要讲依赖倒置原则和接口隔离原则。<br><a id="more"></a></p><h2><span id="一-依赖倒置原则">一、依赖倒置原则</span></h2><h3><span id="1定义">1.定义</span></h3><ul><li>高层模块不应该依赖低层模块，两者都应该依赖其抽象;</li><li>抽象不应该依赖细节;</li><li>细节应该依赖于抽象;</li></ul><p>高层模块和低层模块容易理解，每一个逻辑的实现都是由原子逻辑组成的，不可分割的原子逻辑就是低层模块，原子逻辑的再组装就是高层模块。</p><p>那什么是抽象?什么又是细节呢?<br>在Java语言中，抽象就是指接口或抽象类，两者都不能直接被实例化；细节就是实现类，实现接口或者继承抽象类而产生的类就是细节，其特点是可以直接被实例化，也就是可以加上一个关键字new产生一个对象。</p><p>在Java语言中的表现就是:</p><ul><li>模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象产生的;</li><li>接口或抽象类不依赖于实现类;</li><li>实现类依赖接口或抽象类;</li></ul><p>采用依赖倒置原则可以减少类间的耦合性，提高系统的稳定性，降低并行开发引起的风险，提高代码的可读性和可维护性。</p><p>注意:设计是否具备稳定性，只要适当地”松松土”，观察”设计的蓝图”是否还可以茁壮地成长就可以得出结论，稳定性较高的设计，在周围环境频繁变化的时候，依然可以做到”我自岿然不动”。</p><h4><span id="2依赖的三种写法">2.依赖的三种写法</span></h4><h4><span id="1构造函数传递依赖对象">(1)构造函数传递依赖对象</span></h4><p>在类中通过构造函数声明依赖对象，按照依赖注入的说法，这种方式叫做构造函数注入。</p><h4><span id="2setter方法传递依赖对象">(2)Setter方法传递依赖对象</span></h4><p>在抽象中设置etter方法声明依赖关系，依照依赖注入的说法，这是Setter依赖注入。</p><h4><span id="3接口声明依赖对象">(3)接口声明依赖对象</span></h4><p>在接口的方法中声明依赖对象。</p><h3><span id="3最佳实践">3.最佳实践</span></h3><p>依赖倒置原则的本质就是通过抽象(接口或抽象类)使各个类或模块的实现彼此独立，不互相影响，实现模块间的松耦合，我们怎么在项目中使用这个规则呢?<br>只要遵循如下几个规则即可:</p><ul><li>每个类尽量都有接口或抽象类或者抽象类和接口两者都具备(这是依赖倒置的基本要求，接口和抽象类都是属于抽象的，有了抽象才可能依赖倒置);</li><li>变量的表面类型尽量是接口或是抽象类;</li><li>任何类都不应该从具体类派生;</li><li>尽量不要覆写基类的方法(如果基类是一个抽象类，而且这个方法已经实现了，子类尽量不要覆写。类间依赖的是抽象，覆写了抽象方法，对依赖的稳定性会产生一定的影响);</li><li>结合里氏替换原则使用;</li></ul><h2><span id="二-接口隔离原则">二、接口隔离原则</span></h2><h3><span id="1定义">1.定义</span></h3><p>先明确主角-接口，接口分为两种:</p><ul><li>实例接口，在Java中声明一个类，然后用new关键字产生一个实例，它是对一个类型的事物的描述，这是一种接口。比如你定义Person这个类，然后使用Person zhangSan = new Person()产生了一个实例，这个实例要遵从的标准就是Person这个类，Person类就是zhangSan的接口。Java中的类也是一种接口;</li><li>类接口，Java中经常使用的interface关键字定义的接口;</li></ul><p>那什么是隔离?<br>两种定义如下:</p><ul><li>客户端不应该依赖它不需要的接口;</li><li>类间的依赖关系应该建立在最小的接口上;</li></ul><p>先说第一种定义:”客户端不应该依赖它不需要的接口”，那依赖什么?依赖它需要的接口，把不需要的接口剔除掉，那就需要对接口进行细化，保证其纯洁性;<br>再看第二种定义:”类间的依赖关系应该建立在最小的接口上”，它要求是最小的接口，也是要求接口细化，接口纯洁，与第一个定义如出一辙，只是一个事物的两种不同描述。</p><p>归纳为一句话:建立单一的接口，不要建立臃肿庞大的接口(通俗的讲:接口尽量细化，同时接口中的方法尽量少)。</p><p>有人可能会疑惑，这与单一职责原则不是相同吗?<br>接口隔离原则和单一职责原则的审视角度是不相同的，单一职责要求的是类和接口职责单一，注重的是职责，这是业务逻辑上的划分，二接口隔离原则要求接口的方法尽量少。</p><p>例如一个接口的职责可能包含10个方法，这10个方法都放在一个接口中，并且提供多个模块访问，在系统外通过文档约束”不使用的方法不要访问”，按照单一职责原则是允许的，因为它要求”尽量使用多个专门的接口”。专门的接口指什么?就是指提供给每个模块的都应该是单一接口，提供给几个模块就应该有几个接口，而不是建立一个庞大的臃肿的接口，容纳所有的客户端访问。</p><h3><span id="2保证接口的纯洁性">2.保证接口的纯洁性</span></h3><p>接口隔离原则是对接口进行规范约束，其包含以下4层含义:</p><ul><li>接口要尽量小;</li><li>接口要高内聚(高内聚就是提高接口、类、模块的处理能力，减少对外交互);</li><li>定制服务(定制服务就是单独为一个个体提供优良的服务);</li><li>接口设计是有限度的(接口的设计粒度越小，系统越灵活，这是不争的事实);</li></ul><h3><span id="3最佳实践">3.最佳实践</span></h3><p>接口隔离原则是对接口的定义，同时也是对类的定义，接口和类尽量使用原子接口或原子类来组装。但是这个原子该怎么划分是设计模式中的一大难题，在实践中科院根据以下几个规则来衡量?</p><ul><li>一个接口只服务于一个子模块或业务逻辑;</li><li>通过业务逻辑压缩接口中的public方法，接口时常去回顾，尽量让接口达到”满身筋骨肉”，而不是”肥嘟嘟”的一大堆方法;</li><li>已经被污染了的接口，尽量去修改，若变更风险较大，则采用适配器模式进行转化处理;</li><li>了解环境，拒绝盲从。每个项目或产品都有特定的环境因素，别看到大师是这样做的你就照抄。千万别，环境不同，接口拆分的标准就不同。深入了解业务逻辑，最好的设计就出自你的手中;</li></ul><p>那么怎么才能正确地使用接口隔离原则呢?<br>答案是根据经验和常识决定接口的粒度大小，接口粒度太小，导致接口数据剧增，开发人员呛死在接口的海洋里；接口粒度太大，灵活性降低，无法提供定制服务给整体项目带来无法预料的风险。</p><p>怎么准确地实践接口隔离原则?<br>实践、经验和领域。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》之六大设计原则上篇</title>
      <link href="/2019/11/04/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E5%85%AD%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8A%E7%AF%87/"/>
      <url>/2019/11/04/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E4%B9%8B%E5%85%AD%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8A%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>本文主要讲单一职责原则和里氏替换原则。<br><a id="more"></a></p><h2><span id="一-单一职责原则">一、单一职责原则</span></h2><h3><span id="1定义">1.定义</span></h3><p>应该有且有一个原因引起类的变更。</p><h3><span id="2单一职责原则的好处">2.单一职责原则的好处</span></h3><h4><span id="好处如下">好处如下:</span></h4><ul><li>类的复杂性降低，实现什么职责都有明确清晰的定义;</li><li>可读性提高，复杂性降低,那当然可读性提高;</li><li>可维护性提高，可读性提高，那当然更容易维护了;</li><li>变更引起的风险降低，变更是不必可少的，如果接口的单一职责做得好，一个接口修改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大的帮助;</li></ul><p>注意:<br>单一职责原则提出了一个编写程序的标准，用”职责”或”变化原因”来衡量接口或类设计得是否优良，但是”职责”和”变化原因”都是不可度量得，因项目而异，因黄金而异。</p><h3><span id="3小结">3.小结</span></h3><p>对于单一职责原则，以我实际开发为例，在公司开发项目，基本上沿用得开发模式就是MVC,模型-视图-控制器，每个职责不一样。然后再往大的范围来说，分层，比如数据访问层、业务逻辑层、视图表现层(其中该层就是MVC的应用)。<br>数据访问层，通常编写的就是一些基础的CRUD，而业务逻辑层就是数据访问层里的CRUD一同用于处理某项业务。</p><p>还有就是单一职责的一个体现就是一个函数办一件事情，比方说业务逻辑层中修改密码(设计db操作修改用户信息)，最好是修改密码是一个方法，修改用户基本信息(例如昵称、性别、职位、籍贯等)是另外一个方法。不同的方法(不同的函数)办的事情不一样，我觉得这样也是单一职责的一个最好实践。记得刚工作第一年的时候，写代码基本上数据访问层就和业务逻辑层是一样的，这样的写法导致的后果是，如果是少量的五到六个类还好，但如果数十个的话或成百上千个这样写的话，后果将会非常严重，直接会导致维护成本的上升，可扩展性差、可维护性差等。</p><p>最后归纳一点，单一职责如果是以自己平时写写Demo玩玩而言实现起来并不困难。但是对于公司而言就不一样了，拿我曾经接手的一个项目来说，该项目采用jfinal框架，然后前任架构师对其又再度修改封装了很多东西，可以称之为扩展。当我接手这个项目的时候，初看项目结构，捋了下，大致能根据包名看出功能分层，但当我深入阅读的时候，发现太多的拼接sql，而且业务逻辑层和数据访问层并未分层明确，就像我们一般开发喜欢分为视图、业务、数据这样的分层，而这个项目基本上就是视图(一种是返回jsp，另外一种作为路由返回JSON数据)，业务实现(基本上就是写业务逻辑的)，还有较多的dto、request、response等包名下的众多类。</p><p>通常我所认为的最佳实践就是:<br><strong>1.分层</strong>(表现层-业务逻辑层-数据访问层，每层做的事情不一样);<br><strong>2.一个函数只办一件事情</strong>(也许你会发现你可能会编写比较多的函数，例如用户修改密码，一般可以修改用户信息就能实现，但是一般建议分为两个，因为这样一来当数据表结构发生变化，例如新增或修改字段，会降低很多影响，所以不要为了偷懒就用一个函数办两件或多件事情);</p><p>对于单一职责原则，接口一定要做到单一职责，类的设计尽量做到只有一个原因引起变化。</p><h2><span id="二-里氏替换原则">二、里氏替换原则</span></h2><p>继承的优点:</p><ul><li>代码共享，减少创建类的工作量,每个子类都拥有父类的方法和属性;</li><li>提高代码的重用性;</li><li>子类可以形似父类，但又异于父类，例如”龙生龙，风生风，老鼠生来会打洞”，说的就是子拥有父的”种”;</li><li>“子”是指明子与父的不同;</li><li>提高代码的可扩展性，实现父类的方法就可以”为所欲为”了，君不见很多开源框架的扩张接口都是通过继承父类来完成的;</li><li>提高产品或项目的开放性;</li></ul><p>继承的缺点:</p><ul><li>继承是侵入性的。只要继承，就必须拥有父类的所有属性和方法;</li><li>降低代码的灵活性。子类必须要拥有父类的属性和方法，让子类自由的世界中多了些约束;</li><li>增强耦合性。当父类的常量、变量和方法被修改时，需要考虑子类的修改，而且在缺乏规范的环境下，这种修改可能带来非常糟糕结果-一大段的代码需要重构;</li></ul><h3><span id="1里氏替换原则定义">1.里氏替换原则定义</span></h3><p>那么什么是里氏替换原则呢？<br>所有引用基类的地方必须能透明地使用其子类的对象。</p><p>通俗的来说:只要父类能出现的地方子类就可以出现，而且替换为子类也不会产生任何错误或异常，使用者可能根本就不需要知道是父类还是子类。但是，反过来就不行了，有子类出现的地方，父类未必适应。</p><h3><span id="2规范">2.规范</span></h3><p>里氏替换原则为良好的继承定义了一个规范，一句简单的定义包含4层含义。</p><h4><span id="1子类必须完全实现父类的方法">(1)子类必须完全实现父类的方法</span></h4><p>注意:<br>a.在类中调用其他类时务必要使用父类或接口，如果不能使用父类或接口，则说明类的设计已经违背了LSP原则;<br>b.如果子类不能完整地实现父类的方法，或者父类的某些方法在子类中已经发生”畸变”，则建议断开父子继承关系，采用依赖、聚集、组合等关系代替继承。</p><h4><span id="2子类可以有自己的个性">(2)子类可以有自己的个性</span></h4><p>子类可以有自己的行为和外观，也就是方法与属性，那这里为什么要再提呢?<br>是因为里氏替换原则可以正着用，但是不能反着用。在子类出现的地方，父类未必能胜任。</p><h4><span id="3覆盖或实现父类的方法时输入参数可以被放大">(3)覆盖或实现父类的方法时输入参数可以被放大</span></h4><p>方法中的输入参数称为前置条件，这是什么意思?<br>WebService有一个”契约优先”原则，也就是先定义出WSDL接口，制定好双方的开发协议，然后再各自实现。里氏替换原则也要求制定一个契约，就是父类或接口，这种设计方法也叫做契约设计，与里氏替换原则有着异曲同工之妙。契约制定了，也就同时制定了前置条件和后置条件，前置条件就是你要让我执行，就必须满足我的条件;后置条件就是我执行完了需要反馈，标准是什么。</p><h4><span id="4覆写或实现父类的方法时输出结果可以被缩小">(4)覆写或实现父类的方法时输出结果可以被缩小</span></h4><p>这是什么意思呢?<br>父类的一个方法的返回值是一个类型T，子类的相同方法(重载或覆写)的返回值为S，那么里氏替换原则就要求S必须小于等于T，也就是说，要么S和T是同一个类型，要么S是T的子类，为什么呢?<br>分两种情况:<br>如果是覆写，父类和子类的同名方法的输入参数是相同的，两个方法的范围值小于等于T，这是覆写的要求，这才是重中之重，子类覆写父类的方法，天经地义。<br>如果是重载，则要求方法的输入参数类型或数量不相同，在里氏替换原则要求下，就是子类的输入参数宽于或等于父类的输入参数，也就是说你写的这个方法是不会被调用的，参考上面讲的前置条件。</p><p>采用里氏替换原则的目的就是增强程序的健壮性，版本升级时也可以保持非常好的兼容性。即使增加子类，原有的子类还可以继续运行。在实际项目中，每个子类对应不同的业务含义，使用父类作为参数，传递不同的业务含义，使用父类作为参数，传递不同的子类完成不同的业务逻辑。</p><h3><span id="3小结">3.小结</span></h3><p>在项目中，采用里氏替换原则时，尽量避免子类的”个性”，一旦子类有”个性”，这个子类和父类之间的关系就很难调和了，把子类当做父类使用，子类的”个性”被抹杀；把子类单独作为一个业务来使用，则会让代码间的耦合关系变得扑朔迷离，缺乏类替换的标准。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git bash 乱码问题之解决方案</title>
      <link href="/2019/11/03/git-bash-%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/11/03/git-bash-%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>解决办法:<br>右击左上方git标识，然后进入到如图中，点击Text，进行操作。<br><img src="/2019/11/03/git-bash-乱码问题之解决方案/01.png" alt=""><br><a id="more"></a></p><p>操作完毕后，关闭git bash，然后再重新打开，执行ls或ll命令，查看对应的以中文作为目录或文件名是否显示乱码，如果之前是乱码，现在打开查看显示正常，那么就表示该问题已解决。</p><p>本文主要参考链接:<a href="https://jingyan.baidu.com/article/c35dbcb0b12d848917fcbc5b.html" target="_blank" rel="noopener">Git Bash终端中文输出显示乱码解决方案</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nexus没有授权导致的错误</title>
      <link href="/2019/10/26/nexus%E6%B2%A1%E6%9C%89%E6%8E%88%E6%9D%83%E5%AF%BC%E8%87%B4%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/2019/10/26/nexus%E6%B2%A1%E6%9C%89%E6%8E%88%E6%9D%83%E5%AF%BC%E8%87%B4%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>错误详情信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">错误信息:</span><br><span class="line">[ERROR] Failed to execute goal on project blog: Could not resolve dependencies for project com.youcong.test:blog:war:1.0.0: Failed to collect dependencies at com.youcong.test:blog-platform-lib:jar:2.3.06: Failed to read artifact descriptor for com.youcong.test:blog-platform-lib:jar:2.3.06: Could not transfer artifact com.youcong.test:blog-platform-lib:pom:2.3.06_190620 from/to nexus (私服URL): Not authorized -&gt; [Help 1]</span><br><span class="line">[ERROR]</span><br><span class="line">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class="line">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class="line">[ERROR]</span><br><span class="line">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class="line">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/DependencyResolutionException</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>执行mvn install 导致的错误，原因是因为nexus没有授权。</p><p>解决方案:<br>nexus授权即可(在maven对应的settings.xml配置私服即可)</p>]]></content>
      
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之微信公众号开发</title>
      <link href="/2019/10/20/Java%E4%B9%8B%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/"/>
      <url>/2019/10/20/Java%E4%B9%8B%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>这次以文本回复作为案例来讲解Java相关得微信公众号开发。</p><h2><span id="首先必须要有一个个人微信公众号">首先必须要有一个个人微信公众号</span></h2><p>个人微信公众号相关的接口权限有限，不过用于个人学习体验一下足够了，如图:<br><img src="/2019/10/20/Java之微信公众号开发/01.png" alt=""><br><a id="more"></a></p><p>然后进入微信公众后台，点击基本配置，按照如下操作(点击启用，相当于设置请求url为自己后台的):<br><img src="/2019/10/20/Java之微信公众号开发/02.png" alt=""></p><p>设置服务器URL、令牌、消息加解密密钥(这个可以使用自动生成的):<br><img src="/2019/10/20/Java之微信公众号开发/03.png" alt=""></p><p>服务器URL至关重要，我在这里设置为我自己的域名<a href="http://www.youcongtech.com/wx-api。" target="_blank" rel="noopener">http://www.youcongtech.com/wx-api。</a></p><p>这个wx-api就是后面对应的接口(比如我发送某个关键字，返回对应的信息)。<br>token可以设置复杂点。</p><h2><span id="效果图">效果图</span></h2><p><img src="/2019/10/20/Java之微信公众号开发/04.png" alt=""></p><p>上面的演示效果来自本人微信公众号，并长期运行稳定没有任何问题。</p><h2><span id="后台路由代码">后台路由代码</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.springboot.controller;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line">import java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import com.blog.springboot.wx.service.WxService;</span><br><span class="line">import com.blog.springboot.wx.util.SignUtil;</span><br><span class="line"></span><br><span class="line">import io.swagger.annotations.Api;</span><br><span class="line">import io.swagger.annotations.ApiOperation;</span><br><span class="line">/**</span><br><span class="line"> * 微信公众号API</span><br><span class="line"> * @author youcong</span><br><span class="line"> * @date 2019-6-02</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/wx_public_api&quot;)</span><br><span class="line">@Api(tags = &#123; &quot;微信公众号api&quot; &#125;, description = &quot;微信公众号api&quot;)</span><br><span class="line">public class WxPublicApiController extends AbstractController&#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private WxService wxService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       /**</span><br><span class="line">        * 微信公众平台服务器配置验证</span><br><span class="line">        * @param request</span><br><span class="line">        * @param response</span><br><span class="line">        */</span><br><span class="line">   @GetMapping</span><br><span class="line">   @ApiOperation(&quot;微信公众平台服务器配置验证&quot;)</span><br><span class="line">   public void validate(HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class="line">        // 微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数。</span><br><span class="line">        String signature = request.getParameter(&quot;signature&quot;);</span><br><span class="line">        // 时间戳</span><br><span class="line">        String timestamp = request.getParameter(&quot;timestamp&quot;);</span><br><span class="line">        // 随机数</span><br><span class="line">        String nonce = request.getParameter(&quot;nonce&quot;);</span><br><span class="line">        // 随机字符串</span><br><span class="line">        String echostr = request.getParameter(&quot;echostr&quot;);</span><br><span class="line"></span><br><span class="line">        PrintWriter out = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            out = response.getWriter();</span><br><span class="line">            // 通过检验signature对请求进行校验，若校验成功则原样返回echostr，否则接入失败</span><br><span class="line">            if (SignUtil.checkSignature(signature, timestamp, nonce)) &#123;</span><br><span class="line">                out.print(echostr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">            </span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            </span><br><span class="line">        out.close();</span><br><span class="line">            out = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     /**</span><br><span class="line">      * 关注推送消息</span><br><span class="line">      * @param request</span><br><span class="line">      * @param response</span><br><span class="line">      */</span><br><span class="line"> @PostMapping</span><br><span class="line"> @ApiOperation(&quot;关注推送消息&quot;)</span><br><span class="line"> public void about(HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            request.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            logger.error(e.getMessage(),e);</span><br><span class="line">        &#125;</span><br><span class="line">        response.setContentType(&quot;text/html;charset=UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">        // 调用核心业务类接收消息、处理消息</span><br><span class="line">        String respMessage = wxService.newMessageRequest(request);</span><br><span class="line"></span><br><span class="line">        // 响应消息</span><br><span class="line">        PrintWriter out = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            out = response.getWriter();</span><br><span class="line">            out.print(respMessage);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            logger.error(e.getMessage(),e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            out.close();</span><br><span class="line">            out = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="完整代码">完整代码</span></h2><p>完整代码已经放到我个人的GitHub仓库，地址为:<a href="https://github.com/developers-youcong/blog-springcloud-pro/tree/master/blog-wx-client" target="_blank" rel="noopener">https://github.com/developers-youcong/blog-springcloud-pro/tree/master/blog-wx-client</a></p><p>这是其中的子项目，功能主要是微信公众平台。</p><p>鉴于我个人主要维护的开源项目尚未公开，有很多隐私信息等，所以将其中的微信公众号模块抽取出来放到我的新开源项目blog-springcloud-pro中(此项目目前处于开发中)。</p><p>微信公众号模块基本上换上自己的token、appid、appsecret并部署到线上就基本可用了。有任何问题，可留言。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot升级报错:Failed to bind properties under &#39;logging.level&#39;</title>
      <link href="/2019/10/18/SpringBoot%E5%8D%87%E7%BA%A7%E6%8A%A5%E9%94%99-Failed-to-bind-properties-under-logging-level/"/>
      <url>/2019/10/18/SpringBoot%E5%8D%87%E7%BA%A7%E6%8A%A5%E9%94%99-Failed-to-bind-properties-under-logging-level/</url>
      
        <content type="html"><![CDATA[<p>错误详细信息:<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under &apos;logging.level&apos; to java.util.Map&lt;java.lang.String, java.lang.String&gt;</span><br><span class="line">at org.springframework.boot.context.properties.bind.Binder.handleBindError(Binder.java:250) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:226) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:210) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:166) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.logging.LoggingApplicationListener.setLogLevels(LoggingApplicationListener.java:307) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.logging.LoggingApplicationListener.initializeFinalLoggingLevels(LoggingApplicationListener.java:290) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.logging.LoggingApplicationListener.initialize(LoggingApplicationListener.java:238) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.logging.LoggingApplicationListener.onApplicationEnvironmentPreparedEvent(LoggingApplicationListener.java:200) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.logging.LoggingApplicationListener.onApplicationEvent(LoggingApplicationListener.java:173) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) ~[spring-context-5.0.11.RELEASE.jar:5.0.11.RELEASE]</span><br><span class="line">at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-5.0.11.RELEASE.jar:5.0.11.RELEASE]</span><br><span class="line">at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-5.0.11.RELEASE.jar:5.0.11.RELEASE]</span><br><span class="line">at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127) ~[spring-context-5.0.11.RELEASE.jar:5.0.11.RELEASE]</span><br><span class="line">at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:74) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:54) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:338) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:297) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at com.acs.springboot.AcsAdminApplication.main(AcsAdminApplication.java:20) [classes/:na]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_152]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_152]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_152]</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_152]</span><br><span class="line">at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">Caused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.lang.String] to type [java.util.Map&lt;java.lang.String, java.lang.String&gt;]</span><br><span class="line">at org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:321) ~[spring-core-5.0.11.RELEASE.jar:5.0.11.RELEASE]</span><br><span class="line">at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:194) ~[spring-core-5.0.11.RELEASE.jar:5.0.11.RELEASE]</span><br><span class="line">at org.springframework.boot.context.properties.bind.BindConverter$CompositeConversionService.convert(BindConverter.java:162) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:96) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:88) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.properties.bind.MapBinder.bindAggregate(MapBinder.java:67) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.properties.bind.AggregateBinder.bind(AggregateBinder.java:58) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$2(Binder.java:305) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:441) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.properties.bind.Binder$Context.access$100(Binder.java:381) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.properties.bind.Binder.bindAggregate(Binder.java:304) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:262) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:221) ~[spring-boot-2.0.7.RELEASE.jar:2.0.7.RELEASE]</span><br><span class="line">... 21 common frames omitted</span><br></pre></td></tr></table></figure></p><p>抓住关键信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Failed to bind properties under &apos;logging.level&apos;</span><br></pre></td></tr></table></figure></p><p>错误产生背景：<br>SpringBoot1.5.9升级为2.0.7版本。</p><p>错误原因分析:<br>是因为SpringBoot2.0以上版本日志需要指定包路径才行。</p><p>解决办法(修改application.yml配置文件):</p><p>原文件关键内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  level: warn</span><br></pre></td></tr></table></figure></p><p>将其改为(指定包路径):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">   com.blog.springboot: WARN</span><br></pre></td></tr></table></figure></p><p>com.blog.springboot是我个人博客的启动类，你们可以将其改为你自己的即可。<br>最后问题迎刃而解。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Incorrect string value: &#39;è·å...&#39; for column &#39;result&#39; at row 1</title>
      <link href="/2019/10/16/Incorrect-string-value-xE8-x8E-xB7-xE5-x8F-x96-for-column-result-at-row-1/"/>
      <url>/2019/10/16/Incorrect-string-value-xE8-x8E-xB7-xE5-x8F-x96-for-column-result-at-row-1/</url>
      
        <content type="html"><![CDATA[<p>错误详情信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">### Error updating database.  Cause: java.sql.SQLException: Incorrect string value: &apos;\xE8\x8E\xB7\xE5\x8F\x96...&apos; for column &apos;result&apos; at row 1</span><br><span class="line">### The error may involve com.blog.springboot.dao.ApiLogDao.insert-Inline</span><br><span class="line">### The error occurred while setting parameters</span><br><span class="line">### SQL: INSERT INTO wp_api_log   ( class_name,  method_name,  params,  `result`,  consume_time,  update_date )  VALUES   ( ?,  ?,  ?,  ?,  ?,  ? )</span><br><span class="line">### Cause: java.sql.SQLException: Incorrect string value: &apos;\xE8\x8E\xB7\xE5\x8F\x96...&apos; for column &apos;result&apos; at row 1</span><br><span class="line">; uncategorized SQLException for SQL []; SQL state [HY000]; error code [1366]; Incorrect string value: &apos;\xE8\x8E\xB7\xE5\x8F\x96...&apos; for column &apos;result&apos; at row 1; nested exception is java.sql.SQLException: Incorrect string value: &apos;\xE8\x8E\xB7\xE5\x8F\x96...&apos; for column &apos;result&apos; at row 1] with root cause</span><br><span class="line"></span><br><span class="line">java.sql.SQLException: Incorrect string value: &apos;\xE8\x8E\xB7\xE5\x8F\x96...&apos; for column &apos;result&apos; at row 1</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>错误原因分析:<br>插入的数据列中，如果是中文的话，则会出现上面的错误，如果是英文的话，就不会出现错误。<br>故推测与字段列编码有关系，果然查看表对应的字符编码发现都是latin，最后将其改为utf8即可解决。</p><p>如果想永久解决这样的问题，可参考该链接:<a href="https://www.cnblogs.com/youcong/p/9374498.html" target="_blank" rel="noopener">https://www.cnblogs.com/youcong/p/9374498.html</a><br>上面的问题我很久之前就遇到过，所以那个时候就已经记录了解决的办法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之创建文件并写入数据</title>
      <link href="/2019/09/23/Java%E4%B9%8B%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%B9%B6%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/09/23/Java%E4%B9%8B%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%B9%B6%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>应用场景:<br>以OJ项目为例，创建对应的.in或.out文件，并将相关的数据写入。<br><a id="more"></a><br>核心代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建文件</span><br><span class="line"> * @param data</span><br><span class="line"> * @param basedir</span><br><span class="line"> * @param name</span><br><span class="line"> */</span><br><span class="line">public void createFile(String data, String basedir, String name) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">File file = new File(basedir + &quot;/&quot; + name);</span><br><span class="line">        boolean b = file.createNewFile();</span><br><span class="line">        if(b) &#123;</span><br><span class="line">        Writer out = new FileWriter(file);</span><br><span class="line">out.write(data);</span><br><span class="line">out.close();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">&#125;catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之文件上传体积过大问题(解决方案)</title>
      <link href="/2019/09/19/SpringBoot%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BD%93%E7%A7%AF%E8%BF%87%E5%A4%A7%E9%97%AE%E9%A2%98-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/09/19/SpringBoot%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BD%93%E7%A7%AF%E8%BF%87%E5%A4%A7%E9%97%AE%E9%A2%98-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>错误信息如下(关键):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (110862330) exceeds the configured maximum (31457280)</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>解决方案(主要是修改application.yml对应的配置):<br>如果觉得300MB不够的话，可以往上调。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  http:</span><br><span class="line">    multipart:</span><br><span class="line">      enabled: true</span><br><span class="line">      max-file-size: 300MB </span><br><span class="line">      max-request-size: 300MB</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之热部署</title>
      <link href="/2019/09/15/SpringBoot%E4%B9%8B%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/09/15/SpringBoot%E4%B9%8B%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2><span id="添加依赖">添加依赖</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--实现springboot的热加载--&gt;</span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">          &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">          &lt;scope&gt;true&lt;/scope&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2><span id="applicationyml添加对应的配置这里以yml文件为例">application.yml添加对应的配置(这里以yml文件为例)</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">devtools:</span><br><span class="line">  restart:</span><br><span class="line">    enabled: true</span><br><span class="line">    additional-paths: src/main/java</span><br><span class="line">    execlude: test/**</span><br></pre></td></tr></table></figure><a id="more"></a><p>接下来修改任意的Java代码，你会发现控制台自己会重新刷新一遍(修改对应的代码保存一下，控制台自动更新)</p><p>热部署主要方便开发人员调试程序，省得每次都要关闭再启动项目，提高开发和调试效率。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MP实战系列(十九)之批量新增</title>
      <link href="/2019/09/15/MP%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97-%E5%8D%81%E4%B9%9D-%E4%B9%8B%E6%89%B9%E9%87%8F%E6%96%B0%E5%A2%9E/"/>
      <url>/2019/09/15/MP%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97-%E5%8D%81%E4%B9%9D-%E4%B9%8B%E6%89%B9%E9%87%8F%E6%96%B0%E5%A2%9E/</url>
      
        <content type="html"><![CDATA[<p>批量操作在实际开发中也应用非常多，例如批量下发优惠券、批量添加用户等。</p><p>以MyBatis为例，通常实现批量操作，有这么几种方式?</p><p>第一，单条插入sql语句，进行for循环遍历，基准条件是根据前端传过的数组长度而定，如果传了四个参数过来，也就是长度为4，代表遍历4次(也就是执行四次插入)，这种方式不太建议采用;</p><p>第二、编写相关mapper<br>关于这一点不再赘述，，也参考我的这篇文章<a href="https://www.cnblogs.com/youcong/p/9356776.html" target="_blank" rel="noopener">SSM框架之批量增加示例(同步请求jsp视图解析)</a><br>其主要使用的就是MyBatis的动态sql;</p><p>换做MyBatis-Plus，就不必要编写批量新增相关的sql以及mapper(可以理解为数据访问接口)，因为MyBatis-Plus已经封装好了，你只需按照对应的规则进行调用即可。</p><p>以下面这段路由层代码为例，示例如下:<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">   @PostMapping(&quot;/betchAddUserGroup&quot;)</span><br><span class="line">@ApiOperation(value = &quot;批量添加用户到对应的分组&quot;, notes = &quot;批量添加用户到对应的分组&quot;)</span><br><span class="line">public JSONObject betchAddUserGroup(@RequestParam String[] userIds, @RequestParam String groupId) &#123;</span><br><span class="line"></span><br><span class="line">JSONObject returnJson = new JSONObject();</span><br><span class="line"></span><br><span class="line">       ArrayList&lt;UserGroup&gt; list = new ArrayList&lt;UserGroup&gt;();</span><br><span class="line"></span><br><span class="line">       for (String userId : userIds) &#123;</span><br><span class="line">Console.log(&quot;userId:&quot; + userId);</span><br><span class="line"></span><br><span class="line">UserGroup userGroup = new UserGroup();</span><br><span class="line">userGroup.setGroupId(Integer.parseInt(groupId));</span><br><span class="line">userGroup.setUserId(Integer.parseInt(userId));</span><br><span class="line">list.add(userGroup);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boolean isAddUserGroup = userGroupService.insertBatch(list);</span><br><span class="line"></span><br><span class="line">if (isAddUserGroup) &#123;</span><br><span class="line">returnJson.put(ResponseUtils.CODE, ResponseUtils.SUCCESS_CODE);</span><br><span class="line">returnJson.put(ResponseUtils.MSG, ResponseUtils.SUCCEESS_MSG);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">returnJson.put(ResponseUtils.CODE, ResponseUtils.ERROR_CODE);</span><br><span class="line">returnJson.put(ResponseUtils.MSG, ResponseUtils.ERROR_MSG);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return returnJson;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我使用的是insertBetch，关于MyBatis-Plus批量添加或修改相关的API，如图:<br><img src="/2019/09/15/MP实战系列-十九-之批量新增/01.png" alt="图一"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MyBatis-Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序之上传图片(含前后端代码例子)</title>
      <link href="/2019/09/11/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87-%E5%90%AB%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E4%BE%8B%E5%AD%90/"/>
      <url>/2019/09/11/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87-%E5%90%AB%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E4%BE%8B%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>此代码示例，能够让你成功将图片上传至后端，后端做相应的处理，然后返回成功码。</p><h2><span id="前端小程序代码">前端小程序代码</span></h2><a id="more"></a><p>index.wxml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&apos;content&apos;&gt;</span><br><span class="line">  &lt;view class=&apos;img-box&apos;&gt;</span><br><span class="line">    &lt;view class=&apos;img-list&apos;&gt;</span><br><span class="line">      &lt;block wx:for=&quot;&#123;&#123;detailPics&#125;&#125;&quot; wx:key=&quot;index&quot;&gt;</span><br><span class="line">        &lt;view class=&apos;img-item&apos;&gt;</span><br><span class="line">          &lt;image src=&apos;&#123;&#123;item&#125;&#125;&apos; bindlongpress=&quot;bindlongpressimg&quot; data-id=&apos;&#123;&#123;index&#125;&#125;&apos;&gt;&lt;/image&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">      &lt;/block&gt;</span><br><span class="line">      &lt;view class=&apos;chooseimg&apos; bindtap=&apos;uploadDetailImage&apos;&gt;</span><br><span class="line">        &lt;view class=&quot;weui-uploader__input-box&quot;&gt;&lt;/view&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;view class=&apos;tips&apos;&gt;长按对应的图片即可删除&lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></p><p>index.wxss:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">.content &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.img-list &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  display: -webkit-flex;</span><br><span class="line">  flex-direction: row;</span><br><span class="line">  justify-content: flex-start;</span><br><span class="line">  align-items: center;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.img-item &#123;</span><br><span class="line">  width: 30%;</span><br><span class="line">  text-align: left;</span><br><span class="line">  margin-right: 20rpx;</span><br><span class="line">  margin-bottom: 10rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.img-item image &#123;</span><br><span class="line">  width: 180rpx;</span><br><span class="line">  height: 180rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.submit-btn &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  height: 80rpx;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 80rpx;</span><br><span class="line">  font-size: 30rpx;</span><br><span class="line">  position: fixed;</span><br><span class="line">  bottom: 100rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.chooseimg &#123;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.weui-uploader__input-box &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  position: relative;</span><br><span class="line">  margin-right: 9px;</span><br><span class="line">  margin-bottom: 9px;</span><br><span class="line">  width: 180rpx;</span><br><span class="line">  height: 180rpx;</span><br><span class="line">  border: 1px solid #d9d9d9;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.weui-uploader__input-box:before &#123;</span><br><span class="line">  width: 2px;</span><br><span class="line">  height: 39.5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.weui-uploader__input-box:after, .weui-uploader__input-box:before &#123;</span><br><span class="line">  content: &quot; &quot;;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%;</span><br><span class="line">  left: 50%;</span><br><span class="line">  -webkit-transform: translate(-50%, -50%);</span><br><span class="line">  transform: translate(-50%, -50%);</span><br><span class="line">  background-color: #d9d9d9;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.weui-uploader__input-box:after &#123;</span><br><span class="line">  width: 39.5px;</span><br><span class="line">  height: 2px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.weui-uploader__input-box:after, .weui-uploader__input-box:before &#123;</span><br><span class="line">  content: &quot; &quot;;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%;</span><br><span class="line">  left: 50%;</span><br><span class="line">  -webkit-transform: translate(-50%, -50%);</span><br><span class="line">  transform: translate(-50%, -50%);</span><br><span class="line">  background-color: #d9d9d9;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tips &#123;</span><br><span class="line">  color: #666;</span><br><span class="line">  font-size: 24rpx;</span><br><span class="line">  padding-bottom: 20rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.img-box &#123;</span><br><span class="line">  width: 92%;</span><br><span class="line">  margin: auto;</span><br><span class="line">  padding-top: 20rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>index.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">// component/uploadImages/index.js</span><br><span class="line">Component(&#123;</span><br><span class="line">  /**</span><br><span class="line">   * 组件的属性列表</span><br><span class="line">   */</span><br><span class="line">  properties: &#123;</span><br><span class="line">    count: &#123; //最多选择图片的张数，默认9张</span><br><span class="line">      type: Number,</span><br><span class="line">      value: 9</span><br><span class="line">    &#125;,</span><br><span class="line">    uploadUrl: &#123; //图片上传的服务器路径</span><br><span class="line">      type: String,</span><br><span class="line">      value: &apos;&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    showUrl: &#123; //图片的拼接路径</span><br><span class="line">      type: String,</span><br><span class="line">      value: &apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 组件的初始数据</span><br><span class="line">   */</span><br><span class="line">  data: &#123;</span><br><span class="line">    detailPics: [], //上传的结果图片集合</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  ready: function () &#123;</span><br><span class="line">    console.log(this.data)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 组件的方法列表</span><br><span class="line">   */</span><br><span class="line">  methods: &#123;</span><br><span class="line"></span><br><span class="line">    uploadDetailImage: function (e) &#123; //这里是选取图片的方法</span><br><span class="line">      var that = this;</span><br><span class="line">      var pics = [];</span><br><span class="line">      var detailPics = that.data.detailPics;</span><br><span class="line">      if (detailPics.length &gt;= that.data.count) &#123;</span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">          title: &apos;最多选择&apos; + that.data.count + &apos;张！&apos;,</span><br><span class="line">        &#125;)</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      wx.chooseImage(&#123;</span><br><span class="line">        count: that.data.count, // 最多可以选择的图片张数，默认9</span><br><span class="line">        sizeType: [&apos;original&apos;, &apos;compressed&apos;], // original 原图，compressed 压缩图，默认二者都有</span><br><span class="line">        sourceType: [&apos;album&apos;, &apos;camera&apos;], // album 从相册选图，camera 使用相机，默认二者都有</span><br><span class="line">        success: function (res) &#123;</span><br><span class="line">          var imgs = res.tempFilePaths;</span><br><span class="line">          for (var i = 0; i &lt; imgs.length; i++) &#123;</span><br><span class="line">            pics.push(imgs[i])</span><br><span class="line">          &#125;</span><br><span class="line">          that.uploadimg(&#123;</span><br><span class="line">            url: &quot;http://www.test.com//test-api/wechat/applet/api/uploadUserAvatar&quot;, //这里是你图片上传的接口</span><br><span class="line">            path: pics, //这里是选取的图片的地址数组</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    //多张图片上传</span><br><span class="line">    uploadimg: function (data) &#123;</span><br><span class="line">      wx.showLoading(&#123;</span><br><span class="line">        title: &apos;上传中...&apos;,</span><br><span class="line">        mask: true,</span><br><span class="line">      &#125;)</span><br><span class="line">      var that = this,</span><br><span class="line">        i = data.i ? data.i : 0,</span><br><span class="line">        success = data.success ? data.success : 0,</span><br><span class="line">        fail = data.fail ? data.fail : 0;</span><br><span class="line">      wx.uploadFile(&#123;</span><br><span class="line">        url: data.url,</span><br><span class="line">        filePath: data.path[i],</span><br><span class="line">        name: &apos;file&apos;,</span><br><span class="line">        formData: &#123;&quot;userId&quot;:&quot;35&quot;&#125;,</span><br><span class="line">        success: (resp) =&gt; &#123;</span><br><span class="line">          wx.hideLoading();</span><br><span class="line">          success++;</span><br><span class="line">          var str = resp.data //返回的结果，可能不同项目结果不一样</span><br><span class="line"></span><br><span class="line">          console.log(str);</span><br><span class="line">          // var pic = JSON.parse(str);</span><br><span class="line">          // var pic_name = that.data.showUrl + pic.Data;</span><br><span class="line">          // var detailPics = that.data.detailPics;</span><br><span class="line">          // detailPics.push(pic_name)</span><br><span class="line">          // that.setData(&#123;</span><br><span class="line">          //   detailPics: detailPics</span><br><span class="line">          // &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        fail: (res) =&gt; &#123;</span><br><span class="line">          fail++;</span><br><span class="line">          console.log(&apos;fail:&apos; + i + &quot;fail:&quot; + fail);</span><br><span class="line">        &#125;,</span><br><span class="line">        complete: () =&gt; &#123;</span><br><span class="line">          i++;</span><br><span class="line">          if (i == data.path.length) &#123; //当图片传完时，停止调用     </span><br><span class="line">            console.log(&apos;执行完毕&apos;);</span><br><span class="line">            console.log(&apos;成功：&apos; + success + &quot; 失败：&quot; + fail);</span><br><span class="line">            var myEventDetail = &#123;</span><br><span class="line">              picsList: that.data.detailPics</span><br><span class="line">            &#125; // detail对象，提供给事件监听函数</span><br><span class="line">            var myEventOption = &#123;&#125; // 触发事件的选项</span><br><span class="line">            that.triggerEvent(&apos;myevent&apos;, myEventDetail, myEventOption)//结果返回调用的页面</span><br><span class="line">          &#125; else &#123; //若图片还没有传完，则继续调用函数</span><br><span class="line">            data.i = i;</span><br><span class="line">            data.success = success;</span><br><span class="line">            data.fail = fail;</span><br><span class="line">            that.uploadimg(data);//递归，回调自己</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2><span id="后端java代码这里我使用的是第三方存储如腾讯云如果读者朋友们是使用第三方存储替换是一件很容易的事情">后端Java代码(这里我使用的是第三方存储，如腾讯云，如果读者朋友们是使用第三方存储替换是一件很容易的事情)</span></h2><p>核心代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/uploadUserAvatar&quot;)</span><br><span class="line">@ApiOperation(value = &quot;上传用户头像&quot;, notes = &quot;上传用户头像&quot;)</span><br><span class="line">public JSONObject uploadUserAvatar(HttpServletRequest request) &#123;</span><br><span class="line"></span><br><span class="line">JSONObject json = new JSONObject();</span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">String userId = request.getParameter(&quot;userId&quot;);</span><br><span class="line"></span><br><span class="line">COSClientUtil cosClientUtil = new COSClientUtil();</span><br><span class="line"></span><br><span class="line">MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;</span><br><span class="line"></span><br><span class="line">// 获取上传的文件</span><br><span class="line">MultipartFile multiFile = multipartRequest.getFile(&quot;file&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String name = cosClientUtil.uploadFileCos(multiFile);</span><br><span class="line"></span><br><span class="line">// 获取文件路径</span><br><span class="line">String fileUrl = cosClientUtil.getFileUrl(name);</span><br><span class="line"></span><br><span class="line">Console.log(&quot;fileUrl:&quot;+fileUrl);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 对文件路径进行处理</span><br><span class="line">String dbFileUrl = fileUrl.substring(0, fileUrl.indexOf(&quot;?&quot;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Console.log(&quot;dbFileUrl:&quot;+dbFileUrl);</span><br><span class="line"></span><br><span class="line">User user = new User();</span><br><span class="line">user.setId(Integer.parseInt(userId));</span><br><span class="line">user.setSmallAvatar(dbFileUrl);</span><br><span class="line"></span><br><span class="line">boolean isUploadUserAvatar = userService.updateById(user);</span><br><span class="line"></span><br><span class="line">if (isUploadUserAvatar) &#123;</span><br><span class="line">json.put(ResponseUtils.CODE, ResponseUtils.SUCCESS_CODE);</span><br><span class="line">json.put(ResponseUtils.MSG, ResponseUtils.SUCCEESS_MSG);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">json.put(ResponseUtils.CODE, ResponseUtils.ERROR_CODE);</span><br><span class="line">json.put(ResponseUtils.MSG, ResponseUtils.ERROR_MSG);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">json.put(ResponseUtils.CODE, ResponseUtils.ERROR_CODE);</span><br><span class="line">json.put(ResponseUtils.MSG, ResponseUtils.ERROR_MSG);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis之批量查询</title>
      <link href="/2019/09/10/mybatis%E4%B9%8B%E6%89%B9%E9%87%8F%E6%9F%A5%E8%AF%A2/"/>
      <url>/2019/09/10/mybatis%E4%B9%8B%E6%89%B9%E9%87%8F%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>关于MyBatis批量更新和添加，参考我的如下文章即可:<br><a href="https://www.cnblogs.com/youcong/p/8476441.html" target="_blank" rel="noopener">MyBatis的批量更新实例</a></p><p><a href="https://www.cnblogs.com/youcong/p/9356776.html" target="_blank" rel="noopener">MyBatis的批量添加实例</a></p><p>另外不管是批量的新增、删除、修改、查询也好，还是单个新增、删除、修改查询也罢。都会用到动态SQL。</p><p>关于MyBatis的动态SQL可以参考我的这篇文章，如下:<br><a href="https://www.cnblogs.com/youcong/p/8476441.html" target="_blank" rel="noopener">MyBatis实战之动态SQL</a></p><p>今天这篇文章主要是为了记录，最近用MyBatis-Plus特别多，很多增、删、改、查以及批量相关操作，拿来即用，戊戌时自己编写。特轻松。</p><p>但是因为最近的一个需求不得不自己手写批量查询例子(主要涉及联表之类的操作)。</p><p>正好以该例子进行讲解，也给我，给大家做个小小参考。</p><a id="more"></a><p>关键XML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getStudentSubmitHomeWorkListInfos&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line"></span><br><span class="line">SELECT s.`solution_id`,s.`problem_id`,s.`user_id`,s.`nick`,s.`result`,p.title</span><br><span class="line">FROM solution AS s left join problem as p ON(s.problem_id = p.problem_id) WHERE  </span><br><span class="line"> s.`user_id` in</span><br><span class="line">   &lt;foreach collection=&quot;list&quot; item=&quot;userId&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt;</span><br><span class="line">   #&#123;userId&#125;</span><br><span class="line">   &lt;/foreach&gt;</span><br><span class="line"></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>foreach相关参数解释:</p><p>collection配置的users是传递进来的参数名称，它可以是一个数组或者List、Set等集合;</p><p>item配置的是循环中当前的元素;</p><p>index配置的是当前元素在集合的位置下标;</p><p>separator是各个元素的间隔符;</p><p>open和colose代表的是以什么符号将元素包裹起来;</p><p>关键DAO:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Solution&gt; getStudentSubmitHomeWorkListInfos(List&lt;String&gt; userId);</span><br></pre></td></tr></table></figure></p><p>单元测试:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   @Test</span><br><span class="line">public void testCollectionRun() &#123;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; userId = new ArrayList&lt;String&gt;();</span><br><span class="line">userId.add(&quot;admin&quot;);</span><br><span class="line">userId.add(&quot;student&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;Solution&gt; solutionList = solutionDao.getStudentSubmitHomeWorkListInfos(userId);</span><br><span class="line">for (Solution solution : solutionList) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;solution:&quot;+solution.getNick()+&quot;||&quot;+solution.getResult()+&quot;||&quot;+solution.getTitle());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>顺便说说批量查询的应用场景:<br>(1)特定的场景获取用户订单列表数;<br>(2)获取某一个题目许学生提交的结果(以用户id作为查询参数，该用户id非主键);</p>]]></content>
      
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器25端口禁用之如何使用Java发邮件(解决25端口禁用问题)</title>
      <link href="/2019/09/07/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A825%E7%AB%AF%E5%8F%A3%E7%A6%81%E7%94%A8%E4%B9%8B%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Java%E5%8F%91%E9%82%AE%E4%BB%B6-%E8%A7%A3%E5%86%B325%E7%AB%AF%E5%8F%A3%E7%A6%81%E7%94%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2019/09/07/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A825%E7%AB%AF%E5%8F%A3%E7%A6%81%E7%94%A8%E4%B9%8B%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Java%E5%8F%91%E9%82%AE%E4%BB%B6-%E8%A7%A3%E5%86%B325%E7%AB%AF%E5%8F%A3%E7%A6%81%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>通常我们在本地使用Java发送邮件，通常是没有问题的，但是部署到服务器的话，就可能遇到问题。当然了，这与运营商也有关系。比如我之前在咖啡主机上购买虚拟机，然后将个人网站部署上去，通常是没有问题的，没有那么多限制。</p><p>但是在阿里云上限制就比较多，比如如果端口的入口方向不开的话，可能导致你在服务器上安装的某款软件，例如常用的Tomcat，会无法使用。</p><p>一来端口没有开放，二来白名单设置问题。</p><p>今天说说阿里云服务器25端口禁用之如何解决它并成功发送邮件，首先贴完整代码，如下所示:</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package com.blog.springboot.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">import javax.mail.Authenticator;</span><br><span class="line"></span><br><span class="line">import javax.mail.Message;</span><br><span class="line"></span><br><span class="line">import javax.mail.MessagingException;</span><br><span class="line"></span><br><span class="line">import javax.mail.PasswordAuthentication;</span><br><span class="line"></span><br><span class="line">import javax.mail.Session;</span><br><span class="line"></span><br><span class="line">import javax.mail.Transport;</span><br><span class="line"></span><br><span class="line">import javax.mail.internet.AddressException;</span><br><span class="line"></span><br><span class="line">import javax.mail.internet.InternetAddress;</span><br><span class="line"></span><br><span class="line">import javax.mail.internet.MimeMessage;</span><br><span class="line"></span><br><span class="line">import javax.mail.internet.MimeMessage.RecipientType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class MailUtils &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void sendMail(String email, String emailMsg)</span><br><span class="line"></span><br><span class="line">throws AddressException, MessagingException &#123;</span><br><span class="line"></span><br><span class="line">// 1.创建一个程序与邮件服务器会话对象 Session</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Properties props = new Properties();</span><br><span class="line"></span><br><span class="line">props.setProperty(&quot;mail.transport.protocol&quot;, &quot;SMTP&quot;);</span><br><span class="line"></span><br><span class="line">props.setProperty(&quot;mail.host&quot;, &quot;smtp.163.com&quot;);</span><br><span class="line"></span><br><span class="line">props.setProperty(&quot;mail.smtp.auth&quot;, &quot;true&quot;);// 指定验证为true</span><br><span class="line"></span><br><span class="line">props.put(&quot;mail.smtp.port&quot;, &quot;465&quot;);</span><br><span class="line"></span><br><span class="line">        props.setProperty(&quot;mail.smtp.socketFactory.class&quot;, &quot;javax.net.ssl.SSLSocketFactory&quot;);</span><br><span class="line"></span><br><span class="line">        props.setProperty(&quot;mail.smtp.socketFactory.fallback&quot;, &quot;false&quot;);</span><br><span class="line"></span><br><span class="line">        props.setProperty(&quot;mail.smtp.socketFactory.port&quot;, &quot;465&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 创建验证器</span><br><span class="line"></span><br><span class="line">Authenticator auth = new Authenticator() &#123;</span><br><span class="line"></span><br><span class="line">public PasswordAuthentication getPasswordAuthentication() &#123;</span><br><span class="line"></span><br><span class="line">return new PasswordAuthentication(&quot;test@163.com&quot;, &quot;test&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Session session = Session.getInstance(props, auth);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 2.创建一个Message，它相当于是邮件内容</span><br><span class="line"></span><br><span class="line">Message message = new MimeMessage(session);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message.setFrom(new InternetAddress(&quot;test@163.com&quot;)); // 设置发送者</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message.setRecipient(RecipientType.TO, new InternetAddress(email)); // 设置发送方式与接收者</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">/*String random</span><br><span class="line"></span><br><span class="line">String passwd = CustomeEncryptionUtil.bcryptPwd(pwd)*/</span><br><span class="line"></span><br><span class="line">String content =&quot;注册成功&quot;;</span><br><span class="line"></span><br><span class="line">message.setSubject(content);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message.setContent(emailMsg, &quot;text/html;charset=utf-8&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 3.创建 Transport用于将邮件发送</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Transport.send(message);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">MailUtils.sendMail(&quot;dev@163.com&quot;, &quot;你好，欢迎来到我的博客，在这里你将会获得前所未有的幸福&quot;);</span><br><span class="line"></span><br><span class="line">&#125; catch (MessagingException e) &#123;</span><br><span class="line"></span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;失败&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键核心在于这:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">props.put(&quot;mail.smtp.port&quot;, &quot;465&quot;);</span><br><span class="line"></span><br><span class="line">      props.setProperty(&quot;mail.smtp.socketFactory.class&quot;, &quot;javax.net.ssl.SSLSocketFactory&quot;);</span><br><span class="line"></span><br><span class="line">      props.setProperty(&quot;mail.smtp.socketFactory.fallback&quot;, &quot;false&quot;);</span><br><span class="line"></span><br><span class="line">      props.setProperty(&quot;mail.smtp.socketFactory.port&quot;, &quot;465&quot;);</span><br></pre></td></tr></table></figure><p>我使用mail包依赖如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 发邮件 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;com.sun.mail&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">&lt;artifactId&gt;javax.mail&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">&lt;version&gt;1.5.2&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>另外说一下，如果你想确认你服务器上，端口是否可用，可用通过该命令(这样一来省的自己部署到服务器来测试，节约时间，提高效率):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">telnet smtp.163.com 465</span><br></pre></td></tr></table></figure><p>如果服务器返回是这样的结果，如下(一般是表示可用的):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Trying 220.181.12.11...</span><br><span class="line"></span><br><span class="line">Connected to smtp.163.com.</span><br><span class="line"></span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line"></span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure><p>如果是这样会的结果，通常表示不可用(通常会一直卡在Trying，然后服务器可能会再次尝试Trying，不过还是没用):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Trying 220.181.12.16...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之AOP使用</title>
      <link href="/2019/09/07/SpringBoot%E4%B9%8BAOP%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/09/07/SpringBoot%E4%B9%8BAOP%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>说到SpringBoot，难免会想到Spring。<br>对于Spring，我曾用其开发过很多大大小小的项目。<br>当使用SpringBoot之后，给人最直观的感受，用古人一句话:”大道至简”。<br><a id="more"></a><br>SpringBoot相比Spring，它的优点其实就是Spring的缺点或不足:</p><p>(1)内嵌入Tomcat、Jetty等容器，无需Tomcat就能直接跑起来(这让我想到开发一个庞大的项目，光启动Tomcat就需要花好几分钟);</p><p>(2)部署方便，一个可执行的Jar，你可以将其以Docker容器的形式管理部署，也可以使用nohub命令让其持久运行在服务器上;</p><p>(3)无需管理一大堆繁重的xml配置(记得初次接触Spring的时候，它给最直观的感受就是将对象交给Spring管理，其实也就是在对应的xml进行配置，不再像很久以前那样自己New之类的，New十几二十个还好，但是一个实际项目，对象太庞大了，如果沿用传统new的方式来管理对象的话，那么将会耗费很多时间精力在这上面，不能很好的集中精力进行业务开发，因为需要考虑对象的初始化以及销毁等)，而当我使用SpringBoot以后开发项目，基本上SpringBoot很好的集成第三方库，需要什么就是直接在application.yml或application.properties直接配置即可;</p><p>(4)提供的starter-web简化Maven配置(整合常用依赖，相当于将一些web常用jar集成进去，省的我们一个个导入还需要考虑版本兼容性问题)</p><p>可以从spring-boot-starter-web依赖传递可以看出，如图:<br><img src="/2019/09/07/SpringBoot之AOP使用/01.png" alt=""></p><p>(5)创建独立的Spring应用(更好的适用于微服务开发);</p><h2><span id="springaop的应用场景">SpringAOP的应用场景</span></h2><p>从实际开发出发,举两个典型例子简单概括一下:<br>(1)可用于做接口权限控制或者是权限控制;<br>(2)可用于检测接口请求并统计接口请求次数;</p><p>实际上可以从这么几个方面深入挖掘?<br>(1)日志记录;<br>(2)性能统计;<br>(3)安全控制(可以理解为权限控制);<br>(4)事务处理;<br>(5)异常处理;</p><p>我想每个Java开发者对于这五个方面再了解不过了。</p><h2><span id="以监听接口请求为例">以监听接口请求为例</span></h2><p>核心代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.springboot.aop;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.Around;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.aspectj.lang.annotation.Pointcut;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import cn.hutool.core.lang.Console;</span><br><span class="line">/**</span><br><span class="line"> * 系统日志类(用于统计接口请求)</span><br><span class="line"> * @author youcong</span><br><span class="line"> * @date 2019-09-05</span><br><span class="line"> */</span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">public class SystemLogAspect &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  @Pointcut(&quot;execution(public * com.blog.springboot.controller..*.*(..))&quot;)</span><br><span class="line">  public void Pointcut() &#123;</span><br><span class="line">  </span><br><span class="line">  Console.log(&quot;走你&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    //@Around：环绕通知</span><br><span class="line">    @Around(&quot;Pointcut()&quot;)</span><br><span class="line">    public Object Around(ProceedingJoinPoint pjp) throws Throwable &#123;</span><br><span class="line">        Map&lt;String,Object&gt; data = new HashMap&lt;&gt;();</span><br><span class="line">        //获取目标类名称</span><br><span class="line">        String clazzName = pjp.getTarget().getClass().getName();</span><br><span class="line">        //获取目标类方法名称</span><br><span class="line">        String methodName = pjp.getSignature().getName();</span><br><span class="line"> </span><br><span class="line">        //记录类名称</span><br><span class="line">        data.put(&quot;clazzName&quot;,clazzName);</span><br><span class="line">        //记录对应方法名称</span><br><span class="line">        data.put(&quot;methodName&quot;,methodName);</span><br><span class="line">        //记录请求参数</span><br><span class="line">        data.put(&quot;params&quot;,pjp.getArgs());</span><br><span class="line">        //开始调用时间</span><br><span class="line">        // 计时并调用目标函数</span><br><span class="line">        long start = System.currentTimeMillis();</span><br><span class="line">        Object result = pjp.proceed();</span><br><span class="line">        Long time = System.currentTimeMillis() - start;</span><br><span class="line"> </span><br><span class="line">        //记录返回参数</span><br><span class="line">        data.put(&quot;result&quot;,result);</span><br><span class="line"> </span><br><span class="line">        //设置消耗总时间</span><br><span class="line">        data.put(&quot;consumeTime&quot;,time);</span><br><span class="line">        System.out.println(data);</span><br><span class="line">        return result;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>基本上每次请求接口都会获取到对应的接口信息并输出。</p><p>如果后台这边需要统计接口请求次数，针对某些接口请求非常频繁，可考虑加缓存或者是进行其它优化等。</p><h2><span id="springaop之常用注解">SpringAOP之常用注解</span></h2><p>简单的说一下AOP，AOP又称面向切面编程，它的常用术语如下:</p><h3><span id="连接点joinpoint">连接点(Joinpoint)</span></h3><p>增强程序执行的某个特定位置(要在哪个地方做增强操作)。SPring仅支持方法的连接点，既仅能在方法调用前，方法调用后，方法抛出异常时等这些程序执行点进行织入增强。</p><h3><span id="切点pointcut">切点(Pointcut)</span></h3><p>切点是一组连接点的集合。AOP通过”切点”定位特定的连接点。通过数据库查询的概念来理解切点和连接点的关系再适合不过来:连接点相当于数据库中的记录，而切点相当于查询条件。</p><h3><span id="增强advice">增强(Advice)</span></h3><p>增强是织入到目标类连接点上的一段程序代码。表示要在连接点上做的操作。</p><h3><span id="切面aspect">切面(Aspect)</span></h3><p>切面由切点和增强(引介)组成(可以包含多个切点和多个增强)，它既包括横切逻辑的定义，也包括连接点的定义，SpringAOP就是负责实施切面的框架，它将切面所定义的横切逻辑织入到切面所指定的链接点中。</p><p>SpringAOP常用注解如下:<br>@aspect(定义切面)<br>@pointcut(定义切点)<br>@before(标注Before Advice定义所在的方法)<br>@afterreturning(标注After Returning Advice定义所在的方法)<br>@afterthrowing(标注After Throwing Advice定义所在的方法)<br>@after(标注After(Finally)Advice定义所在的方法)<br>@around(标注Around Advice定义所在的方法)</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之KindEditor文件上传</title>
      <link href="/2019/09/07/SpringBoot%E4%B9%8BKindEditor%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2019/09/07/SpringBoot%E4%B9%8BKindEditor%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>后端核心代码如下:<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.springboot.controller;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedOutputStream;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Hashtable;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.util.FileCopyUtils;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line">import org.springframework.web.multipart.MultipartHttpServletRequest;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class KindController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/Kindeditor/uploadFile&quot;, method = RequestMethod.POST)</span><br><span class="line">    public void uploadFile(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        // 文件保存目录路径</span><br><span class="line">        String savePath = request.getSession().getServletContext().getRealPath(&quot;/&quot;) + &quot;upload/image&quot;</span><br><span class="line">                + File.separatorChar + File.separatorChar;</span><br><span class="line"></span><br><span class="line">        String saveUrl = request.getContextPath() + File.separatorChar + &quot;upload/image&quot; + File.separatorChar</span><br><span class="line">                + File.separatorChar;</span><br><span class="line"></span><br><span class="line">        // 定义允许上传的文件扩展名</span><br><span class="line">        HashMap&lt;String, String&gt; extMap = new HashMap&lt;String, String&gt;();</span><br><span class="line">        extMap.put(&quot;image&quot;, &quot;gif,jpg,jpeg,png,bmp&quot;);</span><br><span class="line"></span><br><span class="line">        // 最大文件大小</span><br><span class="line">        long maxSize = 1000000;</span><br><span class="line">        response.setContentType(&quot;text/html; charset=UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">        if (!ServletFileUpload.isMultipartContent(request)) &#123;</span><br><span class="line">            writer.println(getError(&quot;请选择文件。&quot;));</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        File uploadDir = new File(savePath);</span><br><span class="line">        // 判断文件夹是否存在,如果不存在则创建文件夹</span><br><span class="line">        if (!uploadDir.exists()) &#123;</span><br><span class="line">            uploadDir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 检查目录写权限</span><br><span class="line">        if (!uploadDir.canWrite()) &#123;</span><br><span class="line">            writer.println(getError(&quot;上传目录没有写权限。&quot;));</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String dirName = request.getParameter(&quot;dir&quot;);</span><br><span class="line">        if (dirName == null) &#123;</span><br><span class="line">            dirName = &quot;image&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!extMap.containsKey(dirName)) &#123;</span><br><span class="line">            writer.println(getError(&quot;目录名不正确。&quot;));</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        MultipartHttpServletRequest mRequest = (MultipartHttpServletRequest) request;</span><br><span class="line">        Map&lt;String, MultipartFile&gt; fileMap = mRequest.getFileMap();</span><br><span class="line">        String fileName = null;</span><br><span class="line">        for (Iterator&lt;Map.Entry&lt;String, MultipartFile&gt;&gt; it = fileMap.entrySet().iterator(); it.hasNext();) &#123;</span><br><span class="line">            Map.Entry&lt;String, MultipartFile&gt; entry = it.next();</span><br><span class="line">            MultipartFile mFile = entry.getValue();</span><br><span class="line">            fileName = mFile.getOriginalFilename();</span><br><span class="line">            // 检查文件大小</span><br><span class="line">            if (mFile.getSize() &gt; maxSize) &#123;</span><br><span class="line">                writer.println(getError(&quot;上传文件大小超过限制。&quot;));</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            String fileExt = fileName.substring(fileName.lastIndexOf(&quot;.&quot;) + 1);</span><br><span class="line">            if (!Arrays.&lt;String&gt;asList(extMap.get(dirName).split(&quot;,&quot;)).contains(fileExt)) &#123;</span><br><span class="line">                writer.println(getError(&quot;上传文件扩展名是不允许的扩展名。\n只允许&quot; + extMap.get(dirName) + &quot;格式。&quot;));</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            UUID uuid = UUID.randomUUID();</span><br><span class="line">            String path = savePath + uuid.toString() + &quot;.&quot; + fileExt;</span><br><span class="line">            saveUrl = saveUrl + uuid.toString() + &quot;.&quot; + fileExt;</span><br><span class="line"></span><br><span class="line">            BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(path));</span><br><span class="line">            FileCopyUtils.copy(mFile.getInputStream(), outputStream);</span><br><span class="line"></span><br><span class="line">            JSONObject obj = new JSONObject();</span><br><span class="line">            obj.put(&quot;error&quot;, 0);</span><br><span class="line">            obj.put(&quot;url&quot;, saveUrl);</span><br><span class="line">            writer.println(obj.toString());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String getError(String message) &#123;</span><br><span class="line">        JSONObject obj = new JSONObject();</span><br><span class="line">        obj.put(&quot;error&quot;, 1);</span><br><span class="line">        obj.put(&quot;message&quot;, message);</span><br><span class="line">        return obj.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/Kindeditor/fileManager&quot;, method = RequestMethod.GET)</span><br><span class="line">    public void fileManager(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">        // 根目录路径，可以指定绝对路径，比如 /var/www/attached/</span><br><span class="line">        String rootPath = request.getSession().getServletContext().getRealPath(&quot;/&quot;) + &quot;upload/&quot;;</span><br><span class="line">        // 根目录URL，可以指定绝对路径，比如 http://www.yoursite.com/attached/</span><br><span class="line">        String rootUrl = request.getContextPath() + &quot;/upload/&quot;;</span><br><span class="line">        // 图片扩展名</span><br><span class="line">        String[] fileTypes = new String[] &#123; &quot;gif&quot;, &quot;jpg&quot;, &quot;jpeg&quot;, &quot;png&quot;, &quot;bmp&quot; &#125;;</span><br><span class="line">        System.out.println(rootPath);</span><br><span class="line">        String dirName = request.getParameter(&quot;dir&quot;);</span><br><span class="line">        if (dirName != null) &#123;</span><br><span class="line">            if (!Arrays.&lt;String&gt;asList(new String[] &#123; &quot;image&quot;, &quot;flash&quot;, &quot;media&quot;, &quot;file&quot; &#125;).contains(dirName)) &#123;</span><br><span class="line">                System.out.println(&quot;Invalid Directory name.&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            rootPath += dirName + &quot;/&quot;;</span><br><span class="line">            rootUrl += dirName + &quot;/&quot;;</span><br><span class="line">            File saveDirFile = new File(rootPath);</span><br><span class="line">            if (!saveDirFile.exists()) &#123;</span><br><span class="line">                saveDirFile.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 根据path参数，设置各路径和URL</span><br><span class="line">        String path = request.getParameter(&quot;path&quot;) != null ? request.getParameter(&quot;path&quot;) : &quot;&quot;;</span><br><span class="line">        String currentPath = rootPath + path;</span><br><span class="line">        String currentUrl = rootUrl + path;</span><br><span class="line">        String currentDirPath = path;</span><br><span class="line">        String moveupDirPath = &quot;&quot;;</span><br><span class="line">        if (!&quot;&quot;.equals(path)) &#123;</span><br><span class="line">            String str = currentDirPath.substring(0, currentDirPath.length() - 1);</span><br><span class="line">            moveupDirPath = str.lastIndexOf(&quot;/&quot;) &gt;= 0 ? str.substring(0, str.lastIndexOf(&quot;/&quot;) + 1) : &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 排序形式，name or size or type</span><br><span class="line">        String order = request.getParameter(&quot;order&quot;) != null ? request.getParameter(&quot;order&quot;).toLowerCase() : &quot;name&quot;;</span><br><span class="line"></span><br><span class="line">        // 不允许使用..移动到上一级目录</span><br><span class="line">        if (path.indexOf(&quot;..&quot;) &gt;= 0) &#123;</span><br><span class="line">            System.out.println(&quot;Access is not allowed.&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        // 最后一个字符不是/</span><br><span class="line">        if (!&quot;&quot;.equals(path) &amp;&amp; !path.endsWith(&quot;/&quot;)) &#123;</span><br><span class="line">            System.out.println(&quot;Parameter is not valid.&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        // 目录不存在或不是目录</span><br><span class="line">        File currentPathFile = new File(currentPath);</span><br><span class="line">        if (!currentPathFile.isDirectory()) &#123;</span><br><span class="line">            System.out.println(&quot;Directory does not exist.&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 遍历目录取的文件信息</span><br><span class="line">        List&lt;Hashtable&gt; fileList = new ArrayList&lt;Hashtable&gt;();</span><br><span class="line">        if (currentPathFile.listFiles() != null) &#123;</span><br><span class="line">            for (File file : currentPathFile.listFiles()) &#123;</span><br><span class="line">                Hashtable&lt;String, Object&gt; hash = new Hashtable&lt;String, Object&gt;();</span><br><span class="line">                String fileName = file.getName();</span><br><span class="line">                if (file.isDirectory()) &#123;</span><br><span class="line">                    hash.put(&quot;is_dir&quot;, true);</span><br><span class="line">                    hash.put(&quot;has_file&quot;, (file.listFiles() != null));</span><br><span class="line">                    hash.put(&quot;filesize&quot;, 0L);</span><br><span class="line">                    hash.put(&quot;is_photo&quot;, false);</span><br><span class="line">                    hash.put(&quot;filetype&quot;, &quot;&quot;);</span><br><span class="line">                &#125; else if (file.isFile()) &#123;</span><br><span class="line">                    String fileExt = fileName.substring(fileName.lastIndexOf(&quot;.&quot;) + 1).toLowerCase();</span><br><span class="line">                    hash.put(&quot;is_dir&quot;, false);</span><br><span class="line">                    hash.put(&quot;has_file&quot;, false);</span><br><span class="line">                    hash.put(&quot;filesize&quot;, file.length());</span><br><span class="line">                    hash.put(&quot;is_photo&quot;, Arrays.&lt;String&gt;asList(fileTypes).contains(fileExt));</span><br><span class="line">                    hash.put(&quot;filetype&quot;, fileExt);</span><br><span class="line">                &#125;</span><br><span class="line">                hash.put(&quot;filename&quot;, fileName);</span><br><span class="line">                hash.put(&quot;datetime&quot;, new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(file.lastModified()));</span><br><span class="line">                fileList.add(hash);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (&quot;size&quot;.equals(order)) &#123;</span><br><span class="line">            Collections.sort(fileList, new SizeComparator());</span><br><span class="line">        &#125; else if (&quot;type&quot;.equals(order)) &#123;</span><br><span class="line">            Collections.sort(fileList, new TypeComparator());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Collections.sort(fileList, new NameComparator());</span><br><span class="line">        &#125;</span><br><span class="line">        JSONObject result = new JSONObject();</span><br><span class="line">        result.put(&quot;moveup_dir_path&quot;, moveupDirPath);</span><br><span class="line">        result.put(&quot;current_dir_path&quot;, currentDirPath);</span><br><span class="line">        result.put(&quot;current_url&quot;, currentUrl);</span><br><span class="line">        result.put(&quot;total_count&quot;, fileList.size());</span><br><span class="line">        result.put(&quot;file_list&quot;, fileList);</span><br><span class="line">        response.setContentType(&quot;application/json; charset=UTF-8&quot;);</span><br><span class="line">        System.out.println(result.toJSONString());</span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        writer.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class NameComparator implements Comparator &#123;</span><br><span class="line">        public int compare(Object a, Object b) &#123;</span><br><span class="line">            Hashtable hashA = (Hashtable) a;</span><br><span class="line">            Hashtable hashB = (Hashtable) b;</span><br><span class="line">            if (((Boolean) hashA.get(&quot;is_dir&quot;)) &amp;&amp; !((Boolean) hashB.get(&quot;is_dir&quot;))) &#123;</span><br><span class="line">                return -1;</span><br><span class="line">            &#125; else if (!((Boolean) hashA.get(&quot;is_dir&quot;)) &amp;&amp; ((Boolean) hashB.get(&quot;is_dir&quot;))) &#123;</span><br><span class="line">                return 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return ((String) hashA.get(&quot;filename&quot;)).compareTo((String) hashB.get(&quot;filename&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class SizeComparator implements Comparator &#123;</span><br><span class="line">        public int compare(Object a, Object b) &#123;</span><br><span class="line">            Hashtable hashA = (Hashtable) a;</span><br><span class="line">            Hashtable hashB = (Hashtable) b;</span><br><span class="line">            if (((Boolean) hashA.get(&quot;is_dir&quot;)) &amp;&amp; !((Boolean) hashB.get(&quot;is_dir&quot;))) &#123;</span><br><span class="line">                return -1;</span><br><span class="line">            &#125; else if (!((Boolean) hashA.get(&quot;is_dir&quot;)) &amp;&amp; ((Boolean) hashB.get(&quot;is_dir&quot;))) &#123;</span><br><span class="line">                return 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (((Long) hashA.get(&quot;filesize&quot;)) &gt; ((Long) hashB.get(&quot;filesize&quot;))) &#123;</span><br><span class="line">                    return 1;</span><br><span class="line">                &#125; else if (((Long) hashA.get(&quot;filesize&quot;)) &lt; ((Long) hashB.get(&quot;filesize&quot;))) &#123;</span><br><span class="line">                    return -1;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return 0;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class TypeComparator implements Comparator &#123;</span><br><span class="line">        public int compare(Object a, Object b) &#123;</span><br><span class="line">            Hashtable hashA = (Hashtable) a;</span><br><span class="line">            Hashtable hashB = (Hashtable) b;</span><br><span class="line">            if (((Boolean) hashA.get(&quot;is_dir&quot;)) &amp;&amp; !((Boolean) hashB.get(&quot;is_dir&quot;))) &#123;</span><br><span class="line">                return -1;</span><br><span class="line">            &#125; else if (!((Boolean) hashA.get(&quot;is_dir&quot;)) &amp;&amp; ((Boolean) hashB.get(&quot;is_dir&quot;))) &#123;</span><br><span class="line">                return 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return ((String) hashA.get(&quot;filetype&quot;)).compareTo((String) hashB.get(&quot;filetype&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>前端核心代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var editor;</span><br><span class="line">        KindEditor</span><br><span class="line">                .ready(function(K) &#123;</span><br><span class="line">                    editor = K</span><br><span class="line">                            .create(</span><br><span class="line">                                    &apos;textarea[id=&quot;postContent&quot;]&apos;,</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        filterMode : false,</span><br><span class="line">                                        allowFileManager : true,</span><br><span class="line">                                        cssPath : [ &apos;../../blog-web/static/vendor/kindeditor/plugins/code/prettify.css&apos; ],</span><br><span class="line">                                        filePostName : &quot;file&quot;,</span><br><span class="line">                                        //这里就是指定文件上传的请求地址，上面也已经说了，upload_json.jsp就相当去一个servlet去进行保存文件，这个地方很重要</span><br><span class="line">                                        uploadJson : Blog.url.api.KindEditorUpload,</span><br><span class="line">                                        fileManagerJson :Blog.url.api.KindEditorFileManager,</span><br><span class="line">                                        resizeType : 1,</span><br><span class="line">                                        allowPreviewEmoticons : true,</span><br><span class="line">                                        allowImageUpload : true,</span><br><span class="line">                                        filterMode : false,</span><br><span class="line"></span><br><span class="line">                                    &#125;);</span><br><span class="line"></span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        $(function() &#123;</span><br><span class="line">            prettyPrint();</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>本文参考资料如下:</p><p><a href="https://blog.csdn.net/u012131769/article/details/47430873(我参考这各地址实践成功的，希望能够对大家有所启发)" target="_blank" rel="noopener">https://blog.csdn.net/u012131769/article/details/47430873(我参考这各地址实践成功的，希望能够对大家有所启发)</a></p><p><a href="https://blog.csdn.net/kaisens/article/details/78586597" target="_blank" rel="noopener">https://blog.csdn.net/kaisens/article/details/78586597</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger-BootStrap-UI生成的接口文档如何加Basic校验</title>
      <link href="/2019/09/07/Swagger-BootStrap-UI%E7%94%9F%E6%88%90%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E5%A6%82%E4%BD%95%E5%8A%A0Basic%E6%A0%A1%E9%AA%8C/"/>
      <url>/2019/09/07/Swagger-BootStrap-UI%E7%94%9F%E6%88%90%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E5%A6%82%E4%BD%95%E5%8A%A0Basic%E6%A0%A1%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>首先我们来看看swagger-bootstrap-ui的效果，如图所示:<br><img src="/2019/09/07/Swagger-BootStrap-UI生成的接口文档如何加Basic校验/01.png" alt=""><br>看起来是不是比Swagger要大气的多。</p><p>回到重点上，为什么要给接口文档加密呢？</p><p>只对内开放，不对外开放，防止被第三方非公司人员进行非法窃取。</p><a id="more"></a> <p>那么我们如何给它加Basic校验呢？</p><p>首先声明，为什么要给它加Basic而不是oAuth2.0之类的验证？</p><p>其实道理很简单，避免重复造轮子，swagger-bootstrap里面集成有的，我们又何必为其多此一举呢。</p><p>当然了，生产环境下，我们尽可能还是不要将其对外开放好一些，具体，swagger-bootstrap也提供对应的配置，如下所示:</p><p>application.properties:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swagger.production=true</span><br></pre></td></tr></table></figure></p><p>application.yml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swagger:</span><br><span class="line">    production: true</span><br></pre></td></tr></table></figure></p><p>以使用SpringBoot为例</p><p>参考链接:<a href="https://doc.xiaominfo.com/guide/accessControl.html#%E8%AE%BF%E9%97%AE%E9%A1%B5%E9%9D%A2%E5%8A%A0%E6%9D%83%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener">https://doc.xiaominfo.com/guide/accessControl.html#%E8%AE%BF%E9%97%AE%E9%A1%B5%E9%9D%A2%E5%8A%A0%E6%9D%83%E6%8E%A7%E5%88%B6</a></p><p>只需在application.yml配置如下内容即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">swagger:</span><br><span class="line">    basic:</span><br><span class="line">      enable: true</span><br><span class="line">      username: test</span><br><span class="line">      password: test</span><br></pre></td></tr></table></figure></p><p>如果是application.properties:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 开启Swagger的Basic认证功能,默认是false</span><br><span class="line">swagger.basic.enable=true</span><br><span class="line">## Basic认证用户名</span><br><span class="line">swagger.basic.username=test</span><br><span class="line">## Basic认证密码</span><br><span class="line">swagger.basic.password=test</span><br></pre></td></tr></table></figure></p><p>效果图，如下:</p><p><a href="https://doc.xiaominfo.com/images/ac-pwd.png" target="_blank" rel="noopener">https://doc.xiaominfo.com/images/ac-pwd.png</a></p><p>更多资料，可以参考官方文档:<a href="https://doc.xiaominfo.com/" target="_blank" rel="noopener">https://doc.xiaominfo.com/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分析WordPress数据表之文章表(功能篇)</title>
      <link href="/2019/08/30/%E5%88%86%E6%9E%90WordPress%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%B9%8B%E6%96%87%E7%AB%A0%E8%A1%A8-%E5%8A%9F%E8%83%BD%E7%AF%87/"/>
      <url>/2019/08/30/%E5%88%86%E6%9E%90WordPress%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%B9%8B%E6%96%87%E7%AB%A0%E8%A1%A8-%E5%8A%9F%E8%83%BD%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2><span id="数据表分析">数据表分析</span></h2><h3><span id="wp_posts文章表">wp_posts(文章表)</span></h3><p><img src="/2019/08/30/分析WordPress数据表之文章表-功能篇/01.png" alt="图一"><br><a id="more"></a><br>表字段如下:<br>ID(文章ID)<br>post_author(文章作者名，我想可以是为用户名，也可以是用户ID)<br>post_date(文章发布日期)<br>post_date_gmt(文章发布日期，格林威治时间)<br>post_content(文章内容)<br>post_title(文章标题)<br>post_exerpt(摘录)<br>post_status(文章状态，publish/auto-draft/inherit)<br>comment_status(是否开启评论，默认值为open，打开)<br>ping_status<br>post_password(文章密码，如果加密的话，需要输入对应的密码才能打开)<br>post_name(文章缩略名)<br>to_ping(ping的链接)<br>pinged(已经PING过的链接)<br>post_modified(文章修改时间)<br>post_modified_gmt(文章修改时间，格林威治时间)<br>post_content_filter<br>post_parent(父文章，主要用于page)<br>guid<br>menu_order(排序ID)<br>post_type(文章类型,post或page)<br>post_mime_type(MIME类型)<br>comment_count(文章评论总数)</p><h3><span id="wp_postmeta文章元数据">wp_postmeta(文章元数据)</span></h3><p><img src="/2019/08/30/分析WordPress数据表之文章表-功能篇/02.png" alt="图二"></p><p>表字段分析:<br>meta_id(文章元数据自增ID)<br>post_id(文章ID)<br>meta_key(元数据键)<br>meta_value(元数据值)</p><h2><span id="具体事例分析">具体事例分析</span></h2><h3><span id="以写一篇文章为例">以写一篇文章为例</span></h3><p>如图:<br><img src="/2019/08/30/分析WordPress数据表之文章表-功能篇/03.png" alt="图一"></p><p>页面效果，如下:<br><img src="/2019/08/30/分析WordPress数据表之文章表-功能篇/04.png" alt="图二"></p><p>在对应的数据表中我们看到如下数据:<br>这里显示的是wp_postmeta表:<br><img src="/2019/08/30/分析WordPress数据表之文章表-功能篇/05.png" alt="图三"></p><p>再看wp_posts表，如下(却还是仅仅只有一条数据，关于这一点我有些疑惑不解):<br><img src="/2019/08/30/分析WordPress数据表之文章表-功能篇/06.png" alt="图四"></p>]]></content>
      
      
      
        <tags>
            
            <tag> WordPress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次MyBatisPlus问题(如果表名是数据库关键字怎么办)</title>
      <link href="/2019/08/30/%E8%AE%B0%E4%B8%80%E6%AC%A1MyBatisPlus%E9%97%AE%E9%A2%98-%E5%A6%82%E6%9E%9C%E8%A1%A8%E5%90%8D%E6%98%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%B3%E9%94%AE%E5%AD%97%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
      <url>/2019/08/30/%E8%AE%B0%E4%B8%80%E6%AC%A1MyBatisPlus%E9%97%AE%E9%A2%98-%E5%A6%82%E6%9E%9C%E8%A1%A8%E5%90%8D%E6%98%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%B3%E9%94%AE%E5%AD%97%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
      
        <content type="html"><![CDATA[<p>问题信息:<br>如果表名是数据库关键字怎么办？</p><p>正常来说，如果是我们自己写sql的话，给表名加反引号即可解决问题。</p><p>但是由于我们使用MyBatisPlus，相关的sql基本上都是封装并自动生成的。如果是这种场景，我们就需要修改对应的实体，举例说明，如下代码:<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import com.baomidou.mybatisplus.enums.IdType;</span><br><span class="line">import com.baomidou.mybatisplus.annotations.TableId;</span><br><span class="line">import com.baomidou.mybatisplus.activerecord.Model;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">public class Group extends Model&lt;Group&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 组ID</span><br><span class="line">     */</span><br><span class="line">    @TableId(value = &quot;id&quot;, type = IdType.AUTO)</span><br><span class="line">    private Integer id;</span><br><span class="line">    /**</span><br><span class="line">     * 组名</span><br><span class="line">     */</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Serializable pkVal() &#123;</span><br><span class="line">        return this.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Group&#123;&quot; +</span><br><span class="line">        &quot;id=&quot; + id +</span><br><span class="line">        &quot;, name=&quot; + name +</span><br><span class="line">        &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用上述代码的自动生成肯定会有问题，以单条数据查询为例，默认是 select id,name from group where id = 1，又因为group属于关键字，接下来会出现如下错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;group WHERE id=1&apos; at line 1</span><br><span class="line">; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;group WHERE id=1&apos; at line 1] with root cause</span><br><span class="line"></span><br><span class="line">com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;group WHERE id=1&apos; at line 1</span><br></pre></td></tr></table></figure></p><p>这种错误信息，很容易识别，一看就是sql写的有问题。但实际上sql并没有问题，只不过是因为关键字冲突导致sql错误。</p><p>那么如何解决这个问题呢？<br>答案是只需加一个@TableName注解即可解决该问题。修改后的实体代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import com.baomidou.mybatisplus.enums.IdType;</span><br><span class="line">import com.baomidou.mybatisplus.annotations.TableId;</span><br><span class="line">import com.baomidou.mybatisplus.annotations.TableName;</span><br><span class="line">import com.baomidou.mybatisplus.activerecord.Model;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@TableName(&quot;`group`&quot;)</span><br><span class="line">public class Group extends Model&lt;Group&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 组ID</span><br><span class="line">     */</span><br><span class="line">    @TableId(value = &quot;id&quot;, type = IdType.AUTO)</span><br><span class="line">    private Integer id;</span><br><span class="line">    /**</span><br><span class="line">     * 组名</span><br><span class="line">     */</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Serializable pkVal() &#123;</span><br><span class="line">        return this.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Group&#123;&quot; +</span><br><span class="line">        &quot;id=&quot; + id +</span><br><span class="line">        &quot;, name=&quot; + name +</span><br><span class="line">        &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> MyBatis-Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分析WordPress数据表之分类标签表(功能篇)</title>
      <link href="/2019/08/29/%E5%88%86%E6%9E%90WordPress%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%B9%8B%E5%88%86%E7%B1%BB%E6%A0%87%E7%AD%BE%E8%A1%A8-%E5%8A%9F%E8%83%BD%E7%AF%87/"/>
      <url>/2019/08/29/%E5%88%86%E6%9E%90WordPress%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%B9%8B%E5%88%86%E7%B1%BB%E6%A0%87%E7%AD%BE%E8%A1%A8-%E5%8A%9F%E8%83%BD%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2><span id="数据表分析">数据表分析</span></h2><h3><span id="wp_terms分类标签表">wp_terms(分类标签表)</span></h3><p><img src="/2019/08/29/分析WordPress数据表之分类标签表-功能篇/01.png" alt="图一"><br><a id="more"></a><br>表字段如下:<br>term_id(分类或标签ID)<br>name(分类或标签名)<br>slug(别名)<br>term_group(分类标签组，我想应该是用于排序分组)</p><h3><span id="wp_termmeta分类标签元数据表">wp_termmeta(分类标签元数据表)</span></h3><p><img src="/2019/08/29/分析WordPress数据表之分类标签表-功能篇/02.png" alt="图二"></p><p>表字段如下:<br>meta_id(元数据自增ID)<br>term_id(分类标签ID)<br>meta_key(元数据键)<br>meta_value(元数据值)</p><h3><span id="wp_term_taxonomy分类标签表">wp_term_taxonomy(分类标签表)</span></h3><p><img src="/2019/08/29/分析WordPress数据表之分类标签表-功能篇/03.png" alt="图三"><br>表字段如下:<br>term_taxonomy_id(分类标签ID,主要用于wp_term_relationships,因为wp_term_relationships，主要是文章和对应的标签分类进行关联)<br>term_id(标签或分类ID)<br>taxonomy(标签与分类的衡量标准)<br>description(描述)<br>parent(父ID，用于父子分类或父子集)<br>cout(该分类文章总数)</p><h2><span id="具体实例分析">具体实例分析</span></h2><p>以添加分类或标签为例:</p><h3><span id="添加标签">添加标签</span></h3><p><img src="/2019/08/29/分析WordPress数据表之分类标签表-功能篇/04.png" alt="图一"></p><p>添加成功后，分别在wp_terms及其wp_term_taxonomy表增加对应的数据，如下所示:<br><img src="/2019/08/29/分析WordPress数据表之分类标签表-功能篇/05.png" alt="图二"><br><img src="/2019/08/29/分析WordPress数据表之分类标签表-功能篇/06.png" alt="图三"><br>由此我们可以看，决定是分类还是标签，关键在于wp_term_taxonomy表中的taxonomy(通常有两个，一个是category，即分类，另外一个是post_tag，即文章标签)</p>]]></content>
      
      
      
        <tags>
            
            <tag> WordPress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分析WordPress数据表之评论表(功能篇)</title>
      <link href="/2019/08/29/%E5%88%86%E6%9E%90WordPress%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%B9%8B%E8%AF%84%E8%AE%BA%E8%A1%A8-%E5%8A%9F%E8%83%BD%E8%A1%A8/"/>
      <url>/2019/08/29/%E5%88%86%E6%9E%90WordPress%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%B9%8B%E8%AF%84%E8%AE%BA%E8%A1%A8-%E5%8A%9F%E8%83%BD%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2><span id="数据表分析">数据表分析</span></h2><h3><span id="wp_comments评论表">wp_comments(评论表)</span></h3><a id="more"></a><p><img src="/2019/08/29/分析WordPress数据表之评论表-功能表/01.png" alt="图一"></p><p>该表字段，如下:<br>comment_ID(评论ID)<br>comment_post_ID(评论文章ID)<br>comment_author(评论者用户名)<br>comment_author_email(评论者邮箱)<br>comment_author_url(评论者博客URL)<br>comment_author_IP(评论者访问IP)<br>comment_date(评论日期)<br>comment_date_gmt(评论格尼林治时间)<br>comment_content(评论内容)<br>comment_karma<br>comment_approved(评论状态，0相当于待审批，1相当于审批通过，spam相当于垃圾评论，trash相当于回收站，永久删除相当于从数据表中将其移除)<br>comment_agent(使用什么浏览器)<br>comment_type(评论类型)<br>comment_parent(评论父ID，判断该评论下是否有子集，0默认是没有子集)<br>user_id(用户ID)</p><h3><span id="wp_commentmeta评论元数据表">wp_commentmeta(评论元数据表)</span></h3><p><img src="/2019/08/29/分析WordPress数据表之评论表-功能表/02.png" alt="图二"><br>表字段，如下:<br>meta_id(评论元数据自增ID)<br>comment_id(评论ID)<br>meta_key(元数据键)<br>meta_value(元数据值)</p><p>这个评论元数据表，目前我还没有用起来。</p><h2><span id="具体实例分析">具体实例分析</span></h2><p>以评论为例:</p><h3><span id="评论文章">评论文章</span></h3><p><img src="/2019/08/29/分析WordPress数据表之评论表-功能表/03.png" alt="图一"></p><p><img src="/2019/08/29/分析WordPress数据表之评论表-功能表/04.png" alt="图二"></p><p>这里有这么几个功能?<br>(1)评论某个作者发表的文章，需经过审批后，才能显示;<br>(2)对应的文章评论应该是父子级展示，没有子集，一路平等，有子集，默认显示树形;</p><h3><span id="评论列表">评论列表</span></h3><p><img src="/2019/08/29/分析WordPress数据表之评论表-功能表/05.png" alt="图一"></p><p>从上面可得出如下功能:<br>(1)评论列表展示(管理员身份，默认展示所有评论);<br>(2)评论有对应的统计，如全部、待审、已批准、垃圾、回收站等;<br>(3)支持批量操作，如将对应的评论进行通过审批;<br>(4)对应的文章还必须显示，目前有多少评论，已批准，待审批等;<br>(5)搜索功能(这个搜索貌似仅仅只包含作者名及其评论内容等);<br>(6)统计评论总条数(根据统计条件进行变化);</p>]]></content>
      
      
      
        <tags>
            
            <tag> WordPress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layui上传文件组件(前后端代码实现)</title>
      <link href="/2019/08/29/layui%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6-%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/08/29/layui%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6-%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>我个人博客系统上传特色图片功能就是用layui上传文件组件做的。<br>另外采用某个生态框架，尽量都统一用该生态框架对应的解决方案，因为这样一来，有这么几个好处?<br>1.统一而不杂糅,有利于制定相应的编码规范，方便维护;<br>2.复用性高;<br>3.不会因公司开发人员的离职而导致一时找不到人来做这件事情;</p><p>就这三点，也足以让企业降低相应的开发成本</p><a id="more"></a><p>前端代码实现:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;upload&lt;/title&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;../layui/css/layui.css&quot; media=&quot;all&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> </span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;layui-btn&quot; id=&quot;uploadExample&quot;&gt;</span><br><span class="line">  &lt;i class=&quot;layui-icon&quot;&gt;&amp;#xe67c;&lt;/i&gt;上传安装包或更新包</span><br><span class="line">&lt;/button&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script src=&quot;../layui/layui.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">layui.use(&apos;upload&apos;, function()&#123;</span><br><span class="line">  var upload = layui.upload;</span><br><span class="line">   </span><br><span class="line">  //执行实例</span><br><span class="line">  var uploadInst = upload.render(&#123;</span><br><span class="line">    elem: &apos;#uploadExample&apos; //绑定元素</span><br><span class="line">    ,url: &apos;http://localhost:8090/blog-web/user/uploadFile&apos; //上传接口</span><br><span class="line">    ,accept: &apos;file&apos;</span><br><span class="line">    ,done: function(res)&#123;</span><br><span class="line">          layui.use(&apos;layer&apos;, function()&#123;</span><br><span class="line">              var layer = layui.layer;</span><br><span class="line"></span><br><span class="line">                layer.msg(res.url, &#123;</span><br><span class="line">                       time: 6000, //6s后自动关闭</span><br><span class="line">                       icon:1</span><br><span class="line">                 &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    ,error: function()&#123;</span><br><span class="line">      //请求异常回调</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>后端代码(我在这里采用的是腾讯云对象存储):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(value = &quot;/uploadFile&quot;)</span><br><span class="line">@ApiOperation(&quot;上传文件&quot;)</span><br><span class="line">public JSONObject uploadFile(HttpServletRequest request) throws IOException &#123;</span><br><span class="line">JSONObject json = new JSONObject();</span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">COSClientUtil cosClientUtil = new COSClientUtil();</span><br><span class="line"></span><br><span class="line">MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;</span><br><span class="line"></span><br><span class="line">// 获取上传的文件</span><br><span class="line">MultipartFile multiFile = multipartRequest.getFile(&quot;file&quot;);</span><br><span class="line"></span><br><span class="line">String name = cosClientUtil.uploadFileCos(multiFile);</span><br><span class="line"></span><br><span class="line">// 文件名称</span><br><span class="line">logger.info(&quot;name = &quot; + name);</span><br><span class="line"></span><br><span class="line">// 获取文件路径</span><br><span class="line">String fileUrl = cosClientUtil.getFileUrl(name);</span><br><span class="line"></span><br><span class="line">logger.info(&quot;fileUrl = &quot; + fileUrl);</span><br><span class="line"></span><br><span class="line">// 对文件路径进行处理</span><br><span class="line">String dbFileUrl = fileUrl.substring(0, fileUrl.indexOf(&quot;?&quot;));</span><br><span class="line">logger.info(&quot;dbFileUrl = &quot; + dbFileUrl);</span><br><span class="line">json.put(&quot;url&quot;, dbFileUrl);</span><br><span class="line">json.put(CommonEnum.RETURN_CODE, &quot;000000&quot;);</span><br><span class="line">json.put(CommonEnum.RETURN_MSG, &quot;success&quot;);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">json.put(CommonEnum.RETURN_CODE, &quot;333333&quot;);</span><br><span class="line">json.put(CommonEnum.RETURN_MSG, &quot;特殊异常&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通用腾讯云对象存储工具类:<br>对于腾讯云对象存储不明白的，可以参考官方文档:<br><a href="https://cloud.tencent.com/document/product/436/6474" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/436/6474</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import com.qcloud.cos.COSClient;  </span><br><span class="line">import com.qcloud.cos.ClientConfig;  </span><br><span class="line">import com.qcloud.cos.auth.BasicCOSCredentials;  </span><br><span class="line">import com.qcloud.cos.auth.COSCredentials;</span><br><span class="line">import com.qcloud.cos.http.HttpMethodName;</span><br><span class="line">import com.qcloud.cos.model.GetObjectRequest;</span><br><span class="line">import com.qcloud.cos.model.ObjectMetadata;</span><br><span class="line">import com.qcloud.cos.model.PutObjectRequest;</span><br><span class="line">import com.qcloud.cos.model.PutObjectResult;  </span><br><span class="line">import com.qcloud.cos.region.Region;</span><br><span class="line">import org.apache.http.ProtocolException;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;  </span><br><span class="line">import java.io.*;</span><br><span class="line">import java.net.HttpURLConnection;</span><br><span class="line">import java.net.URL;  </span><br><span class="line">import java.util.Date;  </span><br><span class="line">import java.util.Random; </span><br><span class="line"></span><br><span class="line">public class COSClientUtil &#123;</span><br><span class="line">  </span><br><span class="line">    private COSClient cOSClient;  </span><br><span class="line">  </span><br><span class="line">    private static final String ENDPOINT = &quot;ENDPOINT&quot;;  //用户可以指定域名，不指定则为默认生成的域名</span><br><span class="line"></span><br><span class="line">    //secretId   </span><br><span class="line">private static final String secretId = &quot;secretId&quot;;</span><br><span class="line"></span><br><span class="line">//secretKey </span><br><span class="line">private static final String secretKey = &quot;secretKey&quot;;</span><br><span class="line"></span><br><span class="line">//存储桶名称    </span><br><span class="line">private static final String bucketName = &quot;bucketName&quot;;//公有读私有写</span><br><span class="line">    //APPID</span><br><span class="line">private static final String APPID = &quot;APPID&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 1 初始化用户身份信息(secretId, secretKey)  </span><br><span class="line">private static COSCredentials cred = new BasicCOSCredentials(secretId, secretKey);</span><br><span class="line">// 2 设置bucket的区域, COS地域的简称请参照 https://cloud.tencent.com/document/product/436/6224  </span><br><span class="line">private static ClientConfig clientConfig = new ClientConfig(new Region(&quot;ap-beijing-1&quot;));</span><br><span class="line">// 3 生成cos客户端  </span><br><span class="line">private static COSClient cosclient = new COSClient(cred, clientConfig);</span><br><span class="line">    </span><br><span class="line">    public COSClientUtil() &#123;  </span><br><span class="line">        cOSClient = new COSClient(cred, clientConfig);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public static String getSecretId() &#123;</span><br><span class="line">    return secretId;</span><br><span class="line">    &#125;</span><br><span class="line">    public static String getsecretKey() &#123;</span><br><span class="line">    return secretKey;</span><br><span class="line">    &#125;</span><br><span class="line">    public static String getBucketName() &#123;</span><br><span class="line">    return bucketName;</span><br><span class="line">    &#125;</span><br><span class="line">    public static String getAPPID() &#123;</span><br><span class="line">    return APPID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** </span><br><span class="line">     * 销毁</span><br><span class="line">     */  </span><br><span class="line">    public void destory() &#123;  </span><br><span class="line">        cOSClient.shutdown();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  /**</span><br><span class="line">   * 上传文件</span><br><span class="line">   * @param file</span><br><span class="line">   * @return</span><br><span class="line">   */</span><br><span class="line">   public String uploadFileCos(MultipartFile file) &#123;</span><br><span class="line">   String originalFilename = file.getOriginalFilename();  </span><br><span class="line">       try &#123;  </span><br><span class="line">           InputStream inputStream = file.getInputStream();  </span><br><span class="line">   </span><br><span class="line">           this.uploadFileCos(inputStream, originalFilename);  </span><br><span class="line">            </span><br><span class="line">       &#125; catch (Exception e) &#123;  </span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       return originalFilename;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   /**</span><br><span class="line">    * 上传文件</span><br><span class="line">    * @param instream</span><br><span class="line">    * @param fileName</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   public String uploadFileCos(InputStream instream, String fileName) &#123;</span><br><span class="line">   </span><br><span class="line">       String ret = &quot;&quot;;  </span><br><span class="line">       try &#123;  </span><br><span class="line">           // 创建上传Object的Metadata  </span><br><span class="line">           ObjectMetadata objectMetadata = new ObjectMetadata();  </span><br><span class="line">           objectMetadata.setContentLength(instream.available());  </span><br><span class="line">           objectMetadata.setCacheControl(&quot;no-cache&quot;);  </span><br><span class="line">           objectMetadata.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);  </span><br><span class="line">           objectMetadata.setContentType(getcontentType(fileName.substring(fileName.lastIndexOf(&quot;.&quot;))));  </span><br><span class="line">           objectMetadata.setContentDisposition(&quot;inline;filename=&quot; + fileName); </span><br><span class="line"></span><br><span class="line">           PutObjectResult putResult = cOSClient.putObject(bucketName,fileName, instream, objectMetadata);  </span><br><span class="line">           ret = putResult.getETag();  </span><br><span class="line">           </span><br><span class="line">           System.out.println(ret);</span><br><span class="line">       &#125; catch (IOException e) &#123;  </span><br><span class="line">           e.printStackTrace();  </span><br><span class="line">       &#125; finally &#123;  </span><br><span class="line">           try &#123;  </span><br><span class="line">               if (instream != null) &#123;  </span><br><span class="line">                   instream.close();  </span><br><span class="line">               &#125;  </span><br><span class="line">           &#125; catch (IOException e) &#123;  </span><br><span class="line">               e.printStackTrace();  </span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           cosclient.shutdown();</span><br><span class="line">       &#125;  </span><br><span class="line">       return ret;  </span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    /** </span><br><span class="line">     * 获得文件路径 在上传文件之前获取预签名链接用的。</span><br><span class="line">     * </span><br><span class="line">     * @param fileUrl </span><br><span class="line">     * @return </span><br><span class="line">     */  </span><br><span class="line">    public String getFileUrl(String fileUrl) &#123;  </span><br><span class="line">        return getUrl(fileUrl).toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    /** </span><br><span class="line">     * 生成预签名的上传链接  </span><br><span class="line">     * </span><br><span class="line">     * @param key </span><br><span class="line">     * @return </span><br><span class="line">     */  </span><br><span class="line">    public URL getUrl(String key) &#123;  </span><br><span class="line">        // 设置URL过期时间为10年 3600l* 1000*24*365*10  </span><br><span class="line">        Date expiration = new Date(System.currentTimeMillis() + 3600L * 1000 * 24 * 365 * 10);  </span><br><span class="line">        // 生成URL  </span><br><span class="line">        URL url = cOSClient.generatePresignedUrl(bucketName, key, expiration, HttpMethodName.PUT);  </span><br><span class="line">      </span><br><span class="line">        return url;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">    /** </span><br><span class="line">     * Description: 判断Cos服务文件上传时文件的contentType </span><br><span class="line">     * </span><br><span class="line">     * @param filenameExtension 文件后缀 </span><br><span class="line">     * @return String </span><br><span class="line">     */  </span><br><span class="line">    public static String getcontentType(String filenameExtension) &#123;  </span><br><span class="line">        if (filenameExtension.equalsIgnoreCase(&quot;bmp&quot;)) &#123;  </span><br><span class="line">            return &quot;image/bmp&quot;;  </span><br><span class="line">        &#125;  </span><br><span class="line">        if (filenameExtension.equalsIgnoreCase(&quot;gif&quot;)) &#123;  </span><br><span class="line">            return &quot;image/gif&quot;;  </span><br><span class="line">        &#125;  </span><br><span class="line">        if (filenameExtension.equalsIgnoreCase(&quot;jpeg&quot;) || filenameExtension.equalsIgnoreCase(&quot;jpg&quot;)  </span><br><span class="line">                || filenameExtension.equalsIgnoreCase(&quot;png&quot;)) &#123;  </span><br><span class="line">            return &quot;image/jpeg&quot;;  </span><br><span class="line">        &#125;  </span><br><span class="line">        if (filenameExtension.equalsIgnoreCase(&quot;html&quot;)) &#123;  </span><br><span class="line">            return &quot;text/html&quot;;  </span><br><span class="line">        &#125;  </span><br><span class="line">        if (filenameExtension.equalsIgnoreCase(&quot;txt&quot;)) &#123;  </span><br><span class="line">            return &quot;text/plain&quot;;  </span><br><span class="line">        &#125;  </span><br><span class="line">        if (filenameExtension.equalsIgnoreCase(&quot;vsd&quot;)) &#123;  </span><br><span class="line">            return &quot;application/vnd.visio&quot;;  </span><br><span class="line">        &#125;  </span><br><span class="line">        if (filenameExtension.equalsIgnoreCase(&quot;pptx&quot;) || filenameExtension.equalsIgnoreCase(&quot;ppt&quot;)) &#123;  </span><br><span class="line">            return &quot;application/vnd.ms-powerpoint&quot;;  </span><br><span class="line">        &#125;  </span><br><span class="line">        if (filenameExtension.equalsIgnoreCase(&quot;docx&quot;) || filenameExtension.equalsIgnoreCase(&quot;doc&quot;)) &#123;  </span><br><span class="line">            return &quot;application/msword&quot;;  </span><br><span class="line">        &#125;  </span><br><span class="line">        if (filenameExtension.equalsIgnoreCase(&quot;xml&quot;)) &#123;  </span><br><span class="line">            return &quot;text/xml&quot;;  </span><br><span class="line">        &#125;  </span><br><span class="line">        return &quot;image/jpeg&quot;;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 下载文件</span><br><span class="line">     * @param downFile</span><br><span class="line">     * @param key</span><br><span class="line">     * @param bucketName</span><br><span class="line">     */</span><br><span class="line">    public void download(File downFile, String key, String bucketName) &#123;</span><br><span class="line">    GetObjectRequest getObjectRequest = new GetObjectRequest(bucketName, key);</span><br><span class="line">ObjectMetadata downObjectMeta = cOSClient.getObject(getObjectRequest, downFile);</span><br><span class="line">System.out.println(downObjectMeta.getContentLength());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分析WordPress数据表之用户表(功能篇)</title>
      <link href="/2019/08/28/%E5%88%86%E6%9E%90WordPress%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%B9%8B%E7%94%A8%E6%88%B7%E8%A1%A8-%E5%8A%9F%E8%83%BD%E7%AF%87/"/>
      <url>/2019/08/28/%E5%88%86%E6%9E%90WordPress%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%B9%8B%E7%94%A8%E6%88%B7%E8%A1%A8-%E5%8A%9F%E8%83%BD%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1><span id="数据表分析">数据表分析</span></h1><h2><span id="wp_users">wp_users</span></h2><p><img src="/2019/08/28/分析WordPress数据表之用户表-功能篇/01.png" alt="图一"></p><h2><span id="wp_usermeta">wp_usermeta</span></h2><p><img src="/2019/08/28/分析WordPress数据表之用户表-功能篇/02.png" alt="图二"></p><p>用户系统就是靠着这两张表来实现的。<br><a id="more"></a></p><h1><span id="具体事例分析">具体事例分析</span></h1><h2><span id="添加用户">添加用户</span></h2><p><img src="/2019/08/28/分析WordPress数据表之用户表-功能篇/03.png" alt="图三"></p><p>添加成功后，我们会分别在wp_users及wp_usermeta表中分别看到test001的数据。</p><h3><span id="wp_users">wp_users</span></h3><p><img src="/2019/08/28/分析WordPress数据表之用户表-功能篇/04.png" alt="图四"></p><h3><span id="wp_usermeta">wp_usermeta</span></h3><p><img src="/2019/08/28/分析WordPress数据表之用户表-功能篇/05.png" alt="图五"></p><p>wp_users表字段分析:<br>ID(用户ID)<br>user_login(用户登录账户名)<br>user_pass(用户密码)<br>user_nicename(用户昵称)<br>user_email(用户邮箱)<br>user_url(用户博客URL)<br>user_registered(注册时间)<br>user_activation_key(激活)<br>user_status(状态)<br>display_name(显示名称)</p><p>wp_usermeta表字段分析:<br>umeta_id(用户元数据表自增ID)<br>user_id(用户ID)<br>meta_key(元数据键)<br>meta_value(元数据值)</p><p>通常添加用户都会包含这些必须的数据，如图:<br><img src="/2019/08/28/分析WordPress数据表之用户表-功能篇/06.png" alt="图六"></p><p>umeta_id和user_id就不作分析了，很好理解。</p><p>主要说说meta_key里面的值到底是个什么意思(有的不清楚是什么意思，就不作解释了，等后续明白了再补充)?<br>nickname(用户昵称)<br>first_name(用户姓)<br>last_name(用户名)<br>description(个人说明)<br>rich_editing(编写文件不使用可视化编辑器，默认是true,表示使用可视化编辑器)<br>comment_shortcuts(管理评论时启用键盘快捷键)<br>admin_color(管理界面配色)<br>use_ssl(是否使用ssl)<br>show_admin_bar_front(是否显示管理面板)<br>locale(站点使用什么语言，如中文或英文)<br>wp_capabilities(权限)<br>wp_user_level(用户等级)<br>dismissed_wp_pointers</p><p>随着用户操作增加的meta_key内容如下:<br>session_tokens(会话token，登录就会产生，退出就会清除,我想用户下线功能就是这样实现的)<br>wp_user-settings(用户设置)<br>wp_user-settings-time(用户设置操作的时间)</p>]]></content>
      
      
      
        <tags>
            
            <tag> WordPress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bootstrap弹框去除遮罩层效果</title>
      <link href="/2019/08/28/bootstrap%E5%BC%B9%E6%A1%86%E5%8E%BB%E9%99%A4%E9%81%AE%E7%BD%A9%E5%B1%82%E6%95%88%E6%9E%9C/"/>
      <url>/2019/08/28/bootstrap%E5%BC%B9%E6%A1%86%E5%8E%BB%E9%99%A4%E9%81%AE%E7%BD%A9%E5%B1%82%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<p>是通过css解决这个问题,核心css代码如下:<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.modal-backdrop &#123;</span><br><span class="line">filter: alpha(opacity=0)!important;</span><br><span class="line">opacity: 0!important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>alpha和opacity通常是决定透明度。</p><p>alpha和opacity区别是什么?</p><p>相同点:<br>都是值为0表示完全透明，值为1表示完全不透明。</p><p>不同点:<br>alpha可以应用元素特定的属性，只能作用于当前元素，其子元素不能继承，而opacity不仅仅作用于当前元素，也会影响子元素及其子子元素，具有继承性。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js之切换全屏和退出全屏实现</title>
      <link href="/2019/08/26/js%E4%B9%8B%E5%88%87%E6%8D%A2%E5%85%A8%E5%B1%8F%E5%92%8C%E9%80%80%E5%87%BA%E5%85%A8%E5%B1%8F%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/08/26/js%E4%B9%8B%E5%88%87%E6%8D%A2%E5%85%A8%E5%B1%8F%E5%92%8C%E9%80%80%E5%87%BA%E5%85%A8%E5%B1%8F%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>应用场景:<br>比如很多网页游戏全屏之类的，或者是网上看小说等。<br><a id="more"></a></p><p>核心代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//控制全屏</span><br><span class="line">function enterfullscreen() &#123; //进入全屏</span><br><span class="line">$(&quot;#fullscreen&quot;).html(&quot;退出全屏&quot;);</span><br><span class="line">var docElm = document.documentElement;</span><br><span class="line">//W3C</span><br><span class="line">if(docElm.requestFullscreen) &#123;</span><br><span class="line">docElm.requestFullscreen();</span><br><span class="line">&#125;</span><br><span class="line">//FireFox</span><br><span class="line">else if(docElm.mozRequestFullScreen) &#123;</span><br><span class="line">docElm.mozRequestFullScreen();</span><br><span class="line">&#125;</span><br><span class="line">//Chrome等</span><br><span class="line">else if(docElm.webkitRequestFullScreen) &#123;</span><br><span class="line">docElm.webkitRequestFullScreen();</span><br><span class="line">&#125;</span><br><span class="line">//IE11</span><br><span class="line">else if(elem.msRequestFullscreen) &#123;</span><br><span class="line">elem.msRequestFullscreen();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function exitfullscreen() &#123; //退出全屏</span><br><span class="line">$(&quot;#fullscreen&quot;).html(&quot;切换全屏&quot;);</span><br><span class="line">if(document.exitFullscreen) &#123;</span><br><span class="line">document.exitFullscreen();</span><br><span class="line">&#125; else if(document.mozCancelFullScreen) &#123;</span><br><span class="line">document.mozCancelFullScreen();</span><br><span class="line">&#125; else if(document.webkitCancelFullScreen) &#123;</span><br><span class="line">document.webkitCancelFullScreen();</span><br><span class="line">&#125; else if(document.msExitFullscreen) &#123;</span><br><span class="line">document.msExitFullscreen();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a = 0;</span><br><span class="line">$(&apos;#fullscreen&apos;).on(&apos;click&apos;, function() &#123;</span><br><span class="line">a++;</span><br><span class="line">a % 2 == 1 ? enterfullscreen() : exitfullscreen();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>前端代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a type=&quot;button&quot; id=&quot;fullscreen&quot; class=&quot;btn btn-default visible-lg visible-md&quot;&gt;&lt;i class=&quot;fa fa-refresh&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 切换全屏&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js正则表达式之解决html解析&lt;&gt;标签问题</title>
      <link href="/2019/08/26/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B9%8B%E8%A7%A3%E5%86%B3html%E8%A7%A3%E6%9E%90-%E6%A0%87%E7%AD%BE%E9%97%AE%E9%A2%98/"/>
      <url>/2019/08/26/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B9%8B%E8%A7%A3%E5%86%B3html%E8%A7%A3%E6%9E%90-%E6%A0%87%E7%AD%BE%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>应用场景:<br>以博客写文章为例，有的时候我们不经意间写的字符串带标签，然后浏览器将其解析了，实际上我们并不希望其被解析，于是可通过核心代码解决该问题。</p><p>核心代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.codeSource.replace(new RegExp(&quot;&lt;&quot;,&quot;g&quot;),&quot;&amp;lt;&quot;).replace(new RegExp(&quot;&gt;&quot;,&quot;g&quot;),&quot;&amp;gt;&quot;)</span><br></pre></td></tr></table></figure></p><p>data.codeSource在这里相当于与后台交互获取到的数据</p><p>new RegExp是js正则表达式对象</p><p>replace方法，一共有两个参数，一个是原来的字符串，另一个是新的字符串</p><p>replace(old_string,new_string)</p><a id="more"></a>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HustOJ二次开发之修改数据库连接池</title>
      <link href="/2019/08/15/HustOJ%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>/2019/08/15/HustOJ%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>有的时候我们会因为某种业务需要的情况下，需要修改hustoj默认的数据库连接池之类的。<br><a id="more"></a></p><h2><span id="修改数据库连接池步骤">修改数据库连接池步骤</span></h2><h3><span id="进入到对应的目录">进入到对应的目录</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/judge/src/web/include</span><br></pre></td></tr></table></figure><h3><span id="找到db_infoincphp并修改">找到db_info.inc.php并修改</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim db_info.inc.php</span><br></pre></td></tr></table></figure><p>修改红色标记处即可，如图:<br><img src="/2019/08/15/HustOJ二次开发之修改数据库连接池/01.png" alt="图一"></p><h3><span id="修改judgeconf">修改judge.conf</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/judge/etc</span><br><span class="line"></span><br><span class="line">vim judge.conf</span><br></pre></td></tr></table></figure><p>效果如图:</p><p><img src="/2019/08/15/HustOJ二次开发之修改数据库连接池/02.png" alt="图一"></p><h3><span id="重启nginx和judge">重启nginx和judge</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/nginx restart</span><br><span class="line"></span><br><span class="line">sudo judged</span><br></pre></td></tr></table></figure><p>不过在此之前需要先执行如下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep judged //相当于将对应的judged杀死</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> HustOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用gitbook写文档</title>
      <link href="/2019/08/10/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gitbook%E5%86%99%E6%96%87%E6%A1%A3/"/>
      <url>/2019/08/10/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gitbook%E5%86%99%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>本文主要参考资料为该网址:<a href="https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md" target="_blank" rel="noopener">https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md</a></p><p>如何想使用现成的gitbook，网络上虽说可以搜索的到，但是要使用，可能会受到限制，需要翻墙。</p><p>但是通过这种方式，就不必翻墙，可以作为公司内部文档或者是自己的开源项目介绍等。</p><a id="more"></a><p>步骤如下(以生成一个blog文档为例):</p><h2><span id="全局安装gitbook-cli">全局安装gitbook-cli</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gitbook-cli -g</span><br></pre></td></tr></table></figure><h2><span id="初始化">初始化</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook init ./blog</span><br></pre></td></tr></table></figure><p>也可以不写 ./blog，./blog相当于指定目录，实践中最好这样操作。</p><h2><span id="启动服务">启动服务</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook serve</span><br></pre></td></tr></table></figure><p>访问地址:<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><p>效果图如下:<br><img src="/2019/08/10/如何使用gitbook写文档/01.png" alt="图一"></p><p>当然，测试的时候可以通过gitbook server这样，但是当文档完成后，部署到线上，最好还是通过<code>gitbook build</code>生成静态文件，效果如图:</p><p><img src="/2019/08/10/如何使用gitbook写文档/02.png" alt="图二"></p><p>另外还有一个叫docsify，与gitbook差不多，用作技术文档或者业务文档、项目介绍等，都是很不错的。<br>感兴趣的朋友可以通过下面官方文档地址，玩玩docsify。<br>docsify文档地址为:<a href="https://docsify.js.org/#/" target="_blank" rel="noopener">https://docsify.js.org/#/</a></p><p>对应的生成文档效果图，就跟官方文档一样，如图所示:<br><img src="/2019/08/10/如何使用gitbook写文档/03.png" alt="图二"></p><p>很萌吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layui之table.render使用(含后台详细代码实现)</title>
      <link href="/2019/08/10/layui%E4%B9%8Btable-render%E4%BD%BF%E7%94%A8-%E5%90%AB%E5%90%8E%E5%8F%B0%E8%AF%A6%E7%BB%86%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/08/10/layui%E4%B9%8Btable-render%E4%BD%BF%E7%94%A8-%E5%90%AB%E5%90%8E%E5%8F%B0%E8%AF%A6%E7%BB%86%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>效果图如下:<br><img src="/2019/08/10/layui之table-render使用-含后台详细代码实现/01.png" alt="图一"><br><a id="more"></a></p><p>前端实现代码如图(完整代码):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;数据表格&lt;/title&gt;</span><br><span class="line">  &lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;../../layuiadmin/layui/css/layui.css&quot; media=&quot;all&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;../../layuiadmin/style/admin.css&quot; media=&quot;all&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;layui-card layadmin-header&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;layui-breadcrumb&quot; lay-filter=&quot;breadcrumb&quot;&gt;</span><br><span class="line">      &lt;a lay-href=&quot;&quot;&gt;主页&lt;/a&gt;</span><br><span class="line">      &lt;a&gt;&lt;cite&gt;组件&lt;/cite&gt;&lt;/a&gt;</span><br><span class="line">      &lt;a&gt;&lt;cite&gt;数据表格&lt;/cite&gt;&lt;/a&gt;</span><br><span class="line">      &lt;a&gt;&lt;cite&gt;开启头部工具栏&lt;/cite&gt;&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;div class=&quot;layui-fluid&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;layui-row layui-col-space15&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;layui-col-md12&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;layui-card&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;layui-card-header&quot;&gt;开启头部工具栏&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;layui-card-body&quot;&gt;</span><br><span class="line">            &lt;table class=&quot;layui-hide&quot; id=&quot;test-table-toolbar&quot; lay-filter=&quot;test-table-toolbar&quot;&gt;&lt;/table&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;script type=&quot;text/html&quot; id=&quot;test-table-toolbar-toolbarDemo&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;layui-btn-container&quot;&gt;</span><br><span class="line">                &lt;button class=&quot;layui-btn layui-btn-sm&quot; lay-event=&quot;getCheckData&quot;&gt;获取选中行数据&lt;/button&gt;</span><br><span class="line">                &lt;button class=&quot;layui-btn layui-btn-sm&quot; lay-event=&quot;getCheckLength&quot;&gt;获取选中数目&lt;/button&gt;</span><br><span class="line">                &lt;button class=&quot;layui-btn layui-btn-sm&quot; lay-event=&quot;isAll&quot;&gt;验证是否全选&lt;/button&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/script&gt;</span><br><span class="line">             </span><br><span class="line">            &lt;script type=&quot;text/html&quot; id=&quot;test-table-toolbar-barDemo&quot;&gt;</span><br><span class="line">              &lt;a class=&quot;layui-btn layui-btn-xs&quot; lay-event=&quot;edit&quot;&gt;编辑&lt;/a&gt;</span><br><span class="line">              &lt;a class=&quot;layui-btn layui-btn-danger layui-btn-xs&quot; lay-event=&quot;del&quot;&gt;删除&lt;/a&gt;</span><br><span class="line">            &lt;/script&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script src=&quot;../../layuiadmin/layui/layui.js&quot;&gt;&lt;/script&gt;  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  layui.config(&#123;</span><br><span class="line">    base: &apos;../../layuiadmin/&apos; //静态资源所在路径</span><br><span class="line">  &#125;).extend(&#123;</span><br><span class="line">    index: &apos;lib/index&apos; //主入口模块</span><br><span class="line">  &#125;).use([&apos;index&apos;, &apos;table&apos;], function()&#123;</span><br><span class="line">    var admin = layui.admin</span><br><span class="line">    ,table = layui.table;</span><br><span class="line">  </span><br><span class="line">    table.render(&#123;</span><br><span class="line">      elem: &apos;#test-table-toolbar&apos;</span><br><span class="line">   ,url:&quot;http://localhost:8090/program-web/api/magic_change/oj/problem/page_list?userId=youcongtech&quot;</span><br><span class="line">      ,toolbar: &apos;#test-table-toolbar-toolbarDemo&apos;</span><br><span class="line">      ,title: &apos;程序设计题绑定&apos;</span><br><span class="line">  ,cols: [[</span><br><span class="line">    &#123;type: &apos;checkbox&apos;, fixed: &apos;left&apos;&#125;,</span><br><span class="line">        &#123;field:&apos;problemId&apos;, width:300, title: &apos;ID&apos;, sort: true&#125;</span><br><span class="line">        ,&#123;field:&apos;title&apos;, width:400, title: &apos;题目&apos;&#125;</span><br><span class="line">        ,&#123;width:215, align:&apos;center&apos;, fixed: &apos;right&apos;, toolbar: &apos;#test-table-toolbar-barDemo&apos;&#125;</span><br><span class="line">      ]]</span><br><span class="line">      ,page: true</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    //头工具栏事件</span><br><span class="line">    table.on(&apos;toolbar(test-table-toolbar)&apos;, function(obj)&#123;</span><br><span class="line">      var checkStatus = table.checkStatus(obj.config.id);</span><br><span class="line">      switch(obj.event)&#123;</span><br><span class="line">        case &apos;getCheckData&apos;:</span><br><span class="line">          var data = checkStatus.data;</span><br><span class="line">          layer.alert(JSON.stringify(data));</span><br><span class="line">        break;</span><br><span class="line">        case &apos;getCheckLength&apos;:</span><br><span class="line">          var data = checkStatus.data;</span><br><span class="line">          layer.msg(&apos;选中了：&apos;+ data.length + &apos; 个&apos;);</span><br><span class="line">        break;</span><br><span class="line">        case &apos;isAll&apos;:</span><br><span class="line">          layer.msg(checkStatus.isAll ? &apos;全选&apos;: &apos;未全选&apos;);</span><br><span class="line">        break;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    //监听行工具事件</span><br><span class="line">    table.on(&apos;tool(test-table-toolbar)&apos;, function(obj)&#123;</span><br><span class="line">      var data = obj.data;</span><br><span class="line">      if(obj.event === &apos;del&apos;)&#123;</span><br><span class="line">        layer.confirm(&apos;真的删除行么&apos;, function(index)&#123;</span><br><span class="line">          obj.del();</span><br><span class="line">          layer.close(index);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; else if(obj.event === &apos;edit&apos;)&#123;</span><br><span class="line">        layer.prompt(&#123;</span><br><span class="line">          formType: 2</span><br><span class="line">          ,value: data.email</span><br><span class="line">        &#125;, function(value, index)&#123;</span><br><span class="line">          obj.update(&#123;</span><br><span class="line">            email: value</span><br><span class="line">          &#125;);</span><br><span class="line">          layer.close(index);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">  &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>核心js代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> table.render(&#123;</span><br><span class="line">   elem: &apos;#test-table-toolbar&apos;</span><br><span class="line"> ,url:&quot;http://localhost:8090/program-web/api/magic_change/oj/problem/page_list?userId=youcongtech&quot;</span><br><span class="line">   ,toolbar: &apos;#test-table-toolbar-toolbarDemo&apos;</span><br><span class="line">   ,title: &apos;程序设计题绑定&apos;</span><br><span class="line">,cols: [[</span><br><span class="line">  &#123;type: &apos;checkbox&apos;, fixed: &apos;left&apos;&#125;,</span><br><span class="line">     &#123;field:&apos;problemId&apos;, width:300, title: &apos;ID&apos;, sort: true&#125;</span><br><span class="line">     ,&#123;field:&apos;title&apos;, width:400, title: &apos;题目&apos;&#125;</span><br><span class="line">     ,&#123;width:215, align:&apos;center&apos;, fixed: &apos;right&apos;, toolbar: &apos;#test-table-toolbar-barDemo&apos;&#125;</span><br><span class="line">   ]]</span><br><span class="line">   ,page: true</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p><p>要求后台返回数据格式必须为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;msg&quot;: &quot;success&quot;,</span><br><span class="line">  &quot;code&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;data&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;title&quot;: &quot;for循环输出&quot;,</span><br><span class="line">      &quot;problemId&quot;: 1139</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;title&quot;: &quot;测试2&quot;,</span><br><span class="line">      &quot;problemId&quot;: 1138</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;title&quot;: &quot;测试1&quot;,</span><br><span class="line">      &quot;problemId&quot;: 1137</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;title&quot;: &quot;for循环-Plus&quot;,</span><br><span class="line">      &quot;problemId&quot;: 1140</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;title&quot;: &quot;第一个C++程序&quot;,</span><br><span class="line">      &quot;problemId&quot;: 1141</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不然的话，会出现相关提示(如code对于的值必须为0，而不能为000000，以及data对应数据必须像上面这样的，不然cols里面不好自动对应上。</p><p>后台实现代码如下:<br>控制层代码(路由)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">   @GetMapping(&quot;/page_list&quot;)</span><br><span class="line">@ApiOperation(value=&quot;根据用户ID获取题目分页列表&quot;,httpMethod=&quot;GET&quot;,notes=&quot;根据用户ID获取题目分页列表&quot;)</span><br><span class="line">public JSONObject page_list(@RequestParam String userId, @RequestParam (value=&quot;page&quot;) String pageno, @RequestParam (value=&quot;limit&quot;) String pagesize) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;userId:&quot;+userId+&quot;|| pageno:&quot;+pageno+&quot;||pagesize:&quot;+pagesize);</span><br><span class="line"></span><br><span class="line">JSONObject json = new JSONObject();</span><br><span class="line"></span><br><span class="line">//当前页</span><br><span class="line">Integer page = Integer.parseInt(pageno.trim());</span><br><span class="line">//每页的数量</span><br><span class="line">Integer size = Integer.parseInt(pagesize.trim());</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; paramMap = new HashMap&lt;&gt;();</span><br><span class="line">paramMap.put(&quot;userId&quot;, userId);</span><br><span class="line">paramMap.put(&quot;start&quot;, (page - 1) * size);  //当前页的数量</span><br><span class="line">paramMap.put(&quot;size&quot;, size);  //当前页</span><br><span class="line"></span><br><span class="line">List&lt;Problem&gt; problemList = problemService.getProblemPageListInfo(paramMap);</span><br><span class="line">     </span><br><span class="line">int count =problemService.getProblemPageTotalCount(paramMap);</span><br><span class="line"></span><br><span class="line">if(!problemList.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">json.put(&quot;msg&quot;, &quot;success&quot;);</span><br><span class="line">json.put(&quot;code&quot;, &quot;0&quot;);</span><br><span class="line">json.put(&quot;data&quot;, problemList);</span><br><span class="line">json.put(&quot;count&quot;, count);</span><br><span class="line"></span><br><span class="line">&#125;else &#123;</span><br><span class="line"></span><br><span class="line">json.put(CommonEnum.RETURN_MSG, &quot;error&quot;);</span><br><span class="line">json.put(CommonEnum.RETURN_CODE, &quot;222222&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return json;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Service及其实现类:<br>Service:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public interface ProblemService extends IService&lt;Problem&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;Problem&gt; getProblemPageListInfo(Map&lt;String,Object&gt; paramMap);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Integer getProblemPageTotalCount(Map&lt;String,Object&gt; paramMap);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Service实现类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.eluzhu.sass.service.impl;</span><br><span class="line"></span><br><span class="line">import com.eluzhu.sass.entity.Problem;</span><br><span class="line">import com.eluzhu.sass.mapper.ProblemDao;</span><br><span class="line">import com.eluzhu.sass.service.ProblemService;</span><br><span class="line">import com.baomidou.mybatisplus.service.impl.ServiceImpl;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class ProblemServiceImpl extends ServiceImpl&lt;ProblemDao, Problem&gt; implements ProblemService &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private ProblemDao problemDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;Problem&gt; getProblemPageListInfo(Map&lt;String, Object&gt; paramMap) &#123;</span><br><span class="line"></span><br><span class="line">return problemDao.getProblemPageListInfo(paramMap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Integer getProblemPageTotalCount(Map&lt;String, Object&gt; paramMap) &#123;</span><br><span class="line"></span><br><span class="line">return problemDao.getProblemPageTotalCount(paramMap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数据访问类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public interface ProblemDao extends BaseMapper&lt;Problem&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;Problem&gt; getProblemPageListInfo(Map&lt;String,Object&gt; paramMap);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Integer getProblemPageTotalCount(Map&lt;String,Object&gt; paramMap);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ProblemDao.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.eluzhu.sass.mapper.ProblemDao&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 通用查询映射结果 --&gt;</span><br><span class="line">&lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;com.eluzhu.sass.entity.Problem&quot;&gt;</span><br><span class="line">&lt;id column=&quot;problem_id&quot; property=&quot;problemId&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;title&quot; property=&quot;title&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;description&quot; property=&quot;description&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;input&quot; property=&quot;input&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;output&quot; property=&quot;output&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;sample_input&quot; property=&quot;sampleInput&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;sample_output&quot; property=&quot;sampleOutput&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;spj&quot; property=&quot;spj&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;hint&quot; property=&quot;hint&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;source&quot; property=&quot;source&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;in_date&quot; property=&quot;inDate&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;time_limit&quot; property=&quot;timeLimit&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;memory_limit&quot; property=&quot;memoryLimit&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;defunct&quot; property=&quot;defunct&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;accepted&quot; property=&quot;accepted&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;submit&quot; property=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;solved&quot; property=&quot;solved&quot; /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;result column=&quot;p_ladder_level&quot; property=&quot;pLadderLevel&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;p_ladder_type&quot; property=&quot;pLadderType&quot; /&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 通用查询结果列 --&gt;</span><br><span class="line">&lt;sql id=&quot;Base_Column_List&quot;&gt;</span><br><span class="line">problem_id AS problemId, title, description, input, output, sample_input AS</span><br><span class="line">sampleInput, sample_output AS sampleOutput, spj, hint, source, in_date</span><br><span class="line">AS inDate, time_limit AS timeLimit, memory_limit AS memoryLimit,</span><br><span class="line">defunct, accepted, submit, solved</span><br><span class="line">&lt;/sql&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;getProblemPageListInfo&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line">SELECT DISTINCT problem.problem_id,problem.title FROM privilege AS p LEFT JOIN</span><br><span class="line">problem ON( REPLACE(p.rightstr,&apos;p&apos;,&apos;&apos;) = problem.problem_id) WHERE</span><br><span class="line">p.user_id =#&#123;userId&#125; AND problem.problem_id !=0 AND p.rightstr !=</span><br><span class="line">&apos;problem_editor&apos; AND p.rightstr != &apos;contenst_creator&apos; limit #&#123;start&#125;,#&#123;size&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;getProblemPageTotalCount&quot; resultType=&quot;Integer&quot;&gt;</span><br><span class="line">SELECT COUNT(DISTINCT problem.problem_id) FROM privilege AS p LEFT JOIN</span><br><span class="line">problem ON( REPLACE(p.rightstr,&apos;p&apos;,&apos;&apos;) = problem.problem_id) WHERE</span><br><span class="line">p.user_id =#&#123;userId&#125; AND problem.problem_id !=0 AND p.rightstr !=</span><br><span class="line">&apos;problem_editor&apos; AND p.rightstr != &apos;contenst_creator&apos; </span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>实体类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line">public class Problem extends Model&lt;Problem&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    @TableId(value = &quot;problem_id&quot;, type = IdType.AUTO)</span><br><span class="line">    private Integer problemId;</span><br><span class="line">    private String title;</span><br><span class="line">    private String description;</span><br><span class="line">    private String input;</span><br><span class="line">    private String output;</span><br><span class="line">    @TableField(&quot;sample_input&quot;)</span><br><span class="line">    private String sampleInput;</span><br><span class="line">    @TableField(&quot;sample_output&quot;)</span><br><span class="line">    private String sampleOutput;</span><br><span class="line">    private String spj;</span><br><span class="line">    private String hint;</span><br><span class="line">    private String source;</span><br><span class="line">    @TableField(&quot;in_date&quot;)</span><br><span class="line">    private String inDate;</span><br><span class="line">    @TableField(&quot;time_limit&quot;)</span><br><span class="line">    private String timeLimit;</span><br><span class="line">    @TableField(&quot;memory_limit&quot;)</span><br><span class="line">    private String memoryLimit;</span><br><span class="line">    private String defunct;</span><br><span class="line">    private Integer accepted;</span><br><span class="line">    private Integer submit;</span><br><span class="line">    private Integer solved;</span><br><span class="line">    </span><br><span class="line">    @TableField(exist=false)</span><br><span class="line">    private String pLadderLevel;</span><br><span class="line">    </span><br><span class="line">    @TableField(exist=false)</span><br><span class="line">    private String pLadderType;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    public Integer getProblemId() &#123;</span><br><span class="line">        return problemId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProblemId(Integer problemId) &#123;</span><br><span class="line">        this.problemId = problemId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getTitle() &#123;</span><br><span class="line">        return title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTitle(String title) &#123;</span><br><span class="line">        this.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDescription() &#123;</span><br><span class="line">        return description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDescription(String description) &#123;</span><br><span class="line">        this.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getInput() &#123;</span><br><span class="line">        return input;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setInput(String input) &#123;</span><br><span class="line">        this.input = input;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getOutput() &#123;</span><br><span class="line">        return output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOutput(String output) &#123;</span><br><span class="line">        this.output = output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSampleInput() &#123;</span><br><span class="line">        return sampleInput;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSampleInput(String sampleInput) &#123;</span><br><span class="line">        this.sampleInput = sampleInput;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSampleOutput() &#123;</span><br><span class="line">        return sampleOutput;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSampleOutput(String sampleOutput) &#123;</span><br><span class="line">        this.sampleOutput = sampleOutput;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSpj() &#123;</span><br><span class="line">        return spj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSpj(String spj) &#123;</span><br><span class="line">        this.spj = spj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getHint() &#123;</span><br><span class="line">        return hint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setHint(String hint) &#123;</span><br><span class="line">        this.hint = hint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSource() &#123;</span><br><span class="line">        return source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSource(String source) &#123;</span><br><span class="line">        this.source = source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getInDate() &#123;</span><br><span class="line">        return inDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setInDate(String inDate) &#123;</span><br><span class="line">        this.inDate = inDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getTimeLimit() &#123;</span><br><span class="line">        return timeLimit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTimeLimit(String timeLimit) &#123;</span><br><span class="line">        this.timeLimit = timeLimit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMemoryLimit() &#123;</span><br><span class="line">        return memoryLimit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMemoryLimit(String memoryLimit) &#123;</span><br><span class="line">        this.memoryLimit = memoryLimit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDefunct() &#123;</span><br><span class="line">        return defunct;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDefunct(String defunct) &#123;</span><br><span class="line">        this.defunct = defunct;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getAccepted() &#123;</span><br><span class="line">        return accepted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAccepted(Integer accepted) &#123;</span><br><span class="line">        this.accepted = accepted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getSubmit() &#123;</span><br><span class="line">        return submit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSubmit(Integer submit) &#123;</span><br><span class="line">        this.submit = submit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getSolved() &#123;</span><br><span class="line">        return solved;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSolved(Integer solved) &#123;</span><br><span class="line">        this.solved = solved;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    public String getpLadderLevel() &#123;</span><br><span class="line">return pLadderLevel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setpLadderLevel(String pLadderLevel) &#123;</span><br><span class="line">this.pLadderLevel = pLadderLevel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getpLadderType() &#123;</span><br><span class="line">return pLadderType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setpLadderType(String pLadderType) &#123;</span><br><span class="line">this.pLadderType = pLadderType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">    protected Serializable pkVal() &#123;</span><br><span class="line">        return this.problemId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;Problem [problemId=&quot; + problemId + &quot;, title=&quot; + title + &quot;, description=&quot; + description + &quot;, input=&quot;</span><br><span class="line">+ input + &quot;, output=&quot; + output + &quot;, sampleInput=&quot; + sampleInput + &quot;, sampleOutput=&quot; + sampleOutput</span><br><span class="line">+ &quot;, spj=&quot; + spj + &quot;, hint=&quot; + hint + &quot;, source=&quot; + source + &quot;, inDate=&quot; + inDate + &quot;, timeLimit=&quot;</span><br><span class="line">+ timeLimit + &quot;, memoryLimit=&quot; + memoryLimit + &quot;, defunct=&quot; + defunct + &quot;, accepted=&quot; + accepted</span><br><span class="line">+ &quot;, submit=&quot; + submit + &quot;, solved=&quot; + solved + &quot;, pLadderLevel=&quot; + pLadderLevel + &quot;, pLadderType=&quot;</span><br><span class="line">+ pLadderType + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HustOJ二次开发之隐藏菜单栏</title>
      <link href="/2019/08/08/HustOJ%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E4%B9%8B%E9%9A%90%E8%97%8F%E8%8F%9C%E5%8D%95%E6%A0%8F/"/>
      <url>/2019/08/08/HustOJ%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E4%B9%8B%E9%9A%90%E8%97%8F%E8%8F%9C%E5%8D%95%E6%A0%8F/</url>
      
        <content type="html"><![CDATA[<p>通过关键搜索:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name *nav.php</span><br></pre></td></tr></table></figure></p><p>出现如下结果:<br>/home/judge/src/web/template/ie/nav.php<br>/home/judge/src/web/template/ace/nav.php<br>/home/judge/src/web/template/bs3/nav.php<br>/home/judge/src/web/template/sweet/nav.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /home/judge/src/web/template/bs3/nav.php</span><br></pre></td></tr></table></figure><a id="more"></a><p>将该片段代码注释即可，如图所示(以隐藏HustOJ的讨论版为例):<br><img src="/2019/08/08/HustOJ二次开发之隐藏菜单栏/01.png" alt="图一"></p><p>这回再看页面，就没有讨论版了，如图所示:<br><img src="/2019/08/08/HustOJ二次开发之隐藏菜单栏/02.png" alt="图二"></p><p>官方的HustOJ菜单栏:<br><img src="/2019/08/08/HustOJ二次开发之隐藏菜单栏/03.png" alt="图二"></p>]]></content>
      
      
      
        <tags>
            
            <tag> HustOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HustOJ二次开发之修改相关Logo</title>
      <link href="/2019/08/08/HustOJ%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BF%AE%E6%94%B9%E7%9B%B8%E5%85%B3Logo/"/>
      <url>/2019/08/08/HustOJ%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BF%AE%E6%94%B9%E7%9B%B8%E5%85%B3Logo/</url>
      
        <content type="html"><![CDATA[<p>比如将如图中的HUSTOJ进行修改:<br><img src="/2019/08/08/HustOJ二次开发之修改相关Logo/01.png" alt=""></p><p>在Linux上修改，通过关键字搜索，会获取如下两个重要文件，找到都有的文字进行修改即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grep -rn &quot;HUSTOJ&quot; *</span><br><span class="line">cd /home/judge/src/web</span><br><span class="line">vim include/db_info.inc.php 修改标题</span><br><span class="line">vim template/bs3/js.php 修改底部</span><br></pre></td></tr></table></figure></p><a id="more"></a>]]></content>
      
      
      
        <tags>
            
            <tag> HustOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VsCode更新代码问题之解决方案</title>
      <link href="/2019/08/07/VsCode%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/08/07/VsCode%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>针对VsCode二次开发，有时常与官方VsCode保持更新的必要。<br>由于目前我们没有想到更好的办法，就通过手动的方式进行更新。<br><a id="more"></a><br>更新步骤如下:</p><h2><span id="git-clone或者下载源代码">git clone或者下载源代码</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/microsoft/vscode.git</span><br></pre></td></tr></table></figure><p>或者点击红色方块内容<br><img src="/2019/08/07/VsCode更新代码问题之解决方案/01.png" alt="图一"></p><p>通常建议点击红色方块内容下载会更快</p><h2><span id="重新编译-运行一遍">重新编译、运行一遍</span></h2><p>注意:最新版VsCode对Node.js及相关的Python环境有一定的要求，切不可忽略，不然会导致不必要的麻烦。</p><p>通常可以参考如下文档保持获取最新信息:<br><a href="https://github.com/Microsoft/vscode/wiki/How-to-Contribute#build-and-run" target="_blank" rel="noopener">https://github.com/Microsoft/vscode/wiki/How-to-Contribute#build-and-run</a></p><p>构建运行步骤如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yarn</span><br><span class="line"></span><br><span class="line">yarn watch</span><br><span class="line"></span><br><span class="line">.\script\code.bat</span><br></pre></td></tr></table></figure></p><p>通常在执行yarn的时候就可能出现问题，如图所示:<br><img src="/2019/08/07/VsCode更新代码问题之解决方案/02.png" alt="图二"></p><p>产生这个问题的原因:<br>我怀疑与路径的特殊字符有关，比如我之前的是:E://VsCode//VsCodePlus/vscode-master<br>然后我将其替换为E://VsCode//VsCodePlus/vscode 就没有出现这个问题。</p><p>但是针对其显示gyp问题，我对此下意识的使用了npm install node-gyp命令安装相关的库。</p><p>然后在执行yarn，最后会出现如下延迟:<br><img src="/2019/08/07/VsCode更新代码问题之解决方案/03.png" alt="图三"></p><p>这种延迟通常是因为网络问题，对此的解决方案如下:<br>(1)换个网络好的环境(至少带宽大于等于100m及其以上);<br>(2)当网络环境足够好的时候，还是延迟，这时恐怕你就得翻墙一下;</p><p>最后这种手动更新的方式令人讨厌，因为即便跑通了后，但是由于我们的VsCode与官方不一样(可能官方相关的写法变了，以及部分API可能不用了，导致我们会有不同程度的修改，这是一个很让人讨厌的问题，作为一个工程师是不能容忍这样的问题，只得等到工作日程不那么紧急的时候再将其攻克掉)</p>]]></content>
      
      
      
        <tags>
            
            <tag> VsCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layui之tree使用</title>
      <link href="/2019/08/06/layui%E4%B9%8Btree%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/06/layui%E4%B9%8Btree%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>效果图如下:<br><img src="/2019/08/06/layui之tree使用/01.png" alt="图一"></p><p>layui之tree如何使用参考官方文档:<a href="https://www.layui.com/doc/modules/tree.html" target="_blank" rel="noopener">https://www.layui.com/doc/modules/tree.html</a><br>官方效果展示:<a href="https://www.layui.com/demo/tree.html" target="_blank" rel="noopener">https://www.layui.com/demo/tree.html</a></p><p>layui的tree很好接入的，基本上返回data.data.list(请求后台接口返回的数据)，它就会自己加载处理，比较自动化。<br>它的增、删、改请求操作，可以去官方文档上看，官方文档已经写的比较详细了，我也在下面的示例代码中写了。<br><a id="more"></a></p><p>树形结构的应用场景很多，常用的如下:<br>(1)OA系统或者其他系统的权限控制;<br>(2)博客系统中的文章标签;</p><p>示例代码(来自官方示例，本人做了一定的修改):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;layui&lt;/title&gt;</span><br><span class="line">&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/layui.css&quot; media=&quot;all&quot;&gt;</span><br><span class="line">&lt;!-- 注意：如果你直接复制所有代码到本地，上述css路径需要改成你本地的 --&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;fieldset class=&quot;layui-elem-field layui-field-title&quot; style=&quot;margin-top: 30px;&quot;&gt;</span><br><span class="line">&lt;legend&gt;基本演示&lt;/legend&gt;</span><br><span class="line">&lt;/fieldset&gt;</span><br><span class="line">&lt;div class=&quot;layui-btn-container&quot;&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;layui-btn layui-btn-sm&quot; lay-demo=&quot;getChecked&quot;&gt;获取选中节点数据&lt;/button&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;layui-btn layui-btn-sm&quot; lay-demo=&quot;setChecked&quot;&gt;勾选指定节点&lt;/button&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;layui-btn layui-btn-sm&quot; lay-demo=&quot;reload&quot;&gt;重载实例&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;test7&quot; class=&quot;demo-tree&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;fieldset class=&quot;layui-elem-field layui-field-title&quot; style=&quot;margin-top: 30px;&quot;&gt;</span><br><span class="line">&lt;legend&gt;开启节点操作图标&lt;/legend&gt;</span><br><span class="line">&lt;/fieldset&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;test9&quot; class=&quot;demo-tree demo-tree-box&quot; style=&quot;width: 500px; height: 300px; overflow: scroll;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;p id=&quot;tree&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;script src=&quot;https://code.jquery.com/jquery-3.4.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;layui.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 注意：如果你直接复制所有代码到本地，上述js路径需要改成你本地的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line"></span><br><span class="line">url: &quot;http://localhost:2019/test-api/api/mc/course/course/list_new&quot;,</span><br><span class="line">type: &quot;POST&quot;,</span><br><span class="line">data: &#123;</span><br><span class="line">&quot;creator&quot;: &quot;35&quot;</span><br><span class="line">&#125;,</span><br><span class="line">dataType: &apos;json&apos;,</span><br><span class="line">success: function(data) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">layui.use([&apos;tree&apos;, &apos;util&apos;], function() &#123;</span><br><span class="line">var tree = layui.tree,</span><br><span class="line">layer = layui.layer,</span><br><span class="line">util = layui.util</span><br><span class="line"></span><br><span class="line">//开启节点操作图标</span><br><span class="line">tree.render(&#123;</span><br><span class="line">elem: &apos;#test9&apos;,</span><br><span class="line">data: data.data.list,</span><br><span class="line">showCheckbox: true,</span><br><span class="line">edit: [&apos;add&apos;, &apos;update&apos;, &apos;del&apos;] //操作节点的图标</span><br><span class="line">,</span><br><span class="line">click: function(obj) &#123;</span><br><span class="line">layer.msg(JSON.stringify(obj.data));</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">operate: function(obj)&#123;</span><br><span class="line">var type = obj.type; //得到操作类型：add、edit、del</span><br><span class="line">var data = obj.data; //得到当前节点的数据</span><br><span class="line">var elem = obj.elem; //得到当前节点元素</span><br><span class="line"></span><br><span class="line">//Ajax 操作</span><br><span class="line">var id = data.id; //得到节点索引</span><br><span class="line"></span><br><span class="line">alert(&quot;id:&quot;+id);</span><br><span class="line">if(type === &apos;add&apos;)&#123; //增加节点</span><br><span class="line">  //返回 key 值</span><br><span class="line"> alert(&quot;添加&quot;);</span><br><span class="line">&#125; else if(type === &apos;update&apos;)&#123; //修改节点</span><br><span class="line">                                      alert(&quot;修改&quot;)</span><br><span class="line">  alert(elem.find(&apos;.layui-tree-txt&apos;).html());</span><br><span class="line">                                    </span><br><span class="line">  console.log(elem.find(&apos;.layui-tree-txt&apos;).html()+&quot;||&quot;+id); //得到修改后的内容</span><br><span class="line">&#125; else if(type === &apos;del&apos;)&#123; //删除节点</span><br><span class="line">  alert(&quot;删除&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">error: function(XMLHttpRequest, textStatus, errorThrown) &#123;</span><br><span class="line">alert(&quot;失败&quot;);</span><br><span class="line">// 状态码</span><br><span class="line">alert(XMLHttpRequest.status);</span><br><span class="line">// 状态</span><br><span class="line">alert(XMLHttpRequest.readyState);</span><br><span class="line">// 错误信息   </span><br><span class="line">alert(textStatus);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>Java核心代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line">    @PostMapping(&quot;/course/list_new&quot;)</span><br><span class="line">@ApiOperation(value=&quot;用户课程列表&quot;,notes=&quot;用户课程列表&quot;)</span><br><span class="line">public JSONObject courseList(String creator) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JSONObject returnJson = new JSONObject();</span><br><span class="line"></span><br><span class="line">EntityWrapper&lt;CourseListMapping&gt; wrapper = new EntityWrapper&lt;CourseListMapping&gt;();</span><br><span class="line">wrapper.eq(&quot;creator&quot;, creator);</span><br><span class="line">List&lt;CourseListMapping&gt; courseListMapping = courseListMappingService.selectList(wrapper);</span><br><span class="line"></span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; returnMapList = new ArrayList&lt;Map&lt;String,Object&gt;&gt;();</span><br><span class="line">  </span><br><span class="line">        for (CourseListMapping courseListMapping2 : courseListMapping) &#123;</span><br><span class="line">        String id= courseListMapping2.getParentId();//该用户加入的课程id</span><br><span class="line"></span><br><span class="line">//获取该课程的章节目录</span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; subList = getCourseList(Integer.parseInt(id));</span><br><span class="line"></span><br><span class="line">returnMapList.addAll(subList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">returnJson.put(&quot;code&quot;, &quot;000000&quot;);</span><br><span class="line">returnJson.put(&quot;msg&quot;, &quot;成功&quot;);</span><br><span class="line">        Map&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        data.put(&quot;list&quot;, returnMapList);</span><br><span class="line">        returnJson.put(&quot;data&quot;, data);</span><br><span class="line"></span><br><span class="line">        Console.log(&quot;获取课程列表返回数据&quot; + returnJson);</span><br><span class="line">return  returnJson;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param id</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">private List&lt;Map&lt;String, Object&gt;&gt; getChapterListNew(int id) &#123;</span><br><span class="line">EntityWrapper&lt;CourseListMapping&gt; wrapper2 = new EntityWrapper&lt;CourseListMapping&gt;();</span><br><span class="line">wrapper2.eq(&quot;parentId&quot;, id);</span><br><span class="line">List&lt;CourseListMapping&gt; chapterList = courseListMappingService.selectList(wrapper2);</span><br><span class="line"></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; returnList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();//列表</span><br><span class="line">for (CourseListMapping courseListMapping : chapterList) &#123;</span><br><span class="line">Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">map.put(&quot;id&quot;, String.valueOf(courseListMapping.getId()));</span><br><span class="line">map.put(&quot;title&quot;, courseListMapping.getTitle());</span><br><span class="line">map.put(&quot;type&quot;, courseListMapping.getType());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EntityWrapper&lt;CourseListMapping&gt; wrapper3 = new EntityWrapper&lt;CourseListMapping&gt;();</span><br><span class="line">wrapper3.eq(&quot;parentId&quot;, courseListMapping.getId());</span><br><span class="line">List&lt;CourseListMapping&gt; subList = courseListMappingService.selectList(wrapper3);</span><br><span class="line"></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; ml = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();//章列表</span><br><span class="line">for (CourseListMapping courseListMapping2 : subList) &#123;</span><br><span class="line">Map&lt;String, Object&gt; map2 = new HashMap&lt;String, Object&gt;();</span><br><span class="line">map2.put(&quot;id&quot;, String.valueOf(courseListMapping2.getId()));</span><br><span class="line">map2.put(&quot;title&quot;, courseListMapping2.getTitle());</span><br><span class="line">map2.put(&quot;type&quot;, courseListMapping2.getType());</span><br><span class="line"></span><br><span class="line">//获取章下面的题目</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; taskList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();//题目列表</span><br><span class="line">EntityWrapper&lt;CourseListMapping&gt; wrapper4 = new EntityWrapper&lt;CourseListMapping&gt;();</span><br><span class="line">wrapper4.eq(&quot;parentId&quot;, courseListMapping2.getId());</span><br><span class="line">List&lt;CourseListMapping&gt; pList = courseListMappingService.selectList(wrapper4);</span><br><span class="line">for (CourseListMapping courseListMapping3 : pList) &#123;</span><br><span class="line">Map&lt;String, Object&gt; map3 = new HashMap&lt;String, Object&gt;();</span><br><span class="line">map3.put(&quot;id&quot;, String.valueOf(courseListMapping3.getId()));</span><br><span class="line">map3.put(&quot;title&quot;, courseListMapping3.getTitle());</span><br><span class="line">map3.put(&quot;type&quot;, courseListMapping3.getType());</span><br><span class="line">taskList.add(map3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">map2.put(&quot;children&quot;, taskList);</span><br><span class="line">ml.add(map2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">map.put(&quot;children&quot;, ml);</span><br><span class="line"></span><br><span class="line">returnList.add(map);</span><br><span class="line">&#125;</span><br><span class="line">return returnList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 获取课程列表</span><br><span class="line"> */</span><br><span class="line">private List&lt;Map&lt;String, Object&gt;&gt; getCourseList(Integer parentId)&#123;</span><br><span class="line">EntityWrapper&lt;CourseListMapping&gt; wrapper = new EntityWrapper&lt;CourseListMapping&gt;();</span><br><span class="line">wrapper.eq(&quot;type&quot;, &quot;course&quot;);</span><br><span class="line">wrapper.eq(&quot;parentId&quot;, parentId);</span><br><span class="line">List&lt;CourseListMapping&gt; courseList = courseListMappingService.selectList(wrapper);</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; returnList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">for (CourseListMapping courseListMapping : courseList) &#123;</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">//获取章及下面的子节点</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; subList = getChapterList(courseListMapping.getId());</span><br><span class="line">map.put(&quot;id&quot;, courseListMapping.getId());</span><br><span class="line">map.put(&quot;title&quot;, courseListMapping.getTitle());</span><br><span class="line">map.put(&quot;type&quot;, &quot;course&quot;);</span><br><span class="line">map.put(&quot;children&quot;, subList);</span><br><span class="line">returnList.add(map);</span><br><span class="line">&#125;</span><br><span class="line">return returnList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取章列表</span><br><span class="line"> * @param parentId</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">private List&lt;Map&lt;String, Object&gt;&gt; getChapterList(Integer parentId)&#123;</span><br><span class="line"></span><br><span class="line">EntityWrapper&lt;CourseListMapping&gt; wrapper2 = new EntityWrapper&lt;CourseListMapping&gt;();</span><br><span class="line">wrapper2.eq(&quot;type&quot;, &quot;chapter&quot;);</span><br><span class="line">wrapper2.eq(&quot;parentId&quot;, parentId);</span><br><span class="line">List&lt;CourseListMapping&gt; chapterList = courseListMappingService.selectList(wrapper2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; returnList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">for (CourseListMapping courseListMapping : chapterList) &#123;</span><br><span class="line">Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">map.put(&quot;id&quot;, courseListMapping.getId());</span><br><span class="line">map.put(&quot;title&quot;, courseListMapping.getTitle());</span><br><span class="line">map.put(&quot;type&quot;, &quot;chapter&quot;);</span><br><span class="line">//获取节</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; subList = getUnitList(courseListMapping.getId());</span><br><span class="line">map.put(&quot;children&quot;, subList);</span><br><span class="line">returnList.add(map);</span><br><span class="line">&#125;</span><br><span class="line">return returnList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取节列表</span><br><span class="line"> * @param parentId</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">private List&lt;Map&lt;String, Object&gt;&gt; getUnitList(Integer parentId)&#123;</span><br><span class="line">EntityWrapper&lt;CourseListMapping&gt; wrapper = new EntityWrapper&lt;CourseListMapping&gt;();</span><br><span class="line">wrapper.eq(&quot;parentId&quot;, parentId);</span><br><span class="line">wrapper.eq(&quot;type&quot;, &quot;unit&quot;);</span><br><span class="line">List&lt;CourseListMapping&gt; list = courseListMappingService.selectList(wrapper);</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; returnList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line"></span><br><span class="line">for (CourseListMapping courseListMapping : list) &#123;</span><br><span class="line">Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">//节内容</span><br><span class="line">map.put(&quot;id&quot;, courseListMapping.getId());</span><br><span class="line">map.put(&quot;title&quot;, courseListMapping.getTitle());</span><br><span class="line">map.put(&quot;type&quot;, &quot;unit&quot;);</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; subList = getLessonList(courseListMapping.getId());</span><br><span class="line">map.put(&quot;children&quot;, subList);</span><br><span class="line">returnList.add(map);</span><br><span class="line">&#125;</span><br><span class="line">return returnList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 获取课时列表</span><br><span class="line"> * @param parentId</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">private List&lt;Map&lt;String, Object&gt;&gt; getLessonList(Integer parentId)&#123;</span><br><span class="line">EntityWrapper&lt;CourseListMapping&gt; wrapper4 = new EntityWrapper&lt;CourseListMapping&gt;();</span><br><span class="line">wrapper4.eq(&quot;type&quot;, &quot;lesson&quot;);</span><br><span class="line">wrapper4.eq(&quot;parentId&quot;, parentId);</span><br><span class="line">List&lt;CourseListMapping&gt; lessonList = courseListMappingService.selectList(wrapper4);</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; returnList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">for (CourseListMapping courseListMapping4 : lessonList) &#123;</span><br><span class="line">Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">Console.log(courseListMapping4.getTitle());</span><br><span class="line">//课时内容</span><br><span class="line">map.put(&quot;id&quot;, courseListMapping4.getCourseId());</span><br><span class="line">map.put(&quot;title&quot;, courseListMapping4.getTitle());</span><br><span class="line">map.put(&quot;type&quot;, &quot;lesson&quot;);</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; subList = getTaskList(courseListMapping4.getId());</span><br><span class="line">map.put(&quot;children&quot;, subList);</span><br><span class="line">returnList.add(map);</span><br><span class="line">&#125;</span><br><span class="line">return returnList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取任务</span><br><span class="line"> * @param parentId</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">private List&lt;Map&lt;String, Object&gt;&gt; getTaskList(Integer parentId)&#123;</span><br><span class="line">EntityWrapper&lt;CourseListMapping&gt; wrapper4 = new EntityWrapper&lt;CourseListMapping&gt;();</span><br><span class="line">wrapper4.eq(&quot;parentId&quot;, parentId);</span><br><span class="line">wrapper4.eq(&quot;type&quot;, &quot;task&quot;);</span><br><span class="line">wrapper4.eq(&quot;extend1&quot;, &quot;0&quot;);</span><br><span class="line">List&lt;CourseListMapping&gt; list = courseListMappingService.selectList(wrapper4);</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; returnList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">for (CourseListMapping courseListMapping4 : list) &#123;</span><br><span class="line">Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">Console.log(courseListMapping4.getTitle());</span><br><span class="line">//任务内容</span><br><span class="line">map.put(&quot;id&quot;, courseListMapping4.getCourseId());</span><br><span class="line">map.put(&quot;title&quot;, courseListMapping4.getTitle());</span><br><span class="line">map.put(&quot;type&quot;, &quot;task&quot;);</span><br><span class="line">//map.put(&quot;last&quot;, StrUtil.isEmpty(courseListMapping4.getExtend2())? &quot;&quot; : courseListMapping4.getExtend2());//上一个题id</span><br><span class="line">//map.put(&quot;next&quot;, StrUtil.isEmpty(courseListMapping4.getExtend3())? &quot;&quot; : courseListMapping4.getExtend3());//下一个题id</span><br><span class="line">returnList.add(map);</span><br><span class="line">&#125;</span><br><span class="line">return returnList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯产品法之读书笔记</title>
      <link href="/2019/08/03/%E8%85%BE%E8%AE%AF%E4%BA%A7%E5%93%81%E6%B3%95%E4%B9%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/08/03/%E8%85%BE%E8%AE%AF%E4%BA%A7%E5%93%81%E6%B3%95%E4%B9%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>《腾讯产品法》，该作者是李立。</p><p>作为程序员做公司的产品以及做自己的产品，可以在这本书中获取一些比较好的启发。<br><a id="more"></a></p><h1><span id="产品思维">产品思维</span></h1><h2><span id="本质思维第一性原理">本质思维:第一性原理</span></h2><h2><span id="相对思维日光与阴影">相对思维:日光与阴影</span></h2><h2><span id="抽象思维大圣的火眼金睛">抽象思维:大圣的火眼金睛</span></h2><h2><span id="系统思维镜中变色龙">系统思维:镜中变色龙</span></h2><h2><span id="演化思维自下而上的设计">演化思维:自下而上的设计</span></h2><h1><span id="洞见需求">洞见需求</span></h1><h2><span id="产品设计者的终身课题">产品设计者的终身课题</span></h2><h2><span id="需求是什么">需求是什么</span></h2><h2><span id="产品需求四归一">产品需求”四归一”</span></h2><h2><span id="产品强度体验-成本">产品强度=体验-成本</span></h2><h2><span id="需求的弹性">需求的弹性</span></h2><h1><span id="产品设计">产品设计</span></h1><h2><span id="设计流程传统设计与精益设计">设计流程:传统设计与精益设计</span></h2><h2><span id="用户研究建立用户模型">用户研究:建立用户模型</span></h2><h2><span id="需求场景设计角色-场景-方案">需求场景设计:角色、场景、方案</span></h2><h2><span id="产品mvp低成本试错">产品MVP:低成本试错</span></h2><h2><span id="产品规则拒绝什么定义产品三观">产品规则:拒绝什么定义产品”三观”</span></h2><h2><span id="方案出错90是问题错了">方案出错,90%是问题错了</span></h2><h2><span id="拆解问题的三种方法">拆解问题的三种方法</span></h2><h2><span id="架构设计技术方案的十字路口">架构设计:技术方案的十字路口</span></h2><h2><span id="交互与视觉">交互与视觉</span></h2><h1><span id="产品成长与运营">产品成长与运营</span></h1><h2><span id="开发迭代">开发迭代</span></h2><h2><span id="抓住运营的本质">抓住运营的本质</span></h2><h2><span id="数据分析的误区">数据分析的误区</span></h2><h2><span id="产品营销内容渠道">产品营销=内容+渠道</span></h2><h1><span id="企业战略与产品">企业战略与产品</span></h1><h2><span id="取舍之道">取舍之道</span></h2><h2><span id="构建壁垒">构建壁垒</span></h2><h2><span id="开拓蓝海市场">开拓蓝海市场</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原则之读书笔记(生活篇)</title>
      <link href="/2019/07/31/%E5%8E%9F%E5%88%99%E4%B9%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%94%9F%E6%B4%BB%E7%AF%87/"/>
      <url>/2019/07/31/%E5%8E%9F%E5%88%99%E4%B9%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%94%9F%E6%B4%BB%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>最近读了《原则》这本书中的生活篇，觉得颇有启发。做了一些笔记分享给大家:</p><a id="more"></a><p>独立思考并决定:</p><p>(1)你想要什么;</p><p>(2)事实是什么;</p><p>(3)面对事实，你如何实现自己的愿望，而且要保持谦逊和心胸开阔，以便你能动用自己的最佳思维;</p><p>考察影响你的那些事物的规律，从而理解其背后的因果关系，并学习有效应对这些事物的原则。</p><h1><span id="拥抱现实">拥抱现实</span></h1><h2><span id="做一个超级现实的人">做一个超级现实的人</span></h2><p>a.梦想+现实+决心=成功的生活</p><h2><span id="真相或者更精确地说对现实的准确理解是任何良好结果的根本依据">真相(或者更精确地说，对现实的准确理解)是任何良好结果的根本依据</span></h2><h2><span id="做到头脑极度开放-极度透明">做到头脑极度开放、极度透明</span></h2><p>a.对于快速学习和有效改变而言，头脑极度开放、极度透明是价值无限的;</p><p>b.不要担心其他人的看法，使之成为你的障碍;</p><p>c.拥抱极度求真和极度透明将带来更有意义的工作和更有意义的人际关系;</p><h2><span id="观察自然学习现实规律">观察自然，学习现实规律</span></h2><p>a.不要固守你对事物”应该”是什么样的看法，这将使你无法了解真实的情况;</p><p>b.一个东西要”好”，就必须符合现实的规律，并促进整体的进化，这能带来最大的回报;</p><p>c.进化是宇宙中最强大的力量，是唯一永恒的东西，是一切的驱动力;</p><p>d.不进化就死亡;</p><h2><span id="进化是生命最大的成就和最大的回报">进化是生命最大的成就和最大的回报</span></h2><p>a.个体的激励机制必须符合群体的目标;</p><p>b.现实为了整体而趋向于最优化，而不是为了个体;</p><p>c.通过快速试错以适应现实是无价的;</p><p>d.意识到你既是一切又什么都不是，并决定你想成为什么样子;</p><p>e.你的未来取决于你的视角;</p><h2><span id="理解自然提供的现实教训">理解自然提供的现实教训</span></h2><p>a.把你的进化最大化;</p><p>b.记住”没有痛苦就没有收获”;</p><p>c.自然的一项根本法则是,为了赢得力量，人必须努力突破极限，而这是痛苦的;</p><h2><span id="痛苦反思进步">痛苦+反思=进步</span></h2><p>a.迎接而非躲避痛苦</p><p>b.接受严厉的爱</p><h2><span id="考虑后续与再后续的结果">考虑后续与再后续的结果</span></h2><h2><span id="接受结果">接受结果</span></h2><h2><span id="从更高的层次俯视机器">从更高的层次俯视机器</span></h2><p>a.把自己想象成一部在大机器里运转的小机器，并明白你有能力改变你的机器以实现更好的结果;</p><p>b.通过比较你实现的结果和你的目标，你就能确定如何改进你的机器;</p><p>c.区别作为机器设计者的你和作为机器中工作者的你;</p><p>d.大多数人犯下的最大错误是不客观看待自己以及其他人，这导致他们一次次地栽在自己或其他人的弱点上;</p><p>e.成功的人能超越自身,客观看待事物，并管理事物以塑造改变;</p><p>f.在你不擅长的领域请教擅长的其他人，这是一个你无论如何都应该培养的出色技能，这将帮助你建立起安全护栏，避免自己做错事;</p><p>g.因为客观看待自身很困难，所以你需要依赖其他人的意见，以及全部证据;</p><p>h.如果你的头脑足够开放，足够有决心，你几乎可以实现任何愿望;</p><h1><span id="用五步流程实现你的人生愿望">用五步流程实现你的人生愿望</span></h1><h2><span id="有明确的目标">有明确的目标</span></h2><p>a.排列优先顺序:尽管你几乎可以得到你想要的任何东西，但你不可能得到你想要的所有东西;</p><p>b.不要混淆目标和欲望;</p><p>c.调和你的目标和欲望，以明确你在生活中真正想要的东西;</p><p>d.不要把成功的装饰误认为成功本身;</p><p>e.永远不要因为你觉得某个目标无法实现就否决它;</p><p>f.谨记伟大的期望创造伟大的能力;</p><p>g.如果你拥有灵活性并自我归责，那么几乎没有什么能够阻止你成功;</p><p>h.知道如何对待挫折和知道如何前进一样重要;</p><h2><span id="找出问题并且不容忍问题">找出问题，并且不容忍问题</span></h2><p>a.把令人痛苦的问题视为考验你的潜在进步机会;</p><p>b.不要逃避问题，因为问题根植于看起来并不美好的残酷现实;</p><p>c.要精确地找到问题所在;</p><p>d.不要把问题的某个原因误认为问题本身;</p><p>e.区分大问题和小问题;</p><p>f.找出一个问题之后，不要容忍问题;</p><h2><span id="诊断问题找出问题的根源">诊断问题，找出问题的根源</span></h2><p>a.先把问题是什么弄明白，再决定怎么做;</p><p>b.区分直接原因和根本原因;</p><p>c.认识到了解人(包括你自己)的特性，有助于对其形成合理预期;</p><h2><span id="规划方案">规划方案</span></h2><p>a.前进之前先回顾;</p><p>b.把你的问题看作一部机器产生的一系列结果;</p><p>c.谨记实现你的目标通过有很多途径;</p><p>d.把你的方案设想一个电影剧本，然后循序渐进地思考由谁来做什么事;</p><p>e.把你的方案写下来，让所有人都能看到，并对照方案执行;</p><p>f.要明白，规划一个好方案不一定需要很多时间;</p><h2><span id="坚定地从头到尾执行方案">坚定地从头到尾执行方案</span></h2><p>a.规划做得再好，不执行也无济于事;</p><p>b.良好工作习惯的重要性常被大大低估;</p><p>c.建立清晰的衡量标准来确保你在严格执行方案;</p><h2><span id="谨记如果你找到了解决方案弱点是不重要的">谨记:如果你找到了解决方案，弱点是不重要的</span></h2><p>a.考擦你犯错误的类型，并识别你通常在五步流程中的哪一步上做得不好;</p><p>b.每个人都至少有一个最大的弱点阻碍其成功,找到你的这个弱点并处理它;</p><h2><span id="理解你和其他人的意境地图与谦逊性">理解你和其他人的”意境地图”与谦逊性</span></h2><h1><span id="做到头脑极度开放">做到头脑极度开放</span></h1><h2><span id="认识你的两大障碍">认识你的两大障碍</span></h2><p>a.理解你的自我意识障碍;</p><p>b.”两个你”在争夺对你的控制权;</p><p>c.理解你的思维盲点障碍;</p><h2><span id="奉行头脑极度开放">奉行头脑极度开放</span></h2><p>a.诚恳地相信你也许并不知道最好的解决方法是什么，并认识到，与你知道的东西相比，能不能妥善处理”不知道”才是更重要的;</p><p>b.认识到决策应当分为两步:先分析所有相关信息，然后决定;</p><p>c.不要担心自己的形象，只关心如何实现目标;</p><p>d.认识到你不能”只产出不吸纳”;</p><p>e.认识到为了能够从他人的角度看待事物，你必须暂时悬置判断，只有设身处地，你才能合理评估另一种观点的价值;</p><p>f.谨记,你是在寻找最好的答案，而不是你自己能得出的最好答案;</p><p>g.搞清楚你是在争论还是在试图理解一个问题，并根据你和对方的可信度，想想哪种做法最合理;</p><h2><span id="领会并感激深思熟虑的意见分歧">领会并感激:深思熟虑的意见分歧</span></h2><h2><span id="和可信的-愿意表达分歧的人一起审视你的观点">和可信的、愿意表达分歧的人一起审视你的观点</span></h2><p>a.为最坏的情况做准备，以尽量使其不那么糟糕</p><h2><span id="识别你应当注意的头脑封闭和头脑开放的不同迹象">识别你应当注意的头脑封闭和头脑开放的不同迹象</span></h2><h2><span id="理解呢如何做到头脑极度开放">理解呢如何做到头脑极度开放</span></h2><p>a.经常利用痛苦来引导自己进行高质量的思考;</p><p>b.将头脑开放作为一种习惯;</p><p>c.认识自己的思维盲点;</p><p>d.假如很多可信的人都说你正在做错事，只有你不这么看，你就要想想自己是不是看偏了;</p><p>e.冥想;</p><p>f.重视证据，并鼓励其他人也这么做;</p><p>g.尽力帮助其他人也保持头脑开放;</p><p>h.使用以证据为基础的决策工具;</p><p>i.知道什么时候应当停止为自己的观点辩护，信任自己的决策程序;</p><h1><span id="理解人与人大不相同">理解人与人大不相同</span></h1><h2><span id="明白你与其他人的思维方式能带来的力量">明白你与其他人的思维方式能带来的力量</span></h2><p>a.我们拥有各种天生特征，既可能帮助自己也可能伤害自己，取决于如何应用;</p><h2><span id="有意义的工作和有意义的人际关系不仅是我们做出的美好选择而且是我们天生的生理需求">有意义的工作和有意义的人际关系不仅是我们做出的美好选择，而且是我们天生的生理需求</span></h2><h2><span id="理解大脑里的主要斗争以及如何控制这些斗争以实现你的愿望">理解大脑里的主要斗争，以及如何控制这些斗争，以实现”你”的愿望</span></h2><p>a.要明白，意识与潜意识在不断斗争;</p><p>b.要知道最常发生的斗争是情绪和思考的斗争;</p><p>c.调和你的情绪和思考;</p><p>d.善择你的习惯;</p><p>e.坚持友善地训练”较低层次的你”，以养成好的习惯;</p><p>f.理解右脑思维和左脑思维的差别;</p><p>g.理解大脑可以改变的程度;</p><h2><span id="认识自己和他人的特性">认识自己和他人的特性</span></h2><p>a.内向和外向;</p><p>b.直觉和感知;</p><p>c.思考与感觉;</p><p>d.计划与发觉;</p><p>e.创造者、推进者、改进者、贯彻者与变通者;</p><p>f.关注任务与关注目标;</p><p>g.职场人格量表;</p><p>h.塑造者是能从构想一路走到构想实现的人;</p><h2><span id="无论你要实现什么目标让合适的的人各司其职以支持你的目标是成功的关键">无论你要实现什么目标，让合适的的人各司其职以支持你的目标，是成功的关键</span></h2><p>a.管理你自己，并协调其他人实现你的目标</p><h1><span id="学习如何有效决策">学习如何有效决策</span></h1><h2><span id="要认识到">要认识到:</span></h2><p>(1)影响好决策的最大威胁是有害的情绪;</p><p>(2)决策是一个两步流程(先了解后决定);</p><h2><span id="综合分析眼前的形势">综合分析眼前的形势</span></h2><p>a.你能做的最重要的决定之一是决定问谁</p><p>b.不要听到什么信什么;</p><p>c.所有东西都是放在眼前看更大;</p><p>d.不要夸大新东西的好处;</p><p>e.不要过度分析细节;</p><h2><span id="综合分析变化中的形势">综合分析变化中的形势</span></h2><p>a.始终记住改善事物的速度和水平,以及两者的关系;</p><p>b.不必过于精确;</p><p>c.谨记”80/20法则”，并明白关键性的”20%”是什么;</p><p>d.不要做完美主义者;</p><h2><span id="高效地综合考虑各个层次">高效地综合考虑各个层次</span></h2><p>a.用”基线以上”和”基线以下”来确定谈话位于哪一层;</p><p>b.谨记，决策需要在合理的层次做出，但也应在各层次之间保持一致;</p><h2><span id="综合分析现实-理解如何行动的最好工具是逻辑-理性和常识">综合分析现实、理解如何行动的最好工具是逻辑、理性和常识</span></h2><h2><span id="根据预期价值计算做决策">根据预期价值计算做决策</span></h2><p>a.不管你押对的概率已经有多大，提高你的押对概率始终有价值;</p><p>b.知道什么时候不要去押注，和知道什么注值得押同样重要;</p><p>c.最好的选择是好处多于坏处的选择，不是毫无坏处的选择</p><h2><span id="比较更多信息带来的价值和不做决定造成的成本决定优先顺序">比较更多信息带来的价值和不做决定造成的成本，决定优先顺序</span></h2><p>a.先把你的”必做之事”做完，再做你的”想做之事”;</p><p>b.你很可能没有时间处理不重要的事，那最好将它留着，以免自己没有时间处理重要的事;</p><p>c.不要把概率当作可能性;</p><h2><span id="简化">简化</span></h2><h2><span id="使用原则">使用原则</span></h2><h2><span id="对你的决策进行可信度加权">对你的决策进行可信度加权</span></h2><h2><span id="把你的原则转换为算法让计算机和你一起决策">把你的原则转换为算法，让计算机和你一起决策</span></h2><h2><span id="在深刻理解人工智能之前不要过度信赖它">在深刻理解人工智能之前不要过度信赖它</span></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL之replace函数应用</title>
      <link href="/2019/07/31/MySQL%E4%B9%8Breplace%E5%87%BD%E6%95%B0%E5%BA%94%E7%94%A8/"/>
      <url>/2019/07/31/MySQL%E4%B9%8Breplace%E5%87%BD%E6%95%B0%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>replace函数，从字面上看其主要作用就是替换。实际它的作用确实是替换。<br>那么替换有哪些应用场景呢？<br>比如A表和B表有一个关联的字段就是id，但是在A中id是数字，在B中id也是数字，但是B中id多一个前缀字母t等，那么如果我要想让他们关联该怎么办呢？<br>通过replace就能实现这个目的，不用加字段或者强行修改让它们完全一致。<br><a id="more"></a><br>下面我们来看replace函数结构:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(表字段,原字符,替换字符)</span><br></pre></td></tr></table></figure></p><p>实际例子如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT pro.problem_id,pro.title,pro.problem_id FROM privilege AS p LEFT JOIN problem AS pro ON(REPLACE(p.rightstr,&apos;p&apos;,&apos;&apos;) = pro.problem_id) WHERE p.user_id =#&#123;userId&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js截取get参数乱码问题之解决</title>
      <link href="/2019/07/31/js%E6%88%AA%E5%8F%96get%E5%8F%82%E6%95%B0%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E8%A7%A3%E5%86%B3/"/>
      <url>/2019/07/31/js%E6%88%AA%E5%8F%96get%E5%8F%82%E6%95%B0%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>举个例子说一下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://wwww.yctech.com/blog/post?id=1</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>像这样的话，通常通过如下代码直接截取不用做任何处理:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function getQueryString(name) &#123;</span><br><span class="line">    var result = window.location.search.match(new RegExp(&quot;[\?\&amp;]&quot; + name + &quot;=([^\&amp;]+)&quot;, &quot;i&quot;));</span><br><span class="line">    if (result == null || result.length &lt; 1) &#123;</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return result[1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是当<code>http://wwww.yctech.com/blog/post?id=1</code> 变成<code>http://wwww.yctech.com/blog/post?id=挑战者</code></p><p>这时，如果用getQueryString(name)方法截取的话，那么就会出现乱码，对于这种乱码的解决方式也很简单:<br>就是通过<code>encodeURI()</code>解决。</p><p>如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var ids = getQueryString(&quot;id&quot;);//乱码</span><br><span class="line">var id = encodeURL(ids);//处理乱码</span><br><span class="line">alert(id);//弹出挑战者</span><br></pre></td></tr></table></figure></p><p>参考资料如下:<br><a href="https://www.cnblogs.com/TivonStone/p/3504922.html" target="_blank" rel="noopener">js传url中文参数乱码问题</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js转义问题</title>
      <link href="/2019/07/26/js%E8%BD%AC%E4%B9%89%E9%97%AE%E9%A2%98/"/>
      <url>/2019/07/26/js%E8%BD%AC%E4%B9%89%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>js转义问题有很多场景，比如常见的根据某个字符串删除或者修改以及将某字符串传递至某个页面。<br><a id="more"></a><br>今天以一个简单的示例代码为例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt; </span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; </span><br><span class="line">&lt;title&gt;测试&lt;/title&gt; </span><br><span class="line">&lt;/head&gt; </span><br><span class="line"></span><br><span class="line">&lt;body&gt; </span><br><span class="line">&lt;a href=&apos;#&apos; onclick=&quot;test001(1)&quot;&gt;测试001&lt;/a&gt;</span><br><span class="line">&lt;a href=&apos;#&apos; onclick=&quot;test002(你好)&quot;&gt;测试001&lt;/a&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function test001(id)&#123;</span><br><span class="line">alert(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function test002(name)&#123;</span><br><span class="line">alert(name);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt; </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>页面效果图如下:<br><img src="/2019/07/26/js转义问题/01.png" alt="图一"></p><p>当我点击测试001时，出现如图:<br><img src="/2019/07/26/js转义问题/02.png" alt="图二"></p><p>显然是符合预期结果的。</p><p>但是当我点击测试002时，出现如图:<br><img src="/2019/07/26/js转义问题/03.png" alt="图三"><br>什么也没有出现，于是我通过f12调试了一下，结果如图:<br><img src="/2019/07/26/js转义问题/04.png" alt="图四"><br>显示某某未定义</p><p>那么最终如何解决这个你好 is not defined问题？？？<br>通常出现未定义问题，是因为我们用了这个变量，但是并没有在对应的js文件中定义。</p><p>解决这个你好 is not defined问题，很简单，只需加一个转义符即可。</p><p>比如将:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&apos;#&apos; onclick=&quot;test002(你好)&quot;&gt;测试001&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>修改为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&apos;#&apos; onclick=&quot;test002(&apos;\你好&apos;)&quot;&gt;测试001&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>接下来，点击测试002，就可以看到对应的效果，如图:<br><img src="/2019/07/26/js转义问题/05.png" alt="图五"></p><p>那么为什么会出现这个转义问题?<br>我搜了一些资料，但是仍然觉得很疑惑。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js之select三级联动</title>
      <link href="/2019/07/26/js%E4%B9%8Bselect%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8/"/>
      <url>/2019/07/26/js%E4%B9%8Bselect%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>效果图如下:<br><img src="/2019/07/26/js之select三级联动/01.png" alt="图一"></p><p>代码逻辑梳理:<br>层层递进，比如选择了课程后，将对应的课程id保存，然后点击选择章时自动触发对应的时间，根据这个课程ID获取其下面的章信息。<br>其它的如节等，同理。</p><p>代码说明:<br>如下代码不规范，可以参考功能实现，切不可照搬照抄(当然了，可以作为一个反面代码案例以告诫后来学习者，代码严谨和规范的重要性)。<br>比如与像一些通用的js和css等可以放在CDN上。<br>比如<script></script>这样的标签，如果像源代码中掺杂大量的js代码时，强烈建议将其抽出为一个外部js文件，主要方便管理和维护及其未来扩展。<br><a id="more"></a><br>源代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;title&gt;创建课时&lt;/title&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/app.min.css&quot;/&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;../layui/css/layui.css&quot;  media=&quot;all&quot;&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;rel alert-reg alert-reg2&quot;&gt;</span><br><span class="line">      &lt;div style=&quot;margin-left:90px;&quot;&gt;</span><br><span class="line">        &lt;table class=&quot;alert-tb tdh70&quot; width=&quot;100%&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;em class=&quot;ico2 ico2-phone&quot;&gt;&lt;/em&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;label for=&quot;regPhone_&quot;&gt;选择课程：&lt;/label&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                &lt;span class=&quot;red&quot;&gt;*&lt;/span&gt; </span><br><span class="line">                &lt;select id=&quot;course_list&quot; name=&quot;course_list&quot;  class=&quot;vi fctr_label_2&quot; style=&quot;height:20px;&quot;&gt;</span><br><span class="line">                    &lt;option value=&quot;&quot; id=&quot;course_val&quot;&gt;请选择课程&lt;/option&gt;</span><br><span class="line">                &lt;/select&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;em class=&quot;ico2 ico2-phone&quot;&gt;&lt;/em&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;label for=&quot;regPhone_&quot;&gt;选择章：&lt;/label&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                &lt;span class=&quot;red&quot;&gt;*&lt;/span&gt; </span><br><span class="line">                &lt;select onmouseover=&quot;chapterList()&quot; id=&quot;chapter_list&quot; class=&quot;vi fctr_label_2&quot; style=&quot;height:20px;&quot;&gt;</span><br><span class="line">                    &lt;option value=&quot;&quot; id=&quot;chapter_val&quot;&gt;请选择章&lt;/option&gt;</span><br><span class="line">                &lt;/select&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;em class=&quot;ico2 ico2-phone&quot;&gt;&lt;/em&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;label for=&quot;regPhone_&quot;&gt;选择节：&lt;/label&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                &lt;span class=&quot;red&quot;&gt;*&lt;/span&gt; </span><br><span class="line">                &lt;select onmouseover=&quot;quarterList()&quot; id=&quot;quarter_list&quot; class=&quot;vi fctr_label_2&quot; style=&quot;height:20px;&quot;&gt;</span><br><span class="line">                    &lt;option value=&quot;&quot; id=&quot;quarter_val&quot;&gt;请选择节&lt;/option&gt;</span><br><span class="line">                &lt;/select&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            </span><br><span class="line">                       </span><br><span class="line">                    </span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;em class=&quot;ico2 ico2-phone&quot;&gt;&lt;/em&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;label for=&quot;regPhone_&quot;&gt;课时名称：&lt;/label&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                &lt;span class=&quot;red&quot;&gt;*&lt;/span&gt; </span><br><span class="line">                &lt;input class=&quot;vi fctr_label_2&quot; type=&quot;text&quot; id=&quot;quarter_name&quot; placeholder=&quot;请输入课时名称&quot; maxlength=&quot;40&quot;/&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          </span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;div align=&quot;center&quot; &gt;</span><br><span class="line">&lt;button type=&quot;button&quot; id=&quot;create_quarter&quot;  style=&quot;background-color: #7ED321;width: 150px;height: 36px;color: #FFFFFF&quot;&gt;创建&lt;/button&gt;  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;../js/jquery-1.11.3.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;../layui/layui.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;../js/layer/layer-v3.1.1/layer/mobile/layer.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;../js/common.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">$(function () &#123;</span><br><span class="line"></span><br><span class="line">courseListInfo();</span><br><span class="line"></span><br><span class="line">$(&quot;#create_quarter&quot;).click(function()&#123;</span><br><span class="line">    </span><br><span class="line">var courseId = $(&quot;#course_list&quot;).val();</span><br><span class="line"></span><br><span class="line">var chapterId = $(&apos;#quarter_list option:selected&apos;) .val();</span><br><span class="line"></span><br><span class="line">var quarterName = $(&quot;#quarter_name&quot;).val();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//alert(&quot;userCode = &quot; + userCode)</span><br><span class="line"> </span><br><span class="line">if(courseId==null || courseId==&quot;&quot;)&#123;</span><br><span class="line">        </span><br><span class="line">        layer.open(&#123;</span><br><span class="line">      content: &apos;课程不能为空，请选择课程&apos; ,</span><br><span class="line">      skin: &apos;msg&apos;,</span><br><span class="line">      time: 3 //3秒后自动关闭</span><br><span class="line">    &#125;);</span><br><span class="line">        </span><br><span class="line">        return false;</span><br><span class="line">        &#125;else if(chapterId==null || chapterId==&quot;&quot;)&#123;</span><br><span class="line">        </span><br><span class="line">        layer.open(&#123;</span><br><span class="line">      content: &apos;章节不能为空，请选择章节&apos; ,</span><br><span class="line">      skin: &apos;msg&apos;,</span><br><span class="line">      time: 3 //3秒后自动关闭</span><br><span class="line">    &#125;);</span><br><span class="line">        </span><br><span class="line">        return false;</span><br><span class="line">        &#125;else if(quarterName==null || quarterName==&quot;&quot;)&#123;</span><br><span class="line">        </span><br><span class="line">        layer.open(&#123;</span><br><span class="line">      content: &apos;课时名称不能为空&apos; ,</span><br><span class="line">      skin: &apos;msg&apos;,</span><br><span class="line">      time: 3 //3秒后自动关闭</span><br><span class="line">    &#125;);</span><br><span class="line">        </span><br><span class="line">        return false;</span><br><span class="line">        &#125; else if(quarterName.length &gt; 40)&#123;</span><br><span class="line">        </span><br><span class="line">        layer.open(&#123;</span><br><span class="line">      content: &apos;课时名称太长&apos; ,</span><br><span class="line">      skin: &apos;msg&apos;,</span><br><span class="line">      time: 3 //3秒后自动关闭</span><br><span class="line">    &#125;);</span><br><span class="line">        </span><br><span class="line">        return false;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line"> </span><br><span class="line"> $.ajax(&#123;</span><br><span class="line">            async:false,</span><br><span class="line">            url:RouterAPI.url.api.course_add_chapter,</span><br><span class="line">            type:&quot;POST&quot;,</span><br><span class="line">            data : &#123;&quot;parentId&quot;:chapterId, &quot;title&quot;:quarterName,&quot;type&quot;:&quot;lesson&quot;&#125;,</span><br><span class="line">            dataType : &apos;json&apos;,</span><br><span class="line">            success:function(data)&#123;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            if(data.code==&quot;000000&quot;)&#123;</span><br><span class="line">            layui.use(&apos;layer&apos;, function()&#123;</span><br><span class="line">              var layer = layui.layer;</span><br><span class="line">              </span><br><span class="line">              layer.alert(&quot;创建成功，返回课程管理页面&quot;,&#123;icon:1&#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">            </span><br><span class="line">            parent.location.reload(); </span><br><span class="line">                        </span><br><span class="line">&#125;, 600);</span><br><span class="line">            </span><br><span class="line">            return true;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">            layui.use(&apos;layer&apos;, function()&#123;</span><br><span class="line">              var layer = layui.layer;</span><br><span class="line">              </span><br><span class="line">              layer.alert(data.msg,&#123;icon:5&#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            return false;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">          </span><br><span class="line">              </span><br><span class="line">            &#125;,error:function(XMLHttpRequest, textStatus, errorThrown)&#123;</span><br><span class="line">            alert(&quot;失败&quot;);</span><br><span class="line">              // 状态码</span><br><span class="line">                   alert(XMLHttpRequest.status);</span><br><span class="line">                    // 状态</span><br><span class="line">                    alert(XMLHttpRequest.readyState);</span><br><span class="line">                    // 错误信息   </span><br><span class="line">                    alert(textStatus);</span><br><span class="line">                    return false;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//课程选择发生变化</span><br><span class="line">function courseListInfo()&#123;</span><br><span class="line"></span><br><span class="line">var creator = getMyCookie(&quot;userId&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">        async:false,</span><br><span class="line">        url:RouterAPI.url.api.course_list,</span><br><span class="line">        type:&quot;GET&quot;,</span><br><span class="line">        data : &#123;&quot;creator&quot;:creator&#125;,</span><br><span class="line">        dataType : &apos;json&apos;,</span><br><span class="line">        success:function(data)&#123;</span><br><span class="line">        </span><br><span class="line">        if(data.code==&quot;000000&quot;)&#123;</span><br><span class="line">        </span><br><span class="line">        if (data.data.length &gt; 0) &#123;</span><br><span class="line">                    for (var i = 0; i &lt; data.data.length; i++) &#123;</span><br><span class="line">                        var item = data.data[i];</span><br><span class="line">                        console.log(data.data[i].id);</span><br><span class="line">                       $(&quot;#course_list&quot;).append(&apos;&lt;option value=&quot;&apos; + data.data[i].id + &apos;&quot;&gt;&apos; + data.data[i].title + &apos;&lt;/option&gt;&apos;);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">        return true;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        </span><br><span class="line">        layui.use(&apos;layer&apos;, function()&#123;</span><br><span class="line">          var layer = layui.layer;</span><br><span class="line">          </span><br><span class="line">          layer.alert(data.msg,&#123;icon:5&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">      </span><br><span class="line">          </span><br><span class="line">        &#125;,error:function(XMLHttpRequest, textStatus, errorThrown)&#123;</span><br><span class="line">        alert(&quot;失败&quot;);</span><br><span class="line">          // 状态码</span><br><span class="line">               alert(XMLHttpRequest.status);</span><br><span class="line">                // 状态</span><br><span class="line">                alert(XMLHttpRequest.readyState);</span><br><span class="line">                // 错误信息   </span><br><span class="line">                alert(textStatus);</span><br><span class="line">                return false;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//章选择发生变化</span><br><span class="line">function chapterList()&#123;</span><br><span class="line"></span><br><span class="line">var parentId = $(&apos;#course_list option:selected&apos;) .val();</span><br><span class="line"></span><br><span class="line">var type=&quot;chapter&quot;;</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url : RouterAPI.url.api.course_chapter_list,</span><br><span class="line">        type : &quot;GET&quot;,</span><br><span class="line">        data : &#123;</span><br><span class="line">        parentId : parentId,</span><br><span class="line">        type : type</span><br><span class="line">        &#125;,</span><br><span class="line">        success:function(result) &#123;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        $(&quot;#chapter_list option[value != &apos;&apos;]&quot;).remove(); </span><br><span class="line">        </span><br><span class="line">        for (var i = 0; i &lt; result.data.length; i++) &#123;</span><br><span class="line">        </span><br><span class="line">                $(&quot;#chapter_list&quot;).append(&quot;&lt;option id=&apos;chapter_val&apos; value=&apos;&quot; + result.data[i].id + &quot; &apos;&gt;&quot; + result.data[i].title + &quot;&lt;/option&gt;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//节选择变化</span><br><span class="line">function quarterList()&#123;</span><br><span class="line"></span><br><span class="line">var parentId = $(&apos;#chapter_list option:selected&apos;) .val();</span><br><span class="line"></span><br><span class="line">var type=&quot;unit&quot;;</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url : RouterAPI.url.api.course_chapter_list,</span><br><span class="line">        type : &quot;GET&quot;,</span><br><span class="line">        data : &#123;</span><br><span class="line">        parentId : parentId,</span><br><span class="line">        type : type</span><br><span class="line">        &#125;,</span><br><span class="line">        success:function(result) &#123;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        $(&quot;#quarter_list option[value != &apos;&apos;]&quot;).remove(); </span><br><span class="line">        </span><br><span class="line">        for (var i = 0; i &lt; result.data.length; i++) &#123;</span><br><span class="line">        </span><br><span class="line">                $(&quot;#quarter_list&quot;).append(&quot;&lt;option id=&apos;chapter_val&apos; value=&apos;&quot; + result.data[i].id + &quot; &apos;&gt;&quot; + result.data[i].title + &quot;&lt;/option&gt;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function getQueryString(name) &#123;</span><br><span class="line">        var result = window.location.search.match(new RegExp(&quot;[\?\&amp;]&quot; + name + &quot;=([^\&amp;]+)&quot;, &quot;i&quot;));</span><br><span class="line">        if (result == null || result.length &lt; 1) &#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return result[1];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《远见》之读书笔记</title>
      <link href="/2019/07/23/%E3%80%8A%E8%BF%9C%E8%A7%81%E3%80%8B%E4%B9%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/07/23/%E3%80%8A%E8%BF%9C%E8%A7%81%E3%80%8B%E4%B9%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>读完《远见》这本书，做的读书笔记如下:</p><h2><span id="part1-远见思维与工具箱">PART1 远见思维与工具箱</span></h2><h3><span id="远见思维多行动少忧虑">远见思维:多行动，少忧虑</span></h3><p>打造职业生涯要知道的5件事情:<br>(1)职业生涯至少长达45年，被分为三个阶段;<br>(2)职场燃料是走完职业生涯的基础;<br>(3)职业燃料的获取需要数千小时的学习、体验和实践;<br>(4)职业生涯中随时都会出现意外，请随机应变;<br>(5)职业生涯是生活的一大部分,请将它融入更广阔的人生追求;<br><a id="more"></a></p><p>实现职业规划要做到的5件事情:<br>(1)学习职场数学;<br>(2)职场盘点;<br>(3)完成个人时间档案;<br>(4)运用职场路径向导;<br>(5)用5大问题挑战自己;</p><h3><span id="3大阶段聚焦45年职业生涯">3大阶段，聚焦45年职业生涯</span></h3><p>第一阶段策略:加添燃料，强势开局;<br>第二阶段策略:聚焦长板，达到高点;<br>第三阶段策略:优化长尾，持续发挥影响力;</p><h3><span id="储备3大职场燃料">储备3大职场燃料</span></h3><p>1号职场燃料:可迁移技能</p><p>2号职场燃料:有意义的经验</p><p>3号职场燃料:持久的关系，即职业生态系统</p><h3><span id="5个数字树立正确的职场思维">5个数字，树立正确的职场思维</span></h3><p>职业生涯的长度:用62减去你目前的年龄;</p><p>精通一项技能所需的时间:到至少需要10000小时的密集训练和练习;</p><p>40岁之后能赚到的个人财富百分比;</p><p>85%~90%,因为大多数人的财富积累要蓄力到40岁、50岁甚至60岁才爆发出来;</p><p>社交货币:并不是越多越好;</p><p>职场支持者的人数:找到3~5个真正称为导师的人;</p><h3><span id="4大黄金问题评估职业价值">4大黄金问题，评估职业价值</span></h3><p>职场燃料之可迁移技能:学术学位、专业证书、语言、优点、情商、”人才账户”;</p><p>职场燃料之有意义的经验:个人旅行、海外工作经验、企业管理、创业经验、社区、志愿者活动、做出个人的贡献项目、公开演讲、写作、表演的经验、教学、咨询、指导的经验，工作之余的热情所在;</p><p>职场燃料之持久的关系:联系人、专家团、关键同事、支持者;</p><h3><span id="100小时测试合理投资时间">100小时测试，合理投资时间</span></h3><p>时间是你的人生货币。它是你唯一拥有的货币，而且也只有你决定如何消费它-卡尔.桑德堡</p><h3><span id="职场路径向导做出正确的职业决策">职场路径向导，做出正确的职业决策</span></h3><p>三个问题:<br>1.你的职业理想是什么，或者至少假设你可能想要达到的目标?<br>2.你目前手上有什么职场燃料?<br>3.你需要什么职场燃料才能实现这个终极理想?</p><h4><span id="你需要什么燃料才能实现终极理想">你需要什么燃料才能实现终极理想</span></h4><p>思考:<br>1.增加你目前不具备的可迁移技能?<br>2.帮助你重塑自我，改变职业生涯的方向?<br>3.建立新的人际关系，并拓展职业生态系统?<br>4.增加你目前没有的重要证书?<br>5.加速你的探索步伐，即通过实践验证自己真正擅长和热爱的东西?</p><h4><span id="权衡投资回报率">权衡投资回报率</span></h4><h4><span id="快速成长才能获得长远成功">快速成长才能获得长远成功</span></h4><p>如果要成长得再快一点，你就需要一份满足以下条件的工作:<br>1.你周围都是比你聪明的人(成长最快);<br>2.你有失败的机会;<br>3.公司有让你这样的人肩负重大责任的传统;</p><h4><span id="在做出决策时厘清正确的思维方式">在做出决策时厘清正确的思维方式</span></h4><p>意识到自己可能对现状和逃避风险存在偏向性，这一点很重要。同样至关重要的是，在做出职业生涯决策时厘清正确的思维方式，不要因为老板或猎头的压力而匆忙做决定。</p><p>在老板面前表达你的野心是一件健康而有益的事情，不过，你给出的目标应该与自己的职场路径和时间规划有关，而不一定是眼下的解决方案。如果你只给公司留出几天的时间对的最后通牒做出回应，那就必须有承担后果的心理准备。</p><h2><span id="part2-三大职业生涯阶段">Part2 三大职业生涯阶段</span></h2><h3><span id="第一阶段加添燃料强势开局">第一阶段:加添燃料，强势开局</span></h3><p>步入职场策略1:利用在读的时间储备早期形式的职场燃料;<br>步入职场策略2：制订求职作战计划;<br>步入职场策略3:积极参与校园招聘;<br>步入职场策略4:高效地进行在线申请;<br>步入职场策略5:用好你的关系;<br>步入职场策略6:与联系人见面之前，做些功课;<br>步入职场策略7:用好心理准备，找到第一份工作难于上青天;<br>步入职场策略8:不断探索;</p><h3><span id="第二阶段锚定甜蜜区聚焦长板">第二阶段:锚定甜蜜区,聚焦长板</span></h3><p>初任管理者的建议1:时刻注意你的仪容、态度和举止;<br>初任管理者的建议2:简洁地表达你的愿景，并且不停地重复;<br>初任管理者的建议3:尽快选好团队成员;<br>初任管理者的建议4:每一个有意义的商业问题最好能在较小的团队中解决;<br>初任管理者的建议5:表现得像个被人信赖的解答者;<br>初任管理者的建议6:你并不需要无所不知，而是应该多多找人咨询;</p><p>首席执行官的特质1:诚实，与公司的文化契合度;<br>首席执行官的特质2:智力上的好奇和敏捷;<br>首席执行官的特质3:有提升业务业绩的经验;<br>首席执行官的特质4:真实、自我意识以及平衡;<br>首席执行官的特质5:活力和热情;</p><h3><span id="第三阶段优化长尾发挥持续影响力">第三阶段:优化长尾，发挥持续影响力</span></h3><p>合理规划第三阶段的建议1:试验、自愿接受挑战;<br>合理规划第三阶段的建议2:创业，开辟全新疆域;<br>合理规划第三阶段的建议3:管理学习曲线，保持关联性;</p><h2><span id="part3-应对职场和生活的冲突">Part3 应对职场和生活的冲突</span></h2><h3><span id="如何做好职场父母">如何做好职场父母</span></h3><p>职业生涯与为人父母共存之道1:不要让职业生涯和为人父母成为非此即彼的选项;<br>职业生涯与为人父母共存之道2:找到一个热爱家庭的雇主;<br>职业生涯与为人父母共存之道3:找到后方的恰当支持;<br>职业生涯与为人父母共存之道4:设立现实的期望和严格的界限;<br>职业生涯与为人父母共存之道5:管理你的时间和精力;</p><p>回归正轨之法1:重新组织你的经验;<br>回归正轨之法2:重新包装你的技能;<br>回归正轨之法3:重新连接职业生态系统;<br>回归正轨之法4:重新建立自信;</p><h3><span id="如何看待跨国工作">如何看待跨国工作</span></h3><h4><span id="国际化思维职业生涯的关键区别点">国际化思维，职业生涯的关键区别点</span></h4><h4><span id="做些有意思的事不要纯粹为了生意而活">做些有意思的事，不要纯粹为了生意而活</span></h4><h4><span id="在45岁之前不要关上任何一扇门">在45岁之前不要关上任何一扇门</span></h4><p>在考虑跨国工作时，关键在于你和你的整个家庭必须将其当作一场冒险</p><h3><span id="如何应对职场危机">如何应对职场危机</span></h3><h4><span id="应对职场危机需要知道的5件事情">应对职场危机需要知道的5件事情</span></h4><p>1.应对职场危机的第一步应该是清晰客观地认识问题<br>2.有时候，职场危机可能是由他人对你的技能、目标或业绩的错误认识引起的;<br>3.在其他情况中，你的不足之处可能并不只是认知上的，而且是真实存在的;<br>4.有的职场危机是可以预见并规避的;<br>5.无论你的职场危机是不可预知的还是可以预料的，你都需要从逆境中快速恢复的方法;</p><h4><span id="遭遇职场危机时请将骄傲放在一边">遭遇职场危机时，请将骄傲放在一边</span></h4><p>在严重的职场危机时，要回归人性。</p><p>你的自信心必须要建立在有市场竞争力的东西上面</p><h4><span id="不要担心别的事享受当下就行">不要担心别的事，享受当下就行</span></h4><h4><span id="弄清你的使命从事你愿意投入的事业">弄清你的使命，从事你愿意投入的事业</span></h4><p>利用好奇和探索的武器培养技能和经验，建立起能抵挡不可避免的挫折的免疫系统;<br>不断寻找自己的理想，如果不知道什么才是最重要的，那么回归人性;<br>确保你的信心是有根据的，如果你的失败并不主要源于坏运气，那么就得采取行动，找出欠缺的关系或技能;<br>不要让骄傲阻挡了重获新生的道路;<br>你可能需要退一步才能海阔天空;<br>坚持自己的核心价值观和真正的自我。</p><h2><span id="工作的未来">工作的未来</span></h2><p>五个问题：<br>我会被机器取代吗?<br>我未来会在哪里找工作，又如何找工作?<br>我该把时间用在哪里?<br>我会把钱花光吗?<br>工作如何能让我更快乐?</p><h4><span id="我会被机器取代吗">我会被机器取代吗?</span></h4><p>最脆弱的工作大部分本质上都是机械性和重复性的，比如从事写报告、做表格等重复性工作的办公室职员就很容易被软件取代，工厂工人也因为更加灵巧的机器人被开发出来而变得越来越危险。</p><p>机器的崛起对于我们长期的职业规划有何启示?<br>你需要确保能拥有一些与机器的工作不同或互补的人类技能。</p><p>面临机器的竞争:明智之举是培养情商、创造力、协作能力和建立信任关系的技能;<br>在哪里找工作:像领英这样的在线平台将成为共识寻找人才、个人寻找工作的主要场所;<br>将时间投资在哪里:创业和自由职业将在不久的将来蓬勃发展，工作目标也将更多样化;<br>怎样保持收入稳定:退休并不代表就能安享晚年，继续工作才能获得稳定的收入;<br>享受工作的快乐:想在工作中更快乐，就需要提高幸福感。</p><p>如何提高幸福感?<br>1.表达感恩;<br>2.培养乐观的心态;<br>3.避免思虑过度和社会攀比;<br>4.多行善事;<br>5.维护人际关系;<br>6.发展合作的策略;<br>7.学会原谅;<br>8.增加心流体验;<br>9.享受生活的乐趣;<br>10.努力实现目标;<br>11.信仰宗教，寻找精神寄托;<br>12.关注身体健康;</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell之批量新增用户脚本(http-basic-auth)</title>
      <link href="/2019/07/22/shell%E4%B9%8B%E6%89%B9%E9%87%8F%E6%96%B0%E5%A2%9E%E7%94%A8%E6%88%B7%E8%84%9A%E6%9C%AC-http-basic-auth/"/>
      <url>/2019/07/22/shell%E4%B9%8B%E6%89%B9%E9%87%8F%E6%96%B0%E5%A2%9E%E7%94%A8%E6%88%B7%E8%84%9A%E6%9C%AC-http-basic-auth/</url>
      
        <content type="html"><![CDATA[<p>user.txt(用户名记录文件)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test001@163.com</span><br><span class="line">test002@163.com</span><br></pre></td></tr></table></figure></p><p>user.sh(shell脚本):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">for line in `cat user.txt`</span><br><span class="line">do</span><br><span class="line">   echo $line &quot;u&quot;$line</span><br><span class="line">   printf &quot;$line:$(openssl passwd -crypt $line)\n&quot; &gt;&gt; conf.d/passwd</span><br><span class="line"></span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>执行完毕后，就可以在passwd看到对应的记录。</p><p>应用场景:<br>比如我开发某个系统，希望有一个双重验证，第一次访问比如有一个HTTP Basic Auth认证(认证一次，浏览器有缓存，就无需再重新验证)，第二次如果你想使用系统的服务的话，还需要登录。<br><a id="more"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为 Nginx 添加 HTTP 基本认证(HTTP Basic Authentication)</title>
      <link href="/2019/07/22/%E4%B8%BA-Nginx-%E6%B7%BB%E5%8A%A0-HTTP-%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81-HTTP-Basic-Authentication/"/>
      <url>/2019/07/22/%E4%B8%BA-Nginx-%E6%B7%BB%E5%8A%A0-HTTP-%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81-HTTP-Basic-Authentication/</url>
      
        <content type="html"><![CDATA[<p>针对sudo apt-get install命令安装的nginx(默认会有/etc/nginx/conf.d)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure></p><h2><span id="生成密码">生成密码</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf &quot;your_username:$(openssl passwd -crypt your_password)\n&quot; &gt;&gt; conf.d/passwd</span><br></pre></td></tr></table></figure><p>如果没有conf.d/passwd这个文件，就自行创建<br><a id="more"></a></p><h2><span id="配置nginx">配置nginx</span></h2><p>修改配置文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure></p><p>修改内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /</span><br><span class="line">&#123;</span><br><span class="line">    auth_basic &quot;网站名称&quot;;</span><br><span class="line">    auth_basic_user_file conf.d/passwd; </span><br><span class="line">    autoindex on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="重启nginx">重启nginx</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/nginx restart</span><br></pre></td></tr></table></figure><h2><span id="访问效果如下">访问效果如下</span></h2><p><img src="/2019/07/22/为-Nginx-添加-HTTP-基本认证-HTTP-Basic-Authentication/01.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux搜索所有文件中的内容</title>
      <link href="/2019/07/21/Linux%E6%90%9C%E7%B4%A2%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9/"/>
      <url>/2019/07/21/Linux%E6%90%9C%E7%B4%A2%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<p>主要命令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -rn &quot;&#123;填写关键字&#125;&quot; *</span><br></pre></td></tr></table></figure></p><ul><li>: 表示当前目录所有文件，也可以是某个文件名<br>-r 是递归查找<br>-n 是显示行号<br>-R 查找所有文件包含子目录<br>-i 忽略大小写<br>-l 只列出匹配的文件名<br>-L 列出不匹配的文件名<br>-w 只匹配整个单词，而不是字符串的一部分（匹配 hello，不匹配helloo）</li></ul><p>应用场景:<br>比如我最近我在我个人的服务器上弄一个在线评测，我想改改它的源代码，这时我可以通过关键字搜索来搜索，这样总比一个个的文件里面找要方便多了。<br><a id="more"></a></p><p>例子如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -rn &quot;HUSTOJ&quot; *</span><br></pre></td></tr></table></figure></p><p>效果图如下:<br><img src="/2019/07/21/Linux搜索所有文件中的内容/01.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js之删除文件夹(含递归删除)</title>
      <link href="/2019/07/20/Node-js%E4%B9%8B%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9-%E5%90%AB%E9%80%92%E5%BD%92%E5%88%A0%E9%99%A4/"/>
      <url>/2019/07/20/Node-js%E4%B9%8B%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9-%E5%90%AB%E9%80%92%E5%BD%92%E5%88%A0%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<p>应用场景:比如像Eclipse这样的IDE，右击项目，出现选项，点击选项中的删除，就可以删除这个项目及其下的子目录包含文件(使用electron开发的桌面端项目多少都会用到)。<br><a id="more"></a><br>核心代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * @param &#123;*&#125; url</span><br><span class="line"> */</span><br><span class="line">function deleteFolderRecursive(url) &#123;</span><br><span class="line">var files = [];</span><br><span class="line">/**</span><br><span class="line"> * 判断给定的路径是否存在</span><br><span class="line"> */</span><br><span class="line">if (fs.existsSync(url)) &#123;</span><br><span class="line">/**</span><br><span class="line"> * 返回文件和子目录的数组</span><br><span class="line"> */</span><br><span class="line">files = fs.readdirSync(url);</span><br><span class="line">files.forEach(function (file, index) &#123;</span><br><span class="line"></span><br><span class="line">var curPath = path.join(url, file);</span><br><span class="line">/**</span><br><span class="line"> * fs.statSync同步读取文件夹文件，如果是文件夹，在重复触发函数</span><br><span class="line"> */</span><br><span class="line">if (fs.statSync(curPath).isDirectory()) &#123; // recurse</span><br><span class="line">deleteFolderRecursive(curPath);</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line">fs.unlinkSync(curPath);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">/**</span><br><span class="line"> * 清除文件夹</span><br><span class="line"> */</span><br><span class="line">fs.rmdirSync(url);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">console.log(&quot;给定的路径不存在，请给出正确的路径&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序之页面传参</title>
      <link href="/2019/07/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E4%B9%8B%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%8F%82/"/>
      <url>/2019/07/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E4%B9%8B%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%8F%82/</url>
      
        <content type="html"><![CDATA[<p>效果图:<br><img src="/2019/07/19/微信小程序开发之页面传参/01.png" alt="图一"><br><a id="more"></a><br><img src="/2019/07/19/微信小程序开发之页面传参/02.png" alt="图一"></p><p>点击编辑值传过去了，那么编辑支出类型这个界面又是如何获取到值呢？</p><p>传值代码:<br>type.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">editType: function (e) &#123;</span><br><span class="line">   var typeId =  e.currentTarget.dataset[&apos;id&apos;];</span><br><span class="line">   console.log(&quot;edit:&quot;+typeId);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  wx.navigateTo(&#123;</span><br><span class="line">    url: &apos;../type_edit/type_edit?typeId=&apos; + typeId</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>type.wxml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;text bindtap=&apos;editType&apos; data-id=&quot;&#123;&#123;item.typeId&#125;&#125;&quot;&gt;编辑&lt;/text&gt;</span><br></pre></td></tr></table></figure></p><p>接收值核心代码如下(这段代码通常放在onLoad函数体内):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var that = this;</span><br><span class="line">   that.setData(&#123; //this.setData的方法用于把传递过来的id转化成小程序模板语言</span><br><span class="line">     typeId: options.typeId</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"> console.log(&quot;typeId:&quot; + that.data.typeId);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序之确认框实现</title>
      <link href="/2019/07/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E7%A1%AE%E8%AE%A4%E6%A1%86%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/07/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E7%A1%AE%E8%AE%A4%E6%A1%86%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>效果图如下:<br><img src="/2019/07/19/微信小程序之确认框实现/01.png" alt=""><br><a id="more"></a><br>核心代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">delType:function(e)&#123;</span><br><span class="line"></span><br><span class="line">  var typeId = e.currentTarget.dataset[&apos;id&apos;];</span><br><span class="line"></span><br><span class="line">  console.log(&quot;delete:&quot;+typeId)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  wx.showModal(&#123;</span><br><span class="line">    title: &apos;提示&apos;,</span><br><span class="line">    content: &apos;确认要删除该支出类型?&apos;,</span><br><span class="line">    success: function (res) &#123;</span><br><span class="line">      if (res.confirm) &#123;</span><br><span class="line">        console.log(&apos;用户点击确定&apos;)</span><br><span class="line"></span><br><span class="line">        wx.request(&#123;</span><br><span class="line"></span><br><span class="line">          url: getApp().globalData.urlPath + &quot;spendingType/delete&quot;,</span><br><span class="line">          method: &quot;POST&quot;,</span><br><span class="line">          data: &#123;</span><br><span class="line">            typeId: typeId</span><br><span class="line">          &#125;,</span><br><span class="line">          header: &#123;</span><br><span class="line">            &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          success: function (res) &#123;</span><br><span class="line">            console.log(res.data.code);</span><br><span class="line">            if (res.statusCode == 200) &#123;</span><br><span class="line"></span><br><span class="line">              //访问正常</span><br><span class="line">              if (res.data.code == &quot;000000&quot;) &#123;</span><br><span class="line">                wx.showToast(&#123;</span><br><span class="line">                  title: &quot;删除成功，返回支出类型列表&quot;,</span><br><span class="line">                  icon: &apos;success&apos;,</span><br><span class="line">                  duration: 3000,</span><br><span class="line">                  success: function () &#123;</span><br><span class="line"></span><br><span class="line">                    wx.navigateTo(&#123;</span><br><span class="line">                      url: &apos;../type/type&apos;</span><br><span class="line">                    &#125;)</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">              &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line"></span><br><span class="line">              wx.showLoading(&#123;</span><br><span class="line">                title: &apos;系统异常&apos;,</span><br><span class="line">                fail</span><br><span class="line">              &#125;)</span><br><span class="line"></span><br><span class="line">              setTimeout(function () &#123;</span><br><span class="line">                wx.hideLoading()</span><br><span class="line">              &#125;, 2000)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125; else if (res.cancel) &#123;</span><br><span class="line">        console.log(&apos;用户点击取消&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>wxml代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;text bindtap=&apos;delType&apos; data-id=&quot;&#123;&#123;item.typeId&#125;&#125;&quot;&gt;删除&lt;/text&gt;</span><br></pre></td></tr></table></figure></p><p>data-id相当于绑定对应的值，比方说你是根据id来删除对应的数据。<br>bindtap，即绑定事件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序之使用checkbox</title>
      <link href="/2019/07/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E4%BD%BF%E7%94%A8checkbox/"/>
      <url>/2019/07/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E4%BD%BF%E7%94%A8checkbox/</url>
      
        <content type="html"><![CDATA[<p>效果图如下:<br><img src="/2019/07/19/微信小程序之使用checkbox/01.png" alt="图一"><br><a id="more"></a><br>实例代码如下:<br>type_add.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line">// pages/detail_add/detail_add.js</span><br><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 页面的初始数据</span><br><span class="line">   */</span><br><span class="line">  data: &#123;</span><br><span class="line">    selectData: &quot;&quot;, //下拉列表的数据</span><br><span class="line">    height: 20,</span><br><span class="line">    focus: false</span><br><span class="line">  &#125;,</span><br><span class="line">  checkboxChange: function(e) &#123;</span><br><span class="line">    console.log(&apos;checkbox发生change事件，携带value值为：&apos;, e.detail.value)</span><br><span class="line">    console.log(&quot;长度:&quot; + e.detail.value.length);</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      typeId: e.detail.value,</span><br><span class="line">      length: e.detail.value.length</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  formSubmit: function(e) &#123;</span><br><span class="line">    console.log(&apos;form发生了submit事件，携带数据为：&apos; + e.detail.value.amount + &quot;, &quot; + e.detail.value.typeId + &quot;, &quot; + this.data.remark + &quot;, &quot; + this.data.date + &quot;, &quot; + this.data.time);</span><br><span class="line"></span><br><span class="line">    var amount = e.detail.value.amount;</span><br><span class="line">    var typeId = this.data.typeId;</span><br><span class="line"></span><br><span class="line">    var date = this.data.date;</span><br><span class="line">    var time = this.data.time;</span><br><span class="line">    var remark = e.detail.value.remark;</span><br><span class="line">    var createDate = date + &quot; &quot; + time;</span><br><span class="line">    var length = this.data.length;</span><br><span class="line">    console.log(&quot;length:&quot; + length);</span><br><span class="line">    console.log(&quot;date:&quot; + date);</span><br><span class="line">    console.log(&quot;time:&quot; + time);</span><br><span class="line">    console.log(&quot;createDate:&quot; + createDate)</span><br><span class="line"></span><br><span class="line">    if (amount == null || amount == &quot;&quot;) &#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: &quot;支出金额不能为空&quot;,</span><br><span class="line">        icon: &apos;none&apos;,</span><br><span class="line">        duration: 1500</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; else if (typeId == null || typeId == &quot;&quot;) &#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: &quot;支出类型不能为空&quot;,</span><br><span class="line">        icon: &apos;none&apos;,</span><br><span class="line">        duration: 1500</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125; else if (length &gt;= 2) &#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: &quot;支出类型只能选择一种&quot;,</span><br><span class="line">        icon: &apos;none&apos;,</span><br><span class="line">        duration: 1500</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; else if (date == null || date == &quot;&quot;) &#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: &quot;日期不能为空&quot;,</span><br><span class="line">        icon: &apos;none&apos;,</span><br><span class="line">        duration: 1500</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; else if (time == null || time == &quot;&quot;) &#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: &quot;时间不能为空&quot;,</span><br><span class="line">        icon: &apos;none&apos;,</span><br><span class="line">        duration: 1500</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; else if (remark == null || remark == &quot;&quot;) &#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: &quot;备注不能为空&quot;,</span><br><span class="line">        icon: &apos;none&apos;,</span><br><span class="line">        duration: 1500</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      wx.request(&#123;</span><br><span class="line"></span><br><span class="line">        url: getApp().globalData.urlPath + &quot;spendingDetail/add&quot;,</span><br><span class="line">        method: &quot;POST&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">          amount: amount,</span><br><span class="line">          typeId: typeId,</span><br><span class="line">          createDate: createDate,</span><br><span class="line">          remark: remark</span><br><span class="line">        &#125;,</span><br><span class="line">        header: &#123;</span><br><span class="line">          &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        success: function(res) &#123;</span><br><span class="line">          console.log(res.data.code);</span><br><span class="line">          if (res.statusCode == 200) &#123;</span><br><span class="line"></span><br><span class="line">            //访问正常</span><br><span class="line">            if (res.data.code == &quot;000000&quot;) &#123;</span><br><span class="line">              wx.showToast(&#123;</span><br><span class="line">                title: &quot;添加支出详情成功&quot;,</span><br><span class="line">                icon: &apos;success&apos;,</span><br><span class="line">                duration: 3000,</span><br><span class="line">                success: function() &#123;</span><br><span class="line"></span><br><span class="line">                  wx.navigateTo(&#123;</span><br><span class="line">                    url: &apos;../detail/detail&apos;</span><br><span class="line">                  &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line"></span><br><span class="line">            wx.showLoading(&#123;</span><br><span class="line">              title: &apos;系统异常&apos;,</span><br><span class="line">              fail</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            setTimeout(function() &#123;</span><br><span class="line">              wx.hideLoading()</span><br><span class="line">            &#125;, 2000)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  formReset: function() &#123;</span><br><span class="line">    console.log(&apos;form发生了reset事件&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  bindDateChange: function(e) &#123;</span><br><span class="line">    console.log(&apos;picker发送选择改变，携带值为&apos;, e.detail.value)</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      date: e.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  bindTimeChange: function(e) &#123;</span><br><span class="line">    console.log(&apos;picker发送选择改变，携带值为&apos;, e.detail.value)</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      time: e.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * 生命周期函数--监听页面加载</span><br><span class="line">   */</span><br><span class="line">  onLoad: function(options) &#123;</span><br><span class="line">    wx.setNavigationBarTitle(&#123;</span><br><span class="line"></span><br><span class="line">      title: &quot;添加支出详情&quot;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    var userCode = wx.getStorageSync(&apos;userId&apos;).toString();</span><br><span class="line">    var self = this;</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: getApp().globalData.urlPath + &quot;spendingType/types&quot;, //json数据地址 </span><br><span class="line">      data: &#123;</span><br><span class="line">        userCode: userCode</span><br><span class="line">      &#125;,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      success: function(res) &#123;</span><br><span class="line">        console.log(&quot;res.data.data.typeName:&quot; + res.data.data)</span><br><span class="line"></span><br><span class="line">        self.setData(&#123;</span><br><span class="line"></span><br><span class="line">          selectData: res.data.data</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 生命周期函数--监听页面初次渲染完成</span><br><span class="line">   */</span><br><span class="line">  onReady: function() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 生命周期函数--监听页面显示</span><br><span class="line">   */</span><br><span class="line">  onShow: function() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 生命周期函数--监听页面隐藏</span><br><span class="line">   */</span><br><span class="line">  onHide: function() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 生命周期函数--监听页面卸载</span><br><span class="line">   */</span><br><span class="line">  onUnload: function() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 页面相关事件处理函数--监听用户下拉动作</span><br><span class="line">   */</span><br><span class="line">  onPullDownRefresh: function() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 页面上拉触底事件的处理函数</span><br><span class="line">   */</span><br><span class="line">  onReachBottom: function() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 用户点击右上角分享</span><br><span class="line">   */</span><br><span class="line">  onShareAppMessage: function() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>type_add.wxml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;form bindsubmit=&quot;formSubmit&quot; bindreset=&quot;formReset&quot;&gt;</span><br><span class="line">  &lt;view class=&quot;section&quot;&gt;</span><br><span class="line">    &lt;text&gt;支出金额&lt;/text&gt;</span><br><span class="line">    &lt;input name=&quot;input&quot; name=&quot;amount&quot; placeholder=&quot;请输入支出金额&quot; /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">  &lt;view class=&quot;section&quot;&gt;</span><br><span class="line">    &lt;text&gt;支出类型&lt;/text&gt;</span><br><span class="line">    &lt;checkbox-group bindchange=&quot;checkboxChange&quot;&gt;</span><br><span class="line">      &lt;label class=&quot;checkbox&quot; wx:for=&quot;&#123;&#123;selectData&#125;&#125;&quot;&gt;</span><br><span class="line">        &lt;checkbox value=&quot;&#123;&#123;item.typeId&#125;&#125;&quot; checked=&quot;&#123;&#123;item.checked&#125;&#125;&quot; /&gt;&#123;&#123;item.typeName&#125;&#125;</span><br><span class="line">      &lt;/label&gt;</span><br><span class="line">    &lt;/checkbox-group&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;text&gt;创建时间&lt;/text&gt;</span><br><span class="line">    &lt;view class=&quot;section&quot;&gt;</span><br><span class="line">      &lt;picker mode=&quot;date&quot; value=&quot;&#123;&#123;date&#125;&#125;&quot; start=&quot;2018-09-01&quot; end=&quot;2030-09-01&quot; bindchange=&quot;bindDateChange&quot;&gt;</span><br><span class="line">        &lt;view class=&quot;picker&quot;&gt;</span><br><span class="line">          选择日期: &#123;&#123;date&#125;&#125;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">      &lt;/picker&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;view class=&quot;section&quot;&gt;</span><br><span class="line">      &lt;picker mode=&quot;time&quot; value=&quot;&#123;&#123;time&#125;&#125;&quot; start=&quot;00:00=&quot; end=&quot;23:59&quot; bindchange=&quot;bindTimeChange&quot;&gt;</span><br><span class="line">        &lt;view class=&quot;picker&quot;&gt;</span><br><span class="line">          选择时间: &#123;&#123;time&#125;&#125;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">      &lt;/picker&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=&quot;section&quot;&gt;</span><br><span class="line">    &lt;text&gt;备注&lt;/text&gt;</span><br><span class="line">    &lt;input name=&quot;input&quot; name=&quot;remark&quot; placeholder=&quot;请输入备注&quot; /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;text&gt;\n&lt;/text&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=&quot;btn-area&quot;&gt;</span><br><span class="line">    &lt;button form-type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">    &lt;view&gt;</span><br><span class="line">      &lt;text&gt;\n&lt;/text&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;button form-type=&quot;reset&quot;&gt;重置&lt;/button&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>bindchange=”checkboxChange” 相当于js中的onchange事件。<br>上述中的form表单基本就是参考官方文档改的。<br>有一段代码还是要提一下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">self.setData(&#123;</span><br><span class="line"></span><br><span class="line">    selectData: res.data.data</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p><p>self其实相当于this，意为当前。每次触发事件，对应的值都会进行存储，用于与后台通信进行数组传递，</p><p>type_add.wxss:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/* pages/login/login.wxss */</span><br><span class="line">form&#123;</span><br><span class="line">  width: 310px;</span><br><span class="line">  height: 240px;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">  /* border: 1px solid red;  */</span><br><span class="line">&#125;</span><br><span class="line">input&#123;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  width: 310px;</span><br><span class="line">  height: 40px;</span><br><span class="line">&#125;</span><br><span class="line">.button&#123;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.header text&#123;</span><br><span class="line">  font-size: 25px;</span><br><span class="line">  color: #666;</span><br><span class="line">&#125;</span><br><span class="line">form text&#123;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  color: #666;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序之如何定义页面标题</title>
      <link href="/2019/07/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2%E6%A0%87%E9%A2%98/"/>
      <url>/2019/07/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2%E6%A0%87%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>效果图:<br><img src="/2019/07/19/微信小程序之如何定义页面标题/01.png" alt=""><br><a id="more"></a><br>这个标题是在哪里定义的呢？<br>type.js核心代码如下(通常这段代码放在onLoad函数体内):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wx.setNavigationBarTitle(&#123;</span><br><span class="line"></span><br><span class="line">   title: &quot;支出类型列表&quot;</span><br><span class="line"></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></p><p>除了上面的在js中定义，还有在对应的json文件中定义(type.json)，代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    &quot;navigationBarTitleText&quot;: &quot;支出类型&quot;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>两者效果是一样的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序之使用wx:for遍历循环</title>
      <link href="/2019/07/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E4%BD%BF%E7%94%A8wx-for%E9%81%8D%E5%8E%86%E5%BE%AA%E7%8E%AF/"/>
      <url>/2019/07/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E4%BD%BF%E7%94%A8wx-for%E9%81%8D%E5%8E%86%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<p>效果图如下:<br><img src="/2019/07/19/微信小程序之使用wx-for遍历循环/01.png" alt=""><br><a id="more"></a><br>实现代码如下:<br>type.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line">// pages/type/type.js</span><br><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 页面的初始数据</span><br><span class="line">   */</span><br><span class="line">  data: &#123;</span><br><span class="line">    types: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  editType: function (e) &#123;</span><br><span class="line">     var typeId =  e.currentTarget.dataset[&apos;id&apos;];</span><br><span class="line">     console.log(&quot;edit:&quot;+typeId);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      url: &apos;../type_edit/type_edit?typeId=&apos; + typeId</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  delType:function(e)&#123;</span><br><span class="line"></span><br><span class="line">    var typeId = e.currentTarget.dataset[&apos;id&apos;];</span><br><span class="line"></span><br><span class="line">    console.log(&quot;delete:&quot;+typeId)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    wx.showModal(&#123;</span><br><span class="line">      title: &apos;提示&apos;,</span><br><span class="line">      content: &apos;确认要删除该支出类型?&apos;,</span><br><span class="line">      success: function (res) &#123;</span><br><span class="line">        if (res.confirm) &#123;</span><br><span class="line">          console.log(&apos;用户点击确定&apos;)</span><br><span class="line"></span><br><span class="line">          wx.request(&#123;</span><br><span class="line"></span><br><span class="line">            url: getApp().globalData.urlPath + &quot;spendingType/delete&quot;,</span><br><span class="line">            method: &quot;POST&quot;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              typeId: typeId</span><br><span class="line">            &#125;,</span><br><span class="line">            header: &#123;</span><br><span class="line">              &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            success: function (res) &#123;</span><br><span class="line">              console.log(res.data.code);</span><br><span class="line">              if (res.statusCode == 200) &#123;</span><br><span class="line"></span><br><span class="line">                //访问正常</span><br><span class="line">                if (res.data.code == &quot;000000&quot;) &#123;</span><br><span class="line">                  wx.showToast(&#123;</span><br><span class="line">                    title: &quot;删除成功，返回支出类型列表&quot;,</span><br><span class="line">                    icon: &apos;success&apos;,</span><br><span class="line">                    duration: 3000,</span><br><span class="line">                    success: function () &#123;</span><br><span class="line"></span><br><span class="line">                      wx.navigateTo(&#123;</span><br><span class="line">                        url: &apos;../type/type&apos;</span><br><span class="line">                      &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;)</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">              &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                wx.showLoading(&#123;</span><br><span class="line">                  title: &apos;系统异常&apos;,</span><br><span class="line">                  fail</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">                setTimeout(function () &#123;</span><br><span class="line">                  wx.hideLoading()</span><br><span class="line">                &#125;, 2000)</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; else if (res.cancel) &#123;</span><br><span class="line">          console.log(&apos;用户点击取消&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * 生命周期函数--监听页面加载</span><br><span class="line">   */</span><br><span class="line">  onLoad: function (options) &#123;</span><br><span class="line">    wx.setNavigationBarTitle(&#123;</span><br><span class="line"></span><br><span class="line">      title: &quot;支出类型列表&quot;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    var userCode = wx.getStorageSync(&apos;userId&apos;);</span><br><span class="line">    var self = this</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: getApp().globalData.urlPath + &quot;spendingType/types&quot;,//json数据地址 </span><br><span class="line">      data: &#123;</span><br><span class="line">        userCode: userCode</span><br><span class="line">      &#125;,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      success: function (res) &#123;</span><br><span class="line">        self.setData(&#123;</span><br><span class="line"></span><br><span class="line">          types: res.data.data</span><br><span class="line"></span><br><span class="line">        &#125;);//等同于</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 生命周期函数--监听页面初次渲染完成</span><br><span class="line">   */</span><br><span class="line">  onReady: function () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 生命周期函数--监听页面显示</span><br><span class="line">   */</span><br><span class="line">  onShow: function () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 生命周期函数--监听页面隐藏</span><br><span class="line">   */</span><br><span class="line">  onHide: function () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 生命周期函数--监听页面卸载</span><br><span class="line">   */</span><br><span class="line">  onUnload: function () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 页面相关事件处理函数--监听用户下拉动作</span><br><span class="line">   */</span><br><span class="line">  onPullDownRefresh: function () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 页面上拉触底事件的处理函数</span><br><span class="line">   */</span><br><span class="line">  onReachBottom: function () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 用户点击右上角分享</span><br><span class="line">   */</span><br><span class="line">  onShareAppMessage: function () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>type.js没什么好说的，如果要说，只能说这个onLoad这里的onLoad就相当于js中的onload方法，当进入该视图时，默认全局加载一次。</p><p>type.wxml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;navigator url=&quot;/pages/type_add/type_add&quot; hover-class=&quot;navigator-hover&quot;&gt;添加支出类型信息&lt;/navigator&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;text&gt;\n&lt;/text&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;view&gt;</span><br><span class="line">      &lt;text&gt;列表数据&lt;/text&gt;</span><br><span class="line">      &lt;text&gt;\n&lt;/text&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;view class=&quot;table&quot;&gt;</span><br><span class="line">        &lt;view class=&quot;tr thead&quot;&gt;</span><br><span class="line">          &lt;view class=&quot;td&quot;&gt;类型名&lt;/view&gt;</span><br><span class="line">          &lt;view class=&quot;td&quot;&gt;创建时间&lt;/view&gt;</span><br><span class="line">          &lt;view class=&quot;td &quot;&gt;修改时间&lt;/view&gt;</span><br><span class="line">          &lt;view class=&quot;td&quot;&gt;备注&lt;/view&gt;</span><br><span class="line">          &lt;view class=&quot;td &quot;&gt;操作&lt;/view&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">        &lt;block&gt;</span><br><span class="line">          &lt;view class=&quot;tr&quot; wx:for=&quot;&#123;&#123;types&#125;&#125;&quot; wx:for-item=&quot;item&quot;&gt;</span><br><span class="line">            &lt;view class=&quot;td&quot;&gt;&#123;&#123;item.typeName&#125;&#125;&lt;/view&gt;</span><br><span class="line">            &lt;view class=&quot;td&quot;&gt;&#123;&#123;item.createDate&#125;&#125;&lt;/view&gt;</span><br><span class="line">            &lt;view class=&quot;td&quot;&gt;&#123;&#123;item.modifyDate&#125;&#125;&lt;/view&gt;</span><br><span class="line">            &lt;view class=&quot;td&quot;&gt;&#123;&#123;item.remark&#125;&#125;&lt;/view&gt;</span><br><span class="line">            &lt;view class=&quot;td&quot;&gt;</span><br><span class="line">              &lt;text bindtap=&apos;editType&apos; data-id=&quot;&#123;&#123;item.typeId&#125;&#125;&quot;&gt;编辑&lt;/text&gt;</span><br><span class="line">              &lt;text&gt;\n&lt;/text&gt;</span><br><span class="line">              &lt;text&gt;\n&lt;/text&gt;</span><br><span class="line">              &lt;text bindtap=&apos;delType&apos; data-id=&quot;&#123;&#123;item.typeId&#125;&#125;&quot;&gt;删除&lt;/text&gt;</span><br><span class="line">            &lt;/view&gt;</span><br><span class="line">          &lt;/view&gt;</span><br><span class="line">        &lt;/block&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></p><p>遍历循环主要使用的是wx:for。如果要类比的话，我觉得jstl跟这个神似。先来看看jstl,代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  &lt;c:forEach var=&quot;u&quot; items=&quot;$&#123;user&#125;&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;$&#123;u.cid&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;u.cname&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;u.age &#125;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure></p><p>var相当于我可以任意定义一个简要字母来调用item(item相当于type.js中的data或<code>self.setData</code>存储的数据)。</p><p>如果你还不明白的话，可以联系到$.each,代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.each(classroom_list, function(i, c) &#123;</span><br><span class="line"></span><br><span class="line">rows = rows + &quot;&lt;tr&gt;&quot;;</span><br><span class="line">rows = rows + &quot;&lt;td&gt;&quot; + c.id + &quot;&lt;/td&gt;&quot;;</span><br><span class="line">rows = rows + &quot;&lt;td&gt;&quot; + c.nickname + &quot;&lt;/td&gt;&quot;;</span><br><span class="line">rows = rows + &quot;&lt;td&gt;&lt;a href=&apos;student_submit_info.html?userId=&quot;+c.id+&quot;&apos;&gt;查看详情&lt;/a&gt;&lt;/td&gt;&quot;;</span><br><span class="line">rows = rows + &quot;&lt;/tr&gt;&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>type.wxss:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">.table &#123;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  font-size: 28rpx;</span><br><span class="line">  background: #fff;</span><br><span class="line">  border-right: none;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.tr&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.td &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  border-left: none;</span><br><span class="line">  border-bottom: none;</span><br><span class="line">  padding: 10rpx 1%;</span><br><span class="line">  width: 12%;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.thead .td&#123;</span><br><span class="line">  border-top: none;</span><br><span class="line">  height: 140rpx;</span><br><span class="line">  line-height: 50rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参考资料:<br><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/list.html" target="_blank" rel="noopener">微信小程序之列表渲染</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序之数据缓存</title>
      <link href="/2019/07/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98/"/>
      <url>/2019/07/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>关于缓存，举个示例，假定我不是通过微信授权登录的方式，小程序又是如何识别我登录后的身份呢？？？<br>效果图:<br><img src="/2019/07/19/微信小程序之数据缓存/01.png" alt="图一"></p><p>这个功能我是通过缓存实现的。<br><a id="more"></a><br>关键核心代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> wx.setStorage(&#123;</span><br><span class="line">   key: &apos;userName&apos;,</span><br><span class="line">   data: res.data.user.userName</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>微信小程序提供的主要缓存如图:<br><img src="/2019/07/19/微信小程序之数据缓存/02.png" alt="图二"></p><p>那么两个缓存之间的区别又是什么？</p><p>wx.setStorage(Object object)</p><p>将数据存储在本地缓存中指定的 key 中。会覆盖掉原来该 key 对应的内容。除非用户主动删除或因存储空间原因被系统清理，否则数据都一直可用。单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB。</p><p>wx.setStorageSync(string key, any data)<br>wx.setStorage 的同步版本</p><p>如果要说它们之间区别，那就是同步和异步之间的区别，异步不必等待当前任务执行结束，就可以直接执行下一步任务，而同步则必须等待当前任务执行完毕，才能执行下一步任务。</p><p>那么既然我缓存了之后，请问如何获取呢？<br>核心代码如下:<br>manage.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 页面的初始数据</span><br><span class="line"> */</span><br><span class="line">data: &#123;</span><br><span class="line">  userName: wx.getStorageSync(&apos;userName&apos;),</span><br><span class="line">  userInfo: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外大家有没有联想到redis或者memcached的键值获取呢，与其是不是很相似。</p><p>参考资料如下:<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorageSync.html" target="_blank" rel="noopener">微信小程序之数据缓存</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序之页面导航栏</title>
      <link href="/2019/07/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E9%A1%B5%E9%9D%A2%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
      <url>/2019/07/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E9%A1%B5%E9%9D%A2%E5%AF%BC%E8%88%AA%E6%A0%8F/</url>
      
        <content type="html"><![CDATA[<p>效果图:<br><img src="/2019/07/19/微信小程序之页面导航栏/01.png" alt=""></p><p>页面有点丑，作为初次学习，页面可以要求不那么美观，先学会再说。毕竟后面可以优化的很漂亮。<br><a id="more"></a><br>代码实例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;section btn-area&quot;&gt;</span><br><span class="line">  &lt;view class=&quot;section__title&quot;&gt;欢迎&#123;&#123;userName&#125;&#125;来到ACS管理系统&lt;/view&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;text&gt;\n&lt;/text&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=&quot;flex-wrp&quot; style=&quot;flex-direction:row;&quot;&gt;</span><br><span class="line">    &lt;view class=&quot;flex-item bc_green&quot;&gt;</span><br><span class="line">      &lt;navigator url=&quot;/pages/type/type&quot; hover-class=&quot;navigator-hover&quot;&gt;支出类型&lt;/navigator&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">    &lt;view&gt;</span><br><span class="line">      &lt;text&gt;\n&lt;/text&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">    &lt;view class=&quot;flex-item bc_red&quot;&gt;</span><br><span class="line">      &lt;navigator url=&quot;/pages/detail/detail&quot; hover-class=&quot;other-navigator-hover&quot;&gt;支出详情&lt;/navigator&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;view&gt;</span><br><span class="line">      &lt;text&gt;\n&lt;/text&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;view class=&quot;flex-item bc_blue&quot;&gt;</span><br><span class="line">      &lt;navigator url=&quot;/pages/index/index&quot; hover-class=&quot;navigator-hover&quot; hover-class=&quot;other-navigator-hover&quot;&gt;统计分析&lt;/navigator&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>参考资料:<br><a href="https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html" target="_blank" rel="noopener">微信小程序之导航</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序之网络通信</title>
      <link href="/2019/07/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/07/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>关于网络通信，这里我使用的是wx.request,官方代码示例如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wx.request(&#123;</span><br><span class="line">  url: &apos;test.php&apos;, //仅为示例，并非真实的接口地址</span><br><span class="line">  data: &#123;</span><br><span class="line">    x: &apos;&apos;,</span><br><span class="line">    y: &apos;&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  header: &#123;</span><br><span class="line">    &apos;content-type&apos;: &apos;application/json&apos; // 默认值</span><br><span class="line">  &#125;,</span><br><span class="line">  success (res) &#123;</span><br><span class="line">    console.log(res.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>对于初学者而言，官方示例可能会看不怎么懂，所以我就以我自己当初项目驱动学习的方式(开发个人的记账小程序)来作为学习实例。<br><a id="more"></a><br>以登录来说，效果图如下:<br><img src="/2019/07/19/微信小程序之网络通信/01.png" alt="图一"></p><p>此次示例包含表单校验和网络请求，代码如下:<br>login.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">// pages/login/login.js</span><br><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 页面的初始数据</span><br><span class="line">   */</span><br><span class="line">  data: &#123;</span><br><span class="line">    username: &quot;&quot;,</span><br><span class="line">    password: &quot;&quot;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">   register:function(e)&#123;</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      url: &apos;../register/register&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  formSubmit: function(e) &#123;</span><br><span class="line">    console.log(e.detail.value.email);</span><br><span class="line">    console.log(e.detail.value.pwd)</span><br><span class="line">    var username = e.detail.value.email;</span><br><span class="line">    var password = e.detail.value.pwd;</span><br><span class="line">    var emailReg = /^[A-Za-z\d]+([-_.][A-Za-z\d]+)*@([A-Za-z\d]+[-.])+[A-Za-z\d]&#123;2,4&#125;$/;</span><br><span class="line">    if (username == null || username == &quot;&quot;) &#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: &quot;用户名不能为空&quot;,</span><br><span class="line">        icon: &apos;none&apos;,</span><br><span class="line">        duration: 1500</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; else if (!emailReg.test(username)) &#123;</span><br><span class="line"></span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: &quot;邮箱有误&quot;,</span><br><span class="line">        icon: &apos;none&apos;,</span><br><span class="line">        duration: 1500</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125; else if (password == null || password == &quot;&quot;) &#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: &quot;密码不能为空&quot;,</span><br><span class="line">        icon: &apos;none&apos;,</span><br><span class="line">        duration: 1500</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      wx.request(&#123;</span><br><span class="line"></span><br><span class="line">        url: getApp().globalData.urlPath + &quot;sysUser/login&quot;,</span><br><span class="line">        method: &quot;POST&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">          username: username,</span><br><span class="line">          password: password</span><br><span class="line">        &#125;,</span><br><span class="line">        header: &#123;</span><br><span class="line">          &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        success: function(res) &#123;</span><br><span class="line">          console.log(res.data);</span><br><span class="line">          if (res.statusCode == 200) &#123;</span><br><span class="line"></span><br><span class="line">            //访问正常</span><br><span class="line">            if (res.data.code == &quot;000000&quot;) &#123;</span><br><span class="line">              wx.showToast(&#123;</span><br><span class="line">                title: &quot;登陆成功&quot;,</span><br><span class="line">                icon: &apos;success&apos;,</span><br><span class="line">                duration: 2000,</span><br><span class="line">                success: function() &#123;</span><br><span class="line">                  wx.navigateTo(&#123;</span><br><span class="line">                    url: &apos;../manage/manage&apos;</span><br><span class="line">                  &#125;)</span><br><span class="line"></span><br><span class="line">                  wx.setStorage(&#123;</span><br><span class="line">                    key: &apos;userId&apos;,</span><br><span class="line">                    data: res.data.user.userCode</span><br><span class="line">                  &#125;)</span><br><span class="line"></span><br><span class="line">                  wx.setStorage(&#123;</span><br><span class="line">                    key: &apos;userName&apos;,</span><br><span class="line">                    data: res.data.user.userName</span><br><span class="line">                  &#125;)</span><br><span class="line">                  console.log(&quot;test:&quot; + wx.getStorageSync(&apos;userName&apos;));</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line"></span><br><span class="line">            &#125; else if (res.data.code == &quot;111111&quot;) &#123;</span><br><span class="line">              wx.showToast(&#123;</span><br><span class="line">                title: &quot;密码错误&quot;,</span><br><span class="line">                icon: &apos;none&apos;,</span><br><span class="line">                duration: 1500</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              wx.showToast(&#123;</span><br><span class="line">                title: &quot;该用户不存在&quot;,</span><br><span class="line">                icon: &apos;none&apos;,</span><br><span class="line">                duration: 1500</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line"></span><br><span class="line">            wx.showLoading(&#123;</span><br><span class="line">              title: &apos;系统异常&apos;,</span><br><span class="line">              fail</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            setTimeout(function() &#123;</span><br><span class="line">              wx.hideLoading()</span><br><span class="line">            &#125;, 2000)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>关于login.js，主要是写通信逻辑的，与咱们平时写js差异并不大，唯一不同的就是api长得不样罢了。</p><p>关于其中的getApp().globalData.urlPath，相当于全局变量，不用我每次都写一大串https之类的。</p><p>表单校验的效果如图:<br><img src="/2019/07/19/微信小程序之网络通信/02.png" alt="图二"></p><p><img src="/2019/07/19/微信小程序之网络通信/03.png" alt="图三"></p><p>代码说明:</p><p>显示消息提示框(相当于js的alert提示):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wx.showToast(&#123;</span><br><span class="line">  title: &quot;邮箱有误&quot;,</span><br><span class="line">  icon: &apos;none&apos;,</span><br><span class="line">  duration: 1500</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>获取input属性为name的值(相当于js中form.email.value,前提是这个表单name要为form，且form中的input要存在一个name=”email”)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.detail.value.email;</span><br></pre></td></tr></table></figure></p><p>跳转代码(相当于window.location.href):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line"> url: &apos;../manage/manage&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>至于wx.request，我想只要是写过ajax的，都很好理解。</p><p>login.json:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;usingComponents&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关于这个login.json有什么用，我唯一想到的是页面的title(其实相当于html中的title)</p><p>lgoin.wxml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;view class=&apos;container&apos;&gt;</span><br><span class="line">  &lt;view class=&apos;header&apos;&gt;</span><br><span class="line">    &lt;text&gt;acs系统&lt;/text&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">    &lt;view&gt;</span><br><span class="line">    &lt;text&gt;\n&lt;/text&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=&apos;header&apos;&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;form bindsubmit=&quot;formSubmit&quot;&gt;</span><br><span class="line">    &lt;view class=&apos;section&apos;&gt;</span><br><span class="line">      &lt;text&gt;用户名：&lt;/text&gt;</span><br><span class="line">      &lt;input type=&apos;text&apos; name=&quot;email&quot; placeholder=&apos;请输入邮箱&apos; /&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;view class=&apos;section&apos;&gt;</span><br><span class="line">      &lt;text&gt;密码:&lt;/text&gt;</span><br><span class="line">      &lt;input password=&apos;password&apos; name=&quot;pwd&quot; placeholder=&apos;请输入密码&apos; /&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;view class=&apos;button&apos;&gt;</span><br><span class="line">      &lt;button type=&apos;primary&apos; form-type=&apos;submit&apos;&gt;登录&lt;/button&gt;</span><br><span class="line">      &lt;text&gt;\n&lt;/text&gt;</span><br><span class="line">       &lt;view bindtap=&apos;register&apos; class=&quot;register&quot;&gt;注册&lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></p><p>wxml相当于视图(如html或者模板语言(jsp、volocity、freemarker、beetl等))<br>视图除了可以写一些标签之类的，还可以写一些逻辑判断。后面会讲到的。</p><p>login.wxss:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/* pages/login/login.wxss */</span><br><span class="line">form&#123;</span><br><span class="line">  width: 310px;</span><br><span class="line">  height: 240px;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">  /* border: 1px solid red;  */</span><br><span class="line">&#125;</span><br><span class="line">input&#123;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  width: 310px;</span><br><span class="line">  height: 40px;</span><br><span class="line">&#125;</span><br><span class="line">.button&#123;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.header text&#123;</span><br><span class="line">  font-size: 25px;</span><br><span class="line">  color: #666;</span><br><span class="line">&#125;</span><br><span class="line">form text&#123;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  color: #666;</span><br><span class="line">&#125;</span><br><span class="line">.register&#123;</span><br><span class="line">color:black;</span><br><span class="line">display: block;</span><br><span class="line">width: 310px;</span><br><span class="line">height: 40px;</span><br><span class="line">border: 1px solid #ccc;</span><br><span class="line">text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个wxss就相当于css，定义视图的样式，决定视图长什么样(好看不好看)</p><p>关于微信小程序网络通信，更多信息可以参考官方文档:<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html" target="_blank" rel="noopener">wx.request</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeMirror在线代码编辑器使用</title>
      <link href="/2019/07/19/CodeMirror%E5%9C%A8%E7%BA%BF%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/07/19/CodeMirror%E5%9C%A8%E7%BA%BF%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>CodeMirror官网地址为:<a href="https://codemirror.net/" target="_blank" rel="noopener">https://codemirror.net/</a></p><p>CodeMirror作为一款代码编辑器，其应用场景主要是在线网站写代码。<br>如现在的leetcode、洛谷、code-vs等都使用不同的代码编辑器。<br><a id="more"></a><br>代码示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;测试&lt;/title&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../fonticon/css/codemirror.css&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;../fonticon/css/codemirror/theme/midnight.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;textarea name=&quot;code&quot; id=&quot;editorArea&quot; style=&quot;display:none&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;script src=&quot;https://code.jquery.com/jquery-3.4.1.min.js&quot; integrity=&quot;sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=&quot; crossorigin=&quot;anonymous&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;../js/codemirror.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">var editor = CodeMirror.fromTextArea(document.getElementById(&quot;editorArea&quot;), &#123;</span><br><span class="line">lineNumbers: true,        //是否在编辑器左侧显示行号</span><br><span class="line">matchBrackets: true,      // 括号匹配</span><br><span class="line">mode: &quot;text/x-c++src&quot;,    //C++</span><br><span class="line">indentUnit:4,             // 缩进单位为4</span><br><span class="line">indentWithTabs: true,     //</span><br><span class="line">smartIndent: true,        //自动缩进，设置是否根据上下文自动缩进（和上一行相同的缩进量）。默认为true。</span><br><span class="line">styleActiveLine: true,   // 当前行背景高亮</span><br><span class="line">        theme: &apos;midnight&apos;,         // 编辑器主题</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">editor.setSize(&apos;600px&apos;,&apos;400px&apos;); //设置代码框大小</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>效果图:<br><img src="/2019/07/19/CodeMirror在线代码编辑器使用/01.png" alt=""></p><p>关于如何给代码框中赋值和取值，可使用如下方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">editor.setValue(&quot;&quot;); //赋值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">editor.getValue(); //取值</span><br></pre></td></tr></table></figure></p><p>上述只是一个简单的示例，更多知识还请参考官方网站对应的文档。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>稳赚不赔的理财产品？这里有!</title>
      <link href="/2019/07/18/%E7%A8%B3%E8%B5%9A%E4%B8%8D%E8%B5%94%E7%9A%84%E7%90%86%E8%B4%A2%E4%BA%A7%E5%93%81%EF%BC%9F%E8%BF%99%E9%87%8C%E6%9C%89/"/>
      <url>/2019/07/18/%E7%A8%B3%E8%B5%9A%E4%B8%8D%E8%B5%94%E7%9A%84%E7%90%86%E8%B4%A2%E4%BA%A7%E5%93%81%EF%BC%9F%E8%BF%99%E9%87%8C%E6%9C%89/</url>
      
        <content type="html"><![CDATA[<h2><span id="什么是国债逆回购">什么是国债逆回购</span></h2><p>国债逆回购，就是需要用钱的企业，把他的国债，作为抵押物，抵押给你，来问你借钱。</p><p>国债逆回购为什么稳赚不赔<br><a id="more"></a><br>国债，是由国家<br>政府发行的债券。</p><p>国债逆回购有国债作为抵押。即使到时候企业还不上钱，也有国债保证你不会亏钱。</p><h2><span id="国债逆回购如何操作">国债逆回购如何操作</span></h2><p>两步:开通股票账户和购买份额。</p><p>购买国债逆回购的地方，一共两个:上交所和深交所。</p><p>国债逆回购期限是固定的，如: 1天、2天、3天、4天、7天、14天、28天、91天和182天等9个品种。</p><p>不同期限的品种，收益率不同。</p><p>对于国债逆回购来说，你的买入，其实就意味着你把钱借给了对方企业，所以屏幕跳出的是“借出”，而不是买入。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最适合工薪族的懒人基金</title>
      <link href="/2019/07/18/%E6%9C%80%E9%80%82%E5%90%88%E5%B7%A5%E8%96%AA%E6%97%8F%E7%9A%84%E6%87%92%E4%BA%BA%E5%9F%BA%E9%87%91/"/>
      <url>/2019/07/18/%E6%9C%80%E9%80%82%E5%90%88%E5%B7%A5%E8%96%AA%E6%97%8F%E7%9A%84%E6%87%92%E4%BA%BA%E5%9F%BA%E9%87%91/</url>
      
        <content type="html"><![CDATA[<h2><span id="什么是基金">什么是基金</span></h2><p>基金，就是基金公司雇佣一个基金经理，用你的钱，来帮你做投资。<br><a id="more"></a><br>按照基金经理不同的投资理念，基金可以分为主动型基金和被动型基金。</p><h3><span id="主动型基金的缺点">主动型基金的缺点</span></h3><h4><span id="1过于依赖基金经理">1.过于依赖基金经理</span></h4><p>主动型基金，完全依靠基金经理，如果基金经理的投资水平不高，或者判断失误，容易亏损。</p><h4><span id="2交易成本偏高">2.交易成本偏高</span></h4><p>主动型基金的各项手续费较高，这些会拉低你的实际收益。</p><h3><span id="被动型基金的优点">被动型基金的优点</span></h3><p>被动型基金又称指数基金(如上证500、沪深300)。</p><h4><span id="1被动型基金管理费用低">1.被动型基金管理费用低</span></h4><h4><span id="2被动型基金的股票一般比较优质">2.被动型基金的股票一般比较优质</span></h4><h4><span id="3被动型基金能把人性弱点的负面影响降到最低">3.被动型基金能把人性弱点的负面影响降到最低</span></h4><h3><span id="基金定投的优点">基金定投的优点</span></h3><h4><span id="1减少你的投资压力">1.减少你的投资压力</span></h4><h4><span id="2分散你的投资成本降低风险">2.分散你的投资成本，降低风险</span></h4><h4><span id="3帮你强制储蓄资金">3.帮你强制储蓄资金</span></h4>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单三招，看清理财产品真面目</title>
      <link href="/2019/07/18/%E7%AE%80%E5%8D%95%E4%B8%89%E6%8B%9B%EF%BC%8C%E7%9C%8B%E6%B8%85%E7%90%86%E8%B4%A2%E4%BA%A7%E5%93%81%E7%9C%9F%E9%9D%A2%E7%9B%AE/"/>
      <url>/2019/07/18/%E7%AE%80%E5%8D%95%E4%B8%89%E6%8B%9B%EF%BC%8C%E7%9C%8B%E6%B8%85%E7%90%86%E8%B4%A2%E4%BA%A7%E5%93%81%E7%9C%9F%E9%9D%A2%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2><span id="理财产品可分为如下三类">理财产品可分为如下三类</span></h2><h3><span id="收利息的产品">收利息的产品</span></h3><p>原理:通过把钱借给别人，获得收益。</p><p>这类产品主要包括:银行存款、P2P、国债、企业债等。</p><h3><span id="做买卖的产品">做买卖的产品</span></h3><p>原理，通过购买资产，赚得收益。</p><p>这类产品主要包括:股票、房子、黄金、外汇等。</p><h3><span id="雇人投资的产品">雇人投资的产品</span></h3><p>原理:通过花钱雇佣专业的投资人士，来帮你做投资，获得收益。</p><p>这类产品主要包括:基金公司发行的基金、银行发行的理财产品、证券公司发现的券商集合理财计划和信托公司发行的信托理财产品等。<br><a id="more"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为你的财富贴上护身符</title>
      <link href="/2019/07/18/%E4%B8%BA%E4%BD%A0%E7%9A%84%E8%B4%A2%E5%AF%8C%E8%B4%B4%E4%B8%8A%E6%8A%A4%E8%BA%AB%E7%AC%A6/"/>
      <url>/2019/07/18/%E4%B8%BA%E4%BD%A0%E7%9A%84%E8%B4%A2%E5%AF%8C%E8%B4%B4%E4%B8%8A%E6%8A%A4%E8%BA%AB%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2><span id="社会保险">社会保险</span></h2><p>简称”社保”,包括医疗保险、失业保险、养老保险、工伤保险、生育保险。</p><p>医疗保险能够提供的，是基本医疗需求保障，虽然必不可少，但是作用十分有限，仍旧需要商业保险作为补充。<br><a id="more"></a></p><h2><span id="商业保险">商业保险</span></h2><p>商业保险包括四大类:重疾险、意外险、医疗险和寿险。</p><p>(1)重疾险,得了某些重大疾病，能够拿到的理赔金;</p><p>(2)意外险，受到意外伤害，造成了身故或者残疾时，而赔付的费用;</p><p>(3)医疗险，能够报销看病而产生的医疗费用;</p><p>(4)寿险，当事人不幸身故时，指定的受益人可以一次性拿到一笔理赔金;</p><h2><span id="配置保险的2个原则">配置保险的2个原则</span></h2><p>第一个原则:先保障，后理财</p><p>保障型保险和理财险保险应该分开买，要先买保障型，再买理财型。</p><p>第二个原则:先大人，后小孩</p><p>应该先保障大人，后保障小孩，因为大人才是家中最重要的收入来源。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复利</title>
      <link href="/2019/07/18/%E5%A4%8D%E5%88%A9/"/>
      <url>/2019/07/18/%E5%A4%8D%E5%88%A9/</url>
      
        <content type="html"><![CDATA[<h2><span id="什么是复利">什么是复利</span></h2><p>复利是指一笔资金除本金产生利息外，在下一个计息周期内，以前各计息周期内产生的利息也计算利息的计息方法。</p><h2><span id="单利和复利的区别是什么">单利和复利的区别是什么</span></h2><p>主要区别是利息是否参与计算。</p><h2><span id="复利的神奇之处">复利的神奇之处</span></h2><p>在刚开始的时候复利效应是很微小的、不易察觉的，但当发展到一定阶段就会产生非常惊人的效果。</p><h2><span id="影响复利的因素有哪些">影响复利的因素有哪些</span></h2><p>(1)本金;</p><p>(2)收益率;</p><p>(3)时间</p><h2><span id="复利的正向与负向影响">复利的正向与负向影响</span></h2><p>正向影响:随着时间，越到后面收益越高。</p><p>反向影响:通货膨胀。<br><a id="more"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2张表，轻松搞定你的收入问题</title>
      <link href="/2019/07/18/2%E5%BC%A0%E8%A1%A8%EF%BC%8C%E8%BD%BB%E6%9D%BE%E6%90%9E%E5%AE%9A%E4%BD%A0%E7%9A%84%E6%94%B6%E5%85%A5%E9%97%AE%E9%A2%98/"/>
      <url>/2019/07/18/2%E5%BC%A0%E8%A1%A8%EF%BC%8C%E8%BD%BB%E6%9D%BE%E6%90%9E%E5%AE%9A%E4%BD%A0%E7%9A%84%E6%94%B6%E5%85%A5%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2><span id="资产负债表">资产负债表</span></h2><p>资产负债表，由3个要素组成，分别为资产、负债、所有者权益。<br><a id="more"></a><br>资产，可以理解为能够换钱的东西(资产=负债+所有者权益)</p><p>负债，欠别人的钱</p><p>所有者权益,相当于真正属于你的钱(用公式来计算，所有者权益=资产-负债)。</p><h2><span id="收入支出表">收入支出表</span></h2><p>关于收入支出表，对于这个我经验比较丰富，因为我从上学的时候就开始记录了。之所以记录，主要原因是因为我想知道自己的钱到底流向哪呢，这是上学的时候，工作后，主要想更合理的规划自己的财务，规划的前提不仅仅需要具备一定的财务知识，还有就是搞清自己的收入和支出情况。</p><p>重点主要看两个:</p><p>(1)收入是大否大于支出</p><p>只有当你的收入大于支出时，你才会有更多的选择余地(选择更多，可以选择买书学习/知识付费、买房/买车、带着另一半去旅行等)。</p><p>否则入不敷出，一切都将是虚无。</p><p>(2)看看这个月的支出，有多少成为资产，有多少成为了消费</p><p>比如我现在会将自己一部分钱定存银行(利息虽然不算太高，但是还是有收益的)，另外一部分买稳定的基金(比银行收益要高点)。</p><p>支出的话，我觉得每个人一定要养成一种良好的消费习惯。</p><p>比如我比较喜欢买好的衣服(以名牌为主)，觉得比较耐穿，通常能穿个两三年的，太差的衣服，不是褪色就是质感问题(让人很不爽),衣服一般不坏/不破，通常我不会买的，因为觉得够穿就行，买的太多放在橱柜里，反而占资源浪费。</p><p>再比如18年的时候我犯了一个错误就是看京东上书搞折扣，买了一大堆书，最后看的也不是特别多，仅仅因为贪便宜或心血来潮导致的，个人强烈建议，不管是生活或者工作、投资也好，切不可因为一时心血来潮做出任何决定，因为这样一来后果也将十分严重。</p><p>问题如下:</p><p>如果给你100元，并同时给你2个小时的时间，你能赚到多少钱?</p><p>我的回答如下:</p><p>(1)保守做法。将这100元存起来，至少能保证不是亏的。</p><p>(2)学习。100元买一个按时续费的阿里云高配置服务器，在保证网络信号和带宽好的前提下，利用两个小时时间去专注学习，100元过了两个小时后也许会减少不少，但是这两个小时可以让你实践不同的想法，错误或对的，都能够对你自身的成长有很大帮助。</p><p>(3)买虚拟货币。如买入比特币或ETC，或者其它虚拟币等，两个小时(在这个时间范围，选择某一段进行买入，然后在某一段时间进行抛出，通常两种结果，要么赚了十几块或者几块，要么亏了几十块钱或者亏了几块。</p><p>思考题如下:</p><p>努力去思考一下你可以买什么样的资产?可以去如何提升自己?</p><p>关于资产方面的话，个人想法如下:</p><p>第一、可以买保险应急于不时之需。</p><p>第二、可以买一些保险的基金、债券之类的。</p><p>第三、买房/买车，对于买房我的想法是，如果我买了有比较长的时间不住，这个房子租出去能够给我带来多少收入，如果收入足以等于我一年的生活开支，那么是比较值得的。比如像北上广深买房并出租出去的，然后自己租公司附近的房子，这样的人也比较多。对于买车，看个人情况，如果经常出去跑业务的话，这是刚需，毕竟自己开车，很多时间是掌握在自己手里，如果是交通工具，如高铁、公交、地铁等，这些时间都是定向的。</p><p>第四、定存还是很有必要。定存不等于存定期，而是每个月某天定期存入一笔钱，这笔钱不到万不得已绝对不能动。</p><p>关于如何提升自己，个人想法如下:</p><p>(1) 多读书多学习多和前辈或同辈们学习，提高自己的视野和知识面(可以以自己专业为主，多看一些专业相关的书籍，其他书籍可以为辅,至于人际交往方面的话，这个我觉得与不同层次的人接触，还有有好处的)。</p><p>(2) 提高自己的专业技能(至于如何提高，以研发工程师为例，多看书多实践多思考)。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理财是人人都需要的底层能力</title>
      <link href="/2019/07/18/%E7%90%86%E8%B4%A2%E6%98%AF%E4%BA%BA%E4%BA%BA%E9%83%BD%E9%9C%80%E8%A6%81%E7%9A%84%E5%BA%95%E5%B1%82%E8%83%BD%E5%8A%9B/"/>
      <url>/2019/07/18/%E7%90%86%E8%B4%A2%E6%98%AF%E4%BA%BA%E4%BA%BA%E9%83%BD%E9%9C%80%E8%A6%81%E7%9A%84%E5%BA%95%E5%B1%82%E8%83%BD%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<h2><span id="我们为什么要理财">我们为什么要理财?</span></h2><p>钱不值钱，最直接体现是通货膨胀。</p><p>记得我小学的时候，那个时候1元就可以买一两粉，通常2元的粉(也就是二两)就足以吃的很饱了。 记得那个时候每天的一天的开销是3元，2元早餐，1元零食，那个时候是走读的，爸妈做的是卖菜生意，没有时间做早饭，早餐一般都自己买，中餐回家吃。那个时候5毛钱就可以分成三份，3毛钱买个小蛋筒，1毛钱买个棒棒糖(那种比较小的)，另外一毛钱买那种长长的辣条吃。上述我所描绘的是08年之前，之后钱就开始慢慢变的不值钱了。<br><a id="more"></a><br>通货膨胀对如下两种人很不友好:</p><p>(1)把钱攥在手里，或者存进银行;</p><p>(2)靠死工资过日子的人;</p><p>理财有哪些好处?</p><p>(1)跑赢通货膨胀;</p><p>(2)带来被动收入(不用起早贪黑或早九晚六的工作来获取收入，而是通过钱生钱的方式拿到收入)</p><h2><span id="我们都有哪些理财误区">我们都有哪些理财误区?</span></h2><p>误区如下:</p><p>(1)觉得没钱，没办法理财</p><p>理财，不仅仅是投资，它包括你的收支计划、养老安排、子女教育、甚至是税务筹划等。它不是一个简单的工具，更多的是一种思维习惯和生活方式。</p><p>作为一个成长经历较为丰富的90后，我经历过大手大脚花钱，导致月月光，也经历过起早贪黑赚血汗钱。不过我很庆幸，那些日子仅仅只是社会短暂的实践。</p><p>我个人认为，撇开上面的收支计划、养老安排、子女教育不说，从个人的角度来看，存钱十分有必要，一方面，假如你被解雇了，至少可以支撑一段时间而不用啃老(我个人最看不起的就是那些自己不努力赚钱，不量力而行，追求外表光鲜靓丽，实则月月光还问父母要钱的人)；另一方面，当攒钱攒到一定的时候(自己生活开支足够(合理支出)，还可以孝顺父母，我觉得每个人是可以达到的),这时你可以学习投资理财相关的，并适当做做试验，又或者是你有什么计划(学习或旅行等)都可以立即实施。归纳一句话: 就是不用一时为生活所迫和做自己想做的事情/学自己想学的东西。</p><p>(2)把所有的钱，都拿去做投资</p><p>俗话说:鸡蛋不要放在一个篮子里。</p><p>以我个人来说， 定期存，每个月我会定期存入一笔钱(那笔钱，通常是不能动的，主要用于未来的用途如买房、结婚、医疗、失业支撑等)，这是第一笔；</p><p>个人开支，我有记账的习惯，每个月会对自己的收支做一个汇总，现在有很多软件可以做这些事情，很方便，如我经常用支付宝，微信用的不是太多，支付宝上面的账单管理就挺不错的，个人开支一般都是定额，主要用于吃、穿、行、娱乐、学习(买书、知识付费、其它)等，这是第二笔;</p><p>应急开支，这笔开支，主要有两个用途，一方面是当个人开支超标的，这个应急开支作为支撑，另一方面，用于有些朋友因为某种原因没有钱了，我会结合实际情况，借给他们一部分。有一点我比较庆幸，就是目前的应急开支，主要用于借给朋友比较多，个人超标也不是没有，很少，这是第三笔;</p><p>投资开支，这笔开支，主要用于玩股票、虚拟货币、风险较高的基金，就目前情况，股票、基金暂时没有投，因为相关的知识不懂，目前仅仅投入虚拟货币，投入了一笔小钱，这笔小钱目前总的还说赚了，这一点我比较庆幸，这是第四笔。</p><p>(3)理财没学懂，急着去上手</p><p>当初我投虚拟货币的时候，对此就不是特别明白，也是跟着同事一起投，第一次投的不是特别多，第二次慢慢就多了，因为对此也相对了解了很多，当然了，不敢盲目投入一大笔钱进去。这种虚拟货币相对比较稳定。不过在投入第二笔钱进去之后，我在此过程中也利用闲暇的时间学习一下相关的知识。</p><p>今日总结，如上所述。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js之判断字符串中是否包含某个字符串</title>
      <link href="/2019/07/17/Node-js%E4%B9%8B%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E6%9F%90%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2019/07/17/Node-js%E4%B9%8B%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E6%9F%90%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>server.txt内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">阿里云服务器</span><br></pre></td></tr></table></figure></p><p>关于应用场景，就不多说了，字符串不管是前端开发人员，还是后端开发人员，都是要与其经常打交道的。</p><p>test.js(node.js代码，只要被本地装了node.js环境，直接可通过node test.js运行看效果):<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">var result = fs.readFileSync(&quot;./server.txt&quot;);</span><br><span class="line"></span><br><span class="line">console.log(&quot;result:&quot;+result);</span><br><span class="line"></span><br><span class="line">if(result.indexOf(&quot;阿里云服务器&quot;) != -1)&#123;</span><br><span class="line"></span><br><span class="line">console.log(&quot;ok&quot;);</span><br><span class="line">&#125; else&#123;</span><br><span class="line"></span><br><span class="line">console.log(&quot;no&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。如果要检索的字符串值没有出现，则该方法返回 -1。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(result.toString().search(&quot;1&quot;) != -1)&#123;</span><br><span class="line">console.log(&quot;ok&quot;);</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">console.log(&quot;no&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。如果没有找到任何匹配的子串，则返回 -1。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var reg = RegExp(/阿里云/);</span><br><span class="line">if(result.toString().match(reg))&#123;</span><br><span class="line">    console.log(&quot;ok&quot;);      </span><br><span class="line">&#125;else&#123;</span><br><span class="line">console.log(&quot;no&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var reg = RegExp(/阿里云/);</span><br><span class="line">if(reg.test(result))&#123;</span><br><span class="line"></span><br><span class="line">console.log(&quot;ok&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">console.log(&quot;no&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//test() 方法用于检索字符串中指定的值。返回 true 或 false。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var reg = RegExp(/阿里云/);</span><br><span class="line">if(reg.exec(result))&#123;</span><br><span class="line">   console.log(&quot;ok&quot;);      </span><br><span class="line">&#125;else&#123;</span><br><span class="line">console.log(&quot;no&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//exec() 方法用于检索字符串中的正则表达式的匹配。返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</span><br></pre></td></tr></table></figure></p><p>本文主要参考资料如下:<br><a href="https://blog.csdn.net/qq_41033913/article/details/90754507" target="_blank" rel="noopener">js 判断字符串中是否包含某个字符串</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EduSoho之插件开发(脚手架搭建)</title>
      <link href="/2019/07/17/EduSoho%E4%B9%8B%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91-%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/07/17/EduSoho%E4%B9%8B%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91-%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>本文主要参考官方文档，地址为:<a href="http://developer.edusoho.com/plugin/start.html" target="_blank" rel="noopener">http://developer.edusoho.com/plugin/start.html</a></p><p>插件开发的目的，一方面为了更好的扩展，另外一方面为了更好的维护。</p><p>关于这方面的例子，如wordpress、vscode等。至于EduSoho的插件开发是否也像wordpress、vscode那样无缝集成且学习成本并不是特别高，目前刚刚开始写，不好妄下结论。</p><a id="more"></a><h2><span id="创建插件初始目录结构">创建插件初始目录结构</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app/console plugin:create Example</span><br></pre></td></tr></table></figure><p><img src="/2019/07/17/EduSoho之插件开发-脚手架搭建/01.png" alt="图一"></p><p>使用此命令会在plugins目录下创建名为Example的插件初始目录结构,目录结构图如下:</p><p><img src="/2019/07/17/EduSoho之插件开发-脚手架搭建/02.png" alt="图二"></p><h2><span id="注册插件">注册插件</span></h2><p>注册插件两种方式：</p><p>第一种:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app/console plugin:register Example</span><br></pre></td></tr></table></figure></p><p>第二种:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app/console plugin:register Example --without-database</span><br></pre></td></tr></table></figure></p><p>开发模式下，建议使用–without-database选项。您可在执行此命令之后，使用：bin/phpmig migrate命令来创建数据库，这样数据库的变更就纳入了phpmig的管理，方便开发过程中调整数据库。</p><p>插件注册后，即可在后台-&gt;教育云-&gt;ES应用-&gt;已购项目中查看,如图:</p><p><img src="/2019/07/17/EduSoho之插件开发-脚手架搭建/03.png" alt="图三"></p><h2><span id="卸载插件">卸载插件</span></h2><p>当你不需要该插件时，可以卸载它，命令如下(主要作用:卸载插件，删除数据库及插件源码目录):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app/console plugin:remove Example --with-deleting-database --with-deleting-source</span><br></pre></td></tr></table></figure></p><p>除此之外还有两种:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app/console plugin:remove Example //卸载插件，默认不删除数据库</span><br><span class="line"></span><br><span class="line">app/console plugin:remove Example --with-deleting-database //卸载插件并删除数据库</span><br></pre></td></tr></table></figure></p><p>补充说明:这个删除数据库是指删除数据库特定的表中的列信息，而不是等同于删库跑路。</p>]]></content>
      
      
      
        <tags>
            
            <tag> EduSoho </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lnmp环境脚本快速搭建</title>
      <link href="/2019/07/15/lnmp%E7%8E%AF%E5%A2%83%E8%84%9A%E6%9C%AC%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/07/15/lnmp%E7%8E%AF%E5%A2%83%E8%84%9A%E6%9C%AC%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2><span id="进入lnmp官网">进入lnmp官网</span></h2><p><a href="https://lnmp.org/download.html" target="_blank" rel="noopener">https://lnmp.org/download.html</a></p><p>如图:<br><img src="/2019/07/15/lnmp环境脚本快速搭建/01.png" alt="图一"><br><a id="more"></a></p><h2><span id="进入linux服务器并执行wget命令下载">进入Linux服务器并执行wget命令下载</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://soft.vpser.net/lnmp/lnmp1.6-full.tar.gz</span><br></pre></td></tr></table></figure><h2><span id="解压该压缩包">解压该压缩包</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf lnmp1.6-full.tar.gz</span><br></pre></td></tr></table></figure><h2><span id="执行安装脚本">执行安装脚本</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd lnmp1.6-full</span><br><span class="line">sh/bash install.sh</span><br></pre></td></tr></table></figure><p><img src="/2019/07/15/lnmp环境脚本快速搭建/02.png" alt="图二"></p><p>执行脚本后，会有让你选择对应的mysql版本和php版本，只需输入对应的序列号即可</p><h2><span id="安装成功标志">安装成功标志</span></h2><p><img src="/2019/07/15/lnmp环境脚本快速搭建/03.png" alt="图三"></p><p>访问IP对应的效果图如下:<br><img src="/2019/07/15/lnmp环境脚本快速搭建/04.png" alt="图四"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能语音交互之简单实例</title>
      <link href="/2019/07/07/%E6%99%BA%E8%83%BD%E8%AF%AD%E9%9F%B3%E4%BA%A4%E4%BA%92%E4%B9%8B%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/"/>
      <url>/2019/07/07/%E6%99%BA%E8%83%BD%E8%AF%AD%E9%9F%B3%E4%BA%A4%E4%BA%92%E4%B9%8B%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>本次用到的是阿里云的智能语音交互，参考文档地址如下:<a href="https://help.aliyun.com/product/30413.html?spm=5176.10695662.1157759.3.3ffb16e40gDXyf" target="_blank" rel="noopener">https://help.aliyun.com/product/30413.html?spm=5176.10695662.1157759.3.3ffb16e40gDXyf</a><br><a id="more"></a><br>本次示例代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">&lt;div class=&quot;col-xs-5&quot;&gt;</span><br><span class="line">&lt;textarea id=&quot;content&quot; rows=&quot;30&quot; cols=&quot;80&quot; placeholder=&quot;请输入文本内容&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;col-xs-2&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;col-xs-5&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Xiaoyun&quot;&gt;标准女声(支持中文及中英文混合场景) &amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Xiaogang&quot;&gt;标准男声(支持中文及中英文混合场景)&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Xiaomeng&quot;&gt;标准女声(支持中文及中英文混合场景) &amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Xiaowei&quot;&gt;标准男声 (支持中文及中英文混合场景)&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Ruoxi&quot;&gt;温柔女声(支持中文及中英文混合场景) &amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Siqi&quot;&gt;温柔女声(支持中文及中英文混合场景)&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Sijia&quot;&gt;标准女声(支持中文及中英文混合场景) &amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Sicheng&quot;&gt;标准男声(支持中文及中英文混合场景)&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Aiqi&quot;&gt;温柔女声(支持中文及中英文混合场景) &amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Aijia&quot;&gt;标准女声(支持中文及中英文混合场景)&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Aida&quot;&gt;标准男声(支持中文及中英文混合场景) &amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Ninger&quot;&gt;标准女声(仅支持纯中文场景)&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Ruilin&quot;&gt;标准女声(仅支持纯中文场景) &amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Amei&quot;&gt;甜美女声(支持中文及中英文混合场景)&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Xiaoxue&quot;&gt;温柔女声(支持中文及中英文混合场景) &amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Siyue&quot;&gt;标准女声(支持中文及中英文混合场景)&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Aixia&quot;&gt;亲和女声(支持中文及中英文混合场景) &amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Aimei&quot;&gt;甜美女声(支持中文及中英文混合场景)&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Aiyu&quot;&gt;自然女声(支持中文及中英文混合场景) &amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Aiyue&quot;&gt;温柔女声(支持中文及中英文混合场景)&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Aijing&quot;&gt;严厉女声(支持中文及中英文混合场景) &amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Xiaomei&quot;&gt;甜美女声(支持中文及中英文混合场景)&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Yina&quot;&gt;浙普女声(仅支持纯中文场景) &amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Sijing&quot;&gt;严厉女声(仅支持纯中文场景)&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Sitong&quot;&gt;儿童音(仅支持纯中文场景) &amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Xiaobei&quot;&gt;萝莉女声(仅支持纯中文场景)&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Aibao&quot;&gt;萝莉女声(仅支持纯中文场景) &amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Halen&quot;&gt;英音女声(仅支持英文场景)&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Harry&quot;&gt;英音男声(仅支持英文场景) &amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Wendy&quot;&gt;英音女声(仅支持英文场景)&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;William&quot;&gt;英音男声(仅支持英文场景) &amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Olivia&quot;&gt;英音女声(仅支持英文场景)&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;test&quot; value=&quot;Shanshan&quot;&gt;粤语女声(支持标准粤文（简体）及粤英文混合场景)</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;播放&quot; id=&quot;bf&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe id=&quot;iframe&quot; style=&quot;display:none;&quot;&gt;</span><br><span class="line">&lt;/iframe&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(&quot;#bf&quot;).click(function() &#123;</span><br><span class="line">var text = $(&quot;#content&quot;).val();</span><br><span class="line"></span><br><span class="line">var voice = $(&apos;input[name=&quot;test&quot;]:checked&apos;).val();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iframe.src = &quot;https://nls-gateway.cn-shanghai.aliyuncs.com/stream/v1/tts?appkey=&#123;appkey&#125;&amp;token=&#123;token&#125;&amp;text=&quot; + text + &quot;&amp;format=wav&amp;sample_rate=16000&amp;voice=&quot; + voice;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>代码中的{appkey}和{token}需要替换成自己的。具体可参考上述提到的官方文档。</p><p>代码效果如图:<br><img src="/2019/07/07/智能语音交互之简单实例/01.png" alt=""></p><p>在文本框中输入任意的文字，并选择对应的checkbox，然后点击播放就能有对应类型的语音。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Edusoho之X-Auth-Token</title>
      <link href="/2019/07/02/Edusoho%E4%B9%8BX-Auth-Token/"/>
      <url>/2019/07/02/Edusoho%E4%B9%8BX-Auth-Token/</url>
      
        <content type="html"><![CDATA[<p>昨天这篇文章<a href="https://developers-youcong.github.io/2019/07/01/Edusoho%E4%B9%8BBasic-Authentication/">Edusoho之Basic Authentication</a>提到了X-Auth-Token。今天我主要讲的是Edusoho之X-Auth-Token的请求API方式。</p><p>至于为什么建议不要用HTTP Basic Authentication，上面这篇文章已经说清楚了。</p><p>不过我还是要强调一下这一点。因为本篇文章就是着重说这个的。下面进入正文:<br><a id="more"></a><br>还是以Edusoho对外API为例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl-X POST -H &quot;Accept:application/vnd.edusoho.v2+json&quot; -H &quot;X-Auth-Token: nzGrtcsDsrFzrId2hoLYfUafskRJ0pb9&quot; http://demo.edusoho.com/api/tokens</span><br></pre></td></tr></table></figure></p><p>初看时，我不太明白这个X-Auth-Token是如何产生的，为此我通过搜索引擎搜了又搜，仍然找不到我想要的答案。</p><p>随后我转念一想，也许Http Basic Authentication与X-AUTH-Token存在某种联系。</p><p>于是我用Http Basic Authentication的方式请求获取对应的数据后，如图:<br><img src="/2019/07/02/Edusoho之X-Auth-Token/01.png" alt="图一"></p><p>然后我将这个token复制，随后再使用X-AUTH-TOKEN的方式请求其它Edusoho API，发现我的猜想果然是对的(成功请求并获取对应的数据)，如图:<br><img src="/2019/07/02/Edusoho之X-Auth-Token/02.png" alt="图二"></p><p>如果要说为什么要使用X-Auth-Token这种方式请求需要认证的接口数据，我经过测试接口对比(使用Http Basic Authentication的方式和X-Auth-Token方式)，得出的结论如下:<br>正如一些博文的作者所倡导的那样，之所以不建议使用Basic Authentication的方式是因为对于需要认证的接口，每次请求都需要携带用户名和密码(base64加密的，同时也可以解密，存在极大的安全风险)。而X-AUTH-TOKEN就显得安全的多，因为只需第一次这样做，随后拿到对应的token后，就不必这样做了。而且这个token并不是base64，至于是什么我也不知道(我用了在线加解密网站解密(acs,des等)，都发现解密不了)，由此可见X-AUTH-TOKEN还是要比HTTP Basic Authentication这种认证方式要安全的多。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Edusoho </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Symfony之入门学习</title>
      <link href="/2019/07/02/Symfony%E4%B9%8B%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/07/02/Symfony%E4%B9%8B%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>最近因业务需要，主要针对Edusoho进行二次开发。但是对于Symfony，我并不熟悉，我所了解的是，它的那套与我在Java中常用的开发模式MVC，本质上并不多大差异，就是所使用的语言不一样而已。下面开始Symfony从无到有的脚手架搭建。<br><a id="more"></a><br>本文中需要compoer和php，</p><p>关于composer下载和安装(windows)，可参考该链接:<br><a href="https://getcomposer.org/download/" target="_blank" rel="noopener">https://getcomposer.org/download/</a></p><p>关于php下载和安装，可参考该链接:<br><a href="https://www.php.net/" target="_blank" rel="noopener">https://www.php.net/</a></p><h2><span id="安装和设置symfony框架请确保网速足够好需要下载symfony很多库">安装和设置Symfony框架(请确保网速足够好，需要下载Symfony很多库)</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project symfony/website-skeleton project_name</span><br></pre></td></tr></table></figure><p>或者是如果你需要构建微服务，可执行该命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project symfony/skeleton my-project</span><br></pre></td></tr></table></figure></p><p>框架搭建成功,如图:<br><img src="/2019/07/02/Symfony之入门学习/01.png" alt="图一"></p><p>项目结构，如图:<br><img src="/2019/07/02/Symfony之入门学习/02.png" alt="图二"></p><h2><span id="安装web服务器软件包">安装Web服务器软件包</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require --dev symfony/web-server-bundle</span><br></pre></td></tr></table></figure><h2><span id="运行symfony应用程序">运行Symfony应用程序</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php bin/console server:start(默认端口为8000)</span><br></pre></td></tr></table></figure><p>或者也可以指定端口，如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php bin/console server:start 0.0.0.0:8050</span><br></pre></td></tr></table></figure></p><p>效果图(运行正常如下):<br><img src="/2019/07/02/Symfony之入门学习/03.png" alt="图三"></p><h2><span id="创建页面路由">创建页面路由</span></h2><p>通常是在Controller(controller目录)里面创建</p><p>CompanyController.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace App\Controller;</span><br><span class="line"></span><br><span class="line">use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;</span><br><span class="line">use Symfony\Component\Routing\Annotation\Route;</span><br><span class="line"></span><br><span class="line">class CompanyController extends AbstractController</span><br><span class="line">&#123;</span><br><span class="line">/**</span><br><span class="line">     * Matches /about exactly</span><br><span class="line">     *</span><br><span class="line">     * @Route(&quot;/about&quot;, name=&quot;about&quot;)</span><br><span class="line">     */</span><br><span class="line">    public function about()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;render(&apos;blog/about.html.twig&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>模板语言(通常放在template目录下):<br>about.html.twing<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;About Me&lt;/h1&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">alert(&quot;hello world&quot;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>配置该路由就不需要每次都要重复配置:<br>编辑该文件 config\routes\annotations.yaml<br>内容修改为如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">controllers:</span><br><span class="line">    resource: ../../src/Controller/</span><br><span class="line">    type: annotation</span><br></pre></td></tr></table></figure></p><p>最后执行如下命令，相当于重新启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php bin/console server:start 0.0.0.0:8050</span><br></pre></td></tr></table></figure></p><p>访问:<a href="http://localhost:8050/about" target="_blank" rel="noopener">http://localhost:8050/about</a> ， 效果图如下:</p><p><img src="/2019/07/02/Symfony之入门学习/04.png" alt="图四"></p><p>本次示例代码，我已经放到我的github，欢迎朋友们git clone或者提相关的issue。</p><p>Symfondy示例代码:<a href="https://github.com/developers-youcong/SymfonyLearning" target="_blank" rel="noopener">https://github.com/developers-youcong/SymfonyLearning</a></p><p>关于Symfony学习可参考资料如下:<br><a href="https://symfony.com/doc/current/index.html" target="_blank" rel="noopener">Symfony官方文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Symfony </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Edusoho之Basic Authentication</title>
      <link href="/2019/07/01/Edusoho%E4%B9%8BBasic-Authentication/"/>
      <url>/2019/07/01/Edusoho%E4%B9%8BBasic-Authentication/</url>
      
        <content type="html"><![CDATA[<p>通过如下代码，可以正常请求并获取对应的数据:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -H &quot;Accept:application/vnd.edusoho.v2+json&quot; -H &quot;Authorization: Basic dGVzdDJlZHVvc2hvOjEyMzQ1Ng==&quot; http://demo.edusoho.com/api/tokens</span><br></pre></td></tr></table></figure></p><p>但是我想将其中的请求地址替换成我自己的域名，却不行。</p><p>由于Edusoho开发文档并未对其详说，于是我便提相关的issue。</p><p>我提的issue如下:<br><a href="https://github.com/edusoho/edusoho/issues/65" target="_blank" rel="noopener">https://github.com/edusoho/edusoho/issues/65</a><br><a id="more"></a></p><p>最后这个问题，还是解决了。本次问题的原因还是我对于Http Basic Authentication(又称HTTP基本认证)缺乏了解，不然早就可以解决了。</p><p>本次解决主要参考这篇文章<a href="https://www.cnblogs.com/yuqiangli0616/p/9389273.html" target="_blank" rel="noopener">HTTP Basic Authentication认证</a></p><p>这篇文章让我知道Authorization对于的值到底是什么意思。之前之所以得不到预想的结果就是因为不理解不知道。<br>当我知道dGVzdDJlZHVvc2hvOjEyMzQ1Ng，对应的实际上是用户名:密码(使用Base64加密))后，一切问题皆迎刃而解。</p><p>最后通过在线Base64加密<a href="http://tool.oschina.net/encrypt?type=3" target="_blank" rel="noopener">http://tool.oschina.net/encrypt?type=3</a><br>将对应用户名:密码这种格式进行加密后成功，再次请求对应的接口，如图所示:</p><p><img src="/2019/07/01/Edusoho之Basic-Authentication/01.png" alt="图一"></p><p>记住加密一定要按照如下格式：<br>格式=&gt; 用户名:密码(中间加冒号)<br><img src="/2019/07/01/Edusoho之Basic-Authentication/02.png" alt="图二"></p><p>请求成功获取token，拿到token后，这时你就可以玩玩其他的接口(建议对Edusoho二次开发的朋友们可以试试，非二次开发的朋友也可以借鉴它的这种接口鉴权方式，然后为其所用)。</p><p>Edusoho API地址为:<a href="http://developer.edusoho.com/api" target="_blank" rel="noopener">http://developer.edusoho.com/api</a></p><p>关于HTTP常用的场景，如图所示(这种就比较常见了):<br><img src="/2019/07/01/Edusoho之Basic-Authentication/03.png" alt="图二"></p><p>相信这种场景，大家都不陌生。</p><p>Http常用认证如下五种:</p><p>Http Basic Auth</p><p>OAuth</p><p>Cookie Auth</p><p>Token Auth</p><p>基于JWT的Token认证机制</p><p>认证的根本目的就是让用户访问更加安全，防止不法分子窃取用户名和密码做一些违法的事情。</p><p>关于上面的认证，后续用到后，会有一个详解。</p><p>顺便补充一点，实际开发系统并不建议使用Http Basic Auth这种方式，因为它简单(每次请求API都提供用户的username和password)，参数中携带如此敏感信息，有着极大的暴露风险，所以在生产环境中被使用的越来越少。</p><p>参考资料如下:<br><a href="https://blog.csdn.net/ctwy291314/article/details/83275456" target="_blank" rel="noopener">HTTP 几种常用的认证机制</a><br><a href="https://www.cnblogs.com/yuqiangli0616/p/9389273.html" target="_blank" rel="noopener">HTTP Basic Authentication认证</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Edusoho </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git之fatal: Could not read from remote repository</title>
      <link href="/2019/06/30/git%E4%B9%8Bfatal-Could-not-read-from-remote-repository/"/>
      <url>/2019/06/30/git%E4%B9%8Bfatal-Could-not-read-from-remote-repository/</url>
      
        <content type="html"><![CDATA[<p>问题背景:<br>在git bash中使用hexo g -d命令进行文章发布</p><p>详细错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: Connection reset by 13.250.177.223 port 22</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line"></span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (E:\Hexo\node_modules\hexo-util\lib\spawn.js:37:17)</span><br><span class="line">    at emitTwo (events.js:126:13)</span><br><span class="line">    at ChildProcess.emit (events.js:214:7)</span><br><span class="line">    at ChildProcess.cp.emit (E:\Hexo\node_modules\cross-spawn\lib\enoent.js:40:29)</span><br><span class="line">    at maybeClose (internal/child_process.js:915:16)</span><br><span class="line">    at Socket.stream.socket.on (internal/child_process.js:336:11)</span><br><span class="line">    at emitOne (events.js:116:13)</span><br><span class="line">    at Socket.emit (events.js:211:7)</span><br><span class="line">    at Pipe._handle.close [as _onclose] (net.js:561:12)</span><br></pre></td></tr></table></figure></p><p>错误原因是因为ssh key有问题，连接不上服务器。</p><a id="more"></a><p>于是我参考如下链接，一步一步操作，最终解决了这个问题:<br><a href="https://blog.csdn.net/jingtingfengguo/article/details/51892864" target="_blank" rel="noopener">git遇到的问题之“Please make sure you have the correct access rights and the repository exists.”</a></p><p>虽然已经有了问题的解决答案，但是我觉得还是需要列举一下相关步骤，梳理一下:</p><p>1.重新在git设置一下身份的名字和邮箱<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;your@email.com&quot;</span><br></pre></td></tr></table></figure></p><p>这里的yourname必须与github的用户名一致</p><p>这里<a href="mailto:your@email.com" target="_blank" rel="noopener">your@email.com</a>必须与github登录邮箱一致</p><p>2.删除.ssh文件夹下的known_hosts文件(该文件主要作用是域名解析)</p><p>3.ssh-keygen -t rsa -C “<a href="mailto:your@email.com" target="_blank" rel="noopener">your@email.com</a>(填写github对应的邮箱)”</p><p>一路回车即可，无需输入</p><p>4.进入github设置界面</p><p><img src="/2019/06/30/git之fatal-Could-not-read-from-remote-repository/01.png" alt=""></p><p>新增SSH key将id_rsa.pub内容添加到如图中的Key上(title可任意命名):<br><img src="/2019/06/30/git之fatal-Could-not-read-from-remote-repository/02.png" alt=""></p><p>5.最后完美解决这个问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Class path contains multiple SLF4J bindings.</title>
      <link href="/2019/06/30/Class-path-contains-multiple-SLF4J-bindings/"/>
      <url>/2019/06/30/Class-path-contains-multiple-SLF4J-bindings/</url>
      
        <content type="html"><![CDATA[<p>详细错误信息如下:<br>SLF4J: Class path contains multiple SLF4J bindings.<br>SLF4J: Found binding in [jar:file:/C:/Users/eluzhu/.m2/repository/org/slf4j/slf4j-log4j12/1.7.25/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]<br>SLF4J: Found binding in [jar:file:/C:/Users/eluzhu/.m2/repository/ch/qos/logback/logback-classic/1.1.11/logback-classic-1.1.11.jar!/org/slf4j/impl/StaticLoggerBinder.class]<br>SLF4J: See <a href="http://www.slf4j.org/codes.html#multiple_bindings" target="_blank" rel="noopener">http://www.slf4j.org/codes.html#multiple_bindings</a> for an explanation.<br>SLF4J: Detected both log4j-over-slf4j.jar AND bound slf4j-log4j12.jar on the class path, preempting StackOverflowError.<br>SLF4J: See also <a href="http://www.slf4j.org/codes.html#log4jDelegationLoop" target="_blank" rel="noopener">http://www.slf4j.org/codes.html#log4jDelegationLoop</a> for more details.<br>Exception in thread “main” java.lang.ExceptionInInitializerError<br>    at org.slf4j.impl.StaticLoggerBinder.<init>(StaticLoggerBinder.java:72)<br>    at org.slf4j.impl.StaticLoggerBinder.<clinit>(StaticLoggerBinder.java:45)<br>    at org.slf4j.LoggerFactory.bind(LoggerFactory.java:149)<br>    at org.slf4j.LoggerFactory.performInitialization(LoggerFactory.java:124)<br>    at org.slf4j.LoggerFactory.getILoggerFactory(LoggerFactory.java:390)<br>    at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:340)<br>    at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:361)<br>    at com.eluzhu.sass.Application.<clinit>(Application.java:13)<br>Caused by: java.lang.IllegalStateException: Detected both log4j-over-slf4j.jar AND bound slf4j-log4j12.jar on the class path, preempting StackOverflowError. See also <a href="http://www.slf4j.org/codes.html#log4jDelegationLoop" target="_blank" rel="noopener">http://www.slf4j.org/codes.html#log4jDelegationLoop</a> for more details.<br>    at org.slf4j.impl.Log4jLoggerFactory.<clinit>(Log4jLoggerFactory.java:54)<br>    … 8 more</clinit></clinit></clinit></init></p><a id="more"></a><p>如图所示:<br><img src="/2019/06/30/Class-path-contains-multiple-SLF4J-bindings/01.png" alt="图一"></p><p>关键错误信息:Class path contains multiple SLF4J bindings.</p><p>翻译过来的意思是:类路径包含多个SLF4J绑定。</p><p>分析原因:类路径包含多个SLF4J绑定，也就是代表这有很多个SLF4J，这就表示重复了，在Maven中出现这种情况，会导致一个叫Maven冲突的玩意，主要体现jar方面的冲突。</p><p>解决办法:<br>排除即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 腾讯云 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.qcloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;cos_api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.2.4&lt;/version&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">&lt;/exclusion&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">&lt;/exclusion&gt;</span><br><span class="line">&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>使用exclusion就可以排除相关的依赖</p><p>那么为什么会出现这种情况呢？<br>是因为Maven一个重要特性，即依赖传递。依赖传递的表现是，一个maven依赖可能包含多个相关Jar，结合实际开发项目，为了实现某些特定的功能，我们需要引入特定的jar(当然了，也可以选择自己动手写一个，不过那样的话，时间成本会比较高)，特定的Jar对应特定的功能，通常一个Maven项目需要引入多个依赖(jar)。</p><p>如果你还是不太明白什么是依赖传递，如图所示(我相信图能够生动形象的体现出来):<br><img src="/2019/06/30/Class-path-contains-multiple-SLF4J-bindings/02.png" alt="图二"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java使用Jsoup之爬取博客数据应用实例</title>
      <link href="/2019/06/29/Java%E4%BD%BF%E7%94%A8Jsoup%E4%B9%8B%E7%88%AC%E5%8F%96%E5%8D%9A%E5%AE%A2%E6%95%B0%E6%8D%AE%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
      <url>/2019/06/29/Java%E4%BD%BF%E7%94%A8Jsoup%E4%B9%8B%E7%88%AC%E5%8F%96%E5%8D%9A%E5%AE%A2%E6%95%B0%E6%8D%AE%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2><span id="导入maven依赖">导入Maven依赖</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.jsoup/jsoup --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.jsoup&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;jsoup&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;version&gt;1.11.3&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="选择你要爬取网站这里我以爬取自己的博客文章为例">选择你要爬取网站(这里我以爬取自己的博客文章为例)</span></h2><h4><span id="通过浏览器进入这个网址">通过浏览器进入这个网址</span></h4><p>如<a href="https://www.cnblogs.com/youcong/" target="_blank" rel="noopener">我的博客</a></p><h4><span id="使用浏览器调试工具后面会说到这个目的">使用浏览器调试工具(后面会说到这个目的)</span></h4><p><img src="/2019/06/29/Java使用Jsoup之爬取博客数据应用实例/01.png" alt=""></p><h3><span id="编写对应的java的代码">编写对应的Java的代码</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">package cn.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.jsoup.Connection;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.jsoup.Jsoup;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.jsoup.nodes.Document;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.jsoup.nodes.Element;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * A simple example, used on the jsoup website.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class BlogJsoup &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * 获取博客最近十篇文章</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @param args</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @throws IOException</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Connection connection = Jsoup.connect(&quot;https://www.cnblogs.com/youcong/&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        connection.header(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Document document = connection.timeout(100000).get();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            //包含所有列表的文章</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Elements elements = document.getElementsByClass(&quot;postTitle2&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            for (Element element : elements) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                String path = element.attr(&quot;href&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            String text = element.text();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                String msg = text+&quot; &quot;+path;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(msg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码，用流程可以梳理为如下:</p><p>连接爬取的网站-&gt;设置浏览器请求头(防止因浏览器的限制导致爬取数据失败)-&gt;获取整个HTML(实际就是一个html)-&gt;选择HTML中的某一个元素(如类选择器postTitle2，如果不指定对应的元素选择器，那么直接爬取的就是整个HTML)-&gt;爬取数据并输出</p><p>输出结果如图:</p><p><img src="/2019/06/29/Java使用Jsoup之爬取博客数据应用实例/02.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript如何动态修改iframe的src</title>
      <link href="/2019/06/22/javascript%E5%A6%82%E4%BD%95%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9iframe%E7%9A%84src/"/>
      <url>/2019/06/22/javascript%E5%A6%82%E4%BD%95%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9iframe%E7%9A%84src/</url>
      
        <content type="html"><![CDATA[<p>为什么需要动态修改iframe的src?<br>一般情况我们使用iframe,其中的src通常是写死的，但是有些时候我们不希望它是死的src，而是一个活的src。<br><a id="more"></a></p><p>示例代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">&lt;title&gt;测试&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;iframe</span><br><span class="line">width = &quot;100%&quot;</span><br><span class="line">height = &quot;800&quot; id=&quot;iframe&quot;&gt;</span><br><span class="line">&lt;/iframe&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">iframe.src = &quot;https://www.baidu.com&quot;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次edusoho问题</title>
      <link href="/2019/06/21/%E8%AE%B0%E4%B8%80%E6%AC%A1edusoho%E9%97%AE%E9%A2%98/"/>
      <url>/2019/06/21/%E8%AE%B0%E4%B8%80%E6%AC%A1edusoho%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>问题描述:<br>Edusoho如何迁移到本地windows或另外一台Linux服务器上</p><p>解决问题步骤:<br><a id="more"></a></p><p>1.参考官方文档<br>官方文档地址如下:<br><a href="http://www.qiqiuyu.com/my/course/331" target="_blank" rel="noopener">http://www.qiqiuyu.com/my/course/331</a></p><p>试验过官方文档的方案，发现并不能直接解决我的问题</p><p>2.通过提问(像github对应的项目提issue)’</p><p>这个地址关于我对问题的描述和最终解决问题:<br><a href="https://github.com/edusoho/edusoho/issues/63" target="_blank" rel="noopener">https://github.com/edusoho/edusoho/issues/63</a></p><p>3.最后发现问题仅仅只是少了一个plugins目录</p><p>4.在根目录增加这个plugins目录，然后就可以看到edusoho的界面了(windows和linux同理)</p><p>效果图如下:<br><img src="/2019/06/21/记一次edusoho问题/01.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript之Https通信</title>
      <link href="/2019/06/21/TypeScript%E4%B9%8BHttps%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/06/21/TypeScript%E4%B9%8BHttps%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>NetWorkRequest.ts(源代码如下)<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import * as https from &quot;https&quot;;</span><br><span class="line">import * as vscode from &apos;vscode&apos;;</span><br><span class="line">import * as querystring from &apos;querystring&apos;;</span><br><span class="line">export class NetWorkRequest &#123;</span><br><span class="line"></span><br><span class="line">    public static sendRequest(userCode: string) &#123;</span><br><span class="line"></span><br><span class="line">        vscode.window.showInformationMessage(&quot;userCode:&quot; + userCode);</span><br><span class="line"></span><br><span class="line">        var userId = userCode;</span><br><span class="line">        var post_data = &#123; userId: userId &#125;</span><br><span class="line">        var contents = querystring.stringify(post_data);</span><br><span class="line"></span><br><span class="line">        var options = &#123;</span><br><span class="line">            hostname: &quot;www.test.com&quot;,</span><br><span class="line">            port: 443, //443</span><br><span class="line">            path: &quot;/test-web/api/sysUser/getUserCodeByInfo?&quot; + contents,</span><br><span class="line">            method: &quot;POST&quot;,</span><br><span class="line">            rejectUnauthorized: false,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                Accept: &quot;*/*&quot;,</span><br><span class="line">                &quot;Accept-Encoding&quot;: &quot;utf-8&quot;,</span><br><span class="line">                &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.8&quot;,</span><br><span class="line">                Connection: &quot;keep-alive&quot;,</span><br><span class="line">                Host: &quot;www.test.com&quot;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        var mData = &quot;&quot;;</span><br><span class="line">        var req = https.request(options, function (res) &#123;</span><br><span class="line">            res.setEncoding(&apos;utf-8&apos;);</span><br><span class="line">            res.on(&quot;data&quot;, function (d) &#123;</span><br><span class="line"></span><br><span class="line">                var data = JSON.parse(mData+d);</span><br><span class="line">                console.log(&quot;============================================data======================================================:&quot; + data);</span><br><span class="line">               </span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        // req.write(contents);</span><br><span class="line">        req.on(&quot;error&quot;, function (e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        req.end();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么如何调用呢？</p><p>调用其实与Java调用很相似，基本上都是类名.方法。</p><p>如下调用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NetWorkRequest &#125; from &apos;./NetWorkRequest&apos;;</span><br><span class="line">NetWorkRequest.sendRequest(userCode);</span><br></pre></td></tr></table></figure></p><p>import 导入对应的模块(通常是某个ts文件)</p>]]></content>
      
      
      
        <tags>
            
            <tag> VsCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>/usr/bin/xauth:  file /home/user/.Xauthority does not exist</title>
      <link href="/2019/06/19/usr-bin-xauth-file-home-youcong-Xauthority-does-not-exist/"/>
      <url>/2019/06/19/usr-bin-xauth-file-home-youcong-Xauthority-does-not-exist/</url>
      
        <content type="html"><![CDATA[<p>错误信息如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/xauth: file /home/user/.Xauthority does not exist</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong>错误原因:</strong><br>是因为添加用户时没有授权对应的目录，仅仅执行了useradd user而没有授权对应的家目录</p><p>直接解决办法如下(执行如下命令，以后就登录到终端上就不会出现上面的错误信息):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown username:username -R /home/user_dir</span><br></pre></td></tr></table></figure></p><p>不过一般是可以避免这种情况的出现，添加用户执行如下命令即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd username -m (-m 相当于会创建对应的用户家目录)</span><br><span class="line"></span><br><span class="line">usermod -s /bin/bash username (指定shell，否则会非常不便于终端操作)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js之客户端发起https和http请求</title>
      <link href="/2019/06/18/node-js%E4%B9%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E8%B5%B7https%E5%92%8Chttp%E8%AF%B7%E6%B1%82/"/>
      <url>/2019/06/18/node-js%E4%B9%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E8%B5%B7https%E5%92%8Chttp%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<p>应用场景:<br>1.VsCode插件开发(主要针对以javascript为主的vscode插件);<br>2.使用Node.js开发的客户端程序</p><h3><span id="nodejs之http请求客户端">Node.js之http请求(客户端)</span></h3><a id="more"></a><p>代码示例如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&apos;http&apos;);  </span><br><span class="line">  </span><br><span class="line">var qs = require(&apos;querystring&apos;);  </span><br><span class="line"></span><br><span class="line">var userCode = &quot;1&quot;;</span><br><span class="line"></span><br><span class="line">var post_data = &#123;  </span><br><span class="line">    userCode: userCode&#125;;//这是需要提交的数据  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">var content = qs.stringify(post_data);  </span><br><span class="line">  </span><br><span class="line">var options = &#123;  </span><br><span class="line">    hostname: &apos;www.test.com&apos;,</span><br><span class="line">    port: 80,  </span><br><span class="line">    path: &apos;/test-web/api/sysUser/getUserCodeByInfo&apos;,  </span><br><span class="line">    method: &apos;POST&apos;,  </span><br><span class="line">    headers: &#123;  </span><br><span class="line">        &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded; charset=UTF-8&apos;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line">var req = http.request(options, function (res) &#123;  </span><br><span class="line">    console.log(&apos;STATUS: &apos; + res.statusCode);  </span><br><span class="line">    console.log(&apos;HEADERS: &apos; + JSON.stringify(res.headers));  </span><br><span class="line">    res.setEncoding(&apos;utf8&apos;);  </span><br><span class="line">    res.on(&apos;data&apos;, function (chunk) &#123;  </span><br><span class="line">        console.log(&apos;BODY: &apos; + chunk);  </span><br><span class="line"></span><br><span class="line">var data = JSON.parse(chunk);</span><br><span class="line">console.log(data.returnCode);</span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;);  </span><br><span class="line">  </span><br><span class="line">req.on(&apos;error&apos;, function (e) &#123;  </span><br><span class="line">    console.log(&apos;problem with request: &apos; + e.message);  </span><br><span class="line">&#125;);  </span><br><span class="line">  </span><br><span class="line">// 将数据写入请求体</span><br><span class="line">req.write(content);//注意这个地方  </span><br><span class="line">  </span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure></p><h3><span id="nodejs之https请求客户端">Node.js之https请求(客户端)</span></h3><p>代码示例如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">var querystring = require(&apos;querystring&apos;);</span><br><span class="line"></span><br><span class="line">const https = require(&quot;https&quot;);</span><br><span class="line">    var userCode = &quot;1&quot;;</span><br><span class="line">var post_data = &#123; userCode: userCode &#125;</span><br><span class="line">var contents = querystring.stringify(post_data);</span><br><span class="line"></span><br><span class="line">var options = &#123;</span><br><span class="line">hostname: &quot;www.test.com&quot;,</span><br><span class="line">port: 443, //443</span><br><span class="line">path: &quot;/test-web/api/sysUser/getUserCodeByInfo?&quot;+contents ,</span><br><span class="line">method: &quot;POST&quot;,</span><br><span class="line">rejectUnauthorized: false,</span><br><span class="line">headers: &#123;</span><br><span class="line">Accept: &quot;*/*&quot;,</span><br><span class="line">&quot;Accept-Encoding&quot;: &quot;utf-8&quot;,</span><br><span class="line">&quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.8&quot;,</span><br><span class="line">Connection: &quot;keep-alive&quot;,</span><br><span class="line">Host: &quot;www.test.com&quot;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">var mData = &apos;&apos;;</span><br><span class="line">var req = https.request(options, function (res) &#123;</span><br><span class="line">res.setEncoding(&apos;utf-8&apos;);</span><br><span class="line"></span><br><span class="line"> res.on(&apos;data&apos;, function (chunk) &#123;  </span><br><span class="line"> var data = JSON.parse(chunk);</span><br><span class="line">         console.log(&apos;BODY: &apos; + data);  </span><br><span class="line">    &#125;); </span><br><span class="line">&#125;);</span><br><span class="line">// req.write(contents);</span><br><span class="line">req.on(&quot;error&quot;, function (e) &#123;</span><br><span class="line">console.error(&quot;====================================================&quot; + e);</span><br><span class="line">&#125;);</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure></p><p>上面的hostname，如果不是域名修改为ip地址，请修改成这样，将<a href="http://www.test.com改为192.168.126.130，" target="_blank" rel="noopener">www.test.com改为192.168.126.130，</a><br>切不可指定为<br><a href="http://192.168.126.130" target="_blank" rel="noopener">http://192.168.126.130</a></p><p>否则会出现请求失败，主要体现为如下错误:<br><img src="node-js之客户端发起https和http请求/01.png" alt=""></p><p>还有一点需要强调，如果参数不用querystring.stringify()包裹的话，会出现如下错误:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Request path contains unescaped characters</span><br></pre></td></tr></table></figure></p><p>那么为什么需要querystring呢？<br>因为querystring.stringify()能将对象序列化成URL的形式，以&amp;进行拼接。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode插件开发之如何玩转vscode命令</title>
      <link href="/2019/06/17/vscode%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B9%8B%E5%A6%82%E4%BD%95%E7%8E%A9%E8%BD%ACvscode%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/06/17/vscode%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B9%8B%E5%A6%82%E4%BD%95%E7%8E%A9%E8%BD%ACvscode%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>这里以插件开发为例，VsCode之所以那么强大是因为它背后有千千万万的开发者们为其开发大量功能插件，WordPress同理。</p><p>那么如何玩转VsCode命令呢(以插件开发为例)?<br><a id="more"></a></p><h2><span id="官方文档必不可少">官方文档必不可少</span></h2><p><a href="https://code.visualstudio.com/api" target="_blank" rel="noopener">https://code.visualstudio.com/api</a></p><h2><span id="要像产品经理那样面对产品时多点点多看看多想想">要像产品经理那样面对产品时，多点点多看看多想想</span></h2><p>举个例子说明:<br>以关闭VsCode窗口为例<br>我从VsCode的源码中找到了相关的关闭窗口方法，但是无奈插件API不支持这样的，为此我只得另寻其它方法。最后找到的方法是通过VsCode API命令执行的方式完成此功能。</p><h3><span id="如何查看vscode快捷键及其对应的命令记住该功能很重要">如何查看VsCode快捷键及其对应的命令(记住该功能很重要)</span></h3><p><img src="/2019/06/17/vscode插件开发之如何玩转vscode命令/01.png" alt=""></p><h3><span id="键盘快捷方式效果如下">键盘快捷方式效果如下</span></h3><p>基本上系统自带和所安装的其它扩展命令都在这<br><img src="/2019/06/17/vscode插件开发之如何玩转vscode命令/02.png" alt=""></p><h2><span id="如何充分玩转这些命令让其为我所用呢插件为例很简单">如何充分玩转这些命令，让其为我所用呢(插件为例)，很简单</span></h2><p>如下简单的代码，在我最近开发VsCode插件中十分常用(主要体现在调用VsCode强大丰富的API完成一些特定的功能):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vscode.commands.executeCommand(&apos;命令放置处&apos;);</span><br></pre></td></tr></table></figure></p><p>关闭VsCode窗口示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vscode.commands.executeCommand(&apos;workbench.action.closeWindow&apos;);</span><br></pre></td></tr></table></figure></p><p>当然了，如果想要调用vscode这个API(Node.js中调用的话),需要导入这段代码<code>const vscode = require(&#39;vscode&#39;);</code></p><h2><span id="总结">总结</span></h2><p>基本上把VsCode中系统常用快捷键掌握好(知道怎么查和对应什么意思)，再结合其它插件，你也能开发出一个属于自己的IDE(编辑器)，这个IDE可以叫XXIDE，也可以叫YYIDE，纯看个人兴趣。</p>]]></content>
      
      
      
        <tags>
            
            <tag> VsCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layui如何自定义弹出层关闭事件</title>
      <link href="/2019/06/17/layui%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%B9%E5%87%BA%E5%B1%82%E5%85%B3%E9%97%AD%E4%BA%8B%E4%BB%B6/"/>
      <url>/2019/06/17/layui%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%B9%E5%87%BA%E5%B1%82%E5%85%B3%E9%97%AD%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>再某些业务场景下，我们需要自定义弹出层关闭事件，代码示例如下:<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">layui.use(&apos;layer&apos;, function () &#123;</span><br><span class="line"></span><br><span class="line">var layer = layui.layer;</span><br><span class="line"></span><br><span class="line">layer.open(&#123;</span><br><span class="line">skin: &apos;demo-class&apos;,</span><br><span class="line">type: 1,</span><br><span class="line">title: &apos;登录&apos;,</span><br><span class="line">area: [&apos;600px&apos;, &apos;700px&apos;],</span><br><span class="line">closeBtn :0,</span><br><span class="line">content: $(&apos;.login&apos;), //这里content是一个普通的String</span><br><span class="line">cancel: function () &#123;</span><br><span class="line">vscode.postMessage(&#123;</span><br><span class="line">command: &apos;close&apos;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layui如何隐藏弹出层关闭的按钮</title>
      <link href="/2019/06/17/layui%E5%A6%82%E4%BD%95%E9%9A%90%E8%97%8F%E5%BC%B9%E5%87%BA%E5%B1%82%E5%85%B3%E9%97%AD%E7%9A%84%E6%8C%89%E9%92%AE/"/>
      <url>/2019/06/17/layui%E5%A6%82%E4%BD%95%E9%9A%90%E8%97%8F%E5%BC%B9%E5%87%BA%E5%B1%82%E5%85%B3%E9%97%AD%E7%9A%84%E6%8C%89%E9%92%AE/</url>
      
        <content type="html"><![CDATA[<p>layui默认弹出层是带有关闭按钮的，但是在某些场景我们不需要layui的关闭按钮，这时只需添加<code>closeBtn :0</code>即可<br><a id="more"></a><br>效果图如下:<br><img src="/2019/06/17/layui如何隐藏弹出层关闭的按钮/01.png" alt=""></p><p>示例代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">layui.use(&apos;layer&apos;, function () &#123;</span><br><span class="line"></span><br><span class="line">var layer = layui.layer;</span><br><span class="line"></span><br><span class="line">layer.open(&#123;</span><br><span class="line">skin: &apos;demo-class&apos;,</span><br><span class="line">type: 1,</span><br><span class="line">title: &apos;登录&apos;,</span><br><span class="line">area: [&apos;600px&apos;, &apos;700px&apos;],</span><br><span class="line">closeBtn :0,</span><br><span class="line">content: $(&apos;.login&apos;)//这里content是一个普通的String</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>更多详细资料可参考<a href="https://www.layui.com/" target="_blank" rel="noopener">layui官方文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git bash Error: Could not fork child process: There are no available terminals (-1)</title>
      <link href="/2019/06/16/Git-bash-Error-Could-not-fork-child-process-There-are-no-available-terminals-1/"/>
      <url>/2019/06/16/Git-bash-Error-Could-not-fork-child-process-There-are-no-available-terminals-1/</url>
      
        <content type="html"><![CDATA[<p>错误信息:<br>Error: Could not fork child process: There are no available terminals (-1)<br><a id="more"></a><br>截图如下:<br><img src="/2019/06/16/Git-bash-Error-Could-not-fork-child-process-There-are-no-available-terminals-1/01.png" alt=""></p><p>解决办法:</p><p>(1)使用cmd命令tasklist，找到git bash的进程</p><p>(2)找到红色标记处<br><img src="/2019/06/16/Git-bash-Error-Could-not-fork-child-process-There-are-no-available-terminals-1/02.png" alt=""></p><p>(3)执行命令(<code>taskkill /pid 9872 -t -f</code>)将其杀死即可</p><p><img src="/2019/06/16/Git-bash-Error-Could-not-fork-child-process-There-are-no-available-terminals-1/03.png" alt=""></p><p>参考问题解决链接:<br><a href="https://blog.csdn.net/qq_2300688967/article/details/78642300" target="_blank" rel="noopener">Git bash Error: Could not fork child process: There are no available terminals (-1)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows本地搭建Edusoho环境</title>
      <link href="/2019/06/12/Windows%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAEdusoho%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/06/12/Windows%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAEdusoho%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>Windows搭建Edusoho比Linux还要轻松的多。因为有很多环境集成工具如xampp、wampserver、phpstudy等。<br>基本上安装号wampserver工具，直接将edusoho项目扔到www目录地下并配置即可。</p><p><strong>另外为什么要本地搭建呢？</strong><br>本地搭建的目的是方便调试。当然了也不排除有部分公司在Linux系统上完全使用命令行的方式开发应用程序。</p><p>步骤如下:<br><a id="more"></a></p><h2><span id="去官方网站下载最新的源码包">去官方网站下载最新的源码包</span></h2><p>官方网站地址为<a href="http://www.edusoho.com/open/show" target="_blank" rel="noopener">http://www.edusoho.com/open/show</a></p><h2><span id="windows搭建lamplnmp环境">Windows搭建LAMP/LNMP环境</span></h2><p>环境就没有必要从头开始搭建了，文章开头说过已经有很多工具帮你集成这一套了。<br>我在这里使用的是WanmpServer。WampServer大家可以使用360软件管家去下载。<br>或者去官网下载也行，官网地址为<a href="http://www.wampserver.com/" target="_blank" rel="noopener">http://www.wampserver.com/</a></p><h2><span id="启动wampserver双击即可会弹出小黑窗然后就消失了同时在右下角会有个显示有显示表示ok">启动WampServer，双击即可(会弹出小黑窗，然后就消失了，同时在右下角会有个显示,有显示表示OK)</span></h2><p><img src="/2019/06/12/Windows本地搭建Edusoho环境/01.png" alt=""></p><h2><span id="接下来将下载并已经解压的edusoho放在该目录下">接下来将下载并已经解压的edusoho放在该目录下</span></h2><p><img src="/2019/06/12/Windows本地搭建Edusoho环境/02.png" alt=""></p><h2><span id="修改apache的配置文件">修改apache的配置文件</span></h2><p>找到这个文件，如图所示:<br><img src="/2019/06/12/Windows本地搭建Edusoho环境/03.png" alt=""></p><p>并在该文件里添加如下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Virtual Hosts</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#&lt;VirtualHost *:80&gt;</span><br><span class="line">#  ServerName localhost</span><br><span class="line">#  ServerAlias localhost</span><br><span class="line">#  DocumentRoot &quot;$&#123;INSTALL_DIR&#125;/www&quot;</span><br><span class="line">#  &lt;Directory &quot;$&#123;INSTALL_DIR&#125;/www/&quot;&gt;</span><br><span class="line">#    Options +Indexes +Includes +FollowSymLinks +MultiViews</span><br><span class="line">#    AllowOverride All</span><br><span class="line">#    Require local</span><br><span class="line">#  &lt;/Directory&gt;</span><br><span class="line">#&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerAdmin 127.0.0.1</span><br><span class="line">    DocumentRoot &quot;D://Program//www//edusoho//web&quot;</span><br><span class="line">    ServerName localhost</span><br><span class="line">    ErrorLog &quot;logs/localhost-error.log&quot;</span><br><span class="line">    CustomLog &quot;logs/localhost-access.log&quot; common_</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></p><p>我的httpd-vhosts.conf配置文件内容，如图所示:<br><img src="/2019/06/12/Windows本地搭建Edusoho环境/04.png" alt=""></p><h2><span id="修改完配置文件记得重启重启很简单将电脑桌面右下角的wampserver关闭然后再重新打开">修改完配置文件，记得重启(重启很简单，将电脑桌面右下角的WampServer关闭，然后再重新打开)</span></h2><p>效果图如下:<br><img src="/2019/06/12/Windows本地搭建Edusoho环境/05.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>edusoho上传视频弹出abort之解决方案</title>
      <link href="/2019/06/12/edusoho%E4%B8%8A%E4%BC%A0%E8%A7%86%E9%A2%91%E5%BC%B9%E5%87%BAabort%E4%B9%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/06/12/edusoho%E4%B8%8A%E4%BC%A0%E8%A7%86%E9%A2%91%E5%BC%B9%E5%87%BAabort%E4%B9%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>错误描述:edusoho上传如avi、mp4等容量大的图片(如100m以上或500m等)弹出abort提示框</p><p>原因:是因为web服务器apache默认上传文件有限制导致的</p><p>解决办法如下:<br><a id="more"></a><br>(1)首先修改改php.ini配置文件<br><code>sudo vim /etc/php/7.0/fpm/php.ini</code></p><p>并修改如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">post_max_size = 1024M</span><br><span class="line">memory_limit = 1024M</span><br><span class="line">upload_max_filesize = 1024M</span><br></pre></td></tr></table></figure></p><p>(2)不仅仅需要修改这个，还需修改vim /etc/php/7.0/apache2/php.ini<br>修改内容同上所示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">post_max_size = 1024M</span><br><span class="line">memory_limit = 1024M</span><br><span class="line">upload_max_filesize = 1024M</span><br></pre></td></tr></table></figure></p><p>(3)修改完后记得重启php和apache<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/php7.0-fpm restart</span><br><span class="line">/etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XAMPP启动mysql遇到的问题</title>
      <link href="/2019/06/12/XAMPP%E5%90%AF%E5%8A%A8mysql%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/06/12/XAMPP%E5%90%AF%E5%8A%A8mysql%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>错误信息如下:<br>Version: ‘10.1.33-MariaDB’  socket: ‘’  port: 3389  mariadb.org binary distribution<br>2019-06-12 18:00:56 4a04 InnoDB: Warning: Using innodb_additional_mem_pool_size is DEPRECATED. This option may be removed in future releases, together with the option innodb_use_sys_malloc and with the InnoDB’s internal memory allocator.<br>2019-06-12 18:00:56 18948 [Note] InnoDB: innodb_empty_free_list_algorithm has been changed to legacy because of small buffer pool size. In order to use backoff, increase buffer pool at least up to 20MB.</p><p>2019-06-12 18:00:56 18948 [Note] InnoDB: Using mutexes to ref count buffer pool pages<br>2019-06-12 18:00:56 18948 [Note] InnoDB: The InnoDB memory heap is disabled<br>2019-06-12 18:00:56 18948 [Note] InnoDB: Mutexes and rw_locks use Windows interlocked functions<br>2019-06-12 18:00:56 18948 [Note] InnoDB: _mm_lfence() and _mm_sfence() are used for memory barrier<br>2019-06-12 18:00:56 18948 [Note] InnoDB: Compressed tables use zlib 1.2.3<br>2019-06-12 18:00:56 18948 [Note] InnoDB: Using generic crc32 instructions<br>2019-06-12 18:00:56 18948 [Note] InnoDB: Initializing buffer pool, size = 16.0M<br>2019-06-12 18:00:56 18948 [Note] InnoDB: Completed initialization of buffer pool<br>2019-06-12 18:00:56 18948 [ERROR] InnoDB: \Program Files (x86)\xampp\mysql\data\ibdata1 can’t be opened in read-write mode<br>2019-06-12 18:00:56 18948 [ERROR] InnoDB: The system tablespace must be writable!<br>2019-06-12 18:00:56 18948 [ERROR] Plugin ‘InnoDB’ init function returned error.<br>2019-06-12 18:00:56 18948 [ERROR] Plugin ‘InnoDB’ registration as a STORAGE ENGINE failed.<br>2019-06-12 18:00:56 18948 [Note] Plugin ‘FEEDBACK’ is disabled.<br>2019-06-12 18:00:56 18948 [ERROR] Unknown/unsupported storage engine: InnoDB<br>2019-06-12 18:00:56 18948 [ERROR] Aborting</p><p>解决方案:<br><a id="more"></a><br>(1)打开任务管理器终止mysqld进程；</p><p>(2)打开mysql安装目录的data文件夹，删除以下2个文件：<br> ib_logfile0和ib_logfile1</p><p>(3)重新启动mysql</p><p>参考解决办法:<br><a href="https://www.cnblogs.com/mogujiang/p/5680441.html" target="_blank" rel="noopener">XAMPP启动mysql遇到的问题</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法图解之广度优先搜索</title>
      <link href="/2019/06/10/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E4%B9%8B%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
      <url>/2019/06/10/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E4%B9%8B%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<p>广度优先搜索的应用场景，如下:<br>(1)编写国际跳棋AI，计算最少走多少步就可获胜;<br>(2)编写拼写检查器，计算最少编辑多个地方就可将错拼的单词改为正确的单词，如将READED改为READER需要编辑一个地方;<br>(3)根据你的人际关系网络找到关系最近的医生;<br><a id="more"></a></p><h2><span id="图简介">图简介</span></h2><p>假设你居住在旧金山，要从双子峰前往金门大桥。你想乘公交车前往，并希望换乘最少。可乘坐的公交车如下:<br><img src="/2019/06/10/算法图解之广度优先搜索/01.png" alt=""></p><p>由图可知，换乘最少的路线是:步行-&gt;44路公交车-&gt;28路公交车(一共三步,这种问题也被称作为最短路径问题，解决最短路径问题的算法，又称广度优先搜索)</p><p>要确定如何从双子峰前往金门大桥，需要两个步骤:<br>(1)使用图来建立问题模型;<br>(2)使用广度优先搜索解决问题;</p><h2><span id="什么是图">什么是图</span></h2><p>图模拟一组连接。</p><p>例如，假设你与朋友玩牌，并要模拟谁欠谁钱，可像下面这样指出Alex欠Rama前，如图:<br><img src="/2019/06/10/算法图解之广度优先搜索/02.png" alt=""></p><p>完整的欠钱图可能类似于下面这样。</p><p><img src="/2019/06/10/算法图解之广度优先搜索/03.png" alt=""><br>Alex欠Rama钱、Tom欠Adit钱，等等。</p><p>图由节点和边组成，如图所示:<br><img src="/2019/06/10/算法图解之广度优先搜索/04.png" alt=""></p><p>一个节点可能与众多节点直接相连，这些节点被称为邻居。<br>在起前面的欠钱图中，Rama是Alex的邻居。Adit不是Alex的邻居，因为他们不直接相连。但Adit既是Rama的邻居，又是Tom的邻居。</p><p>图用于模拟不同的东西是如何相连的。</p><p>联系工程研发:<br>通常研发工程师面对业务需求，需要画流程图帮助自己梳理一下业务流程，减少编码过程中的不必要的错误(这个不必要主要包含业务理解等)。<br>业务流程图其实也相当于在模拟业务在实际中是如何运作的。</p><h2><span id="广度优先搜索">广度优先搜索</span></h2><p>广度优先搜索是一种用于图的查找算法，可帮助回答两类问题:</p><ul><li>第一类问题:从节点A出发，前往节点B的路径</li><li>第二类问题:从节点A出发，前往节点B的哪条路径最短</li></ul><h3><span id="查找最短路径问题">查找最短路径问题</span></h3><p>这个图主要反映的是解决第一类问题看你周围的朋友有哪些是芒果商。<br><img src="/2019/06/10/算法图解之广度优先搜索/05.png" alt=""></p><p>第二类问题，主要强调是是哪个芒果商与你的关系最近。例如，朋友是一度关系，朋友的朋友是二度关系。</p><p>下图可形象生动的表现出来:<br><img src="/2019/06/10/算法图解之广度优先搜索/06.png" alt=""></p><p>搜索范围从起点开始逐渐向外延伸，即先检查一度关系，再检查二度关系。<br>首先按照顺序检查名单中的每个人，看看他是否是芒果销售商。这将在一度关系种查找，再在二度关系中查找，因此找到的是关系最近的芒果销售商。广度优先搜索不仅查找从A到B的路径，而且找到的是最短的路径。</p><p>如图分析:<br><img src="/2019/06/10/算法图解之广度优先搜索/07.png" alt=""></p><p>注意,只有按添加顺序查找时，才能实现这样的目的。换句话说，如果Claire先于Anuj加入名单，就需要先检查Claire，再检查Anuj。如果Claire和Anuj都是芒果销售商，而你先检查Anuj再检查Claire，结果将如何呢？找到的芒果销售商并非是与你关系最近的，因为Anuj是你朋友的朋友，而Claire是你的朋友。因此，你需要按添加顺序进行检查。有一个可实现这种目的的数据结构，那就是队列。</p><h3><span id="队列">队列</span></h3><p>队列的工作原理与现实生活中的队列完全相同。</p><p>假设你与朋友一起在公交车站排队，如果你排在他的前面，你将先上车。队列的工作原理与此相同。队列类似于栈。你不能随机地访问队列中的元素。队列只支持两种操作:入队和出队。</p><p><img src="/2019/06/10/算法图解之广度优先搜索/08.png" alt=""><br>如果你将两个元素加入队列，先加入的元素将在后加入的元素之前出队。因此，你可使用队列来表示查找名单。这样，先加入的人将先出队并先被检查。</p><p>队列是一种先进先出的数据结构，而栈是一种后进先出的数据结构，如图:<br><img src="/2019/06/10/算法图解之广度优先搜索/09.png" alt=""></p><h2><span id="实现图">实现图</span></h2><p>图由多个节点组成。</p><p>每个节点都与邻近节点相连，如果表示类似于”you-&gt;Bob”这样的关系，可以使用散列表。</p><p>关于有向图和无向图，如下所示:<br><img src="/2019/06/10/算法图解之广度优先搜索/10.png" alt=""></p><p>关于运行时间:<br>如果你在你的整个人际关系网中搜索芒果销售商，就意味着你将沿每条边前行(记住，边是从一个人到另外一个人的箭头或连接)，因此运行时间至少为O(边数)</p><p>你还使用了一个队列，其中包含要检查的每个人。将一个人添加到队列需要的时间是固定的，即为O(1)，因此对每个人都这样做需要的总时间为O(人数)。所以，广度优先搜索的运行时间为O(人数+边数)，这通常写作O(V+E),其中V为顶点数，E为边数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>request:fail url not in domain list</title>
      <link href="/2019/06/05/request-fail-url-not-in-domain-list/"/>
      <url>/2019/06/05/request-fail-url-not-in-domain-list/</url>
      
        <content type="html"><![CDATA[<p>错误信息:request:fail url not in domain list</p><p>原因:没有配置服务器域名</p><p>解决办法如下:<br><a id="more"></a><br>(1)参考官方文档提供的解决办法(即配置对应的域名)<br>  <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html</a></p><p>(2)可点击开发者工具右上角 详情-项目设置-不校验合法域名、web-view（业务域名）、TLS 版本以及 HTTPS 证书，或者看看域名信息是否配置了各种合法域名。)<br>如图所示:<br><img src="/2019/06/05/request-fail-url-not-in-domain-list/01.png" alt=""></p><p>参考资料如下:<br><a href="https://blog.csdn.net/yuhao309/article/details/82378545" target="_blank" rel="noopener">小程序运行报错：errMsg: “request:fail url not in domain list”</a><br><a href="https://blog.csdn.net/E_li_na/article/details/87873082" target="_blank" rel="noopener">小程序VM144:1 request:fail url not in domain list</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VsCode插件与Node.js交互通信</title>
      <link href="/2019/06/05/VsCode%E6%8F%92%E4%BB%B6%E4%B8%8ENode-js%E4%BA%A4%E4%BA%92%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/06/05/VsCode%E6%8F%92%E4%BB%B6%E4%B8%8ENode-js%E4%BA%A4%E4%BA%92%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>首先关于VsCode插件通信，如果不明白的可以参考我的这篇博客<a href="https://www.cnblogs.com/youcong/p/10294758.html" target="_blank" rel="noopener">VsCode插件开发之插件初步通信</a></p><p>如果需要详细例子的话，可以参考<a href="https://github.com/developers-youcong/vscode-extension-dev" target="_blank" rel="noopener">VsCode插件开发</a></p><p>现在又有一个新的需求是，VsCode插件可以通过jQuery的方式/或者引入某种前端通信框架实现与后台交互。但是针对之前某个需求，需求描述:用户登录后在本地某盘创建特定的文件夹。通常像创建特定文件夹的话，一般都是后端语言实现。而我当时编写的这个插件是用JavaScript，JavaScript是不能读写文件的，当然了，有些朋友可能会说可以使用ActiveXObject，但是这个ActiveXObject有局限性，它仅仅只能支持IE浏览器，而不能支持像Google Chrome和火狐这样的通用性广的浏览器。</p><p>为了解决这个需求，我决定结合node.js解决这个问题。</p><p>首先明确一点，vscode插件开发，不管是使用JavaScript还是TypeScript，通常由于本地调试的需求，都需要安装对应库，而管理这个库，通常使用npm或yarn。由此我们便可知，我们直接可以在该插件中编写node.js相关的代码。<br><a id="more"></a></p><p>实现需求的步骤如下:</p><h2><span id="引入vscode相关的库因为要调用消息传递命令">引入vscode相关的库(因为要调用消息传递命令)</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const testMode = false; // 为true时可以在浏览器打开不报错</span><br><span class="line">// vscode webview 网页和普通网页的唯一区别：多了一个acquireVsCodeApi方法</span><br><span class="line">const vscode = testMode ? &#123;&#125; : acquireVsCodeApi();</span><br><span class="line">const callbacks = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 调用vscode原生api</span><br><span class="line"> * @param data 可以是类似 &#123;cmd: &apos;xxx&apos;, param1: &apos;xxx&apos;&#125;，也可以直接是 cmd 字符串</span><br><span class="line"> * @param cb 可选的回调函数</span><br><span class="line"> */</span><br><span class="line">function callVscode(data, cb) &#123;</span><br><span class="line">    if (typeof data === &apos;string&apos;) &#123;</span><br><span class="line">        data = &#123; cmd: data &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    if (cb) &#123;</span><br><span class="line">        // 时间戳加上5位随机数</span><br><span class="line">        const cbid = Date.now() + &apos;&apos; + Math.round(Math.random() * 100000);</span><br><span class="line">        callbacks[cbid] = cb;</span><br><span class="line">        data.cbid = cbid;</span><br><span class="line">    &#125;</span><br><span class="line">    vscode.postMessage(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="消息传到nodejs">消息传到node.js</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">vscode.postMessage(&#123;</span><br><span class="line">command: &apos;login&apos;,</span><br><span class="line">text: nickName</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>那么有朋友会问，那么node.js是如何接收它的?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function (context) &#123;</span><br><span class="line"></span><br><span class="line">var interval = null;</span><br><span class="line">var i = 0;</span><br><span class="line">var flag = false;</span><br><span class="line"></span><br><span class="line">context.subscriptions.push(vscode.commands.registerCommand(&apos;extension.demo.showWelcome&apos;, function (uri) &#123;</span><br><span class="line"></span><br><span class="line">if (flag) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const panel = vscode.window.createWebviewPanel(</span><br><span class="line">&apos;testWelcome&apos;, // viewType</span><br><span class="line">&quot;功能页&quot;, // 视图标题</span><br><span class="line">vscode.ViewColumn.One, // 显示在编辑器的哪个部位</span><br><span class="line">&#123;</span><br><span class="line">enableScripts: true, // 启用JS，默认禁用</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">flag = true;</span><br><span class="line"></span><br><span class="line">panel.onDidDispose(</span><br><span class="line">() =&gt; &#123;</span><br><span class="line">flag = false;</span><br><span class="line">&#125;,</span><br><span class="line">null, context.subscriptions);</span><br><span class="line"></span><br><span class="line">let global = &#123;</span><br><span class="line">panel</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">panel.webview.html = getWebViewContent(context, &apos;src/view/custom-welcome.html&apos;);</span><br><span class="line"></span><br><span class="line">//创建文件</span><br><span class="line">panel.webview.onDidReceiveMessage(message =&gt; &#123;</span><br><span class="line"></span><br><span class="line">switch (message.command) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case &apos;login&apos;:</span><br><span class="line"></span><br><span class="line">create(message.text, true);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">case &apos;time&apos;:</span><br><span class="line"></span><br><span class="line">start();</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">case &apos;showCourseList&apos;:</span><br><span class="line"></span><br><span class="line">vscode.commands.executeCommand(&apos;extension.demo.showCourseList&apos;, message.text);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">case &apos;closeTime&apos;:</span><br><span class="line">stop();</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">case &apos;themeColor&apos;:</span><br><span class="line"></span><br><span class="line">var name = getTheme();</span><br><span class="line"></span><br><span class="line">panel.webview.postMessage(&#123;</span><br><span class="line">command: &apos;refactor&apos;,</span><br><span class="line">text: name</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">case &apos;readToken&apos;:</span><br><span class="line"></span><br><span class="line">var name = getToken();</span><br><span class="line">console.log(&quot;-------------go go go go go go go ------------------------:&quot; + name);</span><br><span class="line">panel.webview.postMessage(&#123;</span><br><span class="line">command: &apos;checkToken&apos;,</span><br><span class="line">text: name</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line">case &apos;storeUserId&apos;:</span><br><span class="line">console.log(&quot;----------------store UserId-----------------:&quot; + message.text);</span><br><span class="line"></span><br><span class="line">storeUserId(message.text);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">case &apos;getUserId&apos;:</span><br><span class="line">var userId = getUserID();</span><br><span class="line"></span><br><span class="line">console.log(&quot;----------------Get UserId-----------------:&quot; + userId);</span><br><span class="line"></span><br><span class="line">panel.webview.postMessage(&#123;</span><br><span class="line">command: &apos;readUserId&apos;,</span><br><span class="line">text: userId</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line">case &apos;storageToken&apos;:</span><br><span class="line"></span><br><span class="line">storeToken(message.text);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line">case &apos;deleteToken&apos;:</span><br><span class="line"></span><br><span class="line">deleteToken(message.text);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line">case &apos;readUploadFilePath&apos;:</span><br><span class="line"></span><br><span class="line">console.log(&quot;------------------------ readUploadFilePath -----------:&quot; + message.text);</span><br><span class="line"></span><br><span class="line">var content = readExtensionFile(message.text);</span><br><span class="line"></span><br><span class="line">panel.webview.postMessage(&#123;</span><br><span class="line">command: &apos;uploadConfig&apos;,</span><br><span class="line">text: content</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">case &apos;downloadExtensionFile&apos;:</span><br><span class="line"></span><br><span class="line">      downloadExtensionFile(message.text);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;, undefined, context.subscriptions);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>通过message.command我们就可以获取对应的command，根据command对应的字符走对应的case。这就是前端JavaScript与Node.js的通信。</p><h2><span id="nodejs如何响应javascript的通信相当于打电话我打电话给你不能仅仅是我在说也需要你的响应回答">Node.js如何响应JavaScript的通信(相当于打电话，我打电话给你，不能仅仅是我在说，也需要你的响应(回答))</span></h2><p>Node.js响应JavaScript通信代码如下(发送消息给window.addEventListener与前端JavaScript发送消息给Node.js本质上是一样的)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">window.addEventListener(&apos;message&apos;, event =&gt; &#123;</span><br><span class="line"></span><br><span class="line">const message = event.data; // The JSON data our extension sent</span><br><span class="line"></span><br><span class="line">switch (message.command) &#123;</span><br><span class="line"></span><br><span class="line">case &apos;refactor&apos;:</span><br><span class="line">console.log(&quot;自定义背景颜色 custome background color:&quot; + message.text);</span><br><span class="line"></span><br><span class="line">if (message.text == &quot;light&quot;) &#123;</span><br><span class="line">document.body.style.backgroundColor = &quot;#FFFFFF&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">document.body.style.backgroundColor = &quot;#333333&quot;;</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">case &apos;checkToken&apos;:</span><br><span class="line"></span><br><span class="line">console.log(&quot;-------------------checkToken----------------------------:&quot; + message.text);</span><br><span class="line"></span><br><span class="line">if (message.text == null || message.text == &quot;&quot;) &#123;</span><br><span class="line">Login()</span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">$(&quot;#exit&quot;).show();</span><br><span class="line">$(&quot;#settings-sync&quot;).show();</span><br><span class="line">$(&quot;#upload_settings&quot;).show();</span><br><span class="line">$(&quot;#token&quot;).val(message.text);</span><br><span class="line">readUploadFilePath(&quot;D://1024Workspace//extension//&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">case &apos;readUserId&apos;:</span><br><span class="line"></span><br><span class="line">console.log(&quot;=====================readUserID=========================:&quot; + message.text);</span><br><span class="line"></span><br><span class="line">$(&quot;#userId&quot;).val(message.text);</span><br><span class="line">checkPermissions(message.text);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">case &apos;uploadConfig&apos;:</span><br><span class="line">console.log(&quot;========================Upload Config ======================:&quot; + message.text);</span><br><span class="line"></span><br><span class="line">$(&quot;#uploadExtensionContent&quot;).val(message.text);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>window.addEventListener在此相当于监听全局。</p><p>通过message.text我们可以获取node.js响应给前端JavaScript的文本消息或者是json数据。</p><p>上述说的两点用官方的话语表示如下:<br>(1)JavaScript与Node.js通信;<br>(2)Node.js与JavaScript通信;</p>]]></content>
      
      
      
        <tags>
            
            <tag> VsCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法图解之散列表</title>
      <link href="/2019/06/03/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E4%B9%8B%E6%95%A3%E5%88%97%E8%A1%A8/"/>
      <url>/2019/06/03/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E4%B9%8B%E6%95%A3%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2><span id="散列函数">散列函数</span></h2><p>专业术语表述，”将输入映射到数字”。</p><p>散列函数具有如下要求:<br>(1)它必须是一致的。<br>如你输入blog得到的是wordpress，那么每次输入blog，得到的都必须为wordpress。</p><p>(2)它应将不同的输入映射到不同的数字。<br>如，如果一个散列函数不管输入是什么都返回1，它就不是好的散列函数。最理想的情况是，将不同的输入映射到不同的数字。<br><a id="more"></a><br>Java中简单例子(散列表):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package cn.pratice.simple;</span><br><span class="line"></span><br><span class="line">import java.util.Hashtable;</span><br><span class="line"></span><br><span class="line">public class HashTableTest &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Hashtable&lt;String, String&gt; program = new Hashtable&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line">program.put(&quot;JAVA&quot;, &quot;高斯林&quot;);</span><br><span class="line">program.put(&quot;Python&quot;, &quot;龟叔&quot;);</span><br><span class="line">program.put(&quot;C++&quot;, &quot;本贾尼&quot;);</span><br><span class="line"></span><br><span class="line">String key = program.get(&quot;C++&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(key);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后控制台的输出结果是本贾尼。</p><h2><span id="应用案例">应用案例</span></h2><p>(1)散列表用于查找(DNS解析就用它);</p><p>(2)防止重复(投票选举);</p><p>(3)将散列表用作缓存;</p><h2><span id="冲突">冲突</span></h2><p>主要体现在:给两个键分配的位置相同。</p><p>最简单解决的办法是:如果两个键映射到了同一个位置，那么就在这个位置存储一个链表。</p><p>办法虽然简单，但是造成的后果是将会严重，主要体现是散列表的速度会很慢。</p><p>经验教训:<br>(1)散列函数很重要。前面的散列函数将所有的键都映射到一个位置，而最理想的情况是，散列函数将键均匀地映射到散列表的不同位置。<br>(2)如果散列表存储的链表很长，散列表的速度将急剧下降。然而，如果使用的散列函数很好，这些链表就不会很长。</p><h2><span id="性能">性能</span></h2><p>如图:<br><img src="/2019/06/03/算法图解之散列表/01.png" alt=""><br>在平均情况下，散列表执行各种操作的时间都为O(1)。O(1)被称为常量时间。你以前没有见过常量时间，它并不意味着马上，而是说不管散列表多大，所需的时间都相同。</p><p>比较一下简单查找、二分查找、散列表的运行时间:<br><img src="/2019/06/03/算法图解之散列表/02.png" alt="简单查找"></p><p><img src="/2019/06/03/算法图解之散列表/03.png" alt="二分查找"></p><p><img src="/2019/06/03/算法图解之散列表/04.png" alt="散列表"><br>不管数组多大，从中获取一个元素所需的时间都是相同的。在平均情况下，散列表的速度确实很快。</p><p><img src="/2019/06/03/算法图解之散列表/05.png" alt="散列表与数组、链表进行对比"><br>在平均情况下，散列表的查找(获取给定索引处的值)速度与数组一样快，而插入和删除速度与链表一样快，因此它兼具两者的优点。但是在最糟的情况下，散列表的各种操作的速度读很慢。因此，在使用散列表时，避开最糟的情况至关重要。为此，需要避免冲突，而要避免的冲突,需要有:<br>(1)较低的填装因子;<br>(2)良好的散列函数;</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初学者摸索之算法学习</title>
      <link href="/2019/06/01/%E5%88%9D%E5%AD%A6%E8%80%85%E6%91%B8%E7%B4%A2%E4%B9%8B%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/06/01/%E5%88%9D%E5%AD%A6%E8%80%85%E6%91%B8%E7%B4%A2%E4%B9%8B%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>此文转自我个人微信公众号，时间虽然过去已经四个多月了，但是我个人认为还是能够给大家带来启发意义，所以借这个时间分享给大家，微信公众号分享比较有限，而且时效性也比较差，而博客时效性比较好，而且还能集思广益，欢迎朋友在评论区留言，俗话说，众人拾柴火焰高。<br><a id="more"></a><br>原文如下:</p><p>春节的假期在家待了10天。明天就要回北京了。</p><p>微信公众号文章也停更了两周。感谢每天新关注的朋友们，同时也感谢一直关注和支持的朋友们。2019年争取输出更多的技术干货或者其它非技术干货(不过我对于我的微信公众号定义主要还是以技术导向为主，非技术可能会少一些)。</p><p>算法对我来说，用一句诗歌来说，“蜀道难，难于上青天”。</p><p>原本之前想着用一年时间来攻克，现在看来可能性不大。</p><p>身处在一线城市于我而言，不仅仅需要通过闲暇时间学习算法，同时我也还要学习最新的技术，同时也还要时常补补计算机相关的基础(当年不努力，太过对自己放松所造成的后果)。</p><p>春节假期中，不仅仅放松玩了玩，比如跑得快、王者、看电影及其和几个好哥们聚会，同时也刷了下知乎，在知乎中东看看西看看，看了好几篇于我目前而言比较感兴趣的文章，如何学好算法。</p><p>于我目前而言算法并没有给我带来实际的利益，至少没有其它软件工程技术那样给我带来直观的利益(比如使用shiro我可以轻松的完成接口权限控制、使用Nginx做负载均衡、使用Redis缓存数据等这样的例子数不胜数）。</p><p>由此可以推断出算法对我而言实际利益并不大，但我为什么要坚持要学呢？</p><p>以拉勾、boss直聘等招聘网站来说，一些上市大公司和大部分中小公司所要求的主要是丰富的项目经验和对开发常用技术掌握的非常熟练、某些特定领域的经验，比如银行、医疗、办公等，对于算法方面的能力并不十分看重(当然了，如果是在校参加过acm比赛获奖、刷过算法题的或者是github上有过开源项目的也是一项优势)。</p><p>比如下图所示:</p><p>图一:<br><img src="/2019/06/01/初学者摸索之算法学习/01.png" alt=""></p><p>图二:<br><img src="/2019/06/01/初学者摸索之算法学习/02.png" alt=""></p><p>图三:<br><img src="/2019/06/01/初学者摸索之算法学习/03.png" alt=""></p><p>如果要说给出的理由的话，我觉得能够说服我自己的最大的理由是我不想成为一名码农(我对码农的定义的是将脑力劳动变成的体力劳动，经过这一年多的开发，我发现在工作中，有一半是体力，有一半是脑力，其实那一半体力是可以靠脑力解决的)。</p><p>另外研究算法的也是为了更好的读懂Java源代码和Spring源码相关的,作为一名Java后端开发，不深入了解源代码的实现思路是很难混的好的(主要指靠技术吃饭)。我觉得一个算法能力强的人读Java源代码和Spring源码及其其它相关的软件源码要比算法能力弱的人效率高的多。尽管两者之间不一定是正比。</p><p>关于算法学习(我作为初学者就不多说太多了，参考前辈们的经验)</p><p>当然了，虽说不说太多，但是还是要说的。</p><p>我对我目前的要求，只有一条。</p><p>一道算法题目，将思路想清楚想明白了将其攻克，再继续下一道题目和尽可能不借鉴其它已知的解决方案(参考不少知友的回答加上以自己1月份的做题经验来说，没有经过深度思考尝试多次解题直接去参考现成答案，收获太小，效率不高，感觉太浪费时间了)。</p><p>知友们给出的观点(如何学好算法)，如下图所示:</p><p>图一:<br><img src="/2019/06/01/初学者摸索之算法学习/04.png" alt=""></p><p>图二:<br><img src="/2019/06/01/初学者摸索之算法学习/05.png" alt=""></p><p>图三:<br><img src="/2019/06/01/初学者摸索之算法学习/06.png" alt=""><br>看了这篇知友的回答，我点击该链接:</p><p><a href="https://visualgo.net/en" target="_blank" rel="noopener">https://visualgo.net/en</a></p><p>这个链接的效果图，如下所示:<br><img src="/2019/06/01/初学者摸索之算法学习/07.png" alt=""></p><p>点击其中的一个，以排序为例(它会以动画的形式展现，有助于更形象的感受，可以作为算法学习的辅助工具):<br><img src="/2019/06/01/初学者摸索之算法学习/08.png" alt=""></p><p>图四(为什么要学算法)：<br><img src="/2019/06/01/初学者摸索之算法学习/09.png" alt=""></p><p>图五(有没有学不会算法的人):<br><img src="/2019/06/01/初学者摸索之算法学习/10.png" alt=""><br>这让我想起曾经看过的一篇文章，说的是一位十几岁就出来打工，快三十岁或者三十岁以上年龄咬紧牙关学软件开发，最终还是学成对的。由此看，人必须要有决心，想当初新中国建立也才十来年，自力更生造出了原子弹、氢弹等核武器，使我们不再受制于他国的核威胁。</p><p>关于刷算法题网站有很多，比如目前我常用的就是力扣，</p><p>力扣题库(也就是现在比较出名的leetcode，记得前段时间我们经理招人时，特别强调这么几点，有leetcode刷题经验的、有个人github的、有个人博客的优先):</p><p><a href="https://leetcode-cn.com/problemset/all/" target="_blank" rel="noopener">https://leetcode-cn.com/problemset/all/</a></p><p>还有一个国内挺出名的牛客网:</p><p><a href="https://www.nowcoder.com/" target="_blank" rel="noopener">https://www.nowcoder.com/</a></p><p>图六:<br><img src="/2019/06/01/初学者摸索之算法学习/11.png" alt=""></p><p>想到我当初看书，一周一本书，然而并没有什么用处。</p><p>有句话叫做，欲速则不达。</p><p>慢就是快，快就是慢。</p><p>举例说明:</p><p>以我为例，经理要求某个功能时，我在完成该功能之前，事先画个草图，仔细分析，功能拆分(通常要求的功能是一个大的功能，大的功能一般包含好几个小功能)，再度确认(将列举画好的草图跟经理确认一遍，这样的好处是，确定需求无误，减少盲目开干浪费时间)。事实上证明是非常有必要的，前期我没有这样做，盲目埋头干导致的需求没有理解透，做出的功能也不对，以至于重做(重做是一件非常痛苦的事情)，很多程序员都有过这样的经历，新增功能是一件很容易的事情，但是要重构原有的功能代码是一件很不容易的事情(特别是时间过了很长，如果编码规范不是特别好的话，会导致许多问题，比如代码可读性、代码耦合性等，我觉得这两个是维护代码最痛苦的事情)。</p><p>由此推论出如下:</p><p>给定需求-&gt;分析思考需求(确定需求的合理性，功能多少，时间周期，能不能做)-&gt;跟领导确定需求-&gt;需求确定，撸起键盘开敲-&gt;完成后的效果，找产品经理或者领导确认。</p><p>这一个流程下来时间虽然花不少，但是想想如果没有听清需求正确分析需求直接开敲那样的后果，你会发现这样做其实是很节约时间的，所以正好验证，慢就是快。</p><p>今天就说到这吧，回到北京后，一切都将回到正轨。</p><p>继续我的工程师成长之路。</p><p>另祝2019年，大家都能实现自己的目标，也许实现目标的过程中是一件比较痛苦的事情，但是想想度过这段痛苦的过程后，你将会获得无比强大的力量。</p><p>我的微信公众号，如图:<br><img src="/2019/06/01/初学者摸索之算法学习/12.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js之文件下载</title>
      <link href="/2019/05/31/Node-js%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/2019/05/31/Node-js%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>Node.js之文件下载，主要最近解决我的一个需求。</p><p>需求描述:<br>如何将腾讯云上传的文件存储到本地某个目录下，如果用js来实现，纯JavaScript没有这样的功能(也许有)，正好我这个项目用node.js比较多，正好可以利用node.js丰富的API实现该功能。<br><a id="more"></a><br>如下示例代码，演示下载远程文件:</p><p>源码如下(download.js):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//下载参数</span><br><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line">var path = require(&quot;path&quot;);</span><br><span class="line">var downFlag = false;</span><br><span class="line">var downUrl = &apos;&apos;;</span><br><span class="line">var downFileName = &apos;&apos;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 下载回调</span><br><span class="line"> */</span><br><span class="line">function getHttpReqCallback (imgSrc, dirName, fileName) &#123;</span><br><span class="line"></span><br><span class="line">    var callback = function(res) &#123;</span><br><span class="line">        console.log(&quot;request: &quot; + imgSrc + &quot; return status: &quot; + res.statusCode);</span><br><span class="line">        var contentLength = parseInt(res.headers[&apos;content-length&apos;]);</span><br><span class="line">        </span><br><span class="line">        var downLength = 0;</span><br><span class="line">    </span><br><span class="line">        var out = fs.createWriteStream(dirName + &quot;/&quot; + fileName);</span><br><span class="line">        res.on(&apos;data&apos;, function (chunk) &#123;</span><br><span class="line">            </span><br><span class="line">            downLength += chunk.length;</span><br><span class="line">            var progress =  Math.floor(downLength*100 / contentLength);</span><br><span class="line">            var str = &quot;下载：&quot;+ progress +&quot;%&quot;;</span><br><span class="line">            console.log(str);</span><br><span class="line">            </span><br><span class="line">            //写文件</span><br><span class="line">            out.write(chunk, function () &#123;</span><br><span class="line">                //console.log(chunk.length);</span><br><span class="line">                </span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">        &#125;);</span><br><span class="line">        res.on(&apos;end&apos;, function() &#123;</span><br><span class="line">            downFlag = false;</span><br><span class="line">            console.log(&quot;end downloading &quot; + imgSrc);</span><br><span class="line">            if (isNaN(contentLength)) &#123;</span><br><span class="line">                console.log(imgSrc + &quot; content length error&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            if (downLength &lt; contentLength) &#123;</span><br><span class="line">                console.log(imgSrc + &quot; download error, try again&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return callback;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 下载开始</span><br><span class="line"> */</span><br><span class="line">function startDownloadTask (imgSrc, dirName,fileName) &#123;</span><br><span class="line">    console.log(&quot;start downloading &quot; + imgSrc);</span><br><span class="line">    var req = http.request(imgSrc, getHttpReqCallback(imgSrc, dirName, fileName));</span><br><span class="line">    req.on(&apos;error&apos;, function(e)&#123;</span><br><span class="line">        console.log(&quot;request &quot; + imgSrc + &quot; error, try again&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    req.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startDownloadTask(&apos;http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.41/bin/apache-tomcat-8.5.41.tar.gz&apos;,&apos;D://1024Workspace//extension&apos;,&apos;apache-tomcat-8.5.41.tar.gz&apos;);</span><br><span class="line"></span><br><span class="line">//startDownloadTask(&apos;下载地址&apos;,&apos;本地存储路径&apos;,&apos;文件名&apos;);</span><br></pre></td></tr></table></figure></p><p>代码经过测试，没有问题。</p><p>本文主要参考资料如下:<br>Node.js文件下载</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法图解之快速排序</title>
      <link href="/2019/05/28/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/05/28/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="分而治之又称dampc">分而治之(又称D&amp;C)</span></h2><p>书中举了一个例子，假设你是农场主，有一块土地，如图所示:<br><img src="/2019/05/28/算法图解之快速排序/01.png" alt=""><br>你要将这块地均匀分成方块，且分出的方块要尽可能大。<br><img src="/2019/05/28/算法图解之快速排序/02.png" alt=""></p><p>从图上看，显然是不符合预期结果的。<br><a id="more"></a><br>那么如何将一块地均匀分成方块，并确保分出的方块是最大的呢？使用D&amp;C策略。</p><p>(1)D&amp;C算法是递归的;<br>(2)使用D&amp;C解决问题的过程包括两个步骤:<br>a.找出基线条件，这种条件必须尽可能简单;<br>b.不断将问题分解(或者说缩小规模)，直到符合基线条件;</p><p>就如何保证分出的方块是最大的呢？《算法图解》中的快速排序一章提到了欧几里得算法。</p><p>什么是欧几里得算法?<br>欧几里得算法又称辗转相除法，是指用于计算两个正整数a,b的最大公约数。<br>应用领域有数学和计算机两个方面。</p><p>举个代码例子说一下欧几里得算法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package cn.pratice.simple;</span><br><span class="line"></span><br><span class="line">public class Euclid &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int m = 63;</span><br><span class="line">int n = 18;</span><br><span class="line">int remainer = 0;</span><br><span class="line">while(n!=0) &#123;</span><br><span class="line">remainer = m % n;</span><br><span class="line">m = n;</span><br><span class="line">n = remainer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最终的结果是9，正好63和18的最大公因数也是9.<br>其中也体现着分而治之的思想。记住，分而治之并非可用于解决问题的算法而是一种解决问题的思路。</p><p>再举个例子说明，如图所示:<br><img src="/2019/05/28/算法图解之快速排序/03.png" alt=""><br>需要将这些数字相加，并返回结果，使用循环很容易完成这种任务，以Java为例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package cn.pratice.simple;</span><br><span class="line"></span><br><span class="line">public class Euclid &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int []num = new int[] &#123;2,4,6&#125;;</span><br><span class="line">int total = 0;</span><br><span class="line">for (int i = 0; i &lt; num.length; i++) &#123;</span><br><span class="line">total += num[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(total);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="快速排序">快速排序</span></h2><p>快速排序是一种常用的排序算法，比选择排序快的多。<br>代码示例如下(快速排序):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">package cn.pratice.simple;</span><br><span class="line"></span><br><span class="line">public class QuickSort &#123;</span><br><span class="line"></span><br><span class="line">    //声明静态的 getMiddle() 方法，该方法需要返回一个 int 类型的参数值，在该方法中传入 3 个参数</span><br><span class="line">public static int getMiddle(int[] list,int low,int high) &#123;</span><br><span class="line"></span><br><span class="line">int tmp = list[low];//数组的第一个值作为中轴(分界点或关键数据)</span><br><span class="line"></span><br><span class="line">while(low&lt;high) &#123;</span><br><span class="line"></span><br><span class="line">while(low&lt;high &amp;&amp; list[high]&gt;tmp) &#123;</span><br><span class="line">high--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list[low] = list[high];//比中轴小的记录移到低端</span><br><span class="line"></span><br><span class="line">while(low&lt;high&amp;&amp;list[low]&lt;tmp) &#123;</span><br><span class="line">low++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list[high]=list[low];//比中轴大的记录移到高端</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list[low] = tmp;//中轴记录到尾</span><br><span class="line"></span><br><span class="line">return low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建静态的 unckSort() 方法，在该方法中判断 low 参数是否小于 high 参数，如果是则调用 getMiddle() 方法，将数组一分为二，并且调用自身的方法进行递归排序</span><br><span class="line">public static void unckSort(int[] list,int low,int high) &#123;</span><br><span class="line"></span><br><span class="line">if(low&lt;high) &#123;</span><br><span class="line"></span><br><span class="line">int middle = getMiddle(list,low,high);//将list数组一分为二</span><br><span class="line">unckSort(list,low,middle-1);//对低字表进行递归排序</span><br><span class="line">unckSort(list,middle+1,high);//对高字表进行递归排序</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//声明静态的 quick() 方法，在该方法中判断传入的数组是否为空，如果不为空，则调用 unckSort() 方法进行排序</span><br><span class="line">public static void quick(int[] str) &#123;</span><br><span class="line">if(str.length&gt;0) &#123;</span><br><span class="line">//查看数组是否为空</span><br><span class="line">unckSort(str,0,str.length-1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//测试</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">int[] number = &#123;13,15,24,99,14,11,1,2,3&#125;;</span><br><span class="line">System.out.println(&quot;排序前:&quot;);</span><br><span class="line">for (int i : number) &#123;</span><br><span class="line">System.out.print(i+&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">quick(number);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;\r排序后:&quot;);</span><br><span class="line">for (int i : number) &#123;</span><br><span class="line">System.out.print(i+&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此示例来自<a href="http://c.biancheng.net/view/929.html" target="_blank" rel="noopener">Java数组排序：Java快速排序（Quicksort）法</a></p><p>没有什么比代码示例来的直接痛快。</p><h2><span id="再谈大o表示法">再谈大O表示法</span></h2><p>快速排序的独特之处在于，其速度取决于选择的基准值。</p><p>常见的大O运行时间图，如下:<br><img src="/2019/05/28/算法图解之快速排序/04.png" alt=""><br>上述图表中的时间是基于每秒执行10次操作计算得到的。这些数据并不准确，这里提供它们只是想让你对这些运行时间的差别有大致认识。实际上，计算机每秒执行的操作远远不止10次。</p><p>在该节中，作者说合并排序比选择排序要快的多。合并排序，用数学公式表示为O(n log n)，而选择排序为O(n的2次方)。<br>合并代码排序例子如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">package cn.pratice.simple;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class MergeSort &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static void mergeSort(int[] original) &#123;</span><br><span class="line">        if (original == null) &#123;</span><br><span class="line">            throw new NullPointerException(&quot;The array can not be null !!!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        int length = original.length;</span><br><span class="line">        if (length &gt; 1) &#123;</span><br><span class="line">            int middle = length / 2;</span><br><span class="line">            int partitionA[] = Arrays.copyOfRange(original, 0, middle);// 拆分问题规模</span><br><span class="line">            int partitionB[] = Arrays.copyOfRange(original, middle, length);</span><br><span class="line">            // 递归调用</span><br><span class="line">            mergeSort(partitionA);</span><br><span class="line">            mergeSort(partitionB);</span><br><span class="line">            sort(partitionA, partitionB, original);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void sort(int[] partitionA, int[] partitionB, int[] original) &#123;</span><br><span class="line">        int i = 0;</span><br><span class="line">        int j = 0;</span><br><span class="line">        int k = 0;</span><br><span class="line">        while (i &lt; partitionA.length &amp;&amp; j &lt; partitionB.length) &#123;</span><br><span class="line">            if (partitionA[i] &lt;= partitionB[j]) &#123;</span><br><span class="line">                original[k] = partitionA[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                original[k] = partitionB[j];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        if (i == partitionA.length) &#123;</span><br><span class="line">            while (k &lt; original.length) &#123;</span><br><span class="line">                original[k] = partitionB[j];</span><br><span class="line">                k++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (j == partitionB.length) &#123;</span><br><span class="line">            while (k &lt; original.length) &#123;</span><br><span class="line">                original[k] = partitionA[i];</span><br><span class="line">                k++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void print(int[] array) &#123;</span><br><span class="line">        if (array == null) &#123;</span><br><span class="line">            throw new NullPointerException(&quot;The array can not be null !!!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = new StringBuilder(&quot;[&quot;);</span><br><span class="line">        for (int element : array) &#123;</span><br><span class="line">            sb.append(element + &quot;, &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.replace(sb.length() - 2, sb.length(), &quot;]&quot;);</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">    long startTime = System.currentTimeMillis();    //获取开始时间</span><br><span class="line"></span><br><span class="line">    int original[] = new int[] &#123; 13,15,24,99,14,11,1,2,3 &#125;;</span><br><span class="line">    for (int i = 0; i &lt; original.length; i++) &#123;</span><br><span class="line">System.out.print(original[i]+&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">        mergeSort(original);</span><br><span class="line">        print(original);</span><br><span class="line">    long endTime = System.currentTimeMillis();    //获取结束时间</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;程序运行时间：&quot; + (endTime - startTime) + &quot;ms&quot;);    //输出程序运行时间</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此示例来自<a href="https://blog.csdn.net/hjxaslzyy/article/details/61463470" target="_blank" rel="noopener"><br>java实现合并排序算法</a></p><h2><span id="比较快速排序与合并排序">比较快速排序与合并排序</span></h2><p>还是以上面的代码例子为例:<br>快速排序代码例子，如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">package cn.pratice.simple;</span><br><span class="line"></span><br><span class="line">public class QuickSort &#123;</span><br><span class="line"></span><br><span class="line">    //声明静态的 getMiddle() 方法，该方法需要返回一个 int 类型的参数值，在该方法中传入 3 个参数</span><br><span class="line">public static int getMiddle(int[] list,int low,int high) &#123;</span><br><span class="line"></span><br><span class="line">int tmp = list[low];//数组的第一个值作为中轴(分界点或关键数据)</span><br><span class="line"></span><br><span class="line">while(low&lt;high) &#123;</span><br><span class="line"></span><br><span class="line">while(low&lt;high &amp;&amp; list[high]&gt;tmp) &#123;</span><br><span class="line">high--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list[low] = list[high];//比中轴小的记录移到低端</span><br><span class="line"></span><br><span class="line">while(low&lt;high&amp;&amp;list[low]&lt;tmp) &#123;</span><br><span class="line">low++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list[high]=list[low];//比中轴大的记录移到高端</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list[low] = tmp;//中轴记录到尾</span><br><span class="line"></span><br><span class="line">return low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建静态的 unckSort() 方法，在该方法中判断 low 参数是否小于 high 参数，如果是则调用 getMiddle() 方法，将数组一分为二，并且调用自身的方法进行递归排序</span><br><span class="line">public static void unckSort(int[] list,int low,int high) &#123;</span><br><span class="line"></span><br><span class="line">if(low&lt;high) &#123;</span><br><span class="line"></span><br><span class="line">int middle = getMiddle(list,low,high);//将list数组一分为二</span><br><span class="line">unckSort(list,low,middle-1);//对低字表进行递归排序</span><br><span class="line">unckSort(list,middle+1,high);//对高字表进行递归排序</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//声明静态的 quick() 方法，在该方法中判断传入的数组是否为空，如果不为空，则调用 unckSort() 方法进行排序</span><br><span class="line">public static void quick(int[] str) &#123;</span><br><span class="line">if(str.length&gt;0) &#123;</span><br><span class="line">//查看数组是否为空</span><br><span class="line">unckSort(str,0,str.length-1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//测试</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">long startTime = System.currentTimeMillis();    //获取开始时间</span><br><span class="line"></span><br><span class="line">int[] number = &#123; 13,15,24,99,14,11,1,2,3,2,32,4321,432,3,14,153,23,42,12,34,15,312,12,43,3214,43214,43214,43214,12,2432,12,34,24,4532,1234&#125;;</span><br><span class="line"></span><br><span class="line">quick(number);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for (int i : number) &#123;</span><br><span class="line">System.out.print(i+&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">long endTime = System.currentTimeMillis();    //获取结束时间</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;程序运行时间：&quot; + (endTime - startTime) + &quot;ms&quot;);    //输出程序运行时间</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果，如图:<br><img src="/2019/05/28/算法图解之快速排序/05.png" alt=""></p><p>半天看不到输出结果，而程序仍在运行中。如果将数组中的元素还原为原来那几个，则很快看到结果。</p><p>合并代码例子，如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">package cn.pratice.simple;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class MergeSort &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static void mergeSort(int[] original) &#123;</span><br><span class="line">        if (original == null) &#123;</span><br><span class="line">            throw new NullPointerException(&quot;The array can not be null !!!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        int length = original.length;</span><br><span class="line">        if (length &gt; 1) &#123;</span><br><span class="line">            int middle = length / 2;</span><br><span class="line">            int partitionA[] = Arrays.copyOfRange(original, 0, middle);// 拆分问题规模</span><br><span class="line">            int partitionB[] = Arrays.copyOfRange(original, middle, length);</span><br><span class="line">            // 递归调用</span><br><span class="line">            mergeSort(partitionA);</span><br><span class="line">            mergeSort(partitionB);</span><br><span class="line">            sort(partitionA, partitionB, original);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void sort(int[] partitionA, int[] partitionB, int[] original) &#123;</span><br><span class="line">        int i = 0;</span><br><span class="line">        int j = 0;</span><br><span class="line">        int k = 0;</span><br><span class="line">        while (i &lt; partitionA.length &amp;&amp; j &lt; partitionB.length) &#123;</span><br><span class="line">            if (partitionA[i] &lt;= partitionB[j]) &#123;</span><br><span class="line">                original[k] = partitionA[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                original[k] = partitionB[j];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        if (i == partitionA.length) &#123;</span><br><span class="line">            while (k &lt; original.length) &#123;</span><br><span class="line">                original[k] = partitionB[j];</span><br><span class="line">                k++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (j == partitionB.length) &#123;</span><br><span class="line">            while (k &lt; original.length) &#123;</span><br><span class="line">                original[k] = partitionA[i];</span><br><span class="line">                k++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void print(int[] array) &#123;</span><br><span class="line">        if (array == null) &#123;</span><br><span class="line">            throw new NullPointerException(&quot;The array can not be null !!!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = new StringBuilder(&quot;[&quot;);</span><br><span class="line">        for (int element : array) &#123;</span><br><span class="line">            sb.append(element + &quot;, &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.replace(sb.length() - 2, sb.length(), &quot;]&quot;);</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">    long startTime = System.currentTimeMillis();    //获取开始时间</span><br><span class="line"></span><br><span class="line">    int original[] = new int[] &#123; 13,15,24,99,14,11,1,2,3,2,32,4321,432,3,14,153,23,42,12,34,15,312,12,43,3214,43214,43214,43214,12,2432,12,34,24,4532,1234&#125;;</span><br><span class="line">    for (int i = 0; i &lt; original.length; i++) &#123;</span><br><span class="line">System.out.print(original[i]+&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">        mergeSort(original);</span><br><span class="line">        print(original);</span><br><span class="line">    long endTime = System.currentTimeMillis();    //获取结束时间</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;程序运行时间：&quot; + (endTime - startTime) + &quot;ms&quot;);    //输出程序运行时间</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果，如图:<br><img src="/2019/05/28/算法图解之快速排序/06.png" alt=""></p><p>通过两者对比，我们很容易得出合并排序比快速排序快。</p><p>参考这个<a href="https://www.cnblogs.com/stwzhong/p/3380395.html" target="_blank" rel="noopener">合并排序和快速排序执行时间比较</a></p><p>作者通过实验得出一个结论:<strong>当数据量较小的时候，快速排序比合并排序运行时间要短，运行时间短就表示快，但是当数据量大的时候，合并排序比快速排序运行时间要短</strong>。<br>由此通过我上述的代码实验和该文章作者试验，可证实这个结论。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16.04Apache负载均衡+集群</title>
      <link href="/2019/05/28/Ubuntu16-04Apache%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1-%E9%9B%86%E7%BE%A4/"/>
      <url>/2019/05/28/Ubuntu16-04Apache%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1-%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<p>mod_proxy ，主代理模块Apache模块用于重定向连接;它允许Apache充当底层应用程序服务器的网关。<br>mod_proxy_http ，它增加了对代理HTTP连接的支持。<br>mod_proxy_balancer和mod_lbmethod_byrequests ，它为多个后端服务器添加负载平衡功能。</p><p>为了保证配置流程正常，请执行如下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod proxy</span><br><span class="line">sudo a2enmod proxy_http</span><br><span class="line">sudo a2enmod proxy_balancer</span><br><span class="line">sudo a2enmod lbmethod_byrequests</span><br><span class="line">/etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>编辑该配置文件(vim /etc/apache2/sites-available/000-default.conf)，添加如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ProxyPreserveHost On</span><br><span class="line"></span><br><span class="line">    ProxyPass / http://127.0.0.1:8080/</span><br><span class="line">    ProxyPassReverse / http://127.0.0.1:8080/</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></p><p>这样就可以访问了，但是如果是多台服务器的话，添加如下配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">&lt;Proxy balancer://mycluster&gt;</span><br><span class="line">    BalancerMember http://127.0.0.1:8080</span><br><span class="line">    BalancerMember http://127.0.0.1:8081</span><br><span class="line">&lt;/Proxy&gt;</span><br><span class="line"></span><br><span class="line">    ProxyPreserveHost On</span><br><span class="line"></span><br><span class="line">    ProxyPass / balancer://mycluster/</span><br><span class="line">    ProxyPassReverse / balancer://mycluster/</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></p><p>换言之如果是https请求，配置也是一样的，不一样的是文件不同(如果是配置https，需要修改/etc/apache2/sites-available/default-ssl.conf)<br>内容与上面一样，唯一不一样的是端口，SSL默认是443端口。</p><p>如果你不知道apache如何配置https,可以参考我的这篇博客<a href="https://developers-youcong.github.io/2019/05/17/Ubuntu16-04%E4%B9%8BApache2-4%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6/">Ubuntu16.04之Apache2.4配置SSL证书</a></p><p>本文参考链接资料如下:<br><a href="https://www.howtoing.com/how-to-use-apache-as-a-reverse-proxy-with-mod-proxy-on-ubuntu-16-04" target="_blank" rel="noopener">如何在Ubuntu 16.04上使用Apache的mod_proxy作为反向代理</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>致所有的开发者们</title>
      <link href="/2019/05/27/%E8%87%B4%E6%89%80%E6%9C%89%E7%9A%84%E5%BC%80%E5%8F%91%E8%80%85%E4%BB%AC/"/>
      <url>/2019/05/27/%E8%87%B4%E6%89%80%E6%9C%89%E7%9A%84%E5%BC%80%E5%8F%91%E8%80%85%E4%BB%AC/</url>
      
        <content type="html"><![CDATA[<p>此文来自我个人微信公众号，总的来说，阅读量和反馈都还挺不错，借此分享给广大的博友们。</p><p>本文主要内容为如下几个方面?</p><p>为什么要有一个自己的博客</p><p>为什么要让自己的GitHub活跃起来</p><p>每天给自己一点学习的时间<br><a id="more"></a></p><h2><span id="一-为什么要有一个自己的博客">一、为什么要有一个自己的博客</span></h2><p>关于为什么要有一个自己的博客这个问题，其实与为什么要写博客基本上是相通的。</p><p>首先说说关于为什么要写博客？</p><p>写博客的目的很简单，就是为了总结和记录，记录工作中遇到的问题，总结项目的得失或者是自己没有深刻理解某个API导致出现了某某问题等。</p><p>如果再往高度说，就是为了分享。分享自己遇到的坑以及是如何填了这个坑及其自己到底是因为什么原因才落入了这个坑。在写的过程中，也是让自己在思考，经过深度的思考和总结，能够避免再度重蹈覆辙。</p><p>写博客给我带来的好处？</p><p>(1)提高效率(比如我需要搭建Ubuntu16.04的项目环境时，我直接就可以参考自己的博客来实现快速搭建);</p><p>(2)深究问题，提高知识深度。有的时候解决一些问题时，我们往往都满足于解决了就行，而非深究这个问题，这时再写博客的时候，我就会问自己，为什么会出现这个问题，有时候弄清楚为什么比怎么解决更重要，因为当你知道了为什么时，就基本上已经有了如何解决这个问题的思路。</p><p>(3)引导新人和帮助同事。特别是团队带新人的时候，有的时候新人遇到一些问题(这些问题基本上都是老鸟们已经遇到过)，这时新人遇到了时，你可以将你的博客分享给他，让他自己看，这时博客就可以起到引领新人的目的(张开涛先生曾经写博客系列文章也是这个目的)，当然了，如果时间比较宽裕的话，可以告诉他问题的原因和解决思路;</p><p>(4)知识系统化。我认为无论学什么编程语言和框架都需要系统化地去学，像比如HelloWorld这样的例子，基本上都能学会，有不少朋友仅仅满足于拿这个技术跑起来一个简单的例子就表示自己已经掌握了这门技术，就不再继续学习下去了，除非公司真正的要用到时才去比较系统的去学一下。</p><p>比如曾经的我就是如此，曾经的我Python和Node.js我都学过，但是现在的话，留下的只有Node.js，Node.js还是因为最近对Settings-Sync插件二次开发的时候才去比较系统地去学习。知识系统化的目的在于让自己所储备的知识树更加扎实稳定。</p><p>(5)让思路更清晰。写作的同时也是理清思路。特别是开发过程中，思路清晰很重要，思路不清晰基本上等于无用功。</p><p>写博客的好处很多，这里就不一一说了。写博客，坚持很重要。宁可不写也不能敷衍了事。</p><p>有朋友说有了家庭有了小孩哪有那么多时间来写这些呢？</p><p>我对此的回答是:定期总结很重要，可以不那么频繁。比如单身的时候每天写一篇两篇或者是两天篇之类的频率，有了女朋友然后到结婚再到有了小孩可以根据自己的时间进行合理安排。不过坚持，本人认为很重要，千万不能三天打鱼两天晒网。记得我刚开始写博客的时候，的确觉得好难写，另外也觉得网上明明就有现成的答案，我何必多次一举呢。关于刚刚开始写觉得很难这个问题，万事开头难，这是肯定的，联想到广大的小伙伴们在校学计算机时，特别是从农村出来的朋友们(这里不是歧视)，哪一个学计算机又是轻松的呢？写博客亦是如此。</p><p>关于有人说，我文采不好我写不好怎么办?</p><p>我对此的回答是我文采也不好啊。写博客的主要目的是让自己总结和记录而非一定要在此中展示文采。其次在写多的前提下，慢慢让文章具有条理性，然后分享给广大的朋友们。至于文采方面，放眼古今中外又有哪一个天生就写的一首好文章的呢？也许有，但我不知道。</p><p>回到一个原有的问题上来，为什么要有一个自己的博客？</p><p>原因有这么几个方面?</p><p>第一、安全感。时代总是在变，谁也不能保证今天的东西，明天不会淘汰(比如曾经的雅虎是多么的风光，而今早已不复当年勇了或者更糟糕地像AT&amp;T烟消云散)。</p><p>第二、利于学习。我想从学习的角度来说，我做过不少项目，发现很多项目与我以前在学校的时候做的博客本质上差别并不大，比如权限管理、内容管理等。权限管理又可以有角色、菜单、组织部门、总公司和分公司等。内容管理又可以包含客户信息、人力资源管理、财务报表、商品管理、医疗管理等。而这些其实都可以在博客系统里面进行复现。写一个博客系统，不仅仅是提高自己的实践能力，同时也是在提高项目认知。</p><p>第三、提高影响力。比如阮一峰先生的博客就是一个很好的证明。当然了，还有很多知名博主。关于这个影响力的好处我就不多说了。</p><p>关于搭建自己的博客，目前有这么几个平台可以轻松搭建？</p><p>(1)GitHub。比如我的GitHub博客平台是使用Hexo，地址为:</p><p><a href="https://developers-youcong.github.io/">https://developers-youcong.github.io/</a></p><p>(2)WordPress。WordPress的名气就不多说了。记得GitHub里面的一个开源项目Jeecg的插件开发我觉得其就是参考WordPress的。</p><p>关于WordPress平台搭建也可以参考我的这篇博客:</p><p>Ubuntu16.04搭建WordPress:</p><p><a href="https://www.cnblogs.com/youcong/p/9309197.html" target="_blank" rel="noopener">https://www.cnblogs.com/youcong/p/9309197.html</a></p><p>CentOS7搭建WordPress:</p><p><a href="https://www.cnblogs.com/youcong/p/9240603.html" target="_blank" rel="noopener">https://www.cnblogs.com/youcong/p/9240603.html</a></p><p>(3)Jekyllt。关于Jekyllt需要搭建对应的Ruby环境。不过我没有搭建过，更多可以参考其官网。</p><p>(4)自己动手丰衣足食。可以选择自己写，编程语言可以是Java，也可以是Node.js或PHP。最近本人自己就在写，当然了，写也不是完全没有参考的，当初在学校的时候，主要是参考像CSDN、博客园等这样的。现在写的话主要还是站在巨人的肩上，比如我现在主要参考系就是WordPress。之所以写博客也是为了实践自己看的书，比如像分布式存储之类、高并发等。我一直就不喜欢背那些面试题，因为不理解的话根本记不住，只要理解的话，基本很难会忘记。</p><p>关于上述平台除了GitHub之外，其它都需要你自己有一个服务器才行。</p><p>关于服务器大家可以去阿里云或者腾讯云、百度云都行。</p><p>也许有人说，我不会Linux。我对此的回答是不会可以去学。在上学时期的时候一篇文章对我印象深刻，文章这样说，“爱看书的青年,大可以看看本分以外的书,即使和本业毫不相干的,也要泛览。譬如学理科的,偏看看文学书,学文科的,偏看看理科书,看看别个在那里研究的,究竟是怎么一回事。这样子,对于别人,别事,可以有更深的了解。在博的基础上,要渐择而入于己所爱的较专的一门或几门。”</p><p>这句话联系到我这位开发工程师身上，我的感触如下:</p><p>我觉得作为一名软件开发工程师，不仅仅局限于软件这一块，同时也要关注其他行业并结交其他行业的朋友，当然了，在此过程中，还是得读读书。</p><p>再说句行内话，我觉得像做后端开发，比如Java不仅仅要把后端做通，在足以胜任后端工作的前提下(这个胜任不仅仅表示你能够把活干好，同时也表示着你多少知道一些框架方面的底层实现)，也可以去学学像微信小程序、安卓开发之类的。</p><p>而安卓方面则也可以对学学Java相关的，比如安卓就是基于Java语言。再比如像处于中小公司的开发人员一般身兼数职，做后台的往往也兼任前台，前台一般用前端框架(比如vue、angular、react或者是jQuery、BootStrap、AdminLTE、Metronic等)。不过这些框架的基础就是网页三剑客(HTML+CSS+JavaScript)。</p><p>经过这一圈你会发现技术本质上区别并不大。也许我工作年限不长说这句话有点狂妄了点。以我18年学Python、Node.js、Perl、PHP等来说，基本上很多都是相通的。当然了，我也不建议东打一拳西打一拳的学习方式。因为非常浪费时间，效率又低。学习最有效的方式是带有目的性，比如我想用SpringBoot+SpringCloud/Dubbo+PostgreSQL写一个简单的CMS(其实传统Servlet+JSP+JDBC就能做这些，我之所以这样做是因为加深感性认识，这个感性认识，不仅仅包括你知道它是个什么玩意，怎么用它，同时也包含遇到问题如何解决的)。我觉得经过以做一个项目的方式作为学习导向比漫无目的的写HelloWorld或者是看书效率要高很多。</p><h2><span id="二-为什么要让自己的github活跃起来">二、为什么要让自己的GitHub活跃起来</span></h2><p>关于为什么要让自己的GitHub活跃起来，理由如下:</p><p>(1)GitHub不仅仅是一个仓库，也是一个开发者的历程;</p><p>(2)一个良好的GitHub，可以为你的应聘加分或者是会有一些企业主动联系你;</p><p>针对(1)，为什么说GitHub不仅仅是一个仓库，也是一个开发者的历程？</p><p>有句话叫做GitHub写满你的故事，每位开发者都是从0到1，然后从1到无穷大。</p><p>而GitHub就可以充当见识人，每当我翻阅自己以前的GitHub，看到自己的编码风格从杂乱无章到渐渐有序，看到自己的学习能力从依赖性或他人驱动性到独立自主和自我驱动，看到一个一无所知的人慢慢变的知识渊博。</p><p>针对(2)，为什么一个良好的GitHub，可以为你的应聘加分或者是会有一些企业主动联系你？</p><p>我们经理在招聘的时候常常说的一句话之一就是请贴出你的GitHub，之所以这么说，原因与(1)不无关系。</p><p>那么如何让自己的GitHub活跃起来呢？本人有如下几点建议:</p><p>(1)可以在GitHub上利用Hexo搭建一个属于自己的博客，关于搭建Hexo博客可以参考我的这篇博文:</p><p><a href="https://www.cnblogs.com/youcong/p/9965885.html" target="_blank" rel="noopener">https://www.cnblogs.com/youcong/p/9965885.html</a></p><p>(2)平时有意识的收集自己常常需要阅读的资料，将其上传到自己的GitHub仓库。我会自己认为比较重要并时常需要阅读的资料上传到我的GitHub仓库，地址为:</p><p><a href="https://github.com/developers-youcong/Personal-Learning-Library" target="_blank" rel="noopener">https://github.com/developers-youcong/Personal-Learning-Library</a></p><p>(3)开发过程中常常用的脚本或者是脚手架也可以放到自己的GitHub上，这样一来省的自己在写，虽然说可以记录成一个文档，但是本人觉得还是放在GitHub上好一些。另外关于脚手架，比如像SSM框架+SpringBoot+SpringCloud这种的，虽然有些IDE可以一下子生成，但是个人觉得一下子生成的并不一定适用于你的，比如像SSSM框架+Shiro+Solr+MySQL+Metronic+常用的数据表，完全就可以作为一个脚手架，因为不少企业都在用它，每次搭建框架环境时，只需git clone下来即可，基本上就可以用了。就像下面我记录的读书笔记那样，要最大程度上复用第一次从0到1的结果，而不是从头再来。说实话这一点我在这家公司做的不是特别好，虽然说开发前端，基本上就是看到一些好的网站就将其扒下来为我所用，但是觉得效率还是不高。</p><p>(4)记录自己的读书笔记，譬如像教材类的书一定要记录详细笔记，比如《Java数据结构与算法》之类的(关于这本书可以去我的GitHub找到)，在GitHub上一般都是使用Markdown来写，我个人初次写的时候很不习惯Markdown，后来写久了发现，觉得爱上Markdown。再譬如像一些非教材类的可以记录一下自己的心得和体会，又或者里面某些观点给你的启发。</p><p>(5)工作一年以上的朋友基本上工作上都能搞定了，在此过程中为了提升自己，比如你想要系统学习SpringCloud，你可以参考官网，并在GitHub上添加对应的仓库，在此基础上系统学习。比如像这位朋友那样，如图所示:<br><img src="/2019/05/27/致所有的开发者们/01.png" alt=""></p><p>该SpringCloud教程地址为:</p><p><a href="https://gitee.com/ylimhhmily/SpringCloudTutorial" target="_blank" rel="noopener">https://gitee.com/ylimhhmily/SpringCloudTutorial</a></p><p>这里我想强调一点的是不一定将人家的copy下来，毕竟SpringCloud版本不断迭代中，你可以选择适合当下的稳定版本进行学习不一定非要标新立异追求最新版本的，然后放到自己的GitHub上，例子跑起来是必要的，同时也要记录一下笔记，比如你一开始你不熟悉它肯定会遇到一些错误，这些错误的原因是什么，你是如何解决它的，这些都可以记录在对应的README.md文件里面。这种学习方式其实就相当于实践+理论。记得一位前辈说过一句话，理论不懂就去实践，实践遇到问题就去看理论。</p><p>(6)自己发起一个开源项目，比如你觉得CSDN或者博客园在某些方面做的不够好，你可以写一个比它们更好的。我就觉得目前博客有一种非常不好的就是不能同步，比如我在CSDN上发布可以直接同步到我的博客园上或是思否、简书上。当然了，他们这么做的原因应该也是处于防止大量重复文章占用搜索资源吧。关于这个我觉得百度应该像Google学习，之所以很多开发人员用Google最大的原因就是因为通常搜索关键字，排名靠前的都是一些优质资源，反观百度，商业化太严重了。另外补充到自己发起一个开源项目，这个开源项目可以是从0到1，也可以不从0到1，比如可以学习Hutool的思想，Hutool这个开源项目实际是一个Java常用工具包集合，开发常用的都能在里面找到。我们可以参考它，自己也可以发起一个类似的项目，因为Hutool虽然广而齐全，但是并不能涵盖方方面面，比如在我现在这家公司比较适应，但是在我一些朋友的公司并不适应。所以在此我想说的是，每待一家公司不仅仅要将对应的业务吃的透一些，同时也要有意识的将一些常用的工具类收集起来。这也是将来跳槽面试的一个亮点之一。这个库一开始你可以私有化，当相对成熟些你可以将其公开分享给广大的开发者们。</p><p>(7)记录自己读源码的过程。我尝试过读Spring源码，按着Ctrl键，鼠标点进去再点进去发现这样读下去没有尽头啊。说带有某个目的去读，效果虽然会好些，但是我觉得有种方式会更好，那就是比如像我们Java开发的，平常写代码的时候也要有意识的翻翻源码，特别是遇到问题的时候并将问题解决的时候，通过查看源码看到里面的实现，这样下来，每天看一点点，积累一年或者半年，再或者三到四个月你会发现不少库的源码你都能看的懂了，很多实现机制你会发现都有很多相通点。关于这一点我并没有实践过三到四个月，目前我仅仅只是开始，但是我的一个导师实践过。</p><h2><span id="三-每天给自己一点学习的时间">三、每天给自己一点学习的时间</span></h2><p>现在很多人都很焦虑，因此知识付费很火。前面我说过知识付费不乏有好的。但是大多并没有那么好，主要抓住的是人焦虑的心理。</p><p>为什么焦虑呢？</p><p>主要是压力大(这个压力主要的来源于生活与工作)。其实说真的，我也很焦虑，一是我给自己定了很多目标我想迫切地让其实现，二是我没有安全感，我总想让自己变的更加强大。</p><p>但是随着而来，焦虑也逐渐加重，渐渐地导致我失眠。后来我找到了一种比较好的方法，那就是每天给自己一点学习的时间。</p><p>这个学习的时间可以是写代码，也可以是看书，也可以是品味一段轻音乐读上一首优美的诗歌感受诗歌的情形。</p><p>每天给自己一点学习的时间，这个学习的时间并不等于就是每次下班回到家中看书或者是写代码之类的，而是每天让自己有一点收获。</p><p>焦虑的根本原因在于自己停滞不前担心后面的人超过自己或者是前面的人本来与自己的距离是望其项背，最后变成了望尘莫及。</p><p>针对此，最好的策略就是每天让自己进步一点点有所收获。比如最近我VsCode插件某段代码不严谨，一位同事指出了我的这个错误，所以我决定下次不再出现这种错误。再比如最早我的代码注释写的很随意，也是我的那个同事指出的，因此到现在为止我不管怎么样，都要让自己代码严谨起来。也许是因为之前养成了一个不好的习惯，有的时候严谨点，有的时候不那么严谨。从换位思考的角度看，严谨的代码，简单扼要的注释，不仅仅对自己有帮助，同时也对同事阅读也是一种赏心悦目。</p><p>另外分享一下最近阅读吴军先生《见识》的阅读笔记。</p><p>1.不做伪工作者</p><p>(1)那些既不能给公司带来较大收益，又不能给用户带来价值改进和“升级”，很多都是伪工作。</p><p>(2)有的人明明能够通过学习一种新技能更有效地工作，却偏偏要守着过去的旧工具工作，甚至手工操作，这种人就是典型的伪工作者。</p><p>(3)在做事情前不认真思考，做事时通过简单的试错方法盲目寻找答案。</p><p>(4)做产品不讲究质量、不认真测试，上线后不停地修补，总是在花费很多时间和精力找漏洞和打补丁。</p><p>(5)不注重用有限的资源解决95%的问题，而是把大部分时间和精力用于纠结不重要的5%问题。</p><p>(6)每次开会找来大量不必要的人员旁听，或者总去参加那些不必要的会议。</p><p>2.努力一万小时真能帮你成功吗?</p><p>存在如下误区:</p><p>(1)简单重复。</p><p>(2)习惯性失败(迷信失败是成功之母，简单地重复失败是永远走不出失败的怪圈)。</p><p>(3)林黛玉式困境（活在自己的世界里，排斥外界）。</p><p>(4)狗熊扳棒子(10000小时的努力需要一个积累的效应，第二次的努力要最大限度地复用第一次努力的结果，而不是每次都从头开始)。</p><p>3.三板斧破四困境</p><p>(1)第一板斧:确立“愿景-目标-道路”。</p><p>(2)第二板斧:即使听到不中听的话，也要试着找出其中的合理之处。</p><p>(3)第三板斧:凡是做记录，这样可以避免狗熊扳棒子(从中正好体现写博客的好处之一)。</p><p>4.做好最后的1%</p><p>这里主要启发的就是做事不能做一半。比如开发者们不要偷懒，该写单测还是要写的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公司内部技术分享之Vue.js和前端工程化</title>
      <link href="/2019/05/26/%E5%85%AC%E5%8F%B8%E5%86%85%E9%83%A8%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%E4%B9%8Bvue-js%E5%92%8C%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
      <url>/2019/05/26/%E5%85%AC%E5%8F%B8%E5%86%85%E9%83%A8%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%E4%B9%8Bvue-js%E5%92%8C%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>今天主要的核心话题是Vue.js和前端工程化。我将结合我这两年多的工作学习经历来谈谈这个，主要侧重点是前端工程化，Vue.js侧重点相对前端工程化，比重不是特别大。<br><a id="more"></a></p><h2><span id="vuejs">Vue.js</span></h2><p>Vue.js和React.js、Angular.js并驾齐驱号称前端三大框架(前端最常用的这三大框架，大中小公司均采用)。<br>Vue.js是一个叫尤雨溪及其他的团队开发的，不过早年是他自己独立做出来的。这一点我觉得他很牛逼。<br>我觉得每个做开发的朋友们，都要有一个自己的开源项目，自己的开源项目可以是自己工作三到四年发现有很多地方是重复的，可以写一个框架减少不必要的重复工作量，现在已经有很多人正在做，比如renren-security、jeesite等开源项目，通过它们很容易就可以写出一个功能齐全的后台管理系统。也可以是自己开发中常用的某些组件，那些组件每次开发都要用，可以将其收集起来，针对其中某个api进行改造，比如Hutools这个开源项目在这个方面就做的挺不错。又或者是在校的学生们，自己可以不断实践，写写图书管理系统或者是根据学校某些需求定制一个系统出来，然后将其开源，我觉得这样一来，对于以后毕业出来找工作也是很有帮助的。总而言之，开源项目可以是很多，它可以是一个电商系统、CMS、CRM或ERP之类的，也可以是读书笔记、书籍收集、文章收集等。</p><p>关于Vue.js这部分，主要参考<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue.js</a>的官方网站和一些开源项目</p><p>下面正式开讲</p><h3><span id="工具">工具</span></h3><h4><span id="devtools">Devtools</span></h4><p>Devtools其目的主要是用于浏览器调试Vue相关的项目(因为Vue.js中的标签并不仅仅是html相关的，还有如el这类的标签及其相关的dom关系等，这些都是常规的浏览器调试所不能做到的)</p><p><a href="http://chromecj.com/utilities/2018-12/1653.html" target="_blank" rel="noopener">vue-devtools开源项目地址</a><br><a href="http://chromecj.com/utilities/2018-12/1653.html" target="_blank" rel="noopener">图文详解vue.js devtools使用方法</a><br>使用Devtools调试对应的Vue.js应用程序，效果如图:<br><img src="/2019/05/26/公司内部技术分享之vue-js和前端工程化/01.png" alt=""></p><h4><span id="vue-cli">Vue CLI</span></h4><p>1.Vue CLI具有如下优点<br>(1)功能丰富<br>对 Babel、TypeScript、ESLint、PostCSS、PWA、单元测试和 End-to-end 测试提供开箱即用的支持。</p><p>(2)易于扩展<br>它的插件系统可以让社区根据常见需求构建和共享可复用的解决方案。</p><p>(3)无需 Eject<br>Vue CLI 完全是可配置的，无需 eject。这样你的项目就可以长期保持更新了。</p><p>(4)CLI 之上的图形化界面<br>通过配套的图形化界面创建、开发和管理你的项目。</p><p>(5)即刻创建原型<br>用单个 Vue 文件即刻实践新的灵感。</p><p>(6)面向未来<br>为现代浏览器轻松产出原生的 ES2015 代码，或将你的 Vue 组件构建为原生的 Web Components 组件。</p><p>2.Vue CLI的三种构建方式<br>第一种方式(常规)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">vue create hello-world</span><br><span class="line">npm run server</span><br></pre></td></tr></table></figure></p><p>第二种方式(旧版本2.x)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure></p><p>第三种方式(GUI)<br>在git bash中输入如下命令，即可创建vue脚手架项目:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure></p><p>效果图如下:<br><img src="/2019/05/26/公司内部技术分享之vue-js和前端工程化/02.png" alt=""></p><h4><span id="vue-loader">Vue Loader</span></h4><p>Vue Loader的作用是解析和转换 .vue 文件，提取出其中的逻辑代码 script、样式代码 style、以及 HTML 模版 template，再分别把它们交给对应的 Loader 去处理。</p><p><a href="https://vue-loader.vuejs.org/zh/guide/" target="_blank" rel="noopener">Vue Loader官方指南</a><br>Vue Loader的例子很多，如图所示:<br><img src="/2019/05/26/公司内部技术分享之vue-js和前端工程化/03.png" alt=""><br>从图中我们就可以看出它们的职责和作用，正好验证前面说的script（逻辑代码)、style(样式代码)、template(html模板)。<br>换句话说，Vue Loader你可以理解为一个tomcat服务器，它不仅仅能解析jsp和servlet，还能处理css、html、js等前端三剑客。</p><h3><span id="核心插件">核心插件</span></h3><h4><span id="vue-router">Vue Router</span></h4><p><a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">Vue Router文档</a><br>Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。<br>包含的功能如下:<br>(1)嵌套的路由/视图表<br>(2)模块化的、基于组件的路由配置<br>(3)路由参数、查询、通配符<br>(4)基于 Vue.js 过渡系统的视图过渡效果<br>(5)细粒度的导航控制<br>(6)带有自动激活的 CSS class 的链接<br>(7)HTML5 历史模式或 hash 模式，在 IE9 中自动降级<br>(8)自定义的滚动条行为</p><h4><span id="vuex">Vuex</span></h4><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p><p><a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">Vuex官方文档</a></p><h4><span id="vue服务端渲染">Vue服务端渲染</span></h4><p>Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记”激活”为客户端上完全可交互的应用程序。服务器渲染的 Vue.js 应用程序也可以被认为是”同构”或”通用”，因为应用程序的大部分代码都可以在服务器和客户端上运行。</p><p><a href="https://ssr.vuejs.org/zh/#%E4%BB%80%E4%B9%88%E6%98%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%B8%B2%E6%9F%93-ssr-%EF%BC%9F" target="_blank" rel="noopener">Vue.js服务端渲染指南</a></p><p>这个服务端渲染通常可以用node.js中的express框架，当然了，也可以用koa或者egg.js等。</p><h3><span id="资源列表">资源列表</span></h3><p><a href="https://github.com/vuejs" target="_blank" rel="noopener">Vue.js官方仓库</a><br><a href="https://curated.vuejs.org/" target="_blank" rel="noopener">Vue.js优选</a><br><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">Vue.js资源</a></p><p>关于Vue.js学习方式，个人建议对HTML+CSS+JavaScript要掌握的比较好才行，不仅仅对前端而言，后端也亦如此。<br>为什么这么说呢？<br>通常来说做Java后台开发的，基本上前端也会。<br>另外从一位前端工程师的角度来看，前端的技术与后端相比，更新迭代更快，但是不变的还是前端三剑客那点东西。把握了这些基本上学任何前端框架都是一件很容易的事情。<br>正如Vue.js起步中所说的那样:<br><strong>官方指南假设你已了解关于 HTML、CSS 和 JavaScript 的中级知识。如果你刚开始学习前端开发，将框架作为你的第一步可能不是最好的主意——掌握好基础知识再来吧！之前有其它框架的使用经验会有帮助，但这不是必需的。</strong><br>另外我一直认为，公司研发岗位，如开发人员、测试人员、运维人员、运营人员、产品人员等，至少要知道彼此在做什么以及彼此工作之间联系，我觉得这样会比较好，不然很容易会陷入一个死循环，你可以理解为”闭关锁国”。</p><p>本次的Vue.js内部分享不算太多，只不过是全局概况一下，更多的内容，可以去官方网站上学习。</p><p>我觉得作为一名研发人员，一定要养成通过官网学习的习惯，像博客之类的可以作为一个辅助或者深入的学习方式。通过官方网站学习，我觉得总体可以让你形成一个全局的认识，这种认识，可以让你触类旁通或举一反三。</p><p>举个例子说一下，最近因为某个电商项目二次开发，而该二次开发用的是ThinkPHP框架，虽然我没有接触过PHP方面的，但是我通过官网相关知识，一下就了解了它的大致，ThinkPHP是基于MVC的，而正好可以联系到Java中的SSM,其也是基于MVC。</p><h2><span id="前端工程化">前端工程化</span></h2><p>这一部分内容我将结合我的开发经历和《前端工程化体系设计与实践》这本书。</p><h4><span id="前后端分离">前后端分离</span></h4><h5><span id="原始的前后端分离方式">原始的前后端分离方式</span></h5><p>前端把页面模板写好，后台将页面模板改为jsp或者freemaker、volocity等动态模板语言。</p><p>曾经做的一个智能酒店项目就是使用这种方式。这样做最不好的地方是，如果公司是前后端职责分明的话，前端每改动某个页面时，都需要将修改的后发给后台人员，后台人员将其改为jsp。这样一来效率及其低下，当然了，小公司是不会这么做的，小公司都是后台兼任前端的，自然就可以省去这些不必要的时间成本。</p><p>原始的前后端分离方式优缺点(以模板语言采用jsp为例):</p><p>优点:<br>(1)严格按照MVC模式，职责分明，效率还是挺高的，举个例子说明，视图(jsp)只负责展示数据而不做过多的逻辑判断处理，过多的逻辑判断应该交给控制器内部的业务逻辑方法进行处理。<br>(2)由于通常采用的是模板语言(jsp、freemaker、volocity等)，视图里可以做一定的逻辑判断和处理，因此不必嵌入大量的js，大量的js如果某一个有问题，将会导致整个有问题，比如写一个ajax方法，但是参数没有传进去，这时页面上将不会显示数据，只会空白，只能用浏览器调试才能发现是哪里有问题，如果是jsp的话，直接就会报500错误(或者内部做一些处理，让其跳转到错误指定界面);<br>(3)减少HTTP请求(只需请求一次即可,如果页面是html的话，需要大量的js函数请求后端路由，在一定程度上会增大服务器的压力，导致页面延迟);<br>(4)不用考虑浏览器兼容性(有些js的方式由于浏览器的兼容性而不能正常调用或者需要进行改动);</p><p>缺点:<br>(1)复用性较差(由于返回的不是json数据而是视图，导致复用性不是特别好);<br>(2)过于依赖Java运行环境(需要servlet容器);<br>(3)前后端未分离，耦合性高，可读性差(jsp中嵌入java代码及其大量的jstl标签，导致可读性不好，耦合性也高，当然了，如果做一个良好的设计并遵循的话，耦合性是可以降低的，可读性也是可以提高的);</p><p>总的来说，用jsp作为视图展示，可复用性不是特别好，于是曾经的第二个项目LMS(智能门锁系统)，视图就变成了HTML，由Ajax作为前后端交互的支点。</p><p>用Ajax的优缺点如下:</p><p>优点:<br>(1)开发过程前后端脱离，通过接口进行JSON数据传输(职责分明更加明确);<br>(2)跨平台能力更强，依托于浏览器的支持(基本上人们常用的浏览器(谷歌、火狐、IE、360等)都支持)<br>(3)可复用性更好;</p><p>缺点:<br>(1)开发难度大，考虑浏览器兼容性;<br>(2)页面请求过多(参考网站十大优化原则，其中一点优化原则是减少HTTP请求，过多的HTTP请求对于性能是十分消耗的);<br>(3)接口代码需要新增很多(这一点我相信许多开发人员都有这样的感触);<br>(4)大量的逻辑判断都需要使用js(前面我说过,js是不允许一丁点错误的，一旦错误，体验很不好，至少jsp报错500，可以让其跳转到一个友好的提示，而html就不行了，直接就没有数据或者是如果牵扯到布局，直接会影响到用户体验);</p><p>总的来说，开发中一般两者兼用。</p><p>不过后来，Vue.js、Angular.js、React.js火起来了，前后端分离实践更佳的方式到来。</p><p>因为即便完全采用jsp作为视图展示/采用HTML作为视图展示或者两者兼用，还是存在不少的问题的。这一点后面会讲到的。</p><h4><span id="前端工程化">前端工程化</span></h4><p>前端工程化的目的在于<strong>提高生产效率</strong></p><h5><span id="前端工程化的衡量准则">前端工程化的衡量准则</span></h5><p>三大衡量准则:</p><p>(1)从开发的角度衡量工程化，主要体现为”快”;<br>天下武功，唯“快”不破。做项目也是如此，特别是做产品原型，一定要快，快速做出来，然后使用mock套一些假数据，等待产品经理确认是其想要的，然后就可以开发的。从中也体现着“敏捷”。</p><p>(2)从测试的角度衡量工程化，主要体现为”快”和”准”;</p><p>“快”的主要体现在前端工程师和后端工程师并行完成之后的集成测试阶段。<br>“准”的主要体现在集成测试阶段对问题的准确定位。</p><p><strong>什么是集成测试?</strong><br>集成测试，也叫组装测试或联合测试。在单元测试的基础上，将所有模块按照设计要求（如根据结构图）组装成为子系统或系统，进行集成测试。</p><p>你可以将其理解为一辆车，车在没有组装成是一堆大大小小的零件，这些零件经过生产工人生产，组装工人组装，质量工人测试。零零散散的零件单个测试也许是没有问题的，但是组装成一辆车的时候，这个时候就可能会出现问题。</p><p>(3)从部署角度衡量工程化，主要体现为”稳”;<br>通常会使用持续集成工具(如Jenkins、 Travis CI等)，通常会将每一次开发人员的代码提交进行编译、测试、发布，如果编译或测试有问题，直接就会将本次构建取消，回滚到稳定版本。这样一来，可以确保”稳”。</p><h5><span id="前端工程化的进化历程">前端工程化的进化历程</span></h5><h5><span id="前端工程化的3个阶段">前端工程化的3个阶段</span></h5><p>(1)本地工具链-工程化不等同于工具化;<br>工程化的核心并非工具。前端工程化是以规范工作流程为手段，以工具为实现媒介，其最终目的是为了提高研发效率以及保证Web产品的线上质量。<br>如果要给前端工程化一个明确定义的话，比较恰当的定义如下:</p><p>前端工程化是一系列工具和规范的组合，规范为蓝本，工具为实现。其中规范如下:<br>a.项目文件的组织结构，比如使用目录名称区分源文件和目标文件;<br>b.源代码的开发范式，比如使用既定的模块化方案;<br>c.工具的使用规范，比如工程化自身的配置规范;<br>d.各阶段环境的依赖，比如部署功能的实现需要目标服务器提供SSH全新;</p><p>另外工具链的统一，另一个好处是巩固了流程的规范性，开发者使用统一的工具链、遵循统一的规范进行业务代码的编写，利于多人协作和程序维护。</p><p>试想一下:<br>假设你身处一个团队，团队中没有任何的开发规范，遇到一些需求，往往这些需求是可以通过引入某一个框架来实现的，但由于没有任何的限制，本来一个框架可以实现多个需求，但像前面提到的没有任何规范限制，就变成了多个框架实现多个需求。这样一来项目将会越来越乱，不利于团队协作。我曾经就做过这样的项目，深有感触。</p><p>(2)管理平台-进一步淡化差异、加深规范;</p><p>管理平台形态的工程化需达到如下几点:<br>a.淡化环境差异性，保证构建产出一致性;<br>b.权限集中管理，提高安全性;<br>c.项目版本集中管理，便于危机处理，比如版本回滚等;</p><p>管理平台形态将各个功能模块的执行环境集中化，从各模块实现角度来讲与本地工具链基本一致。</p><p>(3)持续集成-前端工程化的目标是融入整体<br>即使进化达到管理平台形态，前端工程化方案所能解决问题的本质仍然只是将前端工程师与后端工程师的工作解耦。虽然提高了两端的工作效率，但是各自的工作流却是孤立的。前端有了构建和部署，后端也有了相应的阶段，两方的工作流是分离的，最终的融合工作仍然难以避免繁琐的人工操作。</p><p>举个例子，比如后端修改了某个接口，前端某个dom与这个接口关系紧密，接口变化了，dom渲染也要随之变化，但是由于工作流是分开的，前端工程师并不知道这一点。我们经常强调一点，要加强沟通，但是当项目紧急期到来时，每个人手里任务一大堆，这时沟通就可能会少了很多，这时像上面说的，接口发生变化时，前端工程师并不知情，直到因为某些操作发生问题时，才知道原来是接口变了。另外从某个角度来看，接口的设计原则应该是与前端相隔离的，但是实际中并非如此。</p><h2><span id="总结">总结</span></h2><p>今天主要分享的两个知识点，一个是vue.js，另一个是关于前端工程化。<br>vue.js相关的demo，我已经放到我的GitHub上，感兴趣的朋友可以将其git clone下来，<br>地址为:<a href="https://github.com/developers-youcong/blog-manage-system" target="_blank" rel="noopener">https://github.com/developers-youcong/blog-manage-system</a></p><p>前端工程化，用一句话来概括就是让工具更好的服务于流程。从研发的角度看，使用技术实现业务(让技术更好的服务于业务)。今天说的这个工程化核心就是工具与流程相结合起来，让整个工作流紧密结合且效率提高。鉴于本次内部分享说的挺多的，目前这只是一部分。欢迎大家评论留言，最好还是提问题，问题让思考更深刻。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 内部技术分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRMEB中因为重写规则导致的服务器异常和404之解决办法</title>
      <link href="/2019/05/21/CRMEB%E4%B8%AD%E5%9B%A0%E4%B8%BA%E9%87%8D%E5%86%99%E8%A7%84%E5%88%99%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%82%E5%B8%B8%E5%92%8C404%E4%B9%8B%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2019/05/21/CRMEB%E4%B8%AD%E5%9B%A0%E4%B8%BA%E9%87%8D%E5%86%99%E8%A7%84%E5%88%99%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%82%E5%B8%B8%E5%92%8C404%E4%B9%8B%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>问题描述:<br>安装CRMEB后，只能通过https://域名//index.php/admin访问到后台，而不能直接通过https://域名/admin访问到后台，以至于导致进入系统后台出现有的功能界面可用，有的功能界面则出现404或者服务器异常之类的，从浏览器上看就是路径方面的原因导致的，实际原因则是apache没有开启重写模块导致的。<br><a id="more"></a><br>问题解决方案:<br>第一、.htaccess(根目录有一个.htaccess，这个要与如下保持一致)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">Options +FollowSymlinks -Multiviews</span><br><span class="line">RewriteEngine on</span><br><span class="line"></span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteRule ^(.*)$ index.php?/$1 [QSA,PT,L]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></p><p>第二、开启rewrite重写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod rewrite</span><br><span class="line">/etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure></p><p>参考问题解决方案:<br><a href="https://www.cnblogs.com/li-mei/p/5959217.html" target="_blank" rel="noopener">apache开启rewrite重写</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法图解之递归</title>
      <link href="/2019/05/20/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E4%B9%8B%E9%80%92%E5%BD%92/"/>
      <url>/2019/05/20/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E4%B9%8B%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h2><span id="递归">递归</span></h2><p><img src="/2019/05/20/算法图解之递归/01.png" alt="图一"></p><p><img src="/2019/05/20/算法图解之递归/02.png" alt="图二"></p><p>图一和图二对比，它们的作用都是相同的。从流程上分析，图一流程相对比较复杂，而图二则简单明了，<br><a id="more"></a><br>这是某位同行在stackoverflow上面说过的话:如果使用循环，程序的性能可能更高;如果使用递归，程序可能更容易死理解。如何选择要看什么对你来说跟重要。</p><p>那么递归和循环之间的区别是什么呢？<br>不同点:<br>递归是函数体中调用自己，如果不加以控制，将无休止的调用自己，直到堆栈溢出。<br>循环是反复执行某一段区域内的代码，如果不加以控制，就会形成死循环。</p><p>相同点:<br>不管是递归还是循环，都要设定一定的条件，以结束递归或循环。</p><h2><span id="基线条件和递归条件">基线条件和递归条件</span></h2><p>编写递归函数时，必须告诉它何时停止递归。正因为如此，每个递归函数都有其两部分:基线部分和递归条件。<br>递归条件指的是函数调用自己，而基线条件则指的的函数不再调用自己，从而避免形成无线循环。</p><p>代码示例如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package cn.recursive.example;</span><br><span class="line"></span><br><span class="line">public class RecursiveExample &#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">      /**</span><br><span class="line">       * 一个递归方法</span><br><span class="line">       * @param x</span><br><span class="line">       * @return</span><br><span class="line">       */</span><br><span class="line">       public static int f(int x) &#123;</span><br><span class="line">           </span><br><span class="line">           if (x == 0) &#123;</span><br><span class="line">               </span><br><span class="line">               return 0;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           return 2 * f(x - 1) + x * x;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">       public static void main(String[] args) &#123;</span><br><span class="line">           </span><br><span class="line">    </span><br><span class="line">         //调用该方法，当x=2时，输出为6</span><br><span class="line">        System.out.println(RecursiveExample.f(2));</span><br><span class="line">          </span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码中的return 0相当于基线条件，而return 2 <em> f(x-1)+x </em> x相当于递归条件。</p><h2><span id="栈">栈</span></h2><p>栈是一种数据结构，我们时常用它，而我们自己却不知道。<br><img src="/2019/05/20/算法图解之递归/03.png" alt="图三"></p><p>使用栈虽然很方便，但是也是要付出代价:<br>存储详尽的信息可能占用大量的内存。每个函数调用都要占用一定的内存，如果栈很高，就意味着计算机存储了大量函数调用的信息。在这种情况，通常有如下两种选择:<br>(1)重新编写代码，转而使用循环;<br>(2)使用尾递归。这是一个高级递归主题。另外并非所有的语言都支持尾递归;</p><p>我的感触:<br>其实算法图解之递归这一章对我的最大感触就是使用大量的伪代码和生动的图像，使我觉得代码的确是一个生动有活力的家伙。另外我觉得伪代码对于理清代码思路有很大帮助，特别是要写某个功能的时候，这时可以写写伪代码梳理一下逻辑，然后开始动手验证伪代码的逻辑是否正确。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows安装composer</title>
      <link href="/2019/05/18/windows%E5%AE%89%E8%A3%85composer/"/>
      <url>/2019/05/18/windows%E5%AE%89%E8%A3%85composer/</url>
      
        <content type="html"><![CDATA[<h2><span id="下载composer-setupexe">下载Composer-Setup.exe</span></h2><p>请点击该链接即可<a href="https://getcomposer.org/Composer-Setup.exe" target="_blank" rel="noopener">下载Composer</a></p><p>通常下载完后是一个exe文件，双击安装即可。</p><p>注意:默认会搜索你的php安装路径，建议最好把php安装好。</p><p>关于php安装，可以去php官网上下载zip包解压某个配置配置环境变量即可。<br><a id="more"></a></p><h2><span id="走完安装流程后在控制台输入composer-version出现对应的版本号表示ok">走完安装流程后，在控制台输入composer –version，出现对应的版本号表示OK</span></h2><p><img src="/2019/05/18/windows安装composer/composer.png" alt=""></p><h2><span id="更换镜像">更换镜像</span></h2><p>执行如下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure></p><p>之所以更换镜像，主要是加快相关库的下载速度。</p><p>以我搭建ThinkPHP5.0开发环境为例，第一步执行<code>composer create-project topthink/think tp</code>就卡了半天不动，当我执行更换镜像后，一下就好了。</p><p>参考资料如下:<br><a href="https://blog.csdn.net/sanbingyutuoniao123/article/details/70314651" target="_blank" rel="noopener">Windows环境下Composer的安装教程</a></p><p>说明:我并没有完全按照上述参考资料上一步一步的来，不过有几点很关键，那就是必须要下载composer并按照相关步骤操作和本地有php环境。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16.04之Apache2.4配置SSL证书</title>
      <link href="/2019/05/17/Ubuntu16-04%E4%B9%8BApache2-4%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6/"/>
      <url>/2019/05/17/Ubuntu16-04%E4%B9%8BApache2-4%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<p>具体步骤不是特别复杂，有些细枝末节我可能忽略了，不过参考我的这个教程，应该可以配置好的，如果朋友们有问题，可以留言给我。<br>参考资料如下:<br><a href="https://blog.csdn.net/m_zhurunfeng/article/details/79980320" target="_blank" rel="noopener">Linux + Apache2 环境下配置 https (腾讯云免费证书)</a></p><p><a href="https://help.aliyun.com/document_detail/102450.html" target="_blank" rel="noopener">Ubuntu系统Apache 2部署SSL证书</a></p><p>虽然说很多不记得了，但是有这么几点必须要提。</p><p>第一、去阿里云下载证书，通过winscp或者xftp上传文件到服务器上<br>第二、解压证书zip包，并将其放入某个文件夹下<br>第三、安装apache，并按照如下步骤:<br><a id="more"></a><br>安装Apache、启动SSL模块、重写模块等:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2</span><br><span class="line"></span><br><span class="line">a2enmod ssl</span><br><span class="line"></span><br><span class="line">a2enmod rewrite</span><br></pre></td></tr></table></figure></p><p>编辑default-ssl.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/apache2/sites-available/default-ssl.conf</span><br></pre></td></tr></table></figure></p><p>修改如下(记住该文件默认就有，将对应的crt、key等修改为阿里云证书或者腾讯云证书对应的,下面是我阿里云对应的):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SSLCertificateFile /home/yc/apache_https/1854029_www.yc.com_public.crt</span><br><span class="line">SSLCertificateKeyFile /home/yc/apache_https/1854029_www.yc.com.key</span><br><span class="line">SSLCertificateChainFile /home/yc/apache_https/1854029_www.yc.com_chain.crt</span><br></pre></td></tr></table></figure></p><p>建立软链接:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-enabled/001-ssl.conf</span><br></pre></td></tr></table></figure></p><p>重启Apache:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure></p><p>最后你发现访问你的域名<a href="https://yourdomain.com" target="_blank" rel="noopener">https://yourdomain.com</a> 出现apache的欢迎页就表示OK了</p><p>另外如果你发现访问不了的话，记得在default-ssl.conf配置文件添加如下，然后重启一下Apache即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory &quot;/var/www/html&quot;&gt;</span><br><span class="line">  Options FollowSymLinks ExecCGI</span><br><span class="line"> AllowOverride All</span><br><span class="line"> Order allow,deny</span><br><span class="line"> Allow from all</span><br><span class="line"> Require all granted</span><br><span class="line">  &lt;/Directory&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16.04启动tomcat缓慢问题之解决方案</title>
      <link href="/2019/05/16/Ubuntu16-04%E5%90%AF%E5%8A%A8tomcat%E7%BC%93%E6%85%A2%E9%97%AE%E9%A2%98%E4%B9%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/05/16/Ubuntu16-04%E5%90%AF%E5%8A%A8tomcat%E7%BC%93%E6%85%A2%E9%97%AE%E9%A2%98%E4%B9%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>问题信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16-May-2019 10:41:10.630 WARNING [localhost-startStop-1] org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [117,835] milliseconds.</span><br></pre></td></tr></table></figure></p><p>问题描述:<br>去官网下载tomcat后，解压本地并启动，发现启动极其缓慢，启动一个tomcat居然要十几分钟或者是始终启动不起来。<br><a id="more"></a></p><p>问题原因:<br>是因为Tomcat8熵池阻塞变慢</p><p>解决方案:</p><p>(1)找到java.security文件(请执行该命令:cd /usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/security)</p><p>(2)编辑该文件(vim java.security)</p><p>将文件中的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">securerandom.source=file:/dev/random</span><br></pre></td></tr></table></figure></p><p>改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">securerandom.source=file:/dev/.urandom</span><br></pre></td></tr></table></figure></p><p>参考问题解决链接:<br><a href="http://www.cnblogs.com/thinkingandworkinghard/p/6729705.html" target="_blank" rel="noopener">tomcat启动很慢 停留在 At least one JAR was scanned for TLDs yet contained no TLDs.</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL5.7授权用户远程访问</title>
      <link href="/2019/05/15/MySQL5-7%E6%8E%88%E6%9D%83%E7%94%A8%E6%88%B7%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"/>
      <url>/2019/05/15/MySQL5-7%E6%8E%88%E6%9D%83%E7%94%A8%E6%88%B7%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<p>做个记录，每次弄环境的时候，特别是弄mysql环境，时不时都要用到下面的命令</p><p>命令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;oa123456&apos; with grant option;</span><br><span class="line">flush privileges;</span><br><span class="line">quit;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong>注意:</strong><br>上面的命令原型如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &apos;username&apos;@&apos;%&apos; identified by &apos;password&apos; with grant option;</span><br></pre></td></tr></table></figure></p><p>命令中的“%”相当于授权任意主机。</p><p>另外还有就是通常授权用户远程连接，还需要修改配置文件，以Ubuntu16.04为例，需要修改mysqld.cnf配置文件，将里面的bind=127.0.0.1注释掉即可<br>然后重启一下mysql服务，这时你就可以通过sqlyong或navicat连接mysql服务。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Git中如何撤销上一次的commit</title>
      <link href="/2019/05/15/%E5%9C%A8Git%E4%B8%AD%E5%A6%82%E4%BD%95%E6%92%A4%E9%94%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84commit/"/>
      <url>/2019/05/15/%E5%9C%A8Git%E4%B8%AD%E5%A6%82%E4%BD%95%E6%92%A4%E9%94%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84commit/</url>
      
        <content type="html"><![CDATA[<p>有的时候我们一不小心就git commit -m ‘commit message info’<br>解决办法，很简单，只需执行<code>git reset HEAD~</code>这条命令即可，即能保证你原本的修改还在，也能撤销本次提交失误。</p><p>这种撤销上一次提交是比较好的，如果是版本回退的话也能解决这个问题，但是版本回退只适合于你本次提交并没有改动什么或者改动不大的情况。如果你改动太多，版本回退意味着着你需要重新复制一遍，当然了，解决这种问题的办法有很多，分支开发的方式也能解决这种问题。<br><a id="more"></a><br>顺便补充到，如果git add 失误呢？如何解决呢？<br>执行如下命令即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r dir_name --cached</span><br></pre></td></tr></table></figure></p><p>dir_nameo可以是.也可以是你git add 某个目录，如git add src/<br>你只需git rm -r src/ –cached 便可删除git add src/ 添加到的暂存区，从而达到撤销git add 的失误操作</p><p><a href="https://blog.csdn.net/svap1/article/details/80537198" target="_blank" rel="noopener">git撤销add操作</a><br><a href="https://www.jianshu.com/p/9f11d398111f" target="_blank" rel="noopener">[译] 在Git中如何撤销上一次的commit(s)？</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Ajax异步上传文件</title>
      <link href="/2019/05/14/%E4%BD%BF%E7%94%A8Ajax%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
      <url>/2019/05/14/%E4%BD%BF%E7%94%A8Ajax%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>使用Ajax上传文件的应用场景颇多，比如上传用户头像、博客文章中插入图片、对认证用户相关身份进行校验等等很多很多。<br><a id="more"></a><br>下面贴相关代码示例:<br>html代码片段:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">                   &lt;form class=&quot;layui-form&quot; action=&quot;#&quot; id=&quot;uploadForm&quot;&gt;</span><br><span class="line">&lt;div class=&quot;layui-form-item&quot;&gt;</span><br><span class="line">&lt;label class=&quot;layui-form-label&quot;&gt;名称&lt;/label&gt;</span><br><span class="line">&lt;div class=&quot;layui-input-block&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;config_name&quot; placeholder=&quot;请输入配置名称&quot; autocomplete=&quot;off&quot;</span><br><span class="line">class=&quot;layui-input&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;layui-form-item layui-form-text&quot;&gt;</span><br><span class="line">&lt;label class=&quot;layui-form-label&quot;&gt;描述&lt;/label&gt;</span><br><span class="line">&lt;div class=&quot;layui-input-block&quot;&gt;</span><br><span class="line">&lt;textarea id=&quot;config_desc&quot; placeholder=&quot;请输入配置描述&quot; class=&quot;layui-textarea&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;layui-form-item&quot;&gt;</span><br><span class="line">&lt;label class=&quot;layui-form-label&quot;&gt;文件&lt;/label&gt;</span><br><span class="line">&lt;div class=&quot;layui-input-block&quot;&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;</span><br><span class="line">&lt;p class=&quot;help-block&quot;&gt;请选择配置文件&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;layui-form-item&quot;&gt;</span><br><span class="line">&lt;div class=&quot;layui-input-block&quot;&gt;</span><br><span class="line">&lt;button class=&quot;layui-btn&quot; id=&quot;save_config_file&quot;&gt;立即提交&lt;/button&gt;</span><br><span class="line">&lt;button type=&quot;reset&quot; class=&quot;layui-btn layui-btn-primary&quot;&gt;重置&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>js代码片段:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">//上传配置文件</span><br><span class="line">$(&quot;#save_config_file&quot;).click(function () &#123;</span><br><span class="line"></span><br><span class="line">var name = $(&quot;#config_name&quot;).val();</span><br><span class="line">var desc = $(&quot;#config_desc&quot;).val();</span><br><span class="line">var userId = $(&quot;#userId&quot;).val();</span><br><span class="line"></span><br><span class="line">var formData = new FormData($(&quot;#uploadForm&quot;)[0]);</span><br><span class="line"></span><br><span class="line">formData.append(&quot;name&quot;,name);</span><br><span class="line">formData.append(&quot;desc&quot;,desc);</span><br><span class="line">formData.append(&quot;userId&quot;,userId);</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url: &apos;http://localhost:8090/bfi-web/api/ide/settings/uploadFiles&apos;,</span><br><span class="line">type: &apos;POST&apos;,</span><br><span class="line">data: formData,</span><br><span class="line">async: false,</span><br><span class="line">cache: false,</span><br><span class="line">contentType: false,</span><br><span class="line">processData: false,</span><br><span class="line">success: function (returndata) &#123;</span><br><span class="line"></span><br><span class="line">layui.use(&apos;layer&apos;, function () &#123;</span><br><span class="line">var layer = layui.layer;</span><br><span class="line"></span><br><span class="line">layer.msg(returndata.returnMsg, &#123;</span><br><span class="line">icon: 1</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line"></span><br><span class="line">closeLayui();</span><br><span class="line"></span><br><span class="line">&#125;, 300);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">error: function (returndata) &#123;</span><br><span class="line">console.log(&quot;====================Error==========================&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>Java代码片段(这里是SpringMVC+腾讯云对象存储,可将其更换为其它对象存储，如七牛云、ftp或者是其它对象存储):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">   /**</span><br><span class="line">    * 上传文件</span><br><span class="line">    * @param request</span><br><span class="line">    * @param file</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">@PostMapping(value=&quot;/uploadFiles&quot;,produces=&quot;application/json;charset=utf-8&quot;)</span><br><span class="line">public JSONObject upModify(HttpServletRequest request, MultipartFile file) &#123;</span><br><span class="line"></span><br><span class="line">JSONObject json = new JSONObject();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">COSClientUtil cosClientUtil = new COSClientUtil(); </span><br><span class="line"></span><br><span class="line">if(!file.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">String name = cosClientUtil.uploadFile2Cos(file); </span><br><span class="line">               String desc = request.getParameter(&quot;desc&quot;);</span><br><span class="line">               String names = request.getParameter(&quot;name&quot;);</span><br><span class="line">               String userId = request.getParameter(&quot;userId&quot;);</span><br><span class="line">               </span><br><span class="line">               logger.info(&quot;desc:&quot;+desc);</span><br><span class="line">               logger.info(&quot;names:&quot;+names);</span><br><span class="line">               logger.info(&quot;userId:&quot;+userId);</span><br><span class="line">               </span><br><span class="line">//图片名称</span><br><span class="line">logger.info(&quot;name = &quot; + name);</span><br><span class="line"></span><br><span class="line">//上传到腾讯云</span><br><span class="line">String imgUrl = cosClientUtil.getImgUrl(name); </span><br><span class="line"></span><br><span class="line">logger.info(&quot;imgUrl = &quot; + imgUrl);</span><br><span class="line"></span><br><span class="line">//数据库保存图片地址</span><br><span class="line">String dbImgUrl = imgUrl.substring(0,imgUrl.indexOf(&quot;?&quot;));</span><br><span class="line">logger.info(&quot;dbImgUrl = &quot; + dbImgUrl);</span><br><span class="line"></span><br><span class="line">IdeSettings ide = new IdeSettings();</span><br><span class="line">ide.setName(names);</span><br><span class="line">ide.setContent(dbImgUrl);</span><br><span class="line">ide.setUserId(userId);</span><br><span class="line">ide.setUpdateTime(DateUtil.date().toString());</span><br><span class="line">ide.setUploadTime(DateUtil.date().toString());</span><br><span class="line">ide.setDescription(desc);</span><br><span class="line"></span><br><span class="line">boolean isAddConfig = ideSettingsService.insert(ide);</span><br><span class="line"></span><br><span class="line">logger.info(isAddConfig);</span><br><span class="line"></span><br><span class="line">if(isAddConfig) &#123;</span><br><span class="line">json.put(CommonEnum.RETURN_CODE, &quot;000000&quot;);</span><br><span class="line">json.put(CommonEnum.RETURN_MSG, &quot;上传成功&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">json.put(CommonEnum.RETURN_CODE, &quot;222222&quot;);</span><br><span class="line">json.put(CommonEnum.RETURN_MSG, &quot;上传失败&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;else &#123;</span><br><span class="line">json.put(CommonEnum.RETURN_CODE, &quot;111111&quot;);</span><br><span class="line">json.put(CommonEnum.RETURN_MSG, &quot;参数异常&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">json.put(CommonEnum.RETURN_CODE, &quot;333333&quot;);</span><br><span class="line">json.put(CommonEnum.RETURN_MSG, &quot;特殊异常&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">       </span><br><span class="line">       return json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法图解之选择排序</title>
      <link href="/2019/05/13/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E4%B9%8B%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/05/13/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E4%B9%8B%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>假设你的计算机存储了很多乐趣。对于每个乐队，你都记录了其作品被播放的次数。<br><img src="/2019/05/13/算法图解之选择排序/01.png" alt=""><br><a id="more"></a><br>如果你要将这个列表按播放次数从多到少的顺序排列，从而将你喜欢的乐队排序。该如何做呢?</p><p>我第一眼看到这个问题时，想到的是通过sql解决这个问题<br>假设如果这是一个数据表的话，我很容易就可以通过order by 字段名 desc进行降序排序(也就是从大到小)</p><p>不过我觉得sql反而麻烦，于是转用冒泡排序。代码示例如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package cn.pratice.simple;</span><br><span class="line"></span><br><span class="line">public class BubbleSort &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">int [] arr = &#123;156,141,35,94,88,61,111&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;排序前数组为:&quot;);</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(&quot;arr:&quot;+arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; arr.length-1; i++) &#123; //外层循环控制排序趟数</span><br><span class="line">for (int j = 0; j &lt; arr.length-1-i; j++) &#123;//内层循环控制每一趟排序多少次</span><br><span class="line">if(arr[j]&gt;arr[j+1]) &#123;</span><br><span class="line">int temp = arr[j];</span><br><span class="line">arr[j] = arr[j+1];</span><br><span class="line">arr[j+1]=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;排序后的数组为:&quot;);</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(&quot;arr:&quot;+arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码的输出结果是:<br><img src="/2019/05/13/算法图解之选择排序/02.png" alt=""><br>但是该结果输出的是从小到大，显然不符合我的期望。<br>顺便提一下冒泡排序的原理:<strong>比较两个相邻的元素，将值大的元素交换至右端</strong></p><p>不过以Java开发为例，一般情况我们拿轮子里面的东西即可实现，如下面代码所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package cn.pratice.simple;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class BubbleSort &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">int [] arr = &#123;156,141,35,94,88,61,111&#125;;</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(&quot;arr:&quot;+arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(arr);</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(&quot;arr:&quot;+arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>回到正题，那么我们如何将其变为降序?实现代码如下(还是复用现有的轮子)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package cn.pratice.simple;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class BubbleSort &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">Integer[] array = new Integer[] &#123; 156, 141, 35, 94, 88, 61, 111 &#125;;</span><br><span class="line">java.util.Arrays.sort(array, new Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">public int compare(Integer o1, Integer o2) &#123;</span><br><span class="line">return o2 - o1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; array.length; i++) &#123;</span><br><span class="line">Integer integer = array[i];</span><br><span class="line">System.out.println(&quot;integer:&quot; + integer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们再来看看选择排序的例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package cn.pratice.simple;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class BubbleSort &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">long startTime = System.currentTimeMillis();    //获取开始时间</span><br><span class="line"></span><br><span class="line">int[] arr = new int[] &#123; 156, 141, 35, 94, 88, 61, 111&#125;;</span><br><span class="line">System.out.println(&quot;交换前&quot;);</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(&quot;arr:&quot;+arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; arr.length - 1; i++) &#123;</span><br><span class="line">int k = i;</span><br><span class="line">for (int j = k + 1; j &lt; arr.length; j++) &#123;</span><br><span class="line">if(arr[j] &lt; arr[k]) &#123;</span><br><span class="line">k = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(i!=k) &#123;</span><br><span class="line">int temp = arr[i];</span><br><span class="line">arr[i] = arr[k];</span><br><span class="line">arr[k] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;交换后:&quot;);</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(&quot;arr:&quot;+arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">long endTime = System.currentTimeMillis();    //获取结束时间</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;程序运行时间：&quot; + (endTime - startTime) + &quot;ms&quot;);    //输出程序运行时间</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么选择排序的原理又是什么呢?<br>每一趟从待排序的记录中选出最小的元素，顺序放在已排好序的序列最后，直到全部记录排序完毕。也就是:每一趟在n-i+1(i=1,2…n-1)个记录中选取关键字最小的记录作为有序序列中第i个记录。基于此思想的有简单选择排序、树形选择排序和堆排序。我们现在所说的就是简单排序。</p><p>最后比较一下冒泡排序和简单排序的区别(从概念上分析):<br><strong>冒泡排序:</strong><br>依次比较相邻的两个数，将小数放在前面，大数放在后面。即第一趟比较第一个和第二个数，将小数放前，大数放后。然后比较第二个数和第三个数，嫁给你小数放前，大数放后，如此继续，直至比较最后两个数，嫁给你小数放前，大数放后。至此第一趟结束，将最大的数放在最后。如此下去，重复以上过程，直至最终完成。</p><p><strong>选择排序</strong><br>第一次从下标为0的开始，下标为0的这个数与后面的n-1个进行比较，找出最小或者最大的放在下标为0的这个位置，第二次从下标为1的开始比较，查询剩下的最大或者最小值，放在下标为1的位置，以此类推，直至排序完成。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法图解之数组和链表</title>
      <link href="/2019/05/12/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E4%B9%8B%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8/"/>
      <url>/2019/05/12/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E4%B9%8B%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2><span id="数组和链表">数组和链表</span></h2><h3><span id="1数组">1.数组</span></h3><p>以添加第四个待办事项为例，但后面的那个抽屉已经放了别人的东西<br><img src="/2019/05/12/算法图解之数组和链表/array01.png" alt=""><br>这就像你与朋友去看电影，找到地方就坐后又来了一位朋友，但原来坐的地方没有空位置，只得再找一个方可坐下所有人的地方。在这种情况下，你需要请求计算机重新分配一块可容纳4个待办事项的内存，再将所有待办事项移到那里。<br><a id="more"></a><br>如果又来了一位朋友，而当前坐的地方也没有空位，你们就得再次转移，这是一件非常麻烦的事情。同样，在数组中添加新的元素也可能很麻烦。如果没有了空间，就得移到内存的其他地方，因此添加新的元素的速度会很慢一种解决之道是“预留座位”：即便当前只有3个待办事项，也请求计算机提供10个位置，以防需要添加待办事项。这样只要待办事项不超过10个，就无需转移。这是一个不错的权变措施，但是它也有如下两个缺点:<br>(1)浪费内存。比如本来四个就可以存储，你却申请了10个。<br>(2)如果超过了10个以上，还得转移。</p><h3><span id="2链表">2.链表</span></h3><p>链表中的元素可存储在内存的任何地方，如下图所示:<br><img src="/2019/05/12/算法图解之数组和链表/linkedlist.png" alt=""></p><p>链表的每个元素都存储了下一个元素的地址，从而使一系列随机的内存地址串在一起。</p><p>使用链表时，根本就不需要移动元素。这还可避免另外一个问题。假设你与五位朋友去看一部很火的电影。你们六个人想坐在一起，但看电影的人较多，没有六个在一起的座位。使用数组时有时就会遇到这样的情况。假设你要为数组分配10000个位置，内存中有10000个位置，但不都靠在一起。在这种情况下，你将无法为该数组分配内存。链表在此相当于说:”我们分开来说”，因此，只要有足够的内存空间，就能为链表分配内存。</p><h3><span id="3常见数组和链表操作的运行时间">3.常见数组和链表操作的运行时间</span></h3><p><img src="/2019/05/12/算法图解之数组和链表/array_linkedlist.png" alt=""></p><p>练习1:<br>假设你要编写一个记账的应用程序，每天将所有的支出记录下来，并在月底统计支出算算当月花了多少钱。因此，你执行的插入操作很多，但读取操作很少。该使用数组还是链表?</p><p>我的回答是:<br>使用链表。因为链表的插入和删除数据是非常快的，如果仅仅只是读取可以采用数组。</p><p>练习2:<br>假设你要为饭店创建一个接受顾客点菜单的应用程序。这个应用程序存储一系列点菜单。服务员添加点菜单，二厨师去除点菜单并制作菜肴。这是一个点菜单队列:服务员在队尾添加点菜单，厨师取出队列开头的点菜单并制定佳肴。<br><img src="/2019/05/12/算法图解之数组和链表/diancaiduilie.png" alt=""><br>你是使用数组还是链表来实现这个队列?</p><p>我的回答是:<br>从这幅图中可以看出这是一个先进先出队列。先进先出一般使用链表。<br>而且根据题中信息，插入删除功能较多，插入是服务员添加点菜单，厨师取出点菜单意味着完成炒菜(相当于删除点菜单)。所以我觉得应该使用链表来实现这个队列。</p><p>练习题3:<br>我们来做一个思考实验。假设Facebook记录一系列用户名，每当有用户视图登录Facebook时，都查找其用户名，如果找到就允许用户登录。由于经常有用户登录Facebook，因此需要执行大量的用户名查找操作。假设Facebook实验二分查找算法，而这种算法要求能够随机访问-立即获取中间的用户名。考虑到这一点，应使用数组还是链表来存储用户名呢?</p><p>我的回答是:<br>首先可以从题中获取的关键消息是需要执行大量的用户名查询操作，这就意味着查询会非常多。链表在插入和删除方面效率非常高，但是查询却不是很高。数组则与其相反。在此我认为应用使用数组。理由是因为根据题目要求中说算法要求随机访问。</p><p>练习题4:<br>经常有用户在Facebook注册。假设你已决定使用数组来存储用户名，在插入方面数组有何缺点呢?具体地说，在数组中添加新用户将会出现什么情况?<br>我的回答是:<br>针对这两种情况，有必要复习一下数组，分析数组的优缺点:</p><p>数组的优点如下:<br>(1)按照索引查询元素速度快;<br>(2)能存储大量数据;<br>(3)索引遍历数组方便;</p><p>数组的缺点:<br>(1)根据内容查找速度慢;<br>(2)数组的大小一经确定不能改变;<br>(3)数组只能存储一种类型的数组;<br>(4)增加、删除元素效率慢;<br>(5)未封装任何方法，所有操作都需要用户自己定义;</p><p>分析完后，再回到问题上，答案就已经出来的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法图解之大O表示法</title>
      <link href="/2019/05/12/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E4%B9%8B%E5%A4%A7O%E8%A1%A8%E7%A4%BA%E6%B3%95/"/>
      <url>/2019/05/12/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E4%B9%8B%E5%A4%A7O%E8%A1%A8%E7%A4%BA%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2><span id="大o表示法">大O表示法</span></h2><p>大O表示法是一种特殊的表示法，指出了算法的速度有多快。</p><h2><span id="1算法的运行时间以不同的速度增加">1.算法的运行时间以不同的速度增加</span></h2><p>关于算法的运行时间以不同的速度增加，我联系到平时写代码，严谨的代码(易读，可扩展，精悍，经过多方测试等)，通常运行速度与那些不严谨的代码(完全相反)的代码进行对比，你会发现前者的运行速度是大于后者，这个虽然不能说绝对，大多情况都是这样的。<br>以我之前VsCode插件开发的一个反面例子为例:<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const vscode = require(&apos;vscode&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//存储token</span><br><span class="line">function storeToken(token) &#123;</span><br><span class="line"></span><br><span class="line">console.log(&quot;----------------access deep token-----------:&quot;+token);</span><br><span class="line"></span><br><span class="line">const pathMain = &apos;d:\\Workspace&apos;; //项目存放路径</span><br><span class="line"></span><br><span class="line">var pathToken = pathMain + &apos;\\&apos; + &quot;token&quot;; //创建toekn目录</span><br><span class="line"></span><br><span class="line">//判断项目存放目录是否存在</span><br><span class="line">if (fs.existsSync(pathMain)) &#123;</span><br><span class="line"></span><br><span class="line">//判断token目录是否存在</span><br><span class="line">if (!fs.existsSync(pathToken)) &#123;</span><br><span class="line"></span><br><span class="line">fs.mkdir(pathToken, function (err) &#123;</span><br><span class="line">if (err) &#123;</span><br><span class="line">return console.error(err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//写入文件</span><br><span class="line">fs.writeFile(&quot;D://Workspace//token//token.txt&quot;, token, &apos;utf8&apos;, function (error) &#123;</span><br><span class="line"></span><br><span class="line">if (error) &#123;</span><br><span class="line">console.log(error);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">console.log(&apos;write success&apos;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fs.mkdir(pathMain, function (err) &#123;</span><br><span class="line">if (err) &#123;</span><br><span class="line">return console.error(err);</span><br><span class="line">&#125;</span><br><span class="line">fs.mkdir(pathToken, function (err) &#123;</span><br><span class="line">if (err) &#123;</span><br><span class="line">return console.error(err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//写入文件</span><br><span class="line">fs.writeFile(&quot;D://Workspace//token//token.txt&quot;, token, &apos;utf8&apos;, function (error) &#123;</span><br><span class="line"></span><br><span class="line">if (error) &#123;</span><br><span class="line">console.log(error);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">console.log(&apos;write success&apos;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = storeToken;</span><br></pre></td></tr></table></figure></p><p>这段代码的意思实际上就是判断某个文件夹是否存在，如果存在则进行下一步，也就是写入对应的文件，否则创建对应的文件并写入对应的文件。<br>这段代码完全可以简化很多，爱好程序的朋友基本上都知道，程序都是自上往下执行的，代码越短，执行速度也就是会越快，像上面这样的函数，其实可以简化很多，也就代表着执行速度也会很快(也体现着运行时间减少)。</p><p>大O表示法指的并非以秒为单位的速度。</p><p>大O表示法让你能够比较操作数，它指出算法运行时间的增速。</p><h2><span id="2理解不同的大o运行时间">2.理解不同的大O运行时间</span></h2><p><img src="/2019/05/12/算法图解之大O表示法/gezi.png" alt=""></p><p>假定是一个html,我要将body内容弄成这样有这么几种方式?<br>(1)添加<tr><td>等这样的很多个(手工劳动);<br>(2)使用for循环进行遍历(这个算法就是简单算法的一个实现);</td></tr></p><p>翻看了后面的答案，发现其实跟我上面说的内容本质上没有差别。</p><h2><span id="3大o表示法指出了最糟情况下的运行时间">3.大O表示法指出了最糟情况下的运行时间</span></h2><p>假设你使用简单查找在电话簿中找人。你知道，简单查找的运行时间为O(n)，这意味着在最糟情况下，必须查看电话簿中的每个条目。如果要查找的是Adit-电话簿中的第一个人，一次就能找到，无需查看多个条目。考虑到一次就找到Adit，请问这种算法的运行时间是O(n)还是O(1)呢？<br>我觉得是O(n)，理由是接下来万一是Bob或是Y先生呢。</p><h2><span id="4一些常见的大o运行运行时间">4.一些常见的大O运行运行时间</span></h2><p><img src="/2019/05/12/算法图解之大O表示法/gezi.png" alt=""></p><ul><li>算法的速度指的并非时间，而是操作数的增速。</li></ul><ul><li>谈论算法的速度时，我们说的是随着输入的增加，其运行时间将以什么样的速度增加。</li></ul><ul><li>算法的运行时间用大O表示法表示</li></ul><ul><li>O(log n)比O(n)快，当需要搜索的元素越多时，前者比后者快的越多。</li></ul><p>练习题:<br>(1)在电话簿中根据名字查找电话号码;<br>(2)在电话簿中根据电话号码找人(提示:你必须查找整个电话簿);<br>(3)阅读电话簿中每个人的电话号码;<br>(4)阅读电话簿中姓名以A打头的人的电话号码。这个问题比较棘手，它涉及第四章的概念，答案可能让你感到惊讶。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法图解之内存的工作原理</title>
      <link href="/2019/05/12/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E4%B9%8B%E5%86%85%E5%AD%98%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <url>/2019/05/12/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E4%B9%8B%E5%86%85%E5%AD%98%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/05/12/算法图解之内存的工作原理/memory_work.png" alt=""><br>其中fe0ffeeb是一个内存单元的地址，需要将数据存储到内存时，你请求计算机提供存储空间，计算机给你一个存储地址。需要存储多项数据时，有两种基本方式，一种是数组，另外一种是链表。但它们并非都适用于所有情形，因此知道它们的差别非常重要。<br><a id="more"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法图解之二分查找</title>
      <link href="/2019/05/12/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E4%B9%8B%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2019/05/12/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E4%B9%8B%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<p>简单查找，如下图:</p><p><img src="/2019/05/12/算法图解之二分查找/simple_select.png" alt=""></p><p>从图可知那个眼镜男从1开始猜，猜到100，大家都知道这种猜法最终都会得到答案，就是时间问题而已。100毕竟是这个列表的最大长度。但是换言之，如果是一万、百万、上千亿呢？那么这种猜法虽然能够得到答案，但是时间方面的成本将会非常大。于是二分法应需而生。<br><a id="more"></a><br>二分法，如下图:<br><img src="/2019/05/12/算法图解之二分查找/dichotomy.png" alt=""></p><p>从图可知这次眼镜男学聪明了，从中间入手一分为二。以100为例猜大小，假定要猜的数字为65，这时眼镜男说50，于是小姐姐说小了，眼镜男再猜70，小姐姐说大了，这时眼镜男可以肯定的范围应该在51~69这个范围内，相比简单查找，这种方式效率要高的多。最终眼镜男肯定会猜到正确的数字，花费的时间与简单查找相比，花费时间肯定是很少的。</p><p>二分法也有其局限性，局限性就是必须要确保列表是有序的才行。</p><p>以代码来讲解:<br>简单查找，以数组为例，索引从0开始<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testSelect() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">int [] num = new int[] &#123;1,2,3,4,5,6&#125;;</span><br><span class="line">for (int i = 0; i &lt; num.length; i++) &#123;</span><br><span class="line">System.out.println(num[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>二分法，例子如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testSelect() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">int[] num = new int[] &#123;1,3,5,7,9,11&#125;;</span><br><span class="line"></span><br><span class="line">int start = 0;</span><br><span class="line"></span><br><span class="line">int end = num.length - 1;</span><br><span class="line">int i = 14;</span><br><span class="line"></span><br><span class="line">while(true) &#123;</span><br><span class="line">int mid = (start+end) / 2;</span><br><span class="line"></span><br><span class="line">if(i == num[mid]) &#123;</span><br><span class="line">System.out.println(&quot;index:&quot;+mid);</span><br><span class="line">break;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">if(i &lt; num[mid]) &#123;</span><br><span class="line">end = mid - 1;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">start = mid + 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(start &gt; end) &#123;</span><br><span class="line">System.out.println(&quot;no find,will insert in:&quot;+start);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于命和运</title>
      <link href="/2019/05/12/%E5%85%B3%E4%BA%8E%E5%91%BD%E5%92%8C%E8%BF%90/"/>
      <url>/2019/05/12/%E5%85%B3%E4%BA%8E%E5%91%BD%E5%92%8C%E8%BF%90/</url>
      
        <content type="html"><![CDATA[<p>在《见识》这本书中开篇的序言就是”命和运决定人的一生”。</p><p>一个人想得到命运之神的呵护并不容易。要想命好，首先认识命的重要性，即信命和认命。 信命是知道自己有所不能(清楚认识自己),认命则是不超越命运给自己的画的线，对于得不到的坦然接受。<br><a id="more"></a><br>影响命的因素:环境因素+我们自己对未来走向划定的方向。</p><p>正如雷军曾经说的，在风口上，猪也能飞起来。记得曾经诺基亚在手机市场上无疑是一个大巨头，但是这个大巨人随着智能手机时代的到来，没有把握好机会，从而不复当年了。</p><p>所谓命就是一个人看待问题和做事情的方法，如此而已，但它们决定了人的一生。</p><p>以下撒切尔夫人说的这样一句话，挺有启示意义的:<br><strong>注意你的想法，因为它能决定你的言辞和行动。<br>注意你的言辞和行动，因为它能主导你的行为。<br>注意你的行为，因为它能变成你的习惯。<br>注意你的习惯，因为它能塑造你的性格。<br>注意你的性格，因为它能决定你的命运。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>老黄牛读后感</title>
      <link href="/2019/05/12/%E8%80%81%E9%BB%84%E7%89%9B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
      <url>/2019/05/12/%E8%80%81%E9%BB%84%E7%89%9B%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p>感悟: 有句话叫做，一千个人里面就有一千个哈姆莱特，通常表示着不同的人对某个事物看法不同。 今天再读这篇文章时，联想到2018年的程序员跳楼事件。至于为什么跳楼，真相究竟是什么，这里不作探究。这里想说的是，放眼整个世界，每天都有像老黄牛这样的例子。<br><a id="more"></a><br>老黄牛的例子让我战战兢兢如履薄冰，丝毫不敢松懈自己。因为我不想自己的未来像老黄牛这样。</p><p>记得曾经参加过一个读书会活动，与一个前辈交谈，那个前辈跟我说了他闺蜜的事情，说他闺蜜老公快35了，在华为公司做纯技术性方面的，他闺蜜为此忧心忡忡，因此而加班加点的学习，防止以后万一有什么情况，好歹有个应对办法。对于传统社会而言，男人就是顶梁柱。一旦这个顶梁柱倒了，随之而来对于这个家族，将会是非常大的打击。</p><p>联想到如今，初中级开发工程师层出不穷，软件开发的市场逐渐饱满，我不禁问自己未来的核心竞争力在哪？也许目前我已经具备了全栈开发的技术储备，但是我并没有全栈的眼界。什么是眼界？眼界就好比一个人的见识，正如吴军写的一本书《见识》中说的那样，你能走多远，取决于你的见识。</p><p>记得我哥哥当初对我说过一句话，未来的人才将是T字型的，要想不断前行，唯一不断提高自己的核心竞争力(这个核心竞争力不单单是吃饭的家伙，还有很多，比如人际交往能力、判断力、思考力等)。</p><p>绝大多数的人常常满足于已知的，缺乏探索的勇气(换言之缺乏接收新生事物的勇气，比如我就是如此)，每年我想除了给自己定flag并实现它，同时也应该提高自己在其它方面的能力，比如做软件开发的同时，我是不是也应该了解了解产品、运营等他们的工作。或者是做IT的，也应该接触接触一些非IT的人士。再换言之就个人而言，我是不是应该也可以去接触一下我摄影方面的等或者是给自己一个假期来一个说走就走的旅行。</p><p>正文如下(大家可以好好思考读一读):</p><p>还没有像往年一样为主人犁完五亩地，老黄牛的一条腿断了。</p><p>**    折腿的事就发生在昨天。</p><pre><code>昨天的天气很好，风和日丽。这是个今年开春以来少有的好日子，农夫们不用互相招呼就纷纷踏上仍有些峭寒的田垄，一年的农事在鞭子的抽打声和吆喝声中开始了。老黄牛是一头经验丰富的耕牛，忠心耿耿，勤奋劳作。他像往年一样卖力耕田，但他在时光的打磨中已经很衰老了，拉着一驾犁好像拉着一座大山在走，异常沉重。主人斥责他，他羞愧难当，叹了一口气，一咬牙一使劲，他听到了发自身体内部的一声响，一条腿断了，他知道这意味着什么，这是生命戛然而止的声音。暮霭落尽，黑夜升满。老黄牛独自蜷伏在牛栏里，想着自己的心事。他抬起疲惫的头颅，凝视着星空下那片肥沃的黑土，心中充满眷念和回忆。他把自己的爱与恨、乐与苦、血与汗以及生命中的一切都交给了这片土地。日月作证，鲜嫩的青草作证，金黄的果实作证，还有孩子作证。那是主人家的孩子，胖嘟嘟红扑扑的样子，一个很阳光的男孩。那天中午，小男孩跑到牛栏前，向老黄牛宣读了他的一篇获奖作文：“……我家的这头老黄牛，又高又大，浑身的皮毛是灰褐色的。嘴巴像个簸箕口，眼睛圆鼓鼓的很有神，一对牛角像拉满的弓箭，威武有力。它干起活儿来劲头大，也舍得卖力气。有一天中午，天气热极了，太阳像个火球似的挂在头顶，简直让人喘不过气来，我以为老黄牛一定不干活儿了，就跑到田间去看，它仍然还在拉犁耕田。它身上粘着一块块干泥巴，喘着粗气，双腿踏进没膝深的烂泥中，一步一步拉着犁，没有一点要停下来的样子。”老黄牛记得，那天小男孩给了它一把嫩青草和一个敬礼。</code></pre><p>昨天下午，村里的兽医被请来。兽医一边查伤情一边摇头，只是对伤口作了简单的象征性包扎。兽医当着老黄牛的面对主人说：“一头废牛，这种牛还能拉犁，真是怪事。主人呐，现在你只有一件事要做，宰掉它，然后卖钱。”主人望着老黄牛，目光变得闪烁不定，但老黄牛知道，那里面暗藏着可怕的杀戮凶光。</p><pre><code>夜已三更，天空的星星被风吹得了无踪影，整个村子沉浸在死一般的寂静和黑暗中。倏然间，主人家正屋的灯亮了，磨刀的声音和屠夫特有的浑浊笑声敲碎了夜的寂寥。老黄牛知道大限将至。闭了眼任所有的泪水流尽。老黄牛最后大吼一声，用自己的方式结果了自己。</code></pre><p>听到一声闷响，主人急忙领着提了刀的屠夫赶到牛栏。他们看到的只是扭断了脖子扑倒在地的老黄牛和一面粘满了老黄牛鲜血的土墙。</p><pre><code>屠夫气愤地骂道，畜生，我这把刀白磨了。主人却笑了，这畜生倒是挺体贴我呢，要我少花钱。**</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背影读后感</title>
      <link href="/2019/05/12/%E8%83%8C%E5%BD%B1%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
      <url>/2019/05/12/%E8%83%8C%E5%BD%B1%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p>这篇文章不记得是学生时期那个时期学的，只单单记得初读时还没有深刻的体会。而如今读起来，不禁让人眼睛闪烁着泪光，有种想哭的感觉。 正如一句诗歌所说的那样，“初闻不知曲中意，再听已是曲中人”。<br><a id="more"></a><br>原文如下(大家可以细细品味，每天工作再怎么繁忙，还是得留点时间读读书，让自己的心沉静下来):<br><strong>我与父亲不相见已二年余了，我最不能忘记的是他的背影 。<br>　　那年冬天，祖母死了，父亲的差使也交卸了，正是祸不单行的日子。我从北京到徐州打算跟着父亲奔丧回家。到徐州见着父亲，看见满院狼藉的东西，又想起祖母，不禁簌簌地流下眼泪。父亲说：“事已如此，不必难过，好在天无绝人之路！”<br>　　回家变卖典质，父亲还了亏空；又借钱办了丧事。这些日子，家中光景很是惨淡，一半因为丧事，一半因为父亲赋闲。丧事完毕，父亲要到南京谋事，我也要回北京念书，我们便同行。<br>　　到南京时，有朋友约去游逛，勾留了一日；第二日上午便须渡江到浦口，下午上车北去。父亲因为事忙，本已说定不送我，叫旅馆里一个熟识的茶房陪我同去。他再三嘱咐茶房，甚是仔细。但他终于不放心，怕茶房不妥帖；颇踌躇了一会。其实我那年已二十岁，北京已来往过两三次，是没有什么要紧的了。他踌躇了一会，终于决定还是自己送我去。我再三劝他不必去；他只说：“不要紧，他们去不好！”<br>　　我们过了江，进了车站。我买票，他忙着照看行李。行李太多了，得向脚夫行些小费才可过去。他便又忙着和他们讲价钱。我那时真是聪明过分，总觉他说话不大漂亮，非自己插嘴不可，但他终于讲定了价钱；就送我上车。他给我拣定了靠车门的一张椅子；我将他给我做的紫毛大衣铺好座位。他嘱我路上小心，夜里要警醒些，不要受凉。又嘱托茶房好好照应我。我心里暗笑他的迂；他们只认得钱，托他们只是白托！而且我这样大年纪的人，难道还不能料理自己么？唉，我现在想想，那时真是太聪明了！<br>　　我说道：“爸爸，你走吧。”他往车外看了看说：“我买几个橘子去。你就在此地，不要走动。”我看那边月台的栅栏外有几个卖东西的等着顾客。走到那边月台，须穿过铁道，须跳下去又爬上去。父亲是一个胖子，走过去自然要费事些。我本来要去的，他不肯，只好让他去。我看见他戴着黑布小帽，穿着黑布大马褂，深青布棉袍，蹒跚地走到铁道边，慢慢探身下去，尚不大难。可是他穿过铁道，要爬上那边月台，就不容易了。他用两手攀着上面，两脚再向上缩；他肥胖的身子向左微倾，显出努力的样子，这时我看见他的背影，我的泪很快地流下来了。我赶紧拭干了泪。怕他看见，也怕别人看见。我再向外看时，他已抱了朱红的桔子往回走了。过铁道时，他先将桔子散放在地上，自己慢慢爬下，再抱起桔子走。到这边时，我赶紧去搀他。他和我走到车上，将桔子一股脑儿放在我的皮大衣上。于是扑扑衣上的泥土，心里很轻松似的。过一会儿说：“我走了，到那边来信！”我望着他走出去。他走了几步，回过头看见我，说：“进去吧，里边没人。”等他的背影混入来来往往的人里，再找不着了，我便进来坐下，我的眼泪又来了。<br>　　近几年来，父亲和我都是东奔西走，家中光景是一日不如一日。他少年出外谋生，独立支持，做了许多大事。哪知老境却如此颓唐！他触目伤怀，自然情不能自已。情郁于中，自然要发之于外；家庭琐屑便往往触他之怒。他待我渐渐不同往日。但最近两年不见，他终于忘却我的不好，只是惦记着我，惦记着我的儿子。我北来后，他写了一信给我，信中说道：“我身体平安，惟膀子疼痛厉害，举箸提笔，诸多不便，大约大去之期不远矣。”我读到此处，在晶莹的泪光中，又看见那肥胖的、青布棉袍黑布马褂的背影。唉！我不知何时再能与他相见！</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>富爸爸财务自由之路</title>
      <link href="/2019/05/12/%E5%AF%8C%E7%88%B8%E7%88%B8%E8%B4%A2%E5%8A%A1%E8%87%AA%E7%94%B1%E4%B9%8B%E8%B7%AF/"/>
      <url>/2019/05/12/%E5%AF%8C%E7%88%B8%E7%88%B8%E8%B4%A2%E5%8A%A1%E8%87%AA%E7%94%B1%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>最近阅读一本书《富爸爸财务自由之路》，看序言和其中一部分内容比较有感触</p><p>一、你在哪个象限？这个象限适合你吗?<br>在书中开篇贴了一张图，如下所示:<br><img src="/2019/05/12/富爸爸财务自由之路/ebsi.jpg" alt=""><br><a id="more"></a><br>这四个英文字母分别代表的意思是 E，对应的单词是Employee，即雇员; B,对应的单词是Business owner,即企业所有者(老板); S,对应的单词Self-employed，即自由职业者; I,对应的单词Investor,即投资人;</p><p>我现在所处的象限和大多数人那样，均为E。</p><p>要说这个象限是否适合我，就目前而言还是比较适合我的。</p><p>不过人还是要心存理想，我还是希望日后我能成为一名Business owner或者投资人。</p><p>二、长大后想做什么?<br>长大后想做什么？ 相信90后的朋友们，每个人从小都会有这样一个梦想，想成为一名科学家或者是老师、大老板、救世的大英雄。 这些梦想的来源为身边的人(包括父母、朋友、亲戚、同学、阅读的书籍等等)。 从中可以看出耳濡目染的影响。 所处的环境决定你会成为什么样的人，这就好比为什么很多家长为什么想让自己的孩子进入重点中学，并不仅仅是重点中学师资资源多么好(当然了，这个也很重要)，还有一个重要因素就是环境，有句话叫做，近朱者赤近墨者黑。</p><p>三、水的故事，两个人竞争<br>水的故事，个人感触极深，以软件开发为例，我在想为什么程序员被称作码农，是因为我们一直在做重复劳动，将脑力劳动硬是变成了体力。 比如一段代码出现五到六次以上，为什么就不能将其抽象成一个函数调用？再比如明知动手直接开干会出问题，为什么就不能事先好好思考，用笔画一个流程图梳理一下(尽管可能有点丑，但这并不是最重要的，最重要的是把业务逻辑想清楚)。 书中水的故事，两个人竞争，一个人累死累活起早贪黑去很远的地方用桶装水，另一个则在这段时间写了一个商业规划书，拉了几笔投资，用作通水的不锈钢管道。 最后的结果是，起早贪黑的人面临失业，而另外一个人，无时无刻不再赚钱，而且非常轻松。 这让我想到一个词，“规矩”，在软件开发中也有规矩，比如代码规范(每个人编码的方式存在差异，但是如果将其统一化，团队主义多一点，个人英雄主义少一点，那么我想加班的频率也就不那么多了)。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16.04忘记MySQL5.7的root用户密码之解决方案</title>
      <link href="/2019/05/07/Ubuntu16-04%E5%BF%98%E8%AE%B0MySQL5-7%E7%9A%84root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E4%B9%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/05/07/Ubuntu16-04%E5%BF%98%E8%AE%B0MySQL5-7%E7%9A%84root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E4%B9%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>其实也就四步，如下:<br><a id="more"></a></p><h2><span id="修改配置文件">修改配置文件</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vimi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p>并在 在[mysqld]下方的skip-external-locking下面添加一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure><p>然后再重启MySQL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql restart</span><br></pre></td></tr></table></figure></p><h2><span id="进入mysql修改密码">进入MySQL修改密码</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>一路回车，免密登录</p><p>设置密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE mysql.user SET authentication_string=password(&apos;kdfaslf&apos;) WHERE User=&apos;root&apos; AND Host =&apos;localhost&apos;;</span><br></pre></td></tr></table></figure></p><p>刷新权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></p><p>退出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure></p><h2><span id="修改配置文件sudo-vimi-etcmysqlmysqlconfdmysqldcnf">修改配置文件(sudo vimi /etc/mysql/mysql.conf.d/mysqld.cnf)</span></h2><p>并将在[mysqld]下方的skip-external-locking下面添加一行的skip-grant-tables去除</p><h2><span id="重启mysql让配置生效回归正常">重启MySQL让配置生效，回归正常</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql restart</span><br></pre></td></tr></table></figure><p>参考资料如下:<br><a href="https://blog.csdn.net/mr_hui_/article/details/83011202" target="_blank" rel="noopener">Ubuntu 16.04下忘记MySQL密码解决方法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windowns下code: command not found</title>
      <link href="/2019/05/07/Windowns%E4%B8%8Bcode-command-not-found/"/>
      <url>/2019/05/07/Windowns%E4%B8%8Bcode-command-not-found/</url>
      
        <content type="html"><![CDATA[<p>错误信息:code: command not found’</p><p>解决办法:<br>配置VsCode环境变量<br><a id="more"></a><br>首先找到VsCode点击其属性，查看路径<br><img src="/2019/05/07/Windowns下code-command-not-found/01.png" alt=""></p><p>进入这个路径后<br><img src="/2019/05/07/Windowns下code-command-not-found/02.png" alt=""></p><p>将D:\Program Files\Microsoft VS Code\bin添加到环境变量即可</p><p>code这个命令很重要，比如最近我做的一个叫作根据vscode插件名称去对应的插件市场下载插件就需要用到code命令。</p>]]></content>
      
      
      
        <tags>
            
            <tag> VsCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下CRMEB环境搭建</title>
      <link href="/2019/05/06/Linux%E4%B8%8BCRMEB%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/05/06/Linux%E4%B8%8BCRMEB%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>环境准备:<br>PHP7.0.33<br>MySQL5.7<br>Apache2.4</p><p>PHP环境安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php-pear php7.0-cli php7.0-common php7.0-curl \</span><br><span class="line">    php7.0-dev php7.0-fpm php7.0-json php7.0-mbstring php7.0-mcrypt \</span><br><span class="line">    php7.0-mysql php7.0-opcache php7.0-zip php7.0-intl php7.0-gd php7.0-xml</span><br></pre></td></tr></table></figure><p>MySQL环境安装:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-client mysql-server</span><br></pre></td></tr></table></figure></p><p>Apache2.4环境安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2><span id="克隆gitee项目">克隆Gitee项目</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www/html</span><br><span class="line"></span><br><span class="line">git clone https://gitee.com/ZhongBangKeJi/CRMEB</span><br></pre></td></tr></table></figure><h2><span id="修改apache的配置vim-etcapache2apache2conf">修改apache的配置(vim /etc/apache2/apache2.conf)</span></h2><p>可以通过<code>/Option</code>快速定位查找<br>配置文件如下:<br><img src="/2019/05/06/Linux下CRMEB环境搭建/01.png" alt=""></p><p>将其改为如下:<br><img src="/2019/05/06/Linux下CRMEB环境搭建/02.png" alt=""></p><p>修改完apache配置文件后，记得重启一下apache(重启可以让配置文件生效)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure></p><h2><span id="访问httpipcrmeb出现如图">访问</span></h2><p><img src="/2019/05/06/Linux下CRMEB环境搭建/03.png" alt=""></p><p>解决办法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libapache2-mod-php</span><br></pre></td></tr></table></figure></p><p>这个问题的原因是因为apache没有对php的解析模块导致的，安装一下就好了。<br>安装后记得重启一下apache2</p><p>这时在访问时，出现如图:<br><img src="/2019/05/06/Linux下CRMEB环境搭建/04.png" alt=""></p><p>这样就表示没有问题了，这时你只需输入<a href="http://IP/CRMEB/public/install进入安装即可" target="_blank" rel="noopener">http://IP/CRMEB/public/install进入安装即可</a><br>再进入安装前，先给目录授权一下，不然监测环境会出现目录、文件权限监测不通过问题</p><h2><span id="授权">授权</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www/html/CRMEB</span><br><span class="line"></span><br><span class="line">chmod -R 777 public</span><br><span class="line">chmod -R 777 runtime</span><br><span class="line">chmod -R 777 application</span><br></pre></td></tr></table></figure><h2><span id="安装流程">安装流程</span></h2><p>(1)安装向导<br><img src="/2019/05/06/Linux下CRMEB环境搭建/05.png" alt=""></p><p>(2)检测环境<br><img src="/2019/05/06/Linux下CRMEB环境搭建/06.png" alt=""><br>红色标记处是常见错误，可参考后面的问题解决链接。</p><p>(3)创建数据库<br><img src="/2019/05/06/Linux下CRMEB环境搭建/07.png" alt=""><br>红色标记处是常见错误，可参考后面的问题解决链接。</p><p>(4)安装成功<br><img src="/2019/05/06/Linux下CRMEB环境搭建/08.png" alt=""></p><p>点击进入后台,如图:</p><p><img src="/2019/05/06/Linux下CRMEB环境搭建/09.png" alt=""></p><p>后台管理界面如图:<br><img src="/2019/05/06/Linux下CRMEB环境搭建/10.png" alt=""><br>本地虚拟机访问地址:<a href="http://IP/CRMEB/admin/login/index.html" target="_blank" rel="noopener">http://IP/CRMEB/admin/login/index.html</a><br>如果是远程服务器，访问地址就变更为:<a href="http://IP/index.php/admin/login/index.html" target="_blank" rel="noopener">http://IP/index.php/admin/login/index.html</a></p><p>注意如果你访问后台管理界面并不像上面那样，而是出现没有样式的登录界面，请在/var/www/html/CRMEB目录下执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r ./* ../</span><br></pre></td></tr></table></figure></p><p>最后再重启一下apache服务器发现就正常可以看到登录界面了。</p><p>问题解决链接:<br><a href="https://developers-youcong.github.io/2019/05/06/PHP%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8curl-init-%E5%87%BD%E6%95%B0/">PHP无法使用curl_init()函数</a><br><a href="https://developers-youcong.github.io/2019/05/06/%E8%AF%B7%E5%9C%A8mysql%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BF%AEsql-mode%E6%88%96sql-mode%E4%B8%BANO-AUTO-CREATE-USER-NO-ENGINE-SUBSTITUTION/">请在mysql配置文件修sql-mode或sql_mode为NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</a></p><p>参考资料如下:<br><a href="https://www.kancloud.cn/crmeb/crmeb/895383" target="_blank" rel="noopener">CRMEB官方安装文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP无法使用curl_init()函数</title>
      <link href="/2019/05/06/PHP%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8curl-init-%E5%87%BD%E6%95%B0/"/>
      <url>/2019/05/06/PHP%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8curl-init-%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>主要针对在Ubuntu16.04搭建CRMEB环境时，监测环境会出现一个curl_init问题，这时只需执行如下命令即可解决:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php-curl</span><br></pre></td></tr></table></figure></p><a id="more"></a>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请在mysql配置文件修sql-mode或sql_mode为NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</title>
      <link href="/2019/05/06/%E8%AF%B7%E5%9C%A8mysql%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BF%AEsql-mode%E6%88%96sql-mode%E4%B8%BANO-AUTO-CREATE-USER-NO-ENGINE-SUBSTITUTION/"/>
      <url>/2019/05/06/%E8%AF%B7%E5%9C%A8mysql%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BF%AEsql-mode%E6%88%96sql-mode%E4%B8%BANO-AUTO-CREATE-USER-NO-ENGINE-SUBSTITUTION/</url>
      
        <content type="html"><![CDATA[<p>错误信息:请在mysql配置文件修sql-mode或sql_mode为NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</p><p>解决办法(最有效，以MySQL5.7为例):<br>修改配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure></p><p>并在该配置文件添加如下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sql-mode = NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure></p><p>最后，重启一下MySQL服务器即可解决该问题<br><a id="more"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apache不能解析php之解决办法</title>
      <link href="/2019/05/06/apache%E4%B8%8D%E8%83%BD%E8%A7%A3%E6%9E%90php%E4%B9%8B%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2019/05/06/apache%E4%B8%8D%E8%83%BD%E8%A7%A3%E6%9E%90php%E4%B9%8B%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>记录一下Ubuntu16.04下的apache服务器不能解析php的问题，如图所示:</p><p><img src="/2019/05/06/apache不能解析php之解决办法/01.png" alt=""></p><a id="more"></a><p>对于这个Ubuntu16.04最直接最快速的解决办法就是执行如下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo apt-get install libapache2-mod-php</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows上hexo: command not found</title>
      <link href="/2019/05/05/windows%E4%B8%8Ahexo-command-not-found/"/>
      <url>/2019/05/05/windows%E4%B8%8Ahexo-command-not-found/</url>
      
        <content type="html"><![CDATA[<p>使用hexo写博客已经有好几个月了，今天突然出现hexo: command not found，应该与我白天的时候调一下环境变量等有关。<br>在对应的path添加环境变量，即可解决该问题。我的环境变量路径为:E:\Hexo\node_modules\hexo\bin<br><a id="more"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SyntaxError: Non-ASCII character &#39;æ&#39; in file csdn.py on line 7, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details</title>
      <link href="/2019/05/03/SyntaxError-Non-ASCII-character-xe6-in-file-csdn-py-on-line-7-but-no-encoding-declared-see-http-python-org-dev-peps-pep-0263-for-details/"/>
      <url>/2019/05/03/SyntaxError-Non-ASCII-character-xe6-in-file-csdn-py-on-line-7-but-no-encoding-declared-see-http-python-org-dev-peps-pep-0263-for-details/</url>
      
        <content type="html"><![CDATA[<p>错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SyntaxError: Non-ASCII character &apos;æ&apos; in file csdn.py on line 7, but no</span><br><span class="line">encoding declared; see http://python.org/dev/peps/pep-0263/ for details</span><br></pre></td></tr></table></figure></p><p>错误原因:<br>原因是因为Python在默认状态下不支持源代码中的编码所致。<br><a id="more"></a><br>解决方案:<br>在Python文件开头加上<code># -*- coding: utf-8 -*</code>即可解决该问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入分析JavaWeb之JSP</title>
      <link href="/2019/05/02/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90JavaWeb%E4%B9%8BJSP/"/>
      <url>/2019/05/02/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90JavaWeb%E4%B9%8BJSP/</url>
      
        <content type="html"><![CDATA[<p>本文主要围绕如下几个方面?</p><ol><li>什么是JSP，它可以做什么及其它的生命周期是什么</li><li>JSP的九大内置对象</li><li>JSP的四大作用域<a id="more"></a></li></ol><h2><span id="什么是jsp它可以做什么">什么是JSP，它可以做什么</span></h2><p>JSP是Java Server Page的缩写，翻译过来的意思是Java服务器页面。</p><p><strong>它可以做什么呢?</strong><br>(1)处理表单提交;<br>(2)数据渲染;<br>(3)页面逻辑处理;</p><p>一句话，只有想不到没有做不到。</p><p>比如html+js+JavaWeb结合一起开发，这样开发的好处在于可以前后端分离，不必担心像jsp那样，页面上全部都是&lt;%%&gt;之类的标签，年头久了，会增加维护的困难。当然了，之所以维护困难，也是因为开发者没有约定好一些规范。使用html+js+JavaWeb一套，比较麻烦的就是需要写较多的js，js是一个让人又爱又恨的家伙。让人爱，是因为它很强大可以做很多事情，让人恨是因为，一旦开发者粗心一点，就会报错，一旦报错就得浏览器调试，有的时候还得考虑浏览器缓存问题，比如明明已经改了但是还是报错，这时清理一下浏览器缓存就好。</p><p><strong>JSP的生命周期</strong><br>(1)servlet容器编译Servlet源文件，生成Servlet类(<strong>编译阶段</strong>);<br>(2)加载与JSP对应的Servlet类，创建其实例，并调用它的初始化方法(<strong>初始化阶段</strong>);<br>(3)调用与JSP对应的Servlet实例的服务方法(<strong>执行阶段</strong>);<br>(4)调用与JSP对应的Servlet实例的销毁方法，然后销毁Servlet实例(<strong>销毁阶段</strong>);</p><p>如图所示(图更能生动的表现):<br><img src="/2019/05/02/深入分析JavaWeb之JSP/01.png" alt=""></p><h2><span id="jsp的九大内置对象">JSP的九大内置对象</span></h2><h3><span id="request对象">request对象</span></h3><p>request 对象是 javax.servlet.httpServletRequest类型的对象。 该对象代表了客户端的请求信息，主要用于接受通过HTTP协议传送到服务器的数据。（包括头信息、系统信息、请求方式以及请求参数等）。request对象的作用域为一次请求。</p><p><em>request的应用场景有哪些?</em><br>(1)接收参数<br>(2)设置编码(比如jsp中post请求乱码)<br>(3)页面转发</p><p>简单举个例子:<br>login.jsp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;login_handle.jsp&quot; method=&quot;post&quot;&gt;</span><br><span class="line">用户名:&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">密码:&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>login_hanglde.jsp:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">request.setCharacterEncoding(&quot;UTF8&quot;);</span><br><span class="line">String username = request.getParameter(&quot;username&quot;);</span><br><span class="line">String password = request.getParameter(&quot;password&quot;);</span><br><span class="line"></span><br><span class="line">out.println(&quot;username:&quot;+username);</span><br><span class="line">out.println(&quot;password:&quot;+password);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>从上面例子可以看到request.getParameter主要用于接收数据，而其中的request.setCharacterEncoding(“UTF8”)用来修正字符编码。</p><p>关于request，我认为有必要看看看它的源码实现，首先基于request对象属于HttpServletRequest类型的对象，所以我们要看源码的话就先去看HttpServletRequest的源码。在这里我就不列出源码了，大家可以自己去看，特别是使用maven来构建项目的，阅读源码更加方便。</p><h3><span id="response对象">response对象</span></h3><p>response 代表的是对客户端的响应，主要是将JSP容器处理过的对象传回到客户端。response对象也具有作用域，它只在JSP页面内有效。</p><p><em>response对象的应用场景有哪些?</em><br>(1)重定向<br>(2)刷新页面</p><p>在这里我要说下面试常考题之一:</p><p>重定向：<br>　　(1)发送了一次新的请求，之前的数据是不存在的，发生在客户端<br>　　(2)浏览器的地址是重定向的页面的地址</p><p>转发：<br>　　(1)没有开启新的请求，原来请求的数据一并传递过来，发生在服务器端。<br>　　(2)浏览器的地址栏不会发生改变</p><p>建议还不明白的可以自己可以写一个简单的例子，其实以我上面的例子就可以比较出去，只需在login_handle.jsp中的&lt;%%&gt;里面添加如下代码即可比较出来:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(&quot;index.jsp&quot;);</span><br><span class="line">request.getRequestDispatcher(&quot;index.jsp&quot;).forward(request, response);</span><br></pre></td></tr></table></figure></p><p>注意:如果要以转发做实验，请注释掉重定向，如果以重定向做实验请注释掉转发。</p><h3><span id="session对象">session对象</span></h3><p>session 对象是由服务器自动创建的与用户请求相关的对象。服务器为每个用户都生成一个session对象，用于保存该用户的信息，跟踪用户的操作状态。session对象内部使用Map类来保存数据，因此保存数据的格式为 “Key/value”。 session对象的value可以使复杂的对象类型，而不仅仅局限于字符串类型。</p><p>session与cookie是web开发常用的，通常像cookie的话，以电商项目为例，用作购物车比较多，但是像保存用户关键信息的话还是用session比较靠谱。</p><p>关于session会话，个人建议最好自己模拟一个登陆，然后用户在里面实现好几个页面跳转等之类的，这样能够更好的理解这个会话。</p><h3><span id="application对象">application对象</span></h3><p>application 对象可将信息保存在服务器中，直到服务器关闭，否则application对象中保存的信息会在整个应用中都有效。与session对象相比，application对象生命周期更长，类似于系统的“全局变量”。</p><p><em>应用场景如下:</em><br>(1)统计网站访问量;<br>(2)解决硬编码问题;</p><p>举个例子说明一下:<br>common.jsp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page import=&quot;cn.jdbc.simple.UserServiceImpl&quot;%&gt;</span><br><span class="line">&lt;%@page import=&quot;cn.jdbc.simple.UserService&quot;%&gt;</span><br><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%! int i;  </span><br><span class="line">    %&gt;  </span><br><span class="line">    &lt;!-- 将i值自加后放入application的变量内 --&gt;  </span><br><span class="line">    &lt;%application.setAttribute(&quot;counter&quot;,String.valueOf(++i));%&gt;  </span><br><span class="line">    &lt;!-- 直接输出application变量值 --&gt;  </span><br><span class="line">    &lt;%=application.getAttribute(&quot;counter&quot;) %&gt;</span><br></pre></td></tr></table></figure></p><p>将common.jsp引进任意一个jsp，最好是首页index.jsp。</p><p>只需将如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%=application.getAttribute(&quot;counter&quot;) %&gt;</span><br></pre></td></tr></table></figure></p><p>引入其它页面即可实现实时统计</p><h3><span id="out对象">out对象</span></h3><p>out 对象用于在Web浏览器内输出信息，并且管理应用服务器上的输出缓冲区。在使用 out 对象输出数据时，可以对数据缓冲区进行操作，及时清除缓冲区中的残余数据，为其他的输出让出缓冲空间。待数据输出完毕后，要及时关闭输出流。</p><h3><span id="pagecontext对象">pageContext对象</span></h3><p>pageContext 对象的作用是取得任何范围的参数，通过它可以获取 JSP页面的out、request、reponse、session、application 等对象。pageContext对象的创建和初始化都是由容器来完成的，在JSP页面中可以直接使用 pageContext对象。<br>例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    String path = request.getContextPath();</span><br><span class="line">    String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></p><p><em>应用场景</em><br>获取项目路径，主要用于解决路径问题</p><h3><span id="config对象">config对象</span></h3><p>config 对象的主要作用是取得服务器的配置信息。通过 pageConext对象的 getServletConfig() 方法可以获取一个config对象。当一个Servlet 初始化时，容器把某些信息通过config对象传递给这个 Servlet。 开发者可以在web.xml 文件中为应用程序环境中的Servlet程序和JSP页面提供初始化参数。<br><em>应用场景</em><br>获取配置信息</p><h3><span id="page对象">page对象</span></h3><p>page 对象代表JSP本身，只有在JSP页面内才是合法的。 page隐含对象本质上包含当前 Servlet接口引用的变量，类似于Java编程中的 this 指针。</p><h3><span id="exception对象">exception对象</span></h3><p>exception 对象的作用是显示异常信息，只有在包含 isErrorPage=”true” 的页面中才可以被使用，在一般的JSP页面中使用该对象将无法编译JSP文件。excepation对象和Java的所有对象一样，都具有系统提供的继承结构。exception 对象几乎定义了所有异常情况。在Java程序中，可以使用try/catch关键字来处理异常情况； 如果在JSP页面中出现没有捕获到的异常，就会生成 exception 对象，并把 exception 对象传送到在page指令中设定的错误页面中，然后在错误页面中处理相应的 exception 对象。</p><p>举例说明:<br>test.jsp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%@page import=&quot;cn.jdbc.simple.User&quot;%&gt;</span><br><span class="line">&lt;%@page import=&quot;java.util.List&quot;%&gt;</span><br><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot; errorPage=&quot;error.jsp&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">     System.out.println(100/0);</span><br><span class="line">      %&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>error.jsp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot; isErrorPage=&quot;true&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">异常信息：&lt;%=exception.getMessage() %&gt;&lt;br&gt;</span><br><span class="line">  异常信息String描述：&lt;%=exception.toString() %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2><span id="jsp的四大作用域">JSP的四大作用域</span></h2><h3><span id="page作用域">page作用域</span></h3><p>代表变量只能在当前页面上剩下些</p><h3><span id="request作用域">request作用域</span></h3><p>代表变量能在一次请求中生效，一次请求可能包含一个页面，也可能包含多个页面，比如页面A请求转发页面B</p><h3><span id="session作用域">session作用域</span></h3><p>代表变量能在一次会话中生效，基本上就是能在web下项目下都有效，session的使用与cookie也有很大关系，一般来说，只要浏览器不关闭，cookie就会一直生效，cookie生效，session的使用就不会受到影响</p><h3><span id="application作用域">application作用域</span></h3><p>代表变量能在一个应用下(多个会话)，在服务器下的多个项目之间都能够使用。</p><p>参考资料如下:<br><a href="https://www.cnblogs.com/leirenyuan/p/6016063.html" target="_blank" rel="noopener">jsp 九大内置对象和其作用详解</a><br><a href="https://www.runoob.com/jsp/jsp-tutorial.html" target="_blank" rel="noopener">jsp菜鸟教程</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用sqlyog连接 Mysql 出现1251错误</title>
      <link href="/2019/05/02/%E4%BD%BF%E7%94%A8sqlyog%E8%BF%9E%E6%8E%A5-Mysql-%E5%87%BA%E7%8E%B01251%E9%94%99%E8%AF%AF/"/>
      <url>/2019/05/02/%E4%BD%BF%E7%94%A8sqlyog%E8%BF%9E%E6%8E%A5-Mysql-%E5%87%BA%E7%8E%B01251%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>错误如图所示:<br><img src="/2019/05/02/使用sqlyog连接-Mysql-出现1251错误/01.png" alt=""></p><p>错误详情信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1251 client does not support authentication protocol requested by server;consider upgrading Mysql client</span><br><span class="line"></span><br><span class="line">ERROR 1396 (HY000): Operation ALTER USER failed for &apos;root&apos;@&apos;localhost&apos;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>问题原因:<br>主要是由于mysql8以前的加密规则与mysql8以后的存在差异。</p><p>解决办法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;password&apos; PASSWORD EXPIRE NEVER;  ##修改加密规则</span><br><span class="line"></span><br><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;; ##更新一下用户的密码 password 为自己想要重新设置的密码</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES; ##刷新权限</span><br></pre></td></tr></table></figure></p><p>本文参考资料如下:<br><a href="https://blog.csdn.net/SUNbrightness/article/details/80600953" target="_blank" rel="noopener">Navicat 连接 Mysql 出现1251错误</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The server time zone value &#39;ÖÐ¹ú±ê×¼Ê±¼ä&#39; is unrecognized or represents more than one time zone.</title>
      <link href="/2019/05/01/The-server-time-zone-value-O%C3%90%C2%B9u%C2%B1e%C3%97%C2%BCE%C2%B1%C2%BCa-is-unrecognized-or-represents-more-than-one-time-zone/"/>
      <url>/2019/05/01/The-server-time-zone-value-O%C3%90%C2%B9u%C2%B1e%C3%97%C2%BCE%C2%B1%C2%BCa-is-unrecognized-or-represents-more-than-one-time-zone/</url>
      
        <content type="html"><![CDATA[<p>问题背景:<br>在Java中使用JDBC操作数据库，该数据库版本为8.0.15属于高版本(如果是低版本的话，通常是不会出现这些问题的)</p><p>详细错误信息如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.sql.SQLException: The server time zone value &apos;ÖÐ¹ú±ê×¼Ê±¼ä&apos; is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support.</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>这个问题的原因是市区问题。</p><p>解决办法:<br>在jdbc对应的url加上serverTimezone=UTC即可解决，例如jdbc:mysql://localhost:3308/mysql?serverTimezone=UTC</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何快速关联/修改Git远程仓库地址</title>
      <link href="/2019/04/30/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%85%B3%E8%81%94-%E4%BF%AE%E6%94%B9Git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80/"/>
      <url>/2019/04/30/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%85%B3%E8%81%94-%E4%BF%AE%E6%94%B9Git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h2><span id="如何快速关联修改git远程仓库地址按照如下步骤即可快速实现关联修改git远程仓库地址">如何快速关联/修改Git远程仓库地址?按照如下步骤即可快速实现关联/修改Git远程仓库地址:</span></h2><h4><span id="删除本地仓库当前关联的无效远程地址再为本地仓库添加新的远程仓库地址">删除本地仓库当前关联的无效远程地址，再为本地仓库添加新的远程仓库地址</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote -v //查看git对应的远程仓库地址</span><br><span class="line">git remote rm origin //删除关联对应的远程仓库地址</span><br><span class="line">git remote -v //查看是否删除成功，如果没有任何返回结果，表示OK</span><br><span class="line">git remote add origin https://github.com/developers-youcong/Metronic_Template.git //重新关联git远程仓库地址</span><br></pre></td></tr></table></figure><p>其实不仅仅上述这一种方式，还有如下几种方式:<br><a id="more"></a></p><h4><span id="直接修改本地仓库所关联的远程仓库的地址">直接修改本地仓库所关联的远程仓库的地址</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote  //查看远程仓库名称：origin </span><br><span class="line">git remote get-url origin //查看远程仓库地址</span><br><span class="line">git remote set-url origin https://github.com/developers-youcong/Metronic_Template.git  ( 如果未设置ssh-key，此处仓库地址为 http://... 开头)</span><br></pre></td></tr></table></figure><h4><span id="修改-git-配置文件">修改 .git 配置文件</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd .git  //进入.git目录</span><br><span class="line">vim config  //修改config配置文件，快速找到remote &quot;origin&quot;下面的url并替换即可实现快速关联和修改</span><br></pre></td></tr></table></figure><h4><span id="如何快速关联修改git远程仓库地址的应用场景有哪些">如何快速关联/修改Git远程仓库地址的应用场景有哪些?</span></h4><p>(1)同步开源项目(以VsCode为例，我针对其进行二次开发，但是其版本总是在更新为了保持与其一致，我就得用到修改git远程仓库同步其最新代码);<br>(2)快速实现项目迁移(比如我不想用阿里云的git，我就将其迁移到github上面);</p><p>本文参考资料如下:<br><a href="https://blog.csdn.net/mlq8087/article/details/81360025" target="_blank" rel="noopener">如何快速关联/ 修改 Git 远程仓库地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hutool工具类之HttpUtil使用Https</title>
      <link href="/2019/04/30/Hutool%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8BHttpUtil%E4%BD%BF%E7%94%A8Https/"/>
      <url>/2019/04/30/Hutool%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8BHttpUtil%E4%BD%BF%E7%94%A8Https/</url>
      
        <content type="html"><![CDATA[<p>关于Hutool工具类之HttpUtil如何使用可以参考官方文档<a href="https://www.hutool.cn/docs/#/http/Http%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A5%E5%85%B7%E7%B1%BB-HttpUtil" target="_blank" rel="noopener">Hutool之HttpUtil</a></p><p>其实使用Http和Https使用的方式是一样的。</p><p>建议大家可以看看HttpUtil的源码，感觉设计的挺不错的。<br><a id="more"></a></p><h2><span id="导入maven依赖">导入Maven依赖</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;4.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2><span id="编写测试类使用junit单元测试">编写测试类(使用Junit单元测试)</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   @Test</span><br><span class="line">public void testHttps() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">JSONObject json = new JSONObject();</span><br><span class="line">json.put(&quot;username&quot;, &quot;1332788xxxxxx&quot;);</span><br><span class="line">json.put(&quot;password&quot;, &quot;123456.&quot;);</span><br><span class="line"></span><br><span class="line">String result = HttpRequest.post(&quot;https://api2.bmob.cn/1/users&quot;)</span><br><span class="line">.header(&quot;Content-Type&quot;, &quot;application/json&quot;)</span><br><span class="line">.header(&quot;X-Bmob-Application-Id&quot;,&quot;2f0419a31f9casdfdsf431f6cd297fdd3e28fds4af&quot;)</span><br><span class="line">.header(&quot;X-Bmob-REST-API-Key&quot;,&quot;1e03efdas82178723afdsafsda4be0f305def6708cc6&quot;)</span><br><span class="line">    .body(json)</span><br><span class="line">    .execute().body();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       System.out.println(result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法解释(上面采用的是一种叫链式编程的方式):<br>header对应的是请求头。<br>body对应的是请求体(包含参数和参数值)。<br>HttpRequest里面包含Post、GET、Delete、Put等常用的RestFul方式。</p><p>打印如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;createdAt&quot;:&quot;2019-04-30 10:42:07&quot;,&quot;objectId&quot;:&quot;6cfdb77081&quot;,&quot;sessionToken&quot;:&quot;269e433440c9e65b8058d016df703ccb&quot;&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bmob-Rest-API之使用</title>
      <link href="/2019/04/29/Bmob-Rest-API%E4%B9%8B%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/04/29/Bmob-Rest-API%E4%B9%8B%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>针对最近这样的需求，某个功能插入数据成功并实时同步到Bmob云上的数据库。</p><p>本来想在Bmob上找一个用Java写的，找了一圈发现没有，于是便采用Bmob的Rest-API方式进行数据插入。</p><p>另外补充一个小知识，Bmob的架构是一个叫Serverless的，关于这个Serverless，简单的说就是用服务代替服务器，不再想以往那样对服务器大量维护，特别是运维人员，每当上线时，心里难免会有点担惊受怕。</p><p>参考文档为<a href="http://doc.bmob.cn/data/restful/index.html" target="_blank" rel="noopener">Bmob-Rest-Api之简单操作</a></p><p>此文假定你已经在Bmob云上建好相关的数据库(如果没有建好或者不知道如何建，请参考上述文档)<br><a id="more"></a></p><h2><span id="利用bmob-rest-api进行数据插入">利用Bmob-Rest-API进行数据插入</span></h2><h4><span id="我的bmob数据库">我的Bmob数据库</span></h4><p><img src="/2019/04/29/Bmob-Rest-API之使用/01.png" alt=""></p><h4><span id="使用postman做接口测试这个实验一定要做这里跑通了基本上可以排除很多问题">使用PostMan做接口测试(这个实验一定要做，这里跑通了，基本上可以排除很多问题)</span></h4><p><img src="/2019/04/29/Bmob-Rest-API之使用/02.png" alt=""></p><p>注意必须要包含请求头如下参数,如下图所示(请求头中参数对应的值，如果不知道，请参考官方文档):<br><img src="/2019/04/29/Bmob-Rest-API之使用/04.png" alt=""></p><p>只要返回如下信息，就表示数据插入成功:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;createdAt&quot;:&quot;2019-04-29 16:49:39&quot;,&quot;objectId&quot;:&quot;11b732523d&quot;,&quot;sessionToken&quot;:&quot;0a5c7099409b095080e159c17738f4cd&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>这里请大家注意，并不是所有的表都是这样请求的，比如如果是setting表的话，请求方式变成的如下:<br><img src="/2019/04/29/Bmob-Rest-API之使用/03.png" alt=""></p><p>具体可以参考官方文档<a href="http://doc.bmob.cn/data/restful/develop_doc/#_12" target="_blank" rel="noopener">Rest API详细文档</a></p><p>我觉得Bmob的这种RestFul设计还挺不错的，可以借鉴，另外关于RestFul相关的资料可以参考如下:<br><a href="https://geemus.gitbooks.io/http-api-design/content/en/" target="_blank" rel="noopener">HTTP API Design Guide</a><br><a href="https://codeplanet.io/principles-good-restful-api-design/" target="_blank" rel="noopener">Principles of good RESTful API Design</a><br><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">阮一峰理解RestFul架构</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Serverless </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux远程传输文件免密码</title>
      <link href="/2019/04/29/Linux%E8%BF%9C%E7%A8%8B%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6%E5%85%8D%E5%AF%86%E7%A0%81/"/>
      <url>/2019/04/29/Linux%E8%BF%9C%E7%A8%8B%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6%E5%85%8D%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>首先为什么Linux远程传输要免密码?<br>手动使用scp命令传输每次都要输密码太过麻烦了。</p><p>开发中有一句话，能复制粘贴尽量不要手打。</p><p>运维中有一句话，能脚本化实现尽量不要手动执行。</p><p><strong>远程传输文件免密码的目的:</strong><br>在于为了保证公司数据安全，将相关的备份文件传输到一个或多个备份服务器上防止服务器上面的数据因运维人员失误或者相关运营商失误而导致的严重后果。</p><p>A服务器地址：192.168.1.126，下面简称A<br>B服务器地址：192.168.1.128，下面简称B</p><p>步骤如下:<br><a id="more"></a></p><h2><span id="在a中生成密钥对">在A中生成密钥对</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -P &quot;&quot;</span><br></pre></td></tr></table></figure><p>执行上述命令，一路回车，会在当前登录用户的home目录下的.ssh目录下生成id_rsa和id_rsa.pub两个文件，分别代表密钥对的私钥和公钥。</p><h2><span id="拷贝a的公钥id_rsapub">拷贝A的公钥(id_rsa.pub)</span></h2><p>将其拷贝到B的root用户home目录为例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /root/.ssh/id_rsa.pub root@192.168.1.128:/root</span><br></pre></td></tr></table></figure></p><h2><span id="登录b">登录B</span></h2><p>拷贝A的id_rsa_pub内容到.ssh目录下的authorized_keys文件中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line">cat id_rsa.pub &gt;&gt; .ssh/authorized_keys</span><br></pre></td></tr></table></figure></p><h2><span id="此时在a中用ssh登录b或想b传输文件将不需要密码">此时在A中用ssh登录B或想B传输文件将不需要密码</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.1.128或</span><br><span class="line">scp test.txt root@192.168.1.128：/home/test/</span><br></pre></td></tr></table></figure><p>参考资料如下:<br><a href="https://blog.csdn.net/zhan570556752/article/details/80547063" target="_blank" rel="noopener">Linux远程传输文件免密码验证登陆和拷贝文件</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sudo: no tty present and no askpass program specified</title>
      <link href="/2019/04/27/sudo-no-tty-present-and-no-askpass-program-specified/"/>
      <url>/2019/04/27/sudo-no-tty-present-and-no-askpass-program-specified/</url>
      
        <content type="html"><![CDATA[<p>错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo: no tty present and no askpass program specified</span><br></pre></td></tr></table></figure></p><p>错误原因:<br>是由于帐号并没有开启免密码导致的 </p><p>解决办法:</p><p>编辑sudoers文件</p><p>vim /etc/sudoers</p><p>添加免密码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名 ALL = NOPASSWD: ALL</span><br></pre></td></tr></table></figure></p><p>如:jenkins ALL = NOPASSWD: ALL</p><p>参考链接:<br><a href="https://blog.csdn.net/a_little_a_day/article/details/78282983" target="_blank" rel="noopener">sudo: no tty present and no askpass program specified 解决方法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js如何执行cmd</title>
      <link href="/2019/04/26/Node-js%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8Ccmd/"/>
      <url>/2019/04/26/Node-js%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8Ccmd/</url>
      
        <content type="html"><![CDATA[<p>最近正好因业务的一个需求需要研究如何根据vscode的插件名来下载对应的插件以解决之前将插件打包上传到服务器上面导致的延迟问题(插件体积小还好说，如果体积过大，即便是压缩打成zip包，如果同一时刻很多人上传或下载，系统延迟将会非常严重)。<br>之前一直想不明白，找半天找不到要给URL可以下载，最后不经意间有了灵感转变一下思路搞定了。灵感是一个好东西。<br>本文主要讲Node.js如何执行cmd,应用场景除了我开头说的，其实还有很多，只有想不到，没有做不到。正如我们经理说的，现在基本上20%的技术可以解决80%的业务问题，这个时代，技术有点泛滥，换言之，技术产能过剩。<br><a id="more"></a></p><h2><span id="一-下载node-cmd">一、下载node-cmd</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g node-cmd</span><br></pre></td></tr></table></figure><h2><span id="二-编写测试函数indexjs">二、编写测试函数(index.js)</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var nodeCmd = require(&apos;node-cmd&apos;);</span><br><span class="line"> </span><br><span class="line">function runCmdTest() &#123;</span><br><span class="line"></span><br><span class="line">   var fileName = &quot;ms-ceintl.vscode-language-pack-zh-hans&quot;;</span><br><span class="line"></span><br><span class="line">   console.log(&quot;fileNames:&quot;+fileName);</span><br><span class="line">   </span><br><span class="line">   nodeCmd.get(</span><br><span class="line"> </span><br><span class="line">&apos;code --install-extension &apos;+fileName+&apos; --extensions-dir=&quot;D:\1024Workspace\extension&quot;&apos;,</span><br><span class="line"> </span><br><span class="line">function(err, data, stderr)&#123;</span><br><span class="line"> </span><br><span class="line">console.log(data);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">nodeCmd.run(&apos;code --install-extension &apos;+fileName+&apos; --extensions-dir=&quot;D:\1024Workspace\extension&quot;&apos;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(runCmdTest());</span><br></pre></td></tr></table></figure><p>参考资料如下:<br><a href="https://blog.csdn.net/llzkkk12/article/details/78171750" target="_blank" rel="noopener">nodejs 运行CMD命令</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springfox-swagger之swagger-bootstrap-ui</title>
      <link href="/2019/04/24/springfox-swagger%E4%B9%8Bswagger-bootstrap-ui/"/>
      <url>/2019/04/24/springfox-swagger%E4%B9%8Bswagger-bootstrap-ui/</url>
      
        <content type="html"><![CDATA[<p>swagger-bootstrap-ui是国内的一个swagger开源项目，从发起到现在已经有三年了。<br>初次体验了一下，觉得还是挺不错的，就如当初使用mybatis-plus那样，因为有了mybatis的基础，所以过渡到mybatis-plus很没有压力。<br>现在由swagger2到swagger-bootstrap-ui也是没有压力的，基本上参考官方文档就能弄好了。<br><a id="more"></a><br>目前我应用在我个人的博客项目上，效果如图:<br><img src="/2019/04/24/springfox-swagger之swagger-bootstrap-ui/swagger-bootstrap-ui.png" alt=""></p><p>关于如何搭建步骤，我主要是参考官方文档，我本次写的就作为官方文档的一点补充:</p><h2><span id="一-添加maven依赖">一、添加Maven依赖</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.9.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2><span id="二-编写配置类">二、编写配置类</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import com.github.xiaoymin.swaggerbootstrapui.annotations.EnableSwaggerBootstrapUI;</span><br><span class="line">import springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line">import springfox.documentation.builders.PathSelectors;</span><br><span class="line">import springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line">import springfox.documentation.service.ApiInfo;</span><br><span class="line">import springfox.documentation.spi.DocumentationType;</span><br><span class="line">import springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line">import springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line">@EnableSwaggerBootstrapUI</span><br><span class="line">public class SwaggerConfiguration &#123;</span><br><span class="line"></span><br><span class="line"> @Bean</span><br><span class="line"> public Docket createRestApi() &#123;</span><br><span class="line">     return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">     .apiInfo(apiInfo())</span><br><span class="line">     .select()</span><br><span class="line">     .apis(RequestHandlerSelectors.basePackage(&quot;com.blog.springboot&quot;))</span><br><span class="line">     .paths(PathSelectors.any())</span><br><span class="line">     .build();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> private ApiInfo apiInfo() &#123;</span><br><span class="line">     return new ApiInfoBuilder()</span><br><span class="line">     .title(&quot;swagger-bootstrap-ui RESTful APIs&quot;)</span><br><span class="line">     .description(&quot;swagger-bootstrap-ui&quot;)</span><br><span class="line">     .termsOfServiceUrl(&quot;http://www.youcongtech.com&quot;)</span><br><span class="line">     .contact(&quot;developer@mail.com&quot;)</span><br><span class="line">     .version(&quot;1.1&quot;)</span><br><span class="line">     .build();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="三-去下载对应的前端资源">三、去下载对应的前端资源</span></h2><p>下载地址为:<a href="https://github.com/xiaoymin/Swagger-Bootstrap-UI/tags" target="_blank" rel="noopener">https://github.com/xiaoymin/Swagger-Bootstrap-UI/tags</a> ,如下图所示:<br><img src="/2019/04/24/springfox-swagger之swagger-bootstrap-ui/tag.png" alt=""></p><h2><span id="四-下载完毕后解压并将swagger-bootstrap-ui放到springboot项目职工的srcmainresources目录下">四、下载完毕后解压并将swagger-bootstrap-ui放到springboot项目职工的src/main/resources目录下</span></h2><p>步骤如图:<br>找到这个文件夹<br><img src="/2019/04/24/springfox-swagger之swagger-bootstrap-ui/01.png" alt=""><br>并将其迁移到springboot对应的目录<br><img src="/2019/04/24/springfox-swagger之swagger-bootstrap-ui/02.png" alt=""></p><h2><span id="五-整个流程完成后启动应用访问地址为httpip地址端口号项目名dochtml即可访问如httplocalhost2019blog-webdochtml">五、整个流程完成后，启动应用，访问地址为:</span></h2><p>参考资料如下:<br>swagger-bootstrap-ui文档：<a href="http://doc.xiaominfo.com" target="_blank" rel="noopener">http://doc.xiaominfo.com</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</title>
      <link href="/2019/04/23/ERROR-1820-HY000-You-must-reset-your-password-using-ALTER-USER-statement-before-executing-this-statement/"/>
      <url>/2019/04/23/ERROR-1820-HY000-You-must-reset-your-password-using-ALTER-USER-statement-before-executing-this-statement/</url>
      
        <content type="html"><![CDATA[<p>错误信息如下:<br>ERROR 1820 (HY000): You must reset your password using ALTER USER statement<br>before executing this statement.</p><p>翻译过来的意思是:<br>错误1820 (HY000):您必须使用ALTER USER语句重置密码<br>在执行此语句之前。<br><a id="more"></a><br>所以解决办法就是使用重置密码命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;youpassword&apos;;</span><br></pre></td></tr></table></figure></p><p>参考资料如下:<br><a href="https://www.cnblogs.com/lmx123/p/9321792.html" target="_blank" rel="noopener">mysql 报错ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executin</a><br><a href="https://blog.csdn.net/qq_37350706/article/details/81707862" target="_blank" rel="noopener">MySQL 8.0.15安装教程(windows 64位)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>An internal error occurred during: Initializing Java Tooling.</title>
      <link href="/2019/04/22/An-internal-error-occurred-during-Initializing-Java-Tooling/"/>
      <url>/2019/04/22/An-internal-error-occurred-during-Initializing-Java-Tooling/</url>
      
        <content type="html"><![CDATA[<p>详细错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">An internal error occurred during: &quot;Initializing Java Tooling&quot;.</span><br><span class="line">java.lang.NullPointerException</span><br></pre></td></tr></table></figure></p><p>问题原因:不合理关闭Eclipse导致的<br><a id="more"></a><br>问题的影响:<br>比如你要启动Eclipse某个JavaEE应用时你会发现报错，总是显示某某类找不到，针对某某类找不到，要么就是那个类路径有问题，要么就是项目没有更新完全需要update project。通常update project就好。不过现在无论你update project多少次都没有用，因为不是这个原因。原因就是上述的错误信息。</p><p>解决办法:<br>两种解决办法，如下所示:<br>(1)重启Eclipse;<br>(2)删除 当前工作目录文件夹下的 /.metadata/.plugins/org.eclipse.core.resources/.project。就是把初始化的项目删除，然后打开eclipse以后可以重新初始化;</p><p>参考链接如下:<br><a href="https://blog.csdn.net/u013100581/article/details/52942641" target="_blank" rel="noopener">An internal error occurred during: “Initializing Java Tooling”. Eclipse启动发生的错误</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 报错 Cannot read property &#39;replace&#39; of null</title>
      <link href="/2019/04/22/hexo-%E6%8A%A5%E9%94%99-Cannot-read-property-replace-of-null/"/>
      <url>/2019/04/22/hexo-%E6%8A%A5%E9%94%99-Cannot-read-property-replace-of-null/</url>
      
        <content type="html"><![CDATA[<p>详细错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FATAL Cannot read property &apos;replace&apos; of null</span><br><span class="line">TypeError: Cannot read property &apos;replace&apos; of null</span><br><span class="line">    at fs.exists.then.then.then.config (E:\Hexo\node_modules\hexo\lib\hexo\load_config.js:34:31)</span><br><span class="line">    at tryCatcher (E:\Hexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (E:\Hexo\node_modules\bluebird\js\release\promise.js:512:31)</span><br><span class="line">    at Promise._settlePromise (E:\Hexo\node_modules\bluebird\js\release\promise.js:569:18)</span><br><span class="line">    at Promise._settlePromise0 (E:\Hexo\node_modules\bluebird\js\release\promise.js:614:10)</span><br><span class="line">    at Promise._settlePromises (E:\Hexo\node_modules\bluebird\js\release\promise.js:694:18)</span><br><span class="line">    at _drainQueueStep (E:\Hexo\node_modules\bluebird\js\release\async.js:138:12)</span><br><span class="line">    at _drainQueue (E:\Hexo\node_modules\bluebird\js\release\async.js:131:9)</span><br><span class="line">    at Async._drainQueues (E:\Hexo\node_modules\bluebird\js\release\async.js:147:5)</span><br><span class="line">    at Immediate.Async.drainQueues (E:\Hexo\node_modules\bluebird\js\release\async.js:17:14)</span><br><span class="line">    at runCallback (timers.js:810:20)</span><br><span class="line">    at tryOnImmediate (timers.js:768:5)</span><br><span class="line">    at processImmediate [as _immediateCallback] (timers.js:745:5)</span><br></pre></td></tr></table></figure></p><p>关键信息: Cannot read property ‘replace’ of null</p><p>问题原因:<br>我为了将我的wiki链接到hexo修改了root路径，如下图所示:<br><img src="/2019/04/22/hexo-报错-Cannot-read-property-replace-of-null/01.png" alt=""></p><p>解决办法(将root改为原来的/即可解决这个问题):<br><img src="/2019/04/22/hexo-报错-Cannot-read-property-replace-of-null/02.png" alt=""></p><p>这个/相当于默认指向developers-youcong.github.io</p><p>参考解决办法:<br><a href="https://www.jianshu.com/p/449accb044b4" target="_blank" rel="noopener">hexo 报错 Cannot read property ‘replace’ of null</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ftp配置详解</title>
      <link href="/2019/04/20/ftp%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/04/20/ftp%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2><span id="ftp配置详解">FTP配置详解</span></h2><p>FTP配置文件位置/etc/vsftpd.conf<br>listen=NO<br>设置为YES时vsftpd以独立运行方式启动，设置为NO时以xinetd方式启动（xinetd是管理守护进程的，将服务集中管理，可以减少大量服务的资源消耗）<br>listen_ipv6=YES<br>以上两个只能一个YES一个NO否则会出错<br>listen_port=port<br>设置控制连接的监听端口号，默认为21<br>listen_address=ip_address<br>将在绑定到指定IP地址运行，适合多网卡<br>connect_from_port_20=YES/NO<br>若为YES，则强迫FTP－DATA的数据传送使用port 20，默认YES<br>anonymous_enable=YES<br><a id="more"></a><br>允许匿名登陆<br>anon_root=/home/ftp<br>匿名登陆进去后的默认目录，这个自己设置<br>no_anon_password=YES<br>匿名登陆不需要密码<br>anon_upload_enable=YES<br>匿名用户是否能够上传文件，这个YES表示允许，并且它的父目录要有可写权限<br>anon_mkdir_write_enable=YES<br>允许匿名用户创建目录<br>anon_other_write_enable=NO<br>不允许匿名用户具有建立目录，上传之外的权限<br>anon_max_rate=n<br>设置匿名用户的最大传输速率，单位为B/s，值为0表示不限制<br>write_enable=YES<br>登陆用户是否有写权限，全局设置<br>local_enable=YES<br>是否允许本地用户登陆<br>local_root=/../..<br>本地登陆后的默认目录<br>控制用户访问文件vsftpd.user_list(文件中一行一个用户名)<br>在/etc/下面，没有就自己新建一个<br>userlist_file=/../..<br>上面那个文件的路径<br>userlist_enable=YES<br>是否启动vsftpd.user_list这个文件<br>userlist_deny=YES/NO<br>当为YES的时候，在vsftpd.user_list中的用户名不能登陆FTP<br>当为NO的时候，只有vsftpd.user_list中的用户名能登陆FTP<br>idle_session_timeout=300<br>设置多长时间不对FTP服务器进行任何操作，则断开该FTP连接，单位为秒<br>accept_timeout=60<br>建立FTP连接超时时间，单位秒<br>connection_timeout=60<br>PORT方式下建立FTP数据连接超时时间，单位秒<br>data_connection_timeout=60<br>设置空闲的用户会话在N秒后中断，单位秒<br>xferlog_enable=YES<br>开启日志记录<br>xferlog_file=/var/log/vsftpd.log<br>设置日志文件路径<br>pasv_enable=YES/NO<br>是否开启被动模式进行数据传输，有的客户机在防火墙后面，所以建议开启<br>pasv_min_port=n<br>pasv_max_port=m<br>设置被动模式后的数据连接端口范围在n和m之间<br>max_clients=n<br>在独立启动时限制服务器的连接数，0表示无限制<br>FTP添加用户<br>useradd函数，用于添加ftp用户<br>参数：<br>-d 指定用户根目录<br>-s 指定shell脚本为/bin/bash<br>-g 创建分组ftp分组<br>-G 指定root分组<br>例如:<br>useradd -d /home/linux/myftp -s /bin/bash ftpuser<br>详细信息输入useradd -h查看<br>删除ftp用户和主目录 userdel -r youruser<br>详细信息输入userdel -h查看<br>设置ftp用户密码<br>passwd ftpuser<br>输入命令后会让你输密码的<br>如果ftpuser是已存在的用户，则为修改旧密码<br>修改完配置文件后一定要重启服务<br>sudo /etc/init.d/vsftpd restart</p><p>参考链接：<a href="https://www.jianshu.com/p/a299650780e0" target="_blank" rel="noopener">https://www.jianshu.com/p/a299650780e0</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>点击此电脑，查看属性获取计算机的基本信息，可以获取那些计算机基础知识信息呢</title>
      <link href="/2019/04/18/%E7%82%B9%E5%87%BB%E6%AD%A4%E7%94%B5%E8%84%91%EF%BC%8C%E6%9F%A5%E7%9C%8B%E5%B1%9E%E6%80%A7%E8%8E%B7%E5%8F%96%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E9%82%A3%E4%BA%9B%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BF%A1%E6%81%AF%E5%91%A2/"/>
      <url>/2019/04/18/%E7%82%B9%E5%87%BB%E6%AD%A4%E7%94%B5%E8%84%91%EF%BC%8C%E6%9F%A5%E7%9C%8B%E5%B1%9E%E6%80%A7%E8%8E%B7%E5%8F%96%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E9%82%A3%E4%BA%9B%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BF%A1%E6%81%AF%E5%91%A2/</url>
      
        <content type="html"><![CDATA[<p>效果图如下:<br><img src="/2019/04/18/点击此电脑，查看属性获取计算机的基本信息，可以获取那些计算机基础知识信息呢/computer.png" alt=""></p><p>从中我们可以get到处理器、内存、系统类型、系统版本等信息。</p><p>联系到实际这些信息有什么用呢？<br><a id="more"></a></p><h2><span id="1处理器">1.处理器</span></h2><p>从上图中我们看到其处理器是英特尔公司的，英特尔公司是美国一家主要以研制CPU处理器的公司，是全球最大的个人计算机零件和CPU制造商，它成立于1968年，具有50年产品创新和市场领导的历史。</p><p><strong>2.80GHZ表示的又是什么意思呢而且还有两个</strong>？<br>首先说明是双核的，一核的主频为2.80GHZ，另外一核主频为2.81GHZ。</p><p>通常来说，主频越高，处理能力越强。从理论上看是这样，实际上并不如此。<br>主频越高，功耗和发热量也会有所增加，电脑也就会过热。<strong>过热对电脑有如下影响</strong>:<br>(1)运行速度慢，打开程序反应迟钝;<br>(2)经常出去蓝屏死机现象;<br>(3)电脑整机和零件寿命变短;<br>(4)出现突然关机无法启动;<br>(5)出现烧毁主板或者CPU现象；</p><p><strong>那么导致电脑过热的原因有哪些?</strong><br>(1)灰尘过多(灰尘过多会堵塞电脑的散热孔，从而导致电脑内部空气流通不畅，无法将电脑内部的热量散出来，同时灰尘也会粘连在电脑的散热风扇上，从而导致电脑风扇的散热效率降低，影响电脑的正常散热);<br>(2)运行程序过多(当电脑的运行程序过多，电脑的CPU、内存、显卡、硬盘、主板以及电源的使用率会非常高，而当这些部件使用率高的时候会散出大量的热，从而使得电脑的整体会出现过热);<br>(3)使用环境(电脑使用环境温度过高，电脑的发热量会增加，同时散热效率相对会降低，电脑的摆放位置也会影响电脑的散热，从而导致电脑的温度过热)</p><p><strong>联系实际</strong><br>电脑过热，会影响软件开发的效率，比如我的笔记本电脑过热的原因，通常是因为运行程序过多，过多导致部件使用率高，然后电脑就会发出声音，通常这种声音持续一段时间，有的时候直接就会导致我的电脑出现卡死情况(突然一下黑屏了，或者是卡顿)。出现这种情况后，直接就会影响到我开发的效率，一般会持续5到6分钟，甚至更长。所以理解处理器、主频对于程序开发也是很有帮助的。再比如如果你要自己买个主机弄成服务器，如果你不理解上述的知识话，很难搞的好，记得在上家公司的时候，公司的机房通常是在比较阴暗的地方(不表示潮湿，潮湿也会影响电脑)，因为服务器温度过高会导致我在前面说的过热对电脑的影响，其中一条会烧毁主板或CPU，烧毁主板和CPU，意味着这台电脑彻底挂了，一旦挂了肯定会影响软件对外的服务(这也是一些稍有规模的公司，通常有自己独立的机房，机房里一般都有空调，空调的目的就是为了防止温度过高烧毁服务器影响服务)。</p><h2><span id="2内存">2.内存</span></h2><p>内存是计算机中重要的部件之一，它是与CPU进行沟通的桥梁。计算机中所有程序的运行都是在内存中进行的，因此内存的性能对计算机的影响非常大。内存也被称作为内存储器和主存储器，其作用是暂时存放CPU中的运算数据，以及与硬盘等外部存储器交换的数据。只要计算机在运行中，CPU就会把需要运算的数据调到内存中进行运算，当运算完成后CPU再将结果传送出来，内存的运行也决定计算机的稳定运行。</p><p><strong>内存不足会对电脑造成哪些影响?</strong><br>最直观的表现就是你的电脑会非常卡,无法运行比较大的软件。</p><p>如果是在服务器上，你将会发现你发送的请求迟迟无法得到服务器的响应。</p><p><strong>是什么原因造成电脑的内存不足呢？</strong><br>(1)运行程序过多(前面说过，计算机中所有的程序运行都是在内存中进行的);<br>(2)电脑中毒(受到黑客恶意攻击);<br>(3)内存太小了(特别是站长同志们，比如在自己的服务器上运营好几个网站，特别是其中一个博客网站每天访问量非常高，访问量高，代表与后台数据交互的频率越高，后台数据库也是需要占用内存的,如果内存不足直接就会影响到用户的正常访问，造成的影响就是用户体验不佳，用户体验不佳的影响就不多说了)</p><p><strong>联系实际</strong><br>为什么说数据结构和算法很重要呢？<br>良好的数据结构和算法，使得程序的运行效率大大提升，大大提升意味着减少可用内存容量，把富余的内存以备不时之需，比如应对高并发。<br>一个程序员具有数据结构和算法功底扎实写出的代码质量将会非常高，同时也在一定程度上替公司降低成本。<br>看过一篇文章，该文章作者这样说:<strong><em>现在的软件工程充斥着大量的过度设计、资源浪费，实际上已经到了硬件承受不了的地步了。学好数据结构和算法，能够从根本上去避免这些问题</em></strong><br>这篇文章的标题叫做<a href="https://blog.csdn.net/bingguang1993/article/details/81048022" target="_blank" rel="noopener">算法与数据结构对程序员的重要性</a>，开发者们都可以去看看这篇文章，很有启发意义。<br>最后补充一点，良好的数据结构和算法会提高内存利用率，让你写出来的软件更加优美。<br>最近我在思考，我最近写的一个博客项目出现了一种情况，那就是有的时候访问，数据会显示不全，布局也会有问题，然后刷新一下就好了，我在想是不是我的js写的有问题，我打算参考《高性能网站建设》这本书先做一部分优化，不过在优化前，我还是得做做压测看看现在的数据是怎样的，有数据就方便到时优化前后的对比。</p><h2><span id="3系统类型">3.系统类型</span></h2><p>从图上可以获取我电脑上的系统类型为64位操作系统，基于x64的处理器。</p><p>在此提出一个常见问题，64位系统和32位有什么区别?<br>(1)设计初衷不同。64位操作系统的设计初衷是:满足机械设计和分析、三维动画、视频编辑和创作，以及科学计算和高性能计算应用等领域中需要大量内存和浮点性能的客户需求。而32位操作系统是为普通用户设计的。<br>(2)要求配置不同。64位操作系统只能安装64位电脑上(CPU必须是64位的)。同时需要安装64位常用软件以发挥64位(x64)的最佳性能。32位操作系统则可以安装在32位(32位CPU)或64位(64位CPU)电脑上。当然，32位操作系统安装在64位电脑上，其硬件恰似“大牛拉小车”:64位效能会大打折扣。<br>(3)运算速度不同。64位CPU的GPRS的数据宽度为64位，64位指令集可以运行64位数据指令，也就是说处理器一次可提取64位数据(只要两个指令，一次提取8个字节的数据)比32位(需要四个指令，一次提取4个字节的数据)提高一倍，理论上性能会相应提升1倍。<br>(4)寻址能力不同。64位处理器的优势还体现在系统对内存的控制上。由于地址使用的是特殊的整数，因此一个ALU(算术逻辑运算器)和寄存器可以处理更大的整数，也就是更大的地址。<br>(5)软件普及不同。64位常用软件比32位常用软件，要少得很多。道理很简单:使用64位操作系统的用户相对较少。因此软件开发商必须考虑“投入产出比”<br>,将有限资金投入到更多使用群体的软件之中。这也是为什么64位软件价格相对昂贵的重要原因(将成本摊入较少的发售中)。</p><p>64位操作系统可以安装32位软件，那是设计上的”向下兼容”。</p><p><strong>联系实际</strong><br>这让我不仅联想到vscode打包，打包后的也是32位而非64位，我想这也是32位比较普及的原因之一。<br>另外再联想到Linux上，比如CentOS和Ubuntu16.04，它们的区别就可大(关于它们的区别我在此就不说了，感兴趣的朋友自己实践就知道了)。</p><h2><span id="4系统版本">4.系统版本</span></h2><p>根据不同的系统版本安装不同软件，比如有的软件适用于Win7并不适合Win8。这就需要平时的计算机爱好者或者经常使用计算机软件完成工作的朋友要了解。<br>作为程序员一定是要知道的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this web application instance has been stopped already</title>
      <link href="/2019/04/17/this-web-application-instance-has-been-stopped-already/"/>
      <url>/2019/04/17/this-web-application-instance-has-been-stopped-already/</url>
      
        <content type="html"><![CDATA[<p>详细错误信息如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mybatis-plus MapperRefresh] org.apache.catalina.loader.WebappClassLoaderBase.checkStateForResourceLoading Illegal access: this web application instance has been stopped already. Could not load [META-INF/services/javax.xml.xpath.XPathFactory]. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access.</span><br><span class="line"> java.lang.IllegalStateException: Illegal access: this web application instance has been stopped already. Could not load [META-INF/services/javax.xml.xpath.XPathFactory]. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access.</span><br></pre></td></tr></table></figure></p><p>关键信息如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this web application instance has been stopped already</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>初次看到这个问题，我也是一头雾水，因为没有影响正常的项目对外服务，但是严重影响线上对接客户端时日志的阅读。</p><p>后来通过搜索知道了原因，原来是因为服务器上其中两个tomcat下的webapps项目相同导致的，而且这两个tomcat又是运行的，所以才导致这样的错误，于是我将另外的测试tomcat去除掉，问题就迎刃而解。</p><p>问题解决参考链接:<br><a href="https://www.cnblogs.com/xxyBlogs/p/5536731.html" target="_blank" rel="noopener">关于tomcat启动报“this web application instance has been stopped already”的处理</a></p><p><a href="https://blog.csdn.net/zl544434558/article/details/49095591" target="_blank" rel="noopener">org.apache.catalina.loader.WebappClassLoaderBase.checkStateForResourceLoading Illegal access</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KindEditor富文本编辑器使用</title>
      <link href="/2019/04/16/KindEditor%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/04/16/KindEditor%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>我的博客本来打算使用layui的富文本编辑器，但是出了一个问题，无法获取编辑器内容，我参考官方文档，获取内容也就那几个方法而已，但是引入进去后始终获取的值为空，百度和bing都试过了，但是始终还是获取不到值。<br><a id="more"></a><br>layui富文本编辑器文档如下图所示:<br><img src="/2019/04/16/KindEditor富文本编辑器使用/01.png" alt=""></p><p>能尝试的方法都试过了，最后实在没有办法，只好引入新的富文本编辑解决这个问题。</p><p>现在回到这个话题上，如何使用KindEditor富文本编辑器?</p><h2><span id="1去官网下载对应的js库">1.去官网下载对应的js库</span></h2><p>官网地址为:<a href="http://kindeditor.net/down.php" target="_blank" rel="noopener">http://kindeditor.net/down.php</a></p><h2><span id="2对应的效果可以看官网demo">2.对应的效果可以看官网demo</span></h2><p>进入官网，点击演示，出现如图所示:<br><img src="/2019/04/16/KindEditor富文本编辑器使用/02.png" alt=""><br>下面的编辑器例子，你可以根据自己的需求而定，我选择默认的。</p><h2><span id="3具体使用可以看官方文档">3.具体使用可以看官方文档</span></h2><p>官方文档地址为:<a href="http://kindeditor.net/doc.php" target="_blank" rel="noopener">http://kindeditor.net/doc.php</a><br>如果说你想直接越过官方文档直接引入到自己的系统里面，其实很简单，请点击进入对应的演示界面，使用Google浏览器，右击查看源代码即可，源代码里面就包含n它所引用的库和相关的js。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins持续集成实践之java项目自动化部署</title>
      <link href="/2019/04/16/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%AE%9E%E8%B7%B5%E4%B9%8Bjava%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/04/16/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%AE%9E%E8%B7%B5%E4%B9%8Bjava%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>关于Linux安装Jenkins可以参考我的这篇博文<a href="https://www.cnblogs.com/youcong/p/8710025.html" target="_blank" rel="noopener">Ubuntu16.04环境安装jenkins</a><br><a id="more"></a></p><h2><span id="1安装部署插件">1.安装部署插件</span></h2><p>进入插件管理，并搜索该插件Deploy to container Plugin进行安装 ，下载地址为：<a href="https://wiki.jenkins-ci.org/display/JENKINS/Deploy+Plugin" target="_blank" rel="noopener">https://wiki.jenkins-ci.org/display/JENKINS/Deploy+Plugin</a> </p><h2><span id="2安装完后将会在项目配置中见到一下选项">2.安装完后，将会在项目配置中见到一下选项</span></h2><p><img src="/2019/04/16/Jenkins持续集成实践之java项目自动化部署/01.png" alt=""></p><h2><span id="3修改tomcat-usersxml">3.修改tomcat-users.xml</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;role rolename=&quot;manager-gui&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;manager-script&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;manager-jmx&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;manager-status&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;admin-gui&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;admin-script&quot;/&gt;</span><br><span class="line">&lt;user username=&quot;admin&quot; password=&quot;123456&quot; roles=&quot;manager-gui,manager-script,manager-jmx,manager-status,admin-gui,admin-script&quot;/&gt;</span><br></pre></td></tr></table></figure><h2><span id="4host-manager和manager项目下的meta-inf下有个contextxml将其修改为如下">4.host-manager和manager项目下的/META-INF/下有个context.xml，将其修改为如下</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Context antiResourceLocking=&quot;false&quot; privileged=&quot;true&quot; &gt;</span><br><span class="line">  &lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot;</span><br><span class="line">         allow=&quot;\d+\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1&quot; /&gt;</span><br><span class="line">  &lt;Manager sessionAttributeValueClassNameFilter=&quot;java\.lang\.(?:Boolean|Integer|Long|Number|String)|org\.apache\.catalina\.filters\.CsrfPreventionFilter\$LruCache(?:\$1)?|java\.util\.(?:Linked)?HashMap&quot;/&gt;</span><br><span class="line">&lt;/Context&gt;</span><br></pre></td></tr></table></figure><h2><span id="5配置jenkins">5.配置jenkins</span></h2><p><img src="/2019/04/16/Jenkins持续集成实践之java项目自动化部署/02.png" alt=""><br>当然要想部署多个tomcat 还以点击 Add Container 添加容器</p><p>主要参考如下资料:<br><a href="http://www.cnblogs.com/llining/p/4943291.html" target="_blank" rel="noopener">使用jenkins 插件自动部署项目至tomcat</a><br><a href="https://xhnszdm.iteye.com/blog/2309327" target="_blank" rel="noopener">tomcat8设置用户名和密码</a><br><a href="https://blog.csdn.net/fly_leopard/article/details/79654254" target="_blank" rel="noopener">tomcat8 tomcat-users相关配置</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16.04安装和配置RabbitMQ</title>
      <link href="/2019/04/16/Ubuntu16-04%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AERabbitMQ/"/>
      <url>/2019/04/16/Ubuntu16-04%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AERabbitMQ/</url>
      
        <content type="html"><![CDATA[<h3><span id="1rabbitmq安装前需要erlang环境">1.RabbitMQ安装前需要erlang环境</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install erlang-nox     # 安装erlang</span><br><span class="line">erl    # 查看relang语言版本，成功执行则说明relang安装成功</span><br></pre></td></tr></table></figure><a id="more"></a><h3><span id="2添加公钥">2.添加公钥</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add -</span><br></pre></td></tr></table></figure><h3><span id="3更新软件包">3.更新软件包</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><h3><span id="4安装-rabbitmq">4.安装 RabbitMQ</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install rabbitmq-server  #安装成功自动启动</span><br></pre></td></tr></table></figure><h3><span id="5查看rabbitmq状态">5.查看RabbitMQ状态</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl status rabbitmq-server   #Active: active (running) 说明处于运行状态</span><br><span class="line"></span><br><span class="line"># service rabbitmq-server status 用service指令也可以查看，同systemctl指令</span><br></pre></td></tr></table></figure><h3><span id="6启动-停止-重启命令">6.启动、停止、重启命令</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service rabbitmq-server start    # 启动</span><br><span class="line">service rabbitmq-server stop     # 停止</span><br><span class="line">service rabbitmq-server restart  # 重启</span><br></pre></td></tr></table></figure><h3><span id="7启用-web端可视化操作界面我们还需要配置management-plugin插件">7.启用 web端可视化操作界面，我们还需要配置Management Plugin插件</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management   # 启用插件</span><br><span class="line">service rabbitmq-server restart    # 重启</span><br></pre></td></tr></table></figure><p>效果图如下:<br><img src="/2019/04/16/Ubuntu16-04安装和配置RabbitMQ/mq.png" alt=""></p><h3><span id="8查看用户">8.查看用户</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_users</span><br></pre></td></tr></table></figure><h3><span id="9添加管理用户">9.添加管理用户</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user admin yourpassword   # 增加普通用户</span><br><span class="line">rabbitmqctl set_user_tags admin administrator    # 给普通用户分配管理员角色</span><br></pre></td></tr></table></figure><h3><span id="10设置mq用户的权限指定允许访问的vhost以及writeread">10.设置mq用户的权限，指定允许访问的vhost以及write/read</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_permissions -p &quot;/&quot; admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure><h3><span id="11查看vhost允许哪些用户访问">11.查看vhost（/）允许哪些用户访问</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_permissions -p /</span><br></pre></td></tr></table></figure><p>最后关于如何和SpringBoot整合，可以参考我的博客:<a href="https://www.cnblogs.com/youcong/p/9387611.html" target="_blank" rel="noopener">SpringBoot实战(八)之RabbitMQ</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven打包如何跳过测试</title>
      <link href="/2019/04/16/maven%E6%89%93%E5%8C%85%E5%A6%82%E4%BD%95%E8%B7%B3%E8%BF%87%E6%B5%8B%E8%AF%95/"/>
      <url>/2019/04/16/maven%E6%89%93%E5%8C%85%E5%A6%82%E4%BD%95%E8%B7%B3%E8%BF%87%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>Maven打包如何跳过测试?<br>正常来说，不应该这样做，因为测试可以避免很多麻烦排除一些不必要的错误，前提是测试足够规范，这里主要指junit测试，如果junit测试有问题的话，将会直接影响到mvn install打包。<br><a id="more"></a></p><p><strong>如何跳过测试，有两种办法</strong>:</p><p>(1)使用maven命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn test -Dmaven.test.failure.ignore=true  </span><br><span class="line">mvn install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure></p><p>(2)在pom文件中添加如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line"></span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;skip&gt;true&lt;/skip&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信、qq可以上网，但是浏览器却不能上网怎么办</title>
      <link href="/2019/04/15/%E5%BE%AE%E4%BF%A1%E3%80%81qq%E5%8F%AF%E4%BB%A5%E4%B8%8A%E7%BD%91%EF%BC%8C%E4%BD%86%E6%98%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8D%B4%E4%B8%8D%E8%83%BD%E4%B8%8A%E7%BD%91%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
      <url>/2019/04/15/%E5%BE%AE%E4%BF%A1%E3%80%81qq%E5%8F%AF%E4%BB%A5%E4%B8%8A%E7%BD%91%EF%BC%8C%E4%BD%86%E6%98%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8D%B4%E4%B8%8D%E8%83%BD%E4%B8%8A%E7%BD%91%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
      
        <content type="html"><![CDATA[<h3><span id="问题描述微信-qq可以上网但是浏览器却不能上网怎么办">问题描述:微信、qq可以上网，但是浏览器却不能上网怎么办?</span></h3><a id="more"></a><p><strong>解决办法</strong>(步骤如下):<br>(1)打开360安全卫士,点击更多<br><img src="/2019/04/15/微信、qq可以上网，但是浏览器却不能上网怎么办/01.png" alt=""></p><p>(2)进入到更多中，点击断网急救箱<br><img src="/2019/04/15/微信、qq可以上网，但是浏览器却不能上网怎么办/02.png" alt=""></p><p>(3)进入到断网急救箱，点击全面诊断<br><img src="/2019/04/15/微信、qq可以上网，但是浏览器却不能上网怎么办/03.png" alt=""><br>(4)一般都是如图红色标记处，最后点击修复即可<br><img src="/2019/04/15/微信、qq可以上网，但是浏览器却不能上网怎么办/04.png" alt=""></p><p>问题的原因是什么呢?<br>通常是DNS解析问题，如果要说为什么浏览器不能上网，qq和微信可以，是因为它们的DNS解析不同。</p><p>在没有用360这个办法时，我尝试过使用命令行解决，如下:<br>输入命令： netsh winsock reset catalog ——&gt;重启电脑<br>但是没有效果。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell杀死指定端口的进程</title>
      <link href="/2019/04/13/shell%E6%9D%80%E6%AD%BB%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E7%9A%84%E8%BF%9B%E7%A8%8B/"/>
      <url>/2019/04/13/shell%E6%9D%80%E6%AD%BB%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E7%9A%84%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>杀死端口代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:2019</span><br><span class="line"></span><br><span class="line">kill -9 PID</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>上面的与下面的代码作用相同。</p><p>命令如下所示(这种方式更自动化):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 $(netstat -nlp | grep :2019 | awk &apos;&#123;print $7&#125;&apos; | awk -F&quot;/&quot; &apos;&#123; print $1 &#125;&apos;)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大型网站核心架构因素</title>
      <link href="/2019/04/12/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84%E5%9B%A0%E7%B4%A0/"/>
      <url>/2019/04/12/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84%E5%9B%A0%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p>关于什么是架构，一种比较通俗的说法是 “最高层次的规划，难以改变的决定”，这些规划和决定奠定了事物未来发展的方向和最终蓝图。</p><p>从这个意义上说，人生规划也是一种架构。选什么学校、学什么专业、进什么公司、找什么对象、过什么样的生活，都是自己人生的架构。</p><p><strong>联系到软件开发:</strong><br>实际上业务类型+技术选型往往也决定整个项目的架构是怎么样的。</p><p>具体到软件架构，维基百科是这样定义的:”有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计”。</p><p>系统的各个重要组成部分及其关系构成了系统的架构，这些组成部分可以是具体的功能模块，也可以是非功能的设计与决策，他们相互关系组成一个整体，共同构成了软件系统的架构。</p><p>大型网站核心架构的五个因素:</p><ul><li>性能</li><li>可用性</li><li>伸缩性</li><li>扩展性</li><li>安全性</li></ul><a id="more"></a><h2><span id="一-性能">一、性能</span></h2><p>性能是网站的一个重要指标，性能差的网站往往也代表这可用性等各方面不好。</p><p>关于性能优化，对不同的对象，采取不同的优化措施。</p><h3><span id="1浏览器端">1.浏览器端</span></h3><p>参考《高性能网站建设指南》，里面提供了14个措施。<br>(1)减少HTTP请求;<br>(2)使用CDN;<br>(3)添加Expires头;<br>(4)压缩组件;<br>(5)将样式放在顶部;<br>(6)将脚本放在底部;<br>(7)避免CSS表达式;<br>(8)使用外部JavaScript和CSS;<br>(9)减少DNS查找;<br>(10)精简JavaScript;<br>(11)避免重定向;<br>(12)移除重复脚本;<br>(13)配置ETag;<br>(14)使用Ajax缓存;</p><p><strong>联系实际:</strong><br>以个人实践来说，上述的不说将网站性能100%提高，至少提高50%，因为一个网站不仅仅牵涉网页，而且还牵涉服务端和数据库等。</p><p>想要对网页端优化的朋友，可以参考这本书，具体详情，本文不做太多讲解，该书资源我已经放在我的GitHub，需要的可以去下载。<br>个人平时收集的知识库:<a href="https://github.com/developers-youcong/Personal-Learning-Library" target="_blank" rel="noopener">https://github.com/developers-youcong/Personal-Learning-Library</a></p><h3><span id="2应用服务端">2.应用服务端</span></h3><p>(1)数据库服务器(索引、缓存、SQL优化);<br>(2)使用NoSQL;<br>(3)使用分布式;<br>(4)使用集群;<br>(5)异步操作;</p><h3><span id="3代码层面">3.代码层面</span></h3><p>使用多线程、改善内存管理等手段优化。</p><p>对于网站而言，性能符合预期仅仅是必要条件，因为无法预知网站可能会面临的访问压力，所以必须要考虑系统在高并发访问情况下，超出负载设计能力的情况下可能会出现的性能问题。网站需要长时间持续运行，还必须保证系统在持续运行且访问压力不均匀的情况下保持稳定的性能特征。</p><h2><span id="二-可用性">二、可用性</span></h2><p>网站高可用的主要手段是冗余，应用部署在多台服务器上同时提供访问，数据存在在多台服务器上互相备份，任何一台服务器宕机都不会影响应用的整体可用，也不会导致数据丢失。</p><p><strong>联系实际:</strong><br>这种方式适合看公司情况，有的公司虽然有盈利，但是为了减少一些不必要的成本，需要架构师做一些技术架构的评估，比如A和B技术架构方案都适合业务时，这时公司拍板的人更倾向于成本更低的方案。</p><h2><span id="三-伸缩性">三、伸缩性</span></h2><p>大型网站需要面对大量用户的高并发访问和存储海量数据，不可能只用一台服务器就处理全部用户请求，存储全部数据。网站通过集群的方式将多台服务器组成一个整体共同提供服务。所谓伸缩性是指通过不断向集群中加入服务器的手段来缓解不断上升的用户并发访问压力和不断增长的数据存储需求。</p><p><strong>联系实际:</strong><br>针对之前研究过弹性伸缩，所谓弹性伸缩就是当处于高并发时，自动扩展，开启多台服务器来应对高并发，当处于低并发时，也就是用户不是特别多的时候，自动回收一些多余的服务器。减少不必要的资源浪费。</p><h2><span id="四-扩展性">四、扩展性</span></h2><p>不同于其他架构要素主要关于非功能性需求，网站的扩展性架构直接关注网站的功能需求。网站快速发展，功能不断扩展，如何设计网站的架构使其能够快速响应需求变化，是网站可扩展架构主要的目的。</p><p>衡量网站架构扩展性好坏的主要标准就是网站增加新的业务产品时，是否可以上线新产品。不同产品之间是否很少耦合，一个产品改动对其他产品无影响，其他产品和功能不需要受牵连进行改动。</p><p><strong>联系实际:</strong><br>说到扩展性，工作两年以上的朋友特别深有感触，两年的时间由一个初级开发者到中级开发者，从0写过项目，也维护过不少项目，应该能够深刻的理解扩展性是多么的重要。</p><h2><span id="五-安全性">五、安全性</span></h2><p>互联网是开放的，任何人在任何地方都可以访问网站。网站的安全将就是保护网站不受恶意访问和攻击，保护网站的重要数据不被窃取。</p><p>Web网站常用的攻击方式:<br>(1)SQL注入 - 此威胁的目标可能是绕过登录算法，破坏数据等。</p><p>(2)拒绝服务攻击 - 此威胁的目标可能是拒绝合法用户访问资源。</p><p>(3)跨站点脚本XSS - 此威胁的目标可能是注入可在客户端浏览器上执行的代码。</p><p>(4)Cookie /会话中毒 - 此威胁的目标是通过攻击者修改Cookie /会话数据以获取未经授权的访问权限。</p><p>(5)表格篡改 - 此威胁的目标是修改表单数据，例如电子商务应用程序中的价格，以便攻击者可以以较低的价格获得物品。</p><p>(6)代码注入 - 此威胁的目标是注入可在服务器上执行的PHP，Python等代码。代码可以安装后门，泄露敏感信息等。<br>破坏 - 此威胁的目标是修改网站上显示的页面，并将所有页面请求重定向到包含攻击者消息的单个页面。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多模块应用自动化部署</title>
      <link href="/2019/04/11/%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BA%94%E7%94%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/04/11/%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BA%94%E7%94%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>多模块应用自动化部署脚本(一个maven项目可以是单体的，也可以有很多子模块，以我之前博客为例，我的博客有这么几个模块，blog-common、blog-service、blog-web、blog-generator等，这种模块打包的时候，全部都不能缺，缺一不可，否则就会报错，也就是构建失败):<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">time=$(date &quot;+%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git clone https://code.aliyun.com/test/bfi.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cd /home/project/bfi/bfi-saas/bfi-web/src</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rm -r ./test/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cd /home/project/bfi/bfi-saas</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mvn clean package</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    echo &quot;自动化部署bfi项目失败,当前日期为:&quot;$time &gt;&gt; /home/project/bfi_deploy.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    echo &apos;部署失败，请登录服务器查看&apos; | mail -s &quot;bfi部署&quot; test@163.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cp -r /home/project/bfi/bfi-saas/bfi-web/target/bfi-web.war /home/project/tomcat8/webapps/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /home/project/tomcat8/bin/shutdown.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /home/project/tomcat8/bin/startup.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    rm -r /home/project/bfi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    echo &quot;自动化部署bfi项目成功,当前日期为:&quot;$time &gt;&gt; /home/project/bfi_deploy.log</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    echo &apos;部署成功&apos; | mail -s &quot;bfi部署&quot; test@163.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><!--more--><p>注意:</p><p>(1)maven打包通常也会执行mvn test，也就是会将src/test/java下面的单元测试代码全部执行一遍，如果你的单元测试其中某个方法有问题也会导致构建失败。上述我的其中一步操作rm -r ./test/主要就是将单元测试代码删除防止影响构建，实际上是不应该这样做的，但是由于某种原因我必须要这样做(不建议开发者将单元测试删除后部署，单测也是一种上线部署的保障;</p><p>(2)模块之间最好界限分明，否则会有不必要的依赖错误;</p><p>关于脚本中的邮件发送，可以参考我的这篇博客<a href="https://developers-youcong.github.io/2019/04/11/%E5%8D%95%E4%BD%93%E5%BA%94%E7%94%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/">单体应用自动化部署</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单体应用自动化部署</title>
      <link href="/2019/04/11/%E5%8D%95%E4%BD%93%E5%BA%94%E7%94%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/04/11/%E5%8D%95%E4%BD%93%E5%BA%94%E7%94%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>单体应用自动化部署脚本:<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">DATE=$(date +%Y%m%d)</span><br><span class="line">time=$(date &quot;+%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">git clone https://code.aliyun.com/test/blog.git</span><br><span class="line">cd blog</span><br><span class="line">mvn clean package</span><br><span class="line"></span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line"></span><br><span class="line">    echo &quot;自动化部署blog项目失败,当前日期为:&quot;$time &gt;&gt; /home/project/blog_deploy.log</span><br><span class="line"></span><br><span class="line">    echo &apos;部署失败，请登录服务器查看&apos; | mail -s &quot;blog部署&quot; test@163.com</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">    cp -r /home/project/blog/target/blog.war /home/project/tomcat8/webapps/</span><br><span class="line"></span><br><span class="line">    /home/project/tomcat8/bin/shutdown.sh</span><br><span class="line"></span><br><span class="line">    /home/project/tomcat8/bin/startup.sh</span><br><span class="line"></span><br><span class="line">    rm -r /home/project/blog</span><br><span class="line"></span><br><span class="line">    echo &quot;自动化部署blog项目成功,当前日期为:&quot;$time &gt;&gt; /home/project/blog_deploy.log</span><br><span class="line"></span><br><span class="line">    echo &apos;部署成功&apos; | mail -s &quot;blog部署&quot; test@163.com</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>其中涉及到邮件在服务器发生，我在这里使用的是heirloom-mailx</p><p>安装使用流程如下(以Ubuntu16.04为例):</p><h3><span id="1安装heirloom-mailx">1.安装heirloom-mailx</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install heirloom-mailx</span><br></pre></td></tr></table></figure><h3><span id="2修改etcs-nailrc并在尾部添加如下内容这里使用的是163详情可去163邮箱了解">2.修改/etc/s-nail.rc并在尾部添加如下内容(这里使用的是163，详情可去163邮箱了解)</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">set from=&quot;xxx@163.com&quot;</span><br><span class="line"></span><br><span class="line">set smtp=&quot;smtps://smtp.163.com:465&quot;</span><br><span class="line"></span><br><span class="line">set smtp-auth-user=&quot;xxxm@163.com&quot;</span><br><span class="line"></span><br><span class="line">set smtp-auth-password=&quot;123456&quot;</span><br><span class="line"></span><br><span class="line">set smtp-auth=login</span><br></pre></td></tr></table></figure><h3><span id="3测试">3.测试</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;this is test&apos; | mail -s &quot;test email.&quot; 123@qq.com</span><br></pre></td></tr></table></figure><p>邮箱这里我主要参考:</p><p><a href="https://blog.csdn.net/just_shunjian/article/details/78677054" target="_blank" rel="noopener">ubuntu16.04 heirloom-mailx 通过外部SMTP服务器发送邮件</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Edusoho之LNMP环境搭建</title>
      <link href="/2019/04/10/Edusoho%E4%B9%8BLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/04/10/Edusoho%E4%B9%8BLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2><span id="1更新">1.更新</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h2><span id="2安装nginx">2.安装Nginx</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><h2><span id="3安装php">3.安装php</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php-pear php7.0-cli php7.0-common php7.0-curl \</span><br><span class="line">    php7.0-dev php7.0-fpm php7.0-json php7.0-mbstring php7.0-mcrypt \</span><br><span class="line">    php7.0-mysql php7.0-opcache php7.0-zip php7.0-intl php7.0-gd php7.0-xml</span><br></pre></td></tr></table></figure><a id="more"></a><p>修改配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/php/7.0/fpm/php.ini</span><br></pre></td></tr></table></figure></p><p>修改配置内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">post_max_size = 1024M</span><br><span class="line">memory_limit = 1024M</span><br><span class="line">upload_max_filesize = 1024M</span><br></pre></td></tr></table></figure></p><p>重启让配置生效:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service php7.0-fpm restart</span><br></pre></td></tr></table></figure></p><h2><span id="4安装mysql">4.安装mysql</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure><h2><span id="5安装edusoho">5.安装edusoho</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www</span><br><span class="line">sudo wget http://download.edusoho.com/edusoho-8.3.20.tar.gz </span><br><span class="line">sudo tar -zxvf edusoho-8.3.20.tar.gz </span><br><span class="line">sudo chown www-data:www-data edusoho/ -Rf</span><br></pre></td></tr></table></figure><h2><span id="6修改配置文件">6.修改配置文件</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-enabled/edusoho</span><br></pre></td></tr></table></figure><p>edusoho配置如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    # [改] 域名或IP</span><br><span class="line">    server_name 192.168.126.130;</span><br><span class="line">    </span><br><span class="line">    #301跳转可以在nginx中配置</span><br><span class="line"></span><br><span class="line">    # 程序的安装路径</span><br><span class="line">    root /var/www/edusoho/web;</span><br><span class="line"></span><br><span class="line">    # 日志路径</span><br><span class="line">    access_log /var/log/nginx/example.com.access.log;</span><br><span class="line">    error_log /var/log/nginx/example.com.error.log;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        index app.php;</span><br><span class="line">        try_files $uri @rewriteapp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location @rewriteapp &#123;</span><br><span class="line">        rewrite ^(.*)$ /app.php/$1 last;</span><br><span class="line">    &#125;</span><br><span class="line">     location ~ ^/udisk &#123;</span><br><span class="line">        internal;</span><br><span class="line">        root /var/www/edusoho/app/data/;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ ^/(app|app_dev)\.php(/|$) &#123;</span><br><span class="line">        fastcgi_pass   unix:/var/run/php7.0-fpm.sock;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(/.*)$;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;</span><br><span class="line">        fastcgi_param  HTTPS              off;</span><br><span class="line">        fastcgi_param HTTP_X-Sendfile-Type X-Accel-Redirect;</span><br><span class="line">        fastcgi_param HTTP_X-Accel-Mapping /udisk=/var/www/edusoho/app/data/udisk;</span><br><span class="line">        fastcgi_buffer_size 128k;</span><br><span class="line">        fastcgi_buffers 8 128k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 配置设置图片格式文件</span><br><span class="line">    location ~* \.(jpg|jpeg|gif|png|ico|swf)$ &#123;</span><br><span class="line">        # 过期时间为3年</span><br><span class="line">        expires 3y;</span><br><span class="line">        </span><br><span class="line">        # 关闭日志记录</span><br><span class="line">        access_log off;</span><br><span class="line"></span><br><span class="line">        # 关闭gzip压缩，减少CPU消耗，因为图片的压缩率不高。</span><br><span class="line">        gzip off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 配置css/js文件</span><br><span class="line">    location ~* \.(css|js)$ &#123;</span><br><span class="line">        access_log off;</span><br><span class="line">        expires 3y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 禁止用户上传目录下所有.php文件的访问，提高安全性</span><br><span class="line">    location ~ ^/files/.*\.(php|php7.0)$ &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line"> # 以下配置允许运行.php的程序，方便于其他第三方系统的集成。</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        # [改] 请根据实际php-fpm运行的方式修改</span><br><span class="line">        fastcgi_pass   unix:/var/run/php7.0-fpm.sock;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(/.*)$;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;</span><br><span class="line">        fastcgi_param  HTTPS              off;</span><br><span class="line">        fastcgi_param  HTTP_PROXY         &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实LNMP环境搭建与LAMP环境搭建基本相同，只不过使用的web服务器不同及其配置有点差异，一句话，大同小异。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Edusoho </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Edusoho之LAMP环境搭建</title>
      <link href="/2019/04/10/Edusoho%E4%B9%8BLAMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/04/10/Edusoho%E4%B9%8BLAMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>主要参考官方文档<a href="http://www.qiqiuyu.com/course/20/task/2708/show" target="_blank" rel="noopener">Ubuntu16.04+Apache+PHP+MySQL+EduSoho 安装教程</a><br>LAMP环境按照如下搭建是没有问题的，本地虚拟机试验是完全没有问题的。</p><h2><span id="1更新">1.更新</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h2><span id="2安装apache2">2.安装apache2</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2 </span><br><span class="line">sudo apt-get install libapache2-mod-xsendfile</span><br></pre></td></tr></table></figure><p>通常sudo apt-get install apache2 默认是安装apache2.4(通过apache -v可以查看对应的apache版本)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod rewrite   #启用rewrite模块</span><br><span class="line">sudo a2enmod xsendfile    #启用xsendfile模块</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2><span id="3修改配置文件">3.修改配置文件</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/apache2/sites-enabled/edusoho.conf</span><br></pre></td></tr></table></figure><p>edusoho.conf内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName 192.168.126.130</span><br><span class="line"></span><br><span class="line">    DocumentRoot /var/www/project/web</span><br><span class="line">    &lt;Directory /var/www/project/web&gt;</span><br><span class="line">        # enable the .htaccess rewrites</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Require all granted   </span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">    ErrorLog /var/log/apache2/project_error.log</span><br><span class="line">    CustomLog /var/log/apache2/project_access.log combined</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></p><p>ServerName 可以域名也可以是IP地址，在这里我用的是IP地址。</p><h2><span id="4安装php">4.安装php</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php-pear php7.0-cli php7.0-common php7.0-curl \</span><br><span class="line">    php7.0-dev php7.0-fpm php7.0-json php7.0-mbstring php7.0-mcrypt \</span><br><span class="line">    php7.0-mysql php7.0-opcache php7.0-zip php7.0-intl php7.0-gd php7.0-xml</span><br></pre></td></tr></table></figure><p>顺便修改对应的配置文件(主要用于修改PHP上传文件的大小限制)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/php/7.0/fpm/php.ini</span><br></pre></td></tr></table></figure></p><p>修改这三个值的大小(通过/+对应的关键字搜索效率更高)，如/post_max_size就可以一下定位到该键上):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">post_max_size = 1024M</span><br><span class="line">memory_limit = 1024M</span><br><span class="line">upload_max_filesize = 1024M</span><br></pre></td></tr></table></figure></p><p>修改配置文件后，记得执行重启命令，让配置生效:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service php7.0-fpm restart</span><br></pre></td></tr></table></figure></p><h2><span id="5安装mysql">5.安装mysql</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure><p>设置密码</p><p>在这个过程过程中会要求您输入MySQL数据库的root密码，请认真填写。</p><h2><span id="6配置安装edusoho">6.配置安装edusoho</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www</span><br><span class="line">sudo wget http://download.edusoho.com/edusoho-8.3.20.tar.gz </span><br><span class="line">sudo tar -zxvf edusoho-8.3.20.tar.gz </span><br><span class="line">sudo chown www-data:www-data edusoho/ -Rf</span><br></pre></td></tr></table></figure><h2><span id="7重启apache访问">7.重启apache访问</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure><p>访问地址为:192.168.126.130 初次出现的其实与jenkins和wordpress倒有不少相似之处，比如配置数据库和用户等。</p><p>如下图所示:<br>(1)同意协议<br><img src="/2019/04/10/Edusoho之LAMP环境搭建/01.png" alt=""></p><p>(2)检测环境<br><img src="/2019/04/10/Edusoho之LAMP环境搭建/02.png" alt=""></p><p>(3)配置数据库<br><img src="/2019/04/10/Edusoho之LAMP环境搭建/03.png" alt=""></p><p>(4)配置网站信息<br><img src="/2019/04/10/Edusoho之LAMP环境搭建/04.png" alt=""></p><p>(5)安装成功<br><img src="/2019/04/10/Edusoho之LAMP环境搭建/05.png" alt=""></p><p>(6)最终网站效果如图<br><img src="/2019/04/10/Edusoho之LAMP环境搭建/06.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Edusoho </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>E:dpkg was interrupted, you must manually run&#39;dpkg配置&#39;to correct the problem.</title>
      <link href="/2019/04/10/E-dpkg-was-interrupted-you-must-manually-run-dpkg%E9%85%8D%E7%BD%AE-to-correct-the-problem/"/>
      <url>/2019/04/10/E-dpkg-was-interrupted-you-must-manually-run-dpkg%E9%85%8D%E7%BD%AE-to-correct-the-problem/</url>
      
        <content type="html"><![CDATA[<p>执行sudo apt-get install安装对应的软件出现如下错误</p><p>详细错误信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E: Could not get lock /var/lib/dpkg/lock-frontend - open (11: Resource temporarily unavailable)</span><br><span class="line">E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is another process using it?</span><br></pre></td></tr></table></figure></p><p>错误原因:是因为引用错误的链接导致的。</p><p>解决办法(删除这些引用即可):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/lib/dpkg/updates</span><br><span class="line">rm -r ./*</span><br></pre></td></tr></table></figure></p><p>删除完后，执行sudo apt-get update即可，这时就可以正常安装软件了。</p><p>参考解决办法链接:<br><a href="https://www.helplib.com/ubuntu/article_158303" target="_blank" rel="noopener">14.04消息’E:dpkg was interrupted, you must manually run’dpkg配置’to correct the problem.’</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16.04中php如何切换版本</title>
      <link href="/2019/04/10/Ubuntu16-04%E4%B8%ADphp%E5%A6%82%E4%BD%95%E5%88%87%E6%8D%A2%E7%89%88%E6%9C%AC/"/>
      <url>/2019/04/10/Ubuntu16-04%E4%B8%ADphp%E5%A6%82%E4%BD%95%E5%88%87%E6%8D%A2%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>其实就是一条Linux命令,如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config php</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>会出现下面选项:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">There are 2 choices for the alternative php (providing /usr/bin/php).</span><br><span class="line"></span><br><span class="line">  Selection    Path             Priority   Status</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">* 0            /usr/bin/php7.1   71        auto mode</span><br><span class="line">  1            /usr/bin/php7.0   70        manual mode</span><br><span class="line">  2            /usr/bin/php7.1   71        manual mode</span><br><span class="line">Press &lt;enter&gt; to keep the current choice[*], or type selection number:</span><br></pre></td></tr></table></figure></p><p>输入其中一项数字即可实现php版本切换</p><p>如何判断版本是否切换成功？<br><code>php -v</code>命令进行前后版本对比即可看出。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx上配置phpmyadmin</title>
      <link href="/2019/04/10/nginx%E4%B8%8A%E9%85%8D%E7%BD%AEphpmyadmin/"/>
      <url>/2019/04/10/nginx%E4%B8%8A%E9%85%8D%E7%BD%AEphpmyadmin/</url>
      
        <content type="html"><![CDATA[<p>Nginx配置phpmyadmin流程如下:</p><h2><span id="一-准备软件和环境这里我以ubuntu1604为例">一、准备软件和环境(这里我以ubuntu16.04为例)</span></h2><h3><span id="1安装php71">1.安装php7.1</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo LC_ALL=C.UTF-8 add-apt-repository ppa:ondrej/php</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install php-pear php7.1-cli php7.1-common php7.1-curl \</span><br><span class="line">    php7.1-dev php7.1-fpm php7.1-json php7.1-mbstring php7.1-mcrypt \</span><br><span class="line">    php7.1-mysql php7.1-opcache php7.1-zip php7.1-intl php7.1-gd php7.1-xml</span><br></pre></td></tr></table></figure><h4><span id="1修改-php-fpm-监听方式为1270019000">(1)修改 PHP-FPM 监听方式为127.0.0.1:9000</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i &apos;s/listen = .*/listen = 127.0.0.1:9000/g&apos; /etc/php/7.1/fpm/pool.d/www.conf</span><br></pre></td></tr></table></figure><h4><span id="2重启-php-fpm-服务进程">(2)重启 PHP-FPM 服务进程</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service php7.1-fpm restart</span><br></pre></td></tr></table></figure><a id="more"></a><h3><span id="2安装mysql">2.安装mysql</span></h3><h4><span id="1配置mysql57源">(1)配置mysql5.7源</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 可在 http://dev.mysql.com/downloads/repo/apt/ 页面找到 mysql-apt-config 的最新版本。</span><br><span class="line">wget http://dev.mysql.com/get/mysql-apt-config_0.8.7-1_all.deb</span><br><span class="line">sudo dpkg -i mysql-apt-config_0.8.7-1_all.deb</span><br></pre></td></tr></table></figure><p>这时会弹出让你选择，将：</p><p>MySQL Server修改为： mysql-5.7<br>MySQL Tools &amp; Connectors (Currently selected: Enabled)修改为Disabled。<br>MySQL Preview Packages修改过为 Disabled。</p><h4><span id="2安装mysql服务端">(2)安装mysql服务端</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure><h3><span id="3下载最新版phpmyadmin可以到官网去下载">3.下载最新版phpmyadmin，可以到去下载:</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://files.phpmyadmin.net/phpMyAdmin/4.8.5/phpMyAdmin-4.8.5-all-languages.zip</span><br><span class="line">unzip phpMyAdmin-4.8.5-all-languages.zip</span><br><span class="line">mv phpMyAdmin-4.8.5-all-languages.zip phpmyadmin</span><br></pre></td></tr></table></figure><h3><span id="4安装nginx">4.安装nginx:</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:nginx/stable</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><h2><span id="二-将phpmyadmin复制到varwww目录下">二、将phpmyadmin复制到/var/www目录下</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r phpmyadmin /var/www</span><br></pre></td></tr></table></figure><h2><span id="三-配置nginx主要修改nginxconf配置文件">三、配置nginx(主要修改nginx.conf配置文件)</span></h2><p>这段代码放到http{}里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 8090;</span><br><span class="line">root /var/www/phpmyadmin;</span><br><span class="line">index index.php;</span><br><span class="line"></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">  include snippets/fastcgi-php.conf;</span><br><span class="line">  fastcgi_pass unix:/run/php/php7.1-fpm.sock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四、重启nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/nginx restart</span><br></pre></td></tr></table></figure></p><p>访问:<a href="http://IP地址:8090/即可看到" target="_blank" rel="noopener">http://IP地址:8090/即可看到</a><br>效果图如下:<br><img src="/2019/04/10/nginx上配置phpmyadmin/phpmyadmin.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot:The field file exceeds its maximum permitted size of 1048576 bytes</title>
      <link href="/2019/04/08/Spring-Boot-The-field-file-exceeds-its-maximum-permitted-size-of-1048576-bytes/"/>
      <url>/2019/04/08/Spring-Boot-The-field-file-exceeds-its-maximum-permitted-size-of-1048576-bytes/</url>
      
        <content type="html"><![CDATA[<p>错误信息:The field file exceeds its maximum permitted size of 1048576 bytes<br>原因是因为SpringBoot内嵌tomcat默认所能上传的文件大小为1M,超出这个就会报错。<br><a id="more"></a><br>解决办法:</p><h2><span id="1修改applicationyml配置文件">1.修改application.yml配置文件</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  http:</span><br><span class="line">    multipart:</span><br><span class="line">      enabled: true</span><br><span class="line">      max-file-size: 30MB</span><br><span class="line">      max-request-size: 30MB</span><br></pre></td></tr></table></figure><h2><span id="2编写配置类">2.编写配置类</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.springboot.config;</span><br><span class="line"></span><br><span class="line">import javax.servlet.MultipartConfigElement;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.web.servlet.MultipartConfigFactory;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class MulterFile &#123;</span><br><span class="line">/**  </span><br><span class="line">     * 文件上传配置  </span><br><span class="line">     * @return  </span><br><span class="line">     */  </span><br><span class="line">    @Bean  </span><br><span class="line">    public MultipartConfigElement multipartConfigElement() &#123;  </span><br><span class="line">        MultipartConfigFactory factory = new MultipartConfigFactory();  </span><br><span class="line">        //文件最大  </span><br><span class="line">        factory.setMaxFileSize(&quot;30960KB&quot;); //KB,MB  </span><br><span class="line">        /// 设置总上传数据总大小  </span><br><span class="line">        factory.setMaxRequestSize(&quot;309600KB&quot;);  </span><br><span class="line">        return factory.createMultipartConfig();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料:<br><a href="https://blog.csdn.net/u010429286/article/details/54381705" target="_blank" rel="noopener">Spring Boot:The field file exceeds its maximum permitted size of 1048576 bytes.</a><br><a href="https://www.cnblogs.com/jiangwz/p/9030943.html" target="_blank" rel="noopener">Spring Boot设置上传文件大小</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot打包成war</title>
      <link href="/2019/04/08/SpringBoot%E6%89%93%E5%8C%85%E6%88%90war/"/>
      <url>/2019/04/08/SpringBoot%E6%89%93%E5%8C%85%E6%88%90war/</url>
      
        <content type="html"><![CDATA[<p>关于SpringBoot打成jar包以及jar包如何在Linux持久运行，我在前面已经说过了，所以本次不再赘述。</p><p>关于SpringBoot打包成war，其实步骤特别简单，如下图所示(如果是jar，通常是没有图中红色标记处，因为默认就是jar):<br><a id="more"></a></p><h2><span id="1添加war">1.添加<packaging>war</packaging></span></h2><p><img src="/2019/04/08/SpringBoot打包成war/springboot.png" alt=""></p><h2><span id="2修改启动类">2.修改启动类</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.springboot;</span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.boot.Banner;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line">import org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    protected final static Logger logger = LoggerFactory.getLogger(Application.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication app = new SpringApplication(Application.class);</span><br><span class="line">        app.setBannerMode(Banner.Mode.OFF);</span><br><span class="line">        app.run(args);</span><br><span class="line">        logger.info(&quot;Application is success!&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    //关键是添加这段代码</span><br><span class="line">    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;</span><br><span class="line">// 注意这里要指向原先用main方法执行的Application启动类</span><br><span class="line">return builder.sources(Application.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="3做完1和2你会发现项目报错这时你只需update-project即可直到不报错为止">3.做完1和2你会发现项目报错，这时你只需update project即可，直到不报错为止。</span></h2><h2><span id="4mvn-install出现如图所示表示打包成功至于war的部署方式就不多说了直接扔到tomcat下的webapps目录下即可">4.mvn install，出现如图所示,表示打包成功(至于war的部署方式就不多说了，直接扔到tomcat下的webapps目录下即可)</span></h2><p><img src="/2019/04/08/SpringBoot打包成war/war.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大型网站架构模式</title>
      <link href="/2019/04/08/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/04/08/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>关于什么是模式,这个来自建筑师的词汇是这样定义的:”每一个模式描述了一个在我们周围不断重复发生的问题及该问题解决方案的核心。这样，你就能一次又一次地使用该方案而不必做重复的工作”。</p><p>模式的关键在于模式的可重复性，问题与场景的可重复性带来的解决方案的可重复使用。</p><p><strong>联系实际开发</strong>:<br>每个做前后台开发的小伙伴们都会发现一点，一个正儿八经的后台系统，80%是重复的，20%是特别的(可以称作个性化定制)。</p><p>举个例子:<br>人人开源的后台系统:<br><img src="/2019/04/08/大型网站架构模式/model01.png" alt=""></p><p>Jeesite4的后台系统:<br><img src="/2019/04/08/大型网站架构模式/model02.png" alt=""></p><p>从这两者进行比对就可以明显的发现公共的部分非常相似(只不过展现的形式不一样，renren-security中的角色管理是直接在菜单中显示，而jeesite4则放在权限管理中，只需点击即可看到对应的角色管理)<br><a id="more"></a><br>在这里我就不详细说它们的内部架构了，感兴趣的可以参考我的这篇博客<a href="https://www.cnblogs.com/youcong/p/9800717.html" target="_blank" rel="noopener">开源项目之架构分享</a></p><p>在软件开发中，可复用模式非常重要，因为这会直接影响到敏捷开发的效率高低。</p><h2><span id="网站架构模式">网站架构模式</span></h2><h3><span id="1分层">1.分层</span></h3><p>分层是企业应用系统中最常见的一种架构模式，将系统在横向维度上切分成几个部分，每个部分负责一部分相对比较单一的职责，然后通过上层对下层的依赖和调用组成一个完整的系统。</p><p>应用层:负责具体业务和视图展示，如网站首页及搜索输入和结果展示。<br>服务层:为应用层提供服务支持，如用户管理服务，购物车服务等。<br>数据层:提供数据存储访问服务，如数据库、缓存、文件、搜索引擎等。</p><p>这种分层模式，很多开发者们并不陌生，特别是Java开发的朋友们，最常用的就是三层架构(业务逻辑层、数据访问层、UI层等)，在分层模式中就是一个比较好的诠释。</p><p>通过分层，可以更好地将一个庞大的软件系统切分成不同的部分，便于分工合作开发和维护；各层之间具有一定的独立性，只要维持调用接口不变，各层可以根据具体问题独立演化发展而不需要其他层必须做出相应的调整。</p><p>任何事情有利也有弊，分层并不是万能的，比如禁止跨层次调用(应用层不能直接调用数据层)及逆向调用(数据层调用服务层、或服务层调用应用层等)。</p><p>不过总的来说，正是因为有了分层，软件开发效率才会越来越高，再没有分层的时代，数据层、业务逻辑层、表现层全部耦合在一起，真的是牵其一而动全身。在此我不得不佩服早期开发人员的勇气(这里以早期Java开发为例，记得在校的时候我曾经见过一个JSP+Servlet囊括数据层、业务逻辑层、表现层内容，当时我看到这个项目就冒冷汗，太TMD的变态了)</p><h3><span id="2分割">2.分割</span></h3><p>如果说分层是将软件在横向方面进行切分，那么分割就是在纵向方面对软件进行切分。<br>网站越大，功能越复杂，服务和数据处理的种类也越多，将这些不同的功能和服务分割开来，包装成高内聚低耦合的模块单元，一方面有助于软件的开发和维护；另一方面，便于不同模块的分布式部署，提高网站的并发处理能力和功能扩展能力。</p><p><strong>那么什么是内聚？什么是耦合？</strong><br>内聚是从功能角度来度量模块内的联系，一个好的内聚模块应当恰好做一件事。它描述的是模块内的功能联系(比如一个函数只办一件事)。<br>耦合是软件结构中各模块之间相互连接的一种度量，耦合强弱取决于模块间接口的复杂度、进入或访问一个模块的点以及通过接口的数据(耦合这个很好理解，耦合性越低代码的可扩展性可维护性越好，相反耦合性越高，开发者们就有种想上吊自杀的冲动，耦合性越高的例子就不多说了，特别是维护老项目的开发者们感触最深了)</p><h3><span id="3分布式">3.分布式</span></h3><p>对于大型网站，分层和分割的一个主要目的是为了切分后的模块便于分布式部署，即将不同模块部署在不同的服务器上，通过远程调用协同工作。分布式意味着可以使用更多的计算机完成同样的功能，计算机越多，CPU、内存、存储资源也就越多，能够处理的并发访问和数据量就越大，进而能够为更多的用户提供服务。</p><p><strong>分布式也就其弊端</strong>:<br>(1)服务的调用必须通过网络，可能对性能造成比较严重的影响;<br>(2)服务器越多，服务器宕机的概率也就越大，宕机会造成服务不可用，直接导致网站可用性降低;<br>(3)数据一致性问题;<br>(4)开发管理维护困难;</p><p><strong>常用的分布式方案</strong>：<br>(1)分布式应用和服务:将分层和分割后的应用和服务模块分布式部署，除了可以改善网站性能和并发性、加快开发和发布速度、减少数据库连接资源消耗外；还可以使不同应用复用共同的服务，便于业务功能扩展;<br>(2)分布式静态资源:网站的静态资源如JS、CSS、图片等资源独立分布式部署，并采用独立的域名,即人们常说的动静分离。<br>(3)分布式数据和存储:大型网站处理以P为单位的海量数据(P这个单位也许有人对此不熟悉，本人普及一下，1024K=1M 1024M=1G 1024G=1T 1024T=1P)，通常分布式存储以NoSQL居多。<br>(4)分布式计算，首推Hadoop。</p><h3><span id="4集群">4.集群</span></h3><p>记得当初我对集群和分布式之间的区别不太理解，认为它们差不多。<br>其实它们之间的区别大了去了，在此我用一句话概括(非常理解，保你不忘):<br>集群就是不同的机器提供相同的服务;<br>分布式是不同的机器提供不同的服务;</p><p>服务器集群有更多的服务器提供相同的服务，因此可以提供更好的并发特性，当有更多用户访问的时候，只需要向集群中加入新的机器即可。同时因为一个应用由多台服务器提供，当某台服务器发生故障时，负载均衡设备或者系统的失效转移机制会将请求转发到集群中的其他服务器上，使服务器故障不影响用户使用。所以在网站应用中，即使是访问量很小的分布式应用和服务，也至少要部署两台服务器构成一个小的集群，目的就是提高系统的可用性。</p><h3><span id="5缓存">5.缓存</span></h3><p>缓存就是将数据存放在举例计算最近的位置以加快处理速度。缓存是改善软件性能的第一手段，现代CPU越来越快的一个重要因素就是使用更多的缓存，在复杂的软件设计中，缓存几乎无处不在。</p><p>(1)CDN:即内容分发网络，部署在距离终端用户最近的网络服务商，用户的网站请求总是先到达他的网络服务商那里，在这里缓存网站的一些静态资源(较少变化的数据)，可以就近以最快速度返回给用户，如视频网站和门户网站会将用户访问量大的热点内容缓存在CDN。</p><p>(2)反向代理:反向代理属于网站前端架构的一部分，部署在网站的前端，当用户请求到达网站的数据中心时，最先访问到的就是反向代理服务器，这里缓存网站的静态资源，无需将请求继续转发给应用服务器就能返回给用户。</p><p>(3)本地缓存:在应用服务器本地缓存着热点数据，应用程序可以在本机内存中直接访问数据，而无需访问数据库;</p><p>(4)分布式缓存:大型网站的数据量非常庞大，即使只缓存一小部分，需要的内存空间也不是单机能承受的，所以处了本地缓存，还需要分布式缓存，将数据缓存在一个专门的分布式缓存集群中，应用程序通过网络通信访问缓存数据;</p><p>注意:<br>使用缓存的两个前提条件:<br>a.数据访问热点不均衡,某些数据会更频繁的访问;<br>b.数据在某个时间段内有效，不会很快过期,否则缓存的数据就会因已经失效而产生脏读，影响结果的正确性。</p><p><strong>什么是脏读？</strong><br>通俗的讲，当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是脏数据，依据脏数据所做的操作可能是不正确的</p><p>网站应用中，缓存除了可以加快数据访问数据，还可以减轻后端应用和数据存储的负载压力，这一点对网站数据库架构至关重要，网站数据库几乎都是按照有缓存的前提进行负载能力设计的。</p><h3><span id="6异步">6.异步</span></h3><p>计算机软件发展的一个重要目标和驱动力就是降低软件耦合性。事物之间直接关系越少，就越少被彼此影响，越可以独立发展。<br>系统解耦合的手段除了前面提到的分层、分割、分布式等，还有一个重要手段就是异步，业务之间的消息传递不是同步调用，而是将一个业务操作分成多个阶段，每个阶段之间通过共享数据的方式异步执行协作。</p><p>异步架构是典型的生产者消费者模式，两者不存在直接调用，只要保持数据结构不变，彼此功能实现可以随意变换而不互相影响，这对网站扩展新功能非常便利。除此外，使用异步消息队列还有如下特性:<br>(1)提高系统可用性。消费者服务器发生故障，数据会在消息队列服务器中存储堆积，生产者服务器可以继续处理业务请求，系统整体表现无故障。消费者服务器恢复正常后，继续处理消息队列中的数据。</p><p>(2)加快网站响应速度。处在业务处理前端的生产者服务器在处理完业务请求后，将数据写入消息队列，不需要等待消费者服务器处理就可以返回，响应延迟减少;</p><p>(3)消除并发访问高峰。用户访问网站是随机的，存在访问高峰和低谷，即使网站按照一般访问高峰进行规划和部署，也依然会出现突发事件，比如购物网站的促销活动，微博上的热点事件(比如之前赵丽颖官宣导致微博宕机)。</p><h3><span id="7冗余">7.冗余</span></h3><p>网站需要7x24小时连续运行，但是服务器随时可能出现故障，特别是服务器规模比较大时，出现某台服务器宕机是必然事件。要想保证在服务器宕机的情况网站依然可以继续服务，不丢失数据，就需要一定程度的服务器冗余运行，数据冗余备份，这样当某台服务器宕机时，可以将其上的服务和数据访问转移到其他机器上。</p><p>访问和负载很小的服务也必须部署至少两台服务器构成一个集群，其目的就是通过冗余实现服务高可用。数据库除了定期备份(可通过shell脚本实现)，存档保存外，为了保证在线业务高可用，还需要对数据进行主从分离，实时同步实现热备份。</p><p>为了抵御地震等不可抗因素导致的网站完全瘫痪，某些大型网站会对整个数据中心进行备份，全球范围内部署灾备数据中心。网站程序和数据实时同步到多个灾备数据中心。</p><h3><span id="8自动化">8.自动化</span></h3><p>自动化，如自动化监控报警(zabbix、nagios等)、自动化部署(jenkins)、自动化测试等。<br>通常分布式项目一般自动化程度比较高。<br>后续我会针对这些写一个专题实践。</p><h3><span id="9安全">9.安全</span></h3><p>互联网的开放特性使得其从诞生起就面对巨大的安全挑战，网站在安全将方面也积累很多模式，如对于常见的网站XSS攻击、SQL注入、进行编码转换等相应处理、对于垃圾敏感信息进行过滤等。</p><p>本文主要参考《大型网站技术架构：核心原理与案例分析》，上述内容作为本人记录的读书笔记。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客中的文章归档是如何实现的</title>
      <link href="/2019/04/07/%E5%8D%9A%E5%AE%A2%E4%B8%AD%E7%9A%84%E6%96%87%E7%AB%A0%E5%BD%92%E6%A1%A3%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84/"/>
      <url>/2019/04/07/%E5%8D%9A%E5%AE%A2%E4%B8%AD%E7%9A%84%E6%96%87%E7%AB%A0%E5%BD%92%E6%A1%A3%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>我的效果图如下(这个是我实现的):<br><img src="/2019/04/07/博客中的文章归档是如何实现的/blog01.png" alt=""></p><p>wordpress的效果图如下:<br><img src="/2019/04/07/博客中的文章归档是如何实现的/blog02.png" alt=""><br>sql代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT YEAR(post.post_modified)AS `year`,MONTH(post.post_modified) AS `month` FROM wp_posts AS post</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>xml代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.blog.springboot.dao.PostsDao&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 通用查询映射结果 --&gt;</span><br><span class="line">&lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;com.blog.springboot.entity.Posts&quot;&gt;</span><br><span class="line">&lt;id column=&quot;ID&quot; property=&quot;id&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;post_author&quot; property=&quot;postAuthor&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;post_date&quot; property=&quot;postDate&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;post_date_gmt&quot; property=&quot;postDateGmt&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;post_content&quot; property=&quot;postContent&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;post_title&quot; property=&quot;postTitle&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;post_excerpt&quot; property=&quot;postExcerpt&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;post_status&quot; property=&quot;postStatus&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;comment_status&quot; property=&quot;commentStatus&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;ping_status&quot; property=&quot;pingStatus&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;post_password&quot; property=&quot;postPassword&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;post_name&quot; property=&quot;postName&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;to_ping&quot; property=&quot;toPing&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;pinged&quot; property=&quot;pinged&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;post_modified&quot; property=&quot;postModified&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;post_modified_gmt&quot; property=&quot;postModifiedGmt&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;post_content_filtered&quot; property=&quot;postContentFiltered&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;post_parent&quot; property=&quot;postParent&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;guid&quot; property=&quot;guid&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;menu_order&quot; property=&quot;menuOrder&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;post_type&quot; property=&quot;postType&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;post_mime_type&quot; property=&quot;postMimeType&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;comment_count&quot; property=&quot;commentCount&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;year&quot; property=&quot;year&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;month&quot; property=&quot;month&quot;/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 通用查询结果列 --&gt;</span><br><span class="line">&lt;sql id=&quot;Base_Column_List&quot; &gt;</span><br><span class="line">ID AS id, post_author AS postAuthor, post_date AS postDate,</span><br><span class="line">post_date_gmt AS postDateGmt, post_content AS postContent, post_title</span><br><span class="line">AS postTitle, post_excerpt AS postExcerpt, post_status AS postStatus,</span><br><span class="line">comment_status AS commentStatus, ping_status AS pingStatus,</span><br><span class="line">post_password AS postPassword, post_name AS postName, to_ping AS</span><br><span class="line">toPing, pinged, post_modified AS postModified, post_modified_gmt AS</span><br><span class="line">postModifiedGmt, post_content_filtered AS postContentFiltered,</span><br><span class="line">post_parent AS postParent, guid, menu_order AS menuOrder, post_type AS</span><br><span class="line">postType, post_mime_type AS postMimeType, comment_count AS</span><br><span class="line">commentCount</span><br><span class="line">&lt;/sql&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 文章归档 --&gt;</span><br><span class="line">    &lt;select id=&quot;articleArchive&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line">    SELECT DISTINCT YEAR(post.post_modified)AS `year`,MONTH(post.post_modified) AS `month` FROM wp_posts AS post</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>实体:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.springboot.entity;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.activerecord.Model;</span><br><span class="line">import com.baomidou.mybatisplus.annotations.TableField;</span><br><span class="line">import com.baomidou.mybatisplus.annotations.TableId;</span><br><span class="line">import com.baomidou.mybatisplus.annotations.TableName;</span><br><span class="line">import com.baomidou.mybatisplus.enums.IdType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@TableName(&quot;wp_posts&quot;)</span><br><span class="line">public class Posts extends Model&lt;Posts&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    @TableId(value = &quot;ID&quot;, type = IdType.AUTO)</span><br><span class="line">    private Integer id;</span><br><span class="line">    @TableField(&quot;post_author&quot;)</span><br><span class="line">    private Long postAuthor;</span><br><span class="line">    @TableField(&quot;post_date&quot;)</span><br><span class="line">    private String postDate;</span><br><span class="line">    @TableField(&quot;post_date_gmt&quot;)</span><br><span class="line">    private String postDateGmt;</span><br><span class="line">    @TableField(&quot;post_content&quot;)</span><br><span class="line">    private String postContent;</span><br><span class="line">    @TableField(&quot;post_title&quot;)</span><br><span class="line">    private String postTitle;</span><br><span class="line">    @TableField(&quot;post_excerpt&quot;)</span><br><span class="line">    private String postExcerpt;</span><br><span class="line">    @TableField(&quot;post_status&quot;)</span><br><span class="line">    private String postStatus;</span><br><span class="line">    @TableField(&quot;comment_status&quot;)</span><br><span class="line">    private String commentStatus;</span><br><span class="line">    @TableField(&quot;ping_status&quot;)</span><br><span class="line">    private String pingStatus;</span><br><span class="line">    @TableField(&quot;post_password&quot;)</span><br><span class="line">    private String postPassword;</span><br><span class="line">    @TableField(&quot;post_name&quot;)</span><br><span class="line">    private String postName;</span><br><span class="line">    @TableField(&quot;to_ping&quot;)</span><br><span class="line">    private String toPing;</span><br><span class="line">    private String pinged;</span><br><span class="line">    @TableField(&quot;post_modified&quot;)</span><br><span class="line">    private String postModified;</span><br><span class="line">    @TableField(&quot;post_modified_gmt&quot;)</span><br><span class="line">    private String postModifiedGmt;</span><br><span class="line">    @TableField(&quot;post_content_filtered&quot;)</span><br><span class="line">    private String postContentFiltered;</span><br><span class="line">    @TableField(&quot;post_parent&quot;)</span><br><span class="line">    private Long postParent;</span><br><span class="line">    private String guid;</span><br><span class="line">    @TableField(&quot;menu_order&quot;)</span><br><span class="line">    private Integer menuOrder;</span><br><span class="line">    @TableField(&quot;post_type&quot;)</span><br><span class="line">    private String postType;</span><br><span class="line">    @TableField(&quot;post_mime_type&quot;)</span><br><span class="line">    private String postMimeType;</span><br><span class="line">    @TableField(&quot;comment_count&quot;)</span><br><span class="line">    private Integer commentCount;</span><br><span class="line">    </span><br><span class="line">    @TableField(exist=false)</span><br><span class="line">    private List&lt;TermTaxonomy&gt; termTaxonomy;</span><br><span class="line">    </span><br><span class="line">    @TableField(exist=false)</span><br><span class="line">    private List&lt;Terms&gt; terms;</span><br><span class="line">    </span><br><span class="line">    @TableField(exist=false)</span><br><span class="line">    private List&lt;Users&gt; users;</span><br><span class="line">    </span><br><span class="line">    @TableField(&quot;year&quot;)</span><br><span class="line">    private String year;</span><br><span class="line">    </span><br><span class="line">    @TableField(&quot;month&quot;)</span><br><span class="line">    private String month;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">    public String getMonth() &#123;</span><br><span class="line">return month;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setMonth(String month) &#123;</span><br><span class="line">this.month = month;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getYear() &#123;</span><br><span class="line">return year;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setYear(String year) &#123;</span><br><span class="line">this.year = year;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public List&lt;Users&gt; getUsers() &#123;</span><br><span class="line">return users;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setUsers(List&lt;Users&gt; users) &#123;</span><br><span class="line">this.users = users;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public List&lt;TermTaxonomy&gt; getTermTaxonomy() &#123;</span><br><span class="line">return termTaxonomy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setTermTaxonomy(List&lt;TermTaxonomy&gt; termTaxonomy) &#123;</span><br><span class="line">this.termTaxonomy = termTaxonomy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public List&lt;Terms&gt; getTerms() &#123;</span><br><span class="line">return terms;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setTerms(List&lt;Terms&gt; terms) &#123;</span><br><span class="line">this.terms = terms;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Long getPostAuthor() &#123;</span><br><span class="line">        return postAuthor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPostAuthor(Long postAuthor) &#123;</span><br><span class="line">        this.postAuthor = postAuthor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPostDate() &#123;</span><br><span class="line">        return postDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPostDate(String postDate) &#123;</span><br><span class="line">        this.postDate = postDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPostDateGmt() &#123;</span><br><span class="line">        return postDateGmt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPostDateGmt(String postDateGmt) &#123;</span><br><span class="line">        this.postDateGmt = postDateGmt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPostContent() &#123;</span><br><span class="line">        return postContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPostContent(String postContent) &#123;</span><br><span class="line">        this.postContent = postContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPostTitle() &#123;</span><br><span class="line">        return postTitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPostTitle(String postTitle) &#123;</span><br><span class="line">        this.postTitle = postTitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPostExcerpt() &#123;</span><br><span class="line">        return postExcerpt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPostExcerpt(String postExcerpt) &#123;</span><br><span class="line">        this.postExcerpt = postExcerpt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPostStatus() &#123;</span><br><span class="line">        return postStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPostStatus(String postStatus) &#123;</span><br><span class="line">        this.postStatus = postStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCommentStatus() &#123;</span><br><span class="line">        return commentStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCommentStatus(String commentStatus) &#123;</span><br><span class="line">        this.commentStatus = commentStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPingStatus() &#123;</span><br><span class="line">        return pingStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPingStatus(String pingStatus) &#123;</span><br><span class="line">        this.pingStatus = pingStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPostPassword() &#123;</span><br><span class="line">        return postPassword;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPostPassword(String postPassword) &#123;</span><br><span class="line">        this.postPassword = postPassword;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPostName() &#123;</span><br><span class="line">        return postName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPostName(String postName) &#123;</span><br><span class="line">        this.postName = postName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getToPing() &#123;</span><br><span class="line">        return toPing;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setToPing(String toPing) &#123;</span><br><span class="line">        this.toPing = toPing;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPinged() &#123;</span><br><span class="line">        return pinged;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPinged(String pinged) &#123;</span><br><span class="line">        this.pinged = pinged;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPostModified() &#123;</span><br><span class="line">        return postModified;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPostModified(String postModified) &#123;</span><br><span class="line">        this.postModified = postModified;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPostModifiedGmt() &#123;</span><br><span class="line">        return postModifiedGmt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPostModifiedGmt(String postModifiedGmt) &#123;</span><br><span class="line">        this.postModifiedGmt = postModifiedGmt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPostContentFiltered() &#123;</span><br><span class="line">        return postContentFiltered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPostContentFiltered(String postContentFiltered) &#123;</span><br><span class="line">        this.postContentFiltered = postContentFiltered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Long getPostParent() &#123;</span><br><span class="line">        return postParent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPostParent(Long postParent) &#123;</span><br><span class="line">        this.postParent = postParent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getGuid() &#123;</span><br><span class="line">        return guid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setGuid(String guid) &#123;</span><br><span class="line">        this.guid = guid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getMenuOrder() &#123;</span><br><span class="line">        return menuOrder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMenuOrder(Integer menuOrder) &#123;</span><br><span class="line">        this.menuOrder = menuOrder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPostType() &#123;</span><br><span class="line">        return postType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPostType(String postType) &#123;</span><br><span class="line">        this.postType = postType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPostMimeType() &#123;</span><br><span class="line">        return postMimeType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPostMimeType(String postMimeType) &#123;</span><br><span class="line">        this.postMimeType = postMimeType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getCommentCount() &#123;</span><br><span class="line">        return commentCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCommentCount(Integer commentCount) &#123;</span><br><span class="line">        this.commentCount = commentCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Serializable pkVal() &#123;</span><br><span class="line">        return this.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Posts&#123;&quot; +</span><br><span class="line">        &quot;, id=&quot; + id +</span><br><span class="line">        &quot;, postAuthor=&quot; + postAuthor +</span><br><span class="line">        &quot;, postDate=&quot; + postDate +</span><br><span class="line">        &quot;, postDateGmt=&quot; + postDateGmt +</span><br><span class="line">        &quot;, postContent=&quot; + postContent +</span><br><span class="line">        &quot;, postTitle=&quot; + postTitle +</span><br><span class="line">        &quot;, postExcerpt=&quot; + postExcerpt +</span><br><span class="line">        &quot;, postStatus=&quot; + postStatus +</span><br><span class="line">        &quot;, commentStatus=&quot; + commentStatus +</span><br><span class="line">        &quot;, pingStatus=&quot; + pingStatus +</span><br><span class="line">        &quot;, postPassword=&quot; + postPassword +</span><br><span class="line">        &quot;, postName=&quot; + postName +</span><br><span class="line">        &quot;, toPing=&quot; + toPing +</span><br><span class="line">        &quot;, pinged=&quot; + pinged +</span><br><span class="line">        &quot;, postModified=&quot; + postModified +</span><br><span class="line">        &quot;, postModifiedGmt=&quot; + postModifiedGmt +</span><br><span class="line">        &quot;, postContentFiltered=&quot; + postContentFiltered +</span><br><span class="line">        &quot;, postParent=&quot; + postParent +</span><br><span class="line">        &quot;, guid=&quot; + guid +</span><br><span class="line">        &quot;, menuOrder=&quot; + menuOrder +</span><br><span class="line">        &quot;, postType=&quot; + postType +</span><br><span class="line">        &quot;, postMimeType=&quot; + postMimeType +</span><br><span class="line">        &quot;, commentCount=&quot; + commentCount +</span><br><span class="line">        &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>dao代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.springboot.dao;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.mapper.BaseMapper;</span><br><span class="line">import com.blog.springboot.entity.Posts;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public interface PostsDao extends BaseMapper&lt;Posts&gt; &#123;</span><br><span class="line">    //文章归档</span><br><span class="line">public List&lt;Posts&gt; articleArchive();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>service代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface PostsService extends IService&lt;Posts&gt; &#123;</span><br><span class="line">//文章归档</span><br><span class="line">public List&lt;Posts&gt; articleArchive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.springboot.service.impl;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.mapper.EntityWrapper;</span><br><span class="line">import com.baomidou.mybatisplus.plugins.Page;</span><br><span class="line">import com.baomidou.mybatisplus.service.impl.ServiceImpl;</span><br><span class="line">import com.blog.springboot.dao.PostsDao;</span><br><span class="line">import com.blog.springboot.entity.Posts;</span><br><span class="line">import com.blog.springboot.service.PostsService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class PostsServiceImpl extends ServiceImpl&lt;PostsDao, Posts&gt; implements PostsService &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private PostsDao postDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;Posts&gt; articleArchive() &#123;</span><br><span class="line"></span><br><span class="line">return postDao.articleArchive();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>后台Controller:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 文章归档</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@GetMapping(value=&quot;/articleArchive&quot;)</span><br><span class="line">public JSONObject writePost() &#123;</span><br><span class="line"></span><br><span class="line">List&lt;Posts&gt; post = postService.articleArchive();</span><br><span class="line"></span><br><span class="line">if(!post.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">json.put(&quot;code&quot;, &quot;000000&quot;);</span><br><span class="line">json.put(&quot;msg&quot;, &quot;获取文章归档&quot;);</span><br><span class="line">json.put(&quot;post&quot;, post);</span><br><span class="line">&#125;else &#123;</span><br><span class="line"></span><br><span class="line">json.put(&quot;code&quot;, &quot;222222&quot;);</span><br><span class="line">json.put(&quot;msg&quot;, &quot;暂无文章归档&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>前端js实现:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//文章归档</span><br><span class="line">function articleArchive()&#123;</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url: Blog.url.api.articleArchive,</span><br><span class="line">type: &quot;GET&quot;,</span><br><span class="line">dataType: &apos;json&apos;,</span><br><span class="line">success: function(data) &#123;</span><br><span class="line"></span><br><span class="line">            var rows = &quot;&quot;;</span><br><span class="line">$.each(data.post, function(index, post) &#123;</span><br><span class="line"> var year = post.year+&quot;年&quot;;</span><br><span class="line"> var month = post.month+&quot;月&quot;;</span><br><span class="line"> var date = year + month;</span><br><span class="line"> rows= rows +&quot;&quot;;</span><br><span class="line">                 rows= rows +&quot;&lt;li&gt;&lt;a href=&apos;#&apos;&gt;&quot;+date+&quot;&lt;/a&gt;&lt;/li&gt;&quot;;</span><br><span class="line">                 rows= rows +&quot;&lt;hr/&gt;&quot;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(&quot;#articleArchive&quot;).html(rows);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">error: function(XMLHttpRequest, textStatus, errorThrown) &#123;</span><br><span class="line"></span><br><span class="line">console.log(XMLHttpRequest.status);</span><br><span class="line"></span><br><span class="line">console.log(XMLHttpRequest.readyState);</span><br><span class="line"></span><br><span class="line">console.log(textStatus);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Caused by: java.sql.SQLException: Value &#39;0000-00-00 00:00:00&#39; can not be represented as java.sql.Timestamp</title>
      <link href="/2019/04/07/Caused-by-java-sql-SQLException-Value-0000-00-00-00-00-00-can-not-be-represented-as-java-sql-Timestamp/"/>
      <url>/2019/04/07/Caused-by-java-sql-SQLException-Value-0000-00-00-00-00-00-can-not-be-represented-as-java-sql-Timestamp/</url>
      
        <content type="html"><![CDATA[<p>错误信息如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.sql.SQLException: Value &apos;0000-00-00 00:00:00&apos; can not be represented as java.sql.Timestamp</span><br></pre></td></tr></table></figure></p><p>原因如下:<br>是因为数据表中字段类型与对象中的属性类型不一致。比如在我的数据表中是datetime类型，正常来说，对象中应该是Date类型，但是本次在对象中却是String类型。</p><p>解决办法:<br>(1)将datetime类型修改为varchar类型，即可解决问题;<br>(2)将Java对象属性类型(对应的那个)改为Date类型(java.util而非java.sql),即可解决问题;</p>]]></content>
      
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git分支开发的好处</title>
      <link href="/2019/04/06/git%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E7%9A%84%E5%A5%BD%E5%A4%84/"/>
      <url>/2019/04/06/git%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E7%9A%84%E5%A5%BD%E5%A4%84/</url>
      
        <content type="html"><![CDATA[<p>有不少开发者们不习惯使用Git分支开发。原因有如下几个方面?<br>(1)不熟悉不习惯;<br>(2)觉得太麻烦;<br>今天我想说的是使用git分支开发绝对是一个高效版本控制的做法。</p><p>当你遇到测试人员给你提的bug，你只需将其pull下来，并执行git checkout -b bug-solution01该命令即可，这条命令是切换并创建分支，当你切换到创建的分支时，便可以着手解决对应的bug，解决这个bug后，然后执行git checkout master后，再执行git merge bug-solution01该命令合并分支即可。<br>不过在一些中大公司里面，它们并不会通过主分支来合并侧分支，而是有一个开发分支，通过开发分支合并开发者分支，最后通过持续集成使master分支和开发分支合并集成测试部署(其实也是可以手动切换到master分支合并开发分支)等。假设有A、B、C等三个开发者，通常分支的形式是这样:</p><ul><li>主分支(master)</li><li>开发分支(project-dev)</li><li>开发者分支(A开发者分支、B开发者分支、C开发者分支等)</li></ul><p>假设我是开发者A，测试给我提了一个bug，我在A分支的基础上创建一个解决bug分支(暂且命名为a-bug-solution)，当我在a-bug-sllution分支上解决了这个bug并git commit提交到本地仓库后，然后通过git log查看对应的日志(防止提交失败或者其它意外),查看有对应的提交记录后，然后我切换到a-project-dev分支上执行git merge a-bug-solution，合并该分支，合并该分支成功后，然后我再次切换到project-dev分支上，执行git merge a-project-dev进行合并，合并成功后，我就可以不管了，因为剩下的可以交给持续集成工具(jenkins等)。</p><p>上述说起了，大家可能觉得很麻烦或者是没必要这样做，原因可能觉得太耽误时间了，我的回答是非也，一开始可能有点麻烦，越到后面你会越发现它的好处，让你情不自禁地爱上它。</p><p>分支开发的好处，是真正的确保每个人有自己的独立分支而不是全部在master分支上开发，全部在master分支上开发，弊端太多，比如隔离性太差了，而且全部在一个分支上开发的话，经常面临的就是解决冲突(在自己的分支上开发进行合并与全部在一个主分支上开发进行对比，如果代码提交相对频繁，你将会发现你永远都在解决冲突，如果提交缓慢的话，你还是发现在解决冲突，实际上你并不需要解决太多冲突，很多冲突是没有必要的)。</p><p>最后归纳总结一下，分支开发的好处:</p><ul><li>版本迭代更加清晰</li><li>开发效率提升</li><li>利于代码review的实现，从而使整个团队开发更加规范，减少bug率</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layui之日期和时间组件</title>
      <link href="/2019/04/05/layui%E4%B9%8B%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E7%BB%84%E4%BB%B6/"/>
      <url>/2019/04/05/layui%E4%B9%8B%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>参考文档:<a href="https://www.layui.com/doc/modules/laydate.html" target="_blank" rel="noopener">https://www.layui.com/doc/modules/laydate.html</a><br>代码片段如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">layui.use(&apos;laydate&apos;, function()&#123;</span><br><span class="line">  var laydate = layui.laydate;</span><br><span class="line"></span><br><span class="line">  laydate.render(&#123;</span><br><span class="line">    elem: &apos;#createDate&apos;, // 指定元素</span><br><span class="line">    type:&apos;datetime&apos;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>效果图如下:<br><img src="/2019/04/05/layui之日期和时间组件/date01.png" alt=""></p><p>其中type默认值为date(年月日)，有如下几个可选值:</p><p><img src="/2019/04/05/layui之日期和时间组件/date02.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-electron脚手架</title>
      <link href="/2019/04/04/vue-electron%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/2019/04/04/vue-electron%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>vue-electron官方文档(中文):<a href="https://simulatedgreg.gitbooks.io/electron-vue/content/cn" target="_blank" rel="noopener">https://simulatedgreg.gitbooks.io/electron-vue/content/cn</a><br>vue-electron官方文档(英文):<a href="https://simulatedgreg.gitbooks.io/electron-vue/content/en" target="_blank" rel="noopener">https://simulatedgreg.gitbooks.io/electron-vue/content/en</a></p><h2><span id="1脚手架搭建流程步骤">1.脚手架搭建流程步骤</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 安装 vue-cli 和 脚手架样板代码</span><br><span class="line">npm install -g vue-cli</span><br><span class="line">vue init simulatedgreg/electron-vue my-project</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"># 安装依赖并运行你的程序</span><br><span class="line">cd my-project</span><br><span class="line">yarn # 或者 npm install</span><br><span class="line">yarn run dev # 或者 npm run dev</span><br></pre></td></tr></table></figure><h2><span id="2效果图">2.效果图</span></h2><p><img src="/2019/04/04/vue-electron脚手架/electron.png" alt=""></p><p>注意:<br>(1)环境问题:<br>可以参考我的这篇文章<a href="https://www.cnblogs.com/youcong/p/10230091.html" target="_blank" rel="noopener">VsCode源码编译运行</a><br>环境与其保持一致，基本上就不会出什么问题。</p><p>(2)包管理工具问题:<br>关于npm和yarn，两者都是包的管理工具<br>我用npm install总是在报Error之类的错误，用yarn就好了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Contributions贡献值没有增加</title>
      <link href="/2019/04/03/GitHub-Contributions%E8%B4%A1%E7%8C%AE%E5%80%BC%E6%B2%A1%E6%9C%89%E5%A2%9E%E5%8A%A0/"/>
      <url>/2019/04/03/GitHub-Contributions%E8%B4%A1%E7%8C%AE%E5%80%BC%E6%B2%A1%E6%9C%89%E5%A2%9E%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<p>今天一个同事提交代码到Github上，发现自己的贡献值并没有增加，我从来没有遇到这种情况。<br>问题的原因是因为我的这位同事邮箱设置问题。他是参考如下链接解决的问题。本次做一个记录，说不定我以后也会遇到这种情况或者是我的朋友们。</p><p>参考解决问题:<br>GitHub Contributions贡献值没有增加或者提示提交者的邮箱不对的解决方法:<a href="https://www.jianshu.com/p/f3be25ccd92d" target="_blank" rel="noopener">https://www.jianshu.com/p/f3be25ccd92d</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次layui弹框关闭问题</title>
      <link href="/2019/04/03/%E8%AE%B0%E4%B8%80%E6%AC%A1layui%E5%BC%B9%E6%A1%86%E5%85%B3%E9%97%AD%E9%97%AE%E9%A2%98/"/>
      <url>/2019/04/03/%E8%AE%B0%E4%B8%80%E6%AC%A1layui%E5%BC%B9%E6%A1%86%E5%85%B3%E9%97%AD%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>我在博客园记录过layui关于弹框关闭问题，文章为<a href="https://www.cnblogs.com/youcong/p/10371988.html" target="_blank" rel="noopener">layui关闭弹出层</a>，这次出现了特殊情况，之前是通过<code>layer.closeAll()</code>解决了这个问题，但是这次解决不了。<br>而换成<code>parent.layer.closeAll()</code>问题就迎刃而解。<br><a id="more"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js获取select标签选中的值</title>
      <link href="/2019/04/03/js%E8%8E%B7%E5%8F%96select%E6%A0%87%E7%AD%BE%E9%80%89%E4%B8%AD%E7%9A%84%E5%80%BC/"/>
      <url>/2019/04/03/js%E8%8E%B7%E5%8F%96select%E6%A0%87%E7%AD%BE%E9%80%89%E4%B8%AD%E7%9A%84%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>两种方式，原生js和jQuery。<br>特别是作为全栈开发工程师，学会使用框架固然重要，但是也要使用的基础上，由浅入深，搞懂原理，这样才能在技术进化迅速的时代立于不败之地。<br>举个例子说明以下，以我这篇文章为例<a href="https://www.cnblogs.com/youcong/p/10503099.html" target="_blank" rel="noopener">node.js之十大Web框架</a>，当你学会Node.js的语法，有过使用Node.js开发几个简单Demo的经验，你会发现这些并不难。但是如果你想深入的理解Node.js，比如VsCode就是在Electron+TypeScript等基础上研发出来，但是Electron 是基于 Chromium 和 Node.js，如果你对Node.js和Chromium毫不了解，自己深入到Electron，注定是要吃亏的。<br><a id="more"></a></p><p>使用原生js获取select标签选中值，源码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;form action=&quot;#&quot;&gt;</span><br><span class="line"> &lt;select id=&quot;test&quot;&gt;</span><br><span class="line"> &lt;option value=&quot;1&quot;&gt;VsCode&lt;/option&gt;</span><br><span class="line">  &lt;option value=&quot;2&quot;&gt;Atorm&lt;/option&gt;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"> &lt;input type=&quot;button&quot; value=&quot;测试&quot; onclick=&quot;t1()&quot;&gt;</span><br><span class="line"> &lt;/form&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line"> function t1()&#123;</span><br><span class="line">   var myselect=document.getElementById(&quot;test&quot;);</span><br><span class="line">  var index=myselect.selectedIndex;</span><br><span class="line">  alert(myselect.options[index].value)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>使用jQuery获取select标签选中值，源码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;form action=&quot;#&quot;&gt;</span><br><span class="line"> &lt;select id=&quot;test&quot;&gt;</span><br><span class="line"> &lt;option value=&quot;1&quot;&gt;VsCode&lt;/option&gt;</span><br><span class="line">  &lt;option value=&quot;2&quot;&gt;Atorm&lt;/option&gt;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"> &lt;input type=&quot;button&quot; value=&quot;测试&quot; onclick=&quot;t1()&quot;&gt;</span><br><span class="line"> &lt;/form&gt;</span><br><span class="line"> &lt;script src=&quot;jquery-1.8.0.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line"> function t1()&#123;</span><br><span class="line">   var options=$(&quot;#test option:selected&quot;);</span><br><span class="line">   alert(options.val());//获取value</span><br><span class="line">   alert(options.text());//获取文本</span><br><span class="line">&#125;</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layui之确认框</title>
      <link href="/2019/04/03/layui%E4%B9%8B%E7%A1%AE%E8%AE%A4%E6%A1%86/"/>
      <url>/2019/04/03/layui%E4%B9%8B%E7%A1%AE%E8%AE%A4%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<p>要使用layui的确认框，需要导入layui的两个库，分别为layer.js和layer.css，除此之外layui.js和layui.css的库也是要导入，这个请注意。<br>所有说你需要分别导入四个库layer.js、layer.css、layui.js、layui.css，四个库多少也会占用带宽，这时你可以使用cdn或者将其放到nginx做缓存也行。<br><a id="more"></a><br>确认框源码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">layui.use(&apos;layer&apos;,function () &#123; </span><br><span class="line"></span><br><span class="line">    layer.confirm(&apos;确认要删除吗？&apos;, &#123;</span><br><span class="line">        btn : [ &apos;确定&apos;, &apos;取消&apos; ]//按钮</span><br><span class="line">    &#125;, function(index) &#123;</span><br><span class="line">    </span><br><span class="line">        layer.close(index);</span><br><span class="line">        //此处请求后台程序，下方是成功后的前台处理……</span><br><span class="line">        var index = layer.load(0,&#123;shade: [0.7, &apos;#393D49&apos;]&#125;, &#123;shadeClose: true&#125;); //0代表加载的风格，支持0-2</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>应用场景:<br>(1)所有的确认框操作，比如是否删除这样的;<br>(2)退出功能;</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js读取文件内容并返回值(非异步)</title>
      <link href="/2019/04/02/Node-js%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E5%B9%B6%E8%BF%94%E5%9B%9E%E5%80%BC-%E9%9D%9E%E5%BC%82%E6%AD%A5/"/>
      <url>/2019/04/02/Node-js%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E5%B9%B6%E8%BF%94%E5%9B%9E%E5%80%BC-%E9%9D%9E%E5%BC%82%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<p>主要解决的问题的，以最近VsCode插件开发为例，每次请求都需要token,而vscode并不支持cookie这样的存储，所以就采用粗暴点办法，存到某个用户目录下并读取。</p><a id="more"></a><p>源码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">var fs=require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line"> function getToken(isRelease) &#123;</span><br><span class="line">//是否为正式版本，路径不一样</span><br><span class="line">if (isRelease) &#123;</span><br><span class="line">const scriptSrc = path.dirname(__filename);</span><br><span class="line">const jsName = scriptSrc.split(&apos;\\&apos;);</span><br><span class="line">var i = jsName.length;</span><br><span class="line">var finpath = &quot;&quot;;</span><br><span class="line">for (var j = 0; j &lt; i - 3; j++) &#123;</span><br><span class="line">if (j == 0) &#123;</span><br><span class="line">finpath = jsName[j];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">finpath = finpath + &apos;\\&apos; + jsName[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">finpath = finpath + &apos;\\token.txt&apos;;</span><br><span class="line"></span><br><span class="line">&#125; else &#123; </span><br><span class="line">finpath = &apos;D://Workspace//token//token.txt&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (fs.existsSync(finpath)) &#123; //判断是否存在该文件</span><br><span class="line">try &#123;</span><br><span class="line">let result = fs.readFileSync(finpath);</span><br><span class="line">console.log(result.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return result.toString();</span><br><span class="line"></span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(getToken());</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot1.5.4 配置druid1.1.0(使用druid-spring-boot-starter)</title>
      <link href="/2019/04/01/springboot1-5-4-%E9%85%8D%E7%BD%AEdruid1-1-0-%E4%BD%BF%E7%94%A8druid-spring-boot-starter/"/>
      <url>/2019/04/01/springboot1-5-4-%E9%85%8D%E7%BD%AEdruid1-1-0-%E4%BD%BF%E7%94%A8druid-spring-boot-starter/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-导入maven依赖">一、导入Maven依赖</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="二-applicationyml配置">二、application.yml配置</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  devtools:</span><br><span class="line">    restart:</span><br><span class="line">      enabled: false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  datasource:</span><br><span class="line">    url: ENC(4k7M62ElZmvr2fECvWBXaYqMh5gz5cR4hn7LU2jaAt+Cv0hfWuvEXwpigYjLXZ6W)</span><br><span class="line">    username: ENC(kJXrMwKAoGen2JxTFdtfgw==)</span><br><span class="line">    password: ENC(r7aiV3zZoSqKN36KqE6jiQ6rmfmFt7WE)</span><br><span class="line">    db-name: ENC(5lFd29y9ciI4HwyIX8BAPg==)</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    ###################以下为druid增加的配置###########################</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    # 下面为连接池的补充设置，应用到上面所有数据源中</span><br><span class="line">    # 初始化大小，最小，最大</span><br><span class="line">    initialSize: 5</span><br><span class="line">    minIdle: 5</span><br><span class="line">    maxActive: 20</span><br><span class="line">    # 配置获取连接等待超时的时间</span><br><span class="line">    maxWait: 60000</span><br><span class="line">    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span><br><span class="line">    timeBetweenEvictionRunsMillis: 60000</span><br><span class="line">    # 配置一个连接在池中最小生存的时间，单位是毫秒</span><br><span class="line">    minEvictableIdleTimeMillis: 300000</span><br><span class="line">    validationQuery: SELECT 1 FROM DUAL</span><br><span class="line">    testWhileIdle: true</span><br><span class="line">    testOnBorrow: false</span><br><span class="line">    testOnReturn: false</span><br><span class="line">    # 打开PSCache，并且指定每个连接上PSCache的大小</span><br><span class="line">    poolPreparedStatements: true</span><br><span class="line">    maxPoolPreparedStatementPerConnectionSize: 20</span><br><span class="line">    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，&apos;wall&apos;用于防火墙</span><br><span class="line">    filters: stat,wall,log4j</span><br><span class="line">    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span><br><span class="line">    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span><br><span class="line">    # 合并多个DruidDataSource的监控数据</span><br><span class="line">    useGlobalDataSourceStat: true</span><br></pre></td></tr></table></figure><h2><span id="三-效果图">三、效果图</span></h2><p><img src="/2019/04/01/springboot1-5-4-配置druid1-1-0-使用druid-spring-boot-starter/druid.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL去除查询结果重复</title>
      <link href="/2019/03/29/MySQL%E5%8E%BB%E9%99%A4%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E9%87%8D%E5%A4%8D/"/>
      <url>/2019/03/29/MySQL%E5%8E%BB%E9%99%A4%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E9%87%8D%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<p>出现结果重复数SQL(四表关联):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">COUNT(post.ID )</span><br><span class="line">FROM wp_posts AS post LEFT JOIN</span><br><span class="line">wp_term_relationships AS relation</span><br><span class="line">ON(post.menu_order =</span><br><span class="line">relation.term_order) LEFT JOIN wp_term_taxonomy</span><br><span class="line">AS taxonomy</span><br><span class="line">ON(relation.term_taxonomy_id = taxonomy.term_id) LEFT JOIN</span><br><span class="line">wp_terms AS</span><br><span class="line">term ON(taxonomy.term_id = term.term_id)</span><br></pre></td></tr></table></figure></p><p>正常的结果应该显示490条数据，但是结果显示了224941。</p><a id="more"></a><p>解决这个办法是在对应的COUNT()里面加上DISTINCT</p><p>DISTINCT这个关键字主要用于过滤掉多余的重复记录只保留一条，但往往只用它来返回不重复记录的条数，而不是用它来返回不重记录的所有值。</p><p>注意:它有局限性，比如吧不能对应多个目标字段，只能对应一个目标字段。</p><p>解决重复结果书的SQL如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">COUNT(DISTINCT post.ID)</span><br><span class="line">FROM wp_posts AS post LEFT JOIN</span><br><span class="line">wp_term_relationships AS relation</span><br><span class="line">ON(post.menu_order =</span><br><span class="line">relation.term_order) LEFT JOIN wp_term_taxonomy</span><br><span class="line">AS taxonomy</span><br><span class="line">ON(relation.term_taxonomy_id = taxonomy.term_id) LEFT JOIN</span><br><span class="line">wp_terms AS</span><br><span class="line">term ON(taxonomy.term_id = term.term_id)</span><br></pre></td></tr></table></figure></p><p>参考资料:<br>MySQL中count函数使用方法详解:<a href="https://blog.csdn.net/qq_31135027/article/details/79858184" target="_blank" rel="noopener">https://blog.csdn.net/qq_31135027/article/details/79858184</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16.04之安装Nutch</title>
      <link href="/2019/03/29/Ubuntu16-04%E4%B9%8B%E5%AE%89%E8%A3%85Nutch/"/>
      <url>/2019/03/29/Ubuntu16-04%E4%B9%8B%E5%AE%89%E8%A3%85Nutch/</url>
      
        <content type="html"><![CDATA[<h2><span id="1下载nutch">1.下载Nutch</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.shu.edu.cn/apache/nutch/2.3.1/apache-nutch-2.3.1-src.zip</span><br></pre></td></tr></table></figure><h2><span id="2解压">2.解压</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip apache-nutch-2.3.1-src.zip</span><br></pre></td></tr></table></figure><h2><span id="3进入apache-nutch-231">3.进入apache-nutch-2.3.1</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd apache-nutch-2.3.1</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="4使用ant编译">4.使用ant编译</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ant</span><br></pre></td></tr></table></figure><p>编译成功，如下(不过需要比较多的时间，大概20分钟左右):<br><img src="/2019/03/29/Ubuntu16-04之安装Nutch/nutch.png" alt=""></p><p>参考资料:<br>Ubuntu环境下搭建nutch环境(包含使用):<a href="https://blog.csdn.net/u010317005/article/details/51090175" target="_blank" rel="noopener">https://blog.csdn.net/u010317005/article/details/51090175</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16.04之Solr7.7.1环境搭建</title>
      <link href="/2019/03/29/Ubuntu16-04Solr7-7-1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/03/29/Ubuntu16-04Solr7-7-1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>Solr的版本一直都在变化(比如之前我在博客园写的关于Linux安装solr，那个solr为7.6版本，此时已经不在了)。<br>大家可以去这个地址下载对应的版本:<a href="http://mirror.bit.edu.cn/apache/lucene/solr/" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache/lucene/solr/</a><br><a id="more"></a></p><h2><span id="1下载solr我是进入到usrlocal目录下执行这个命令的">1.下载solr(我是进入到/usr/local目录下执行这个命令的)</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirror.bit.edu.cn/apache/lucene/solr/7.7.1/solr-7.7.1.tgz</span><br></pre></td></tr></table></figure><h2><span id="2解压">2.解压</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf solr-7.7.1.tgz</span><br></pre></td></tr></table></figure><h2><span id="3进入bin目录执行该脚本">3.进入bin目录执行该脚本</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd solr-7.7.1/bin</span><br><span class="line">./install_solr_service.sh ../../solr-7.7.1.tgz</span><br></pre></td></tr></table></figure><p>如果没有按照3这样做，就可能出现如下报错:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Must specify the path to the Solr installation archive, such as solr-5.0.0.tgz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Usage: install_solr_service.sh &lt;path_to_solr_distribution_archive&gt; [OPTIONS]</span><br><span class="line"></span><br><span class="line">  The first argument to the script must be a path to a Solr distribution archive, such as solr-5.0.0.tgz</span><br><span class="line">    (only .tgz or .zip are supported formats for the archive)</span><br><span class="line"></span><br><span class="line">  Supported OPTIONS include:</span><br><span class="line"></span><br><span class="line">    -d     Directory for live / writable Solr files, such as logs, pid files, and index data; defaults to /var/solr</span><br><span class="line"></span><br><span class="line">    -i     Directory to extract the Solr installation archive; defaults to /opt/</span><br><span class="line">             The specified path must exist prior to using this script.</span><br><span class="line"></span><br><span class="line">    -p     Port Solr should bind to; default is 8983</span><br><span class="line"></span><br><span class="line">    -s     Service name; defaults to solr</span><br><span class="line"></span><br><span class="line">    -u     User to own the Solr files and run the Solr process as; defaults to solr</span><br><span class="line">             This script will create the specified user account if it does not exist.</span><br><span class="line"></span><br><span class="line">    -f     Upgrade Solr. Overwrite symlink and init script of previous installation.</span><br><span class="line"></span><br><span class="line">    -n     Do not start Solr service after install, and do not abort on missing Java</span><br><span class="line"></span><br><span class="line"> NOTE: Must be run as the root user</span><br></pre></td></tr></table></figure></p><h2><span id="4成功的标识">4.成功的标识</span></h2><p><img src="/2019/03/29/Ubuntu16-04Solr7-7-1环境搭建/solr.png" alt=""></p><p>接下来就可以通过<a href="http://IP地址:8983" target="_blank" rel="noopener">http://IP地址:8983</a> 访问到solr后台管理界面,如下图所示:<br><img src="/2019/03/29/Ubuntu16-04Solr7-7-1环境搭建/solr_manage.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>org.springframework.jdbc.BadSqlGrammarException</title>
      <link href="/2019/03/28/org-springframework-jdbc-BadSqlGrammarException/"/>
      <url>/2019/03/28/org-springframework-jdbc-BadSqlGrammarException/</url>
      
        <content type="html"><![CDATA[<p>这个错误在MyBatis中实际上很常见，就是SQL写错了。通常通过先在MySQL命令行执行一遍sql看有没有错误，如果有就更改，没有就基本上可以用了。<br>注意，我说的基本上可用并不代代表完全可用，比如今天我就遇到一个非常恶心的问题。<br><a id="more"></a><br>sql代码如下(这句sql经过在mysql命令行中测试，能够获取数据，完全没有问题):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;categoreListInfo&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line">SELECT</span><br><span class="line">term.term_id,term.name,</span><br><span class="line">term.slug,tax.taxonomy,tax.description,tax.count FROM wp_terms AS term</span><br><span class="line">LEFT JOIN wp_term_taxonomy AS tax ON(term.term_id=tax.term_id)</span><br><span class="line">&lt;where&gt;</span><br><span class="line">&lt;if test=&quot;name != null or name != &apos;&apos;&quot;&gt;</span><br><span class="line">and term.name like concat(&apos;%&apos;, #&#123;name&#125;, &apos;%&apos;)</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test =&quot;taxonomy != null or  taxonomy !=&apos;&apos;&quot;&gt;</span><br><span class="line">    and tax.taxonomy = #&#123;taxonomy&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/where&gt;</span><br><span class="line">limit #&#123;start&#125;,#&#123;size&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>但是我用如下单元测试就出现了问题，单元测试代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">   @Test</span><br><span class="line">public void testPageListInfo() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">Map&lt;String,Object&gt; paramMap = new HashMap&lt;String,Object&gt;();</span><br><span class="line">paramMap.put(&quot;name&quot;, &quot;&quot;);</span><br><span class="line">paramMap.put(&quot;start&quot;,&quot;0&quot;);</span><br><span class="line">paramMap.put(&quot;size&quot;, &quot;10&quot;);</span><br><span class="line">paramMap.put(&quot;taxonomy&quot;, &quot;post_tag&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;Terms&gt; list = termService.categoreListInfo(paramMap);</span><br><span class="line"></span><br><span class="line">int count = termService.categoryTotalCount(paramMap);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;总数:&quot;+count);</span><br><span class="line"></span><br><span class="line">for (Terms terms : list) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;terms:&quot;+terms.getName());</span><br><span class="line"></span><br><span class="line">List&lt;TermTaxonomy&gt; taxList = terms.getTax();</span><br><span class="line"></span><br><span class="line">for (TermTaxonomy termTaxonomy : taxList) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;tax:&quot;+termTaxonomy.getDescription()+&quot;||&quot;+termTaxonomy.getTaxonomy());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>单元测试并没有写错，错的是参数问题，关键点是这个:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">paramMap.put(&quot;start&quot;,&quot;0&quot;);</span><br><span class="line">paramMap.put(&quot;size&quot;, &quot;10&quot;);</span><br></pre></td></tr></table></figure></p><p>在mysql中limit两个参数实际为int类型，非字符串，而我此时在此传字符串，所以就出现org.springframework.jdbc.BadSqlGrammarException,说sql有问题。</p><p>所以大家切记在命令行执行sql以后，千万别掉以轻心，还是要细心，否则不必要的错误非常让人糟心。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>org.xml.sax.SAXParseException;在实体引用中, 实体名称必须紧跟在 &#39;&amp;&#39; 后面</title>
      <link href="/2019/03/28/org-xml-sax-SAXParseException-%E5%9C%A8%E5%AE%9E%E4%BD%93%E5%BC%95%E7%94%A8%E4%B8%AD-%E5%AE%9E%E4%BD%93%E5%90%8D%E7%A7%B0%E5%BF%85%E9%A1%BB%E7%B4%A7%E8%B7%9F%E5%9C%A8-%E5%90%8E%E9%9D%A2/"/>
      <url>/2019/03/28/org-xml-sax-SAXParseException-%E5%9C%A8%E5%AE%9E%E4%BD%93%E5%BC%95%E7%94%A8%E4%B8%AD-%E5%AE%9E%E4%BD%93%E5%90%8D%E7%A7%B0%E5%BF%85%E9%A1%BB%E7%B4%A7%E8%B7%9F%E5%9C%A8-%E5%90%8E%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>错误信息如下:<br>org.xml.sax.SAXParseException;在实体引用中, 实体名称必须紧跟在 ‘’&amp;’’ 后面</p><p>出现这个错误的原因是在xml中使用&amp;，实际上xml中不支持这种方式，&amp;其实是并列的意思，如果要在xml中使用&amp;，需要将其改为英文 and才能使用。<br><a id="more"></a><br>问题代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;categoreListInfo&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line">SELECT</span><br><span class="line">term.term_id,term.name,</span><br><span class="line">term.slug,tax.taxonomy,tax.description,tax.count FROM wp_terms AS term</span><br><span class="line">LEFT JOIN wp_term_taxonomy AS tax ON(term.term_id=tax.term_id)</span><br><span class="line">&lt;where&gt;</span><br><span class="line">&lt;if test=&quot;name != null &amp; name != &apos;&apos;&quot;&gt;</span><br><span class="line">and term.name like concat(&apos;%&apos;, #&#123;name&#125;, &apos;%&apos;)</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test =&quot;taxonomy != null &amp; taxonomy !=&apos;&apos;&quot;&gt;</span><br><span class="line">    and tax.taxonomy = #&#123;taxonomy&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/where&gt;</span><br><span class="line">limit #&#123;start&#125;,#&#123;size&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>将代码中的&amp;条件改为and即可</p><p>参考资料:<br>【java】org.xml.sax.SAXParseException;在实体引用中, 实体名称必须紧跟在 ‘&amp;’ 后面。解决方法:<a href="https://blog.csdn.net/demon_ll/article/details/78542356" target="_blank" rel="noopener">https://blog.csdn.net/demon_ll/article/details/78542356</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让Node.js运行在浏览器端</title>
      <link href="/2019/03/28/%E5%A6%82%E4%BD%95%E8%AE%A9Node-js%E8%BF%90%E8%A1%8C%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF/"/>
      <url>/2019/03/28/%E5%A6%82%E4%BD%95%E8%AE%A9Node-js%E8%BF%90%E8%A1%8C%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<p>Node.js又称服务端JavaScript。<br>今天我为了解决一个问题，通过搜索引擎找到了如何将Node.js转成浏览器端可以运行的javascript。<br>尽管这种方式有其局限性，但是还是可以用的。<br><a id="more"></a></p><h2><span id="1安装库">1.安装库</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g browserify</span><br></pre></td></tr></table></figure><h2><span id="2转换">2.转换</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">browserify test.js &gt; index.js</span><br><span class="line">或</span><br><span class="line"> browserify test &gt; index.js</span><br><span class="line">或</span><br><span class="line">browserify test.js -o index.js</span><br></pre></td></tr></table></figure><p>以上三种方式均可行</p><p>参考资料:<br>如何让nodejs写的代码在浏览器里面运行:<a href="https://jingyan.baidu.com/article/48b37f8dda4cb11a646488b9.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/48b37f8dda4cb11a646488b9.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16.04安装和使用ElasticSearch</title>
      <link href="/2019/03/28/Ubuntu16-04%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8ElasticSearch/"/>
      <url>/2019/03/28/Ubuntu16-04%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8ElasticSearch/</url>
      
        <content type="html"><![CDATA[<h2><span id="1下载es">1.下载es</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.4.4/elasticsearch-2.4.4.tar.gz</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="2解压并将其放到usrlocal目录下">2.解压并将其放到/usr/local目录下</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf elasticsearch-2.4.4.tar.gz -C /usr/local</span><br><span class="line">cd /usr/local/elasticsearch-2.4.4</span><br></pre></td></tr></table></figure><h2><span id="3修改es配置文件">3.修改es配置文件</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd config</span><br><span class="line">vim elasticsearch.yml</span><br></pre></td></tr></table></figure><p>在elasticsearch.yml添加如下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.memory_lock: true</span><br><span class="line">index.cache.field.max_size: 50000</span><br><span class="line">index.cache.field.expire: 30m</span><br><span class="line">index.cache.field.type: soft</span><br><span class="line"></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"></span><br><span class="line">action.disable_delete_all_indices : true</span><br></pre></td></tr></table></figure></p><h2><span id="4启动">4.启动</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd ../bin</span><br><span class="line"></span><br><span class="line">//直接启动ElasticSearch</span><br><span class="line">./elasticsearch </span><br><span class="line"></span><br><span class="line">//或者使用后台方式进行启动</span><br><span class="line">./elasticsearch -d</span><br></pre></td></tr></table></figure><h2><span id="查看端口占用">查看端口占用</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp|grep 9200 或lsof -i:9200 //看该进程是否正常运行</span><br></pre></td></tr></table></figure><p>出现的问题:<br>Exception in thread “main” Java.lang.RuntimeException: don’t run elasticsearch as root.<br>at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:93)<br>at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:144)<br>at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:270)<br>at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:35)</p><p>解决办法一:<br>添加用户并授权<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user add test</span><br><span class="line">chown -R test /usr/local/elasticsearch-2.4.4</span><br></pre></td></tr></table></figure></p><p>解决办法二:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./elasticsearch -Des.insecure.allow.root=true</span><br><span class="line">或者</span><br><span class="line">vi elasticsearch</span><br><span class="line"></span><br><span class="line">// 找到ES_JAVA_OPTS在其后追加</span><br><span class="line">ES_JAVA_OPTS=&quot;-Des.insecure.allow.root=true&quot;</span><br></pre></td></tr></table></figure></p><p>本人建议使用第一种方法，因为最好不要习惯用root用户，否则一旦不慎执行某些操作，后果很严重。</p><h2><span id="5网站访问">5.网站访问</span></h2><p><a href="http://IP地址:9200" target="_blank" rel="noopener">http://IP地址:9200</a><br>出现如图所示:<br><img src="/2019/03/28/Ubuntu16-04安装和使用ElasticSearch/es.png" alt=""></p><p>参考资料:<br>【Linux进阶】Ubuntu 16.04安装ElasticSearch:<a href="https://blog.csdn.net/u011404265/article/details/72870166" target="_blank" rel="noopener">https://blog.csdn.net/u011404265/article/details/72870166</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VsCode云端版本</title>
      <link href="/2019/03/27/VsCode%E4%BA%91%E7%AB%AF%E7%89%88%E6%9C%AC/"/>
      <url>/2019/03/27/VsCode%E4%BA%91%E7%AB%AF%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>VsCode的云端版与客户端简直是一模一样。</p><p>官网地址为:<a href="https://coder.com/" target="_blank" rel="noopener">https://coder.com/</a><br><a id="more"></a><br>安装命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -p 127.0.0.1:8443:8443 -v &quot;$&#123;PWD&#125;:/root/project&quot; codercom/code-server code-server --allow-http --no-auth</span><br></pre></td></tr></table></figure></p><p>注意安装的前提是要先安装docker，否则不能使用该命令。<br>如果你要远程访问请将127.0.0.1改为0.0.0.0即可<br>Ubuntu16.04安装docker十分容易，一条命令，如sudo apt-get install docker.io</p><p>VsCode云端版本展示效果图如下:<br><img src="/2019/03/27/VsCode云端版本/vscode.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> VsCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>普通用户使用Docker</title>
      <link href="/2019/03/27/%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E4%BD%BF%E7%94%A8Docker/"/>
      <url>/2019/03/27/%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E4%BD%BF%E7%94%A8Docker/</url>
      
        <content type="html"><![CDATA[<h2><span id="1查询是否有docker组">1.查询是否有docker组：</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/group</span><br></pre></td></tr></table></figure><p>如果没有可以通过该命令添加(一般默认是有的)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><h2><span id="2将当前用户添加到docker组">2.将当前用户添加到docker组</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -G docker $(USER)</span><br></pre></td></tr></table></figure><p>例如:sudo usermod -G docker test</p><h2><span id="3重启docker服务">3.重启docker服务</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker.service</span><br></pre></td></tr></table></figure><p>参考资料如下:<br>普通用户使用Docker:<a href="https://blog.csdn.net/qq_36713450/article/details/83109477" target="_blank" rel="noopener">https://blog.csdn.net/qq_36713450/article/details/83109477</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装MySQL并配置远程访问</title>
      <link href="/2019/03/27/Docker%E5%AE%89%E8%A3%85MySQL%E5%B9%B6%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"/>
      <url>/2019/03/27/Docker%E5%AE%89%E8%A3%85MySQL%E5%B9%B6%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h2><span id="1docker-search-mysql-查看mysql版本">1.docker search mysql   查看mysql版本</span></h2><h2><span id="2docker-pull-mysql-要选择starts最高的那个name-进行下载">2.docker pull mysql  要选择starts最高的那个name 进行下载</span></h2><h2><span id="3docker-images-查看下载好的镜像">3.docker images  查看下载好的镜像</span></h2><h2><span id="4启动mysql实例">4.启动mysql实例</span></h2><p> docker run –name dockermysql  -p 3307:3306 -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql</p><pre><code>--name 为mysql的实例设置别名。 -p 3307为对外暴露的端口。3306是内部端口 -e MYSQL_ROOT_PASSWORD 设置mysql登录密码  -d 以守护进程运行（后台运行） 最后的mysql是镜像名称</code></pre><h2><span id="5-docker-ps-a-查看在运行的">5. docker ps -a 查看在运行的</span></h2><h2><span id="6-docker-exec-it-dockermysql-bash-进入容器内部-dockermysql-是上边运行时为容器取的别名-也可以用id替代">6. docker exec -it dockermysql bash     进入容器内部  dockermysql 是上边运行时为容器取的别名 也可以用id替代</span></h2><p> 另外进入容器后，你如果想要使用vim或vi编辑文件，请先执行apt install vim安装对应的库，否则会出现command not found这样的错误提示</p><h2><span id="7mysql-u-root-p-然后直接输入密码即可-密码是在运行时设置的">7.mysql -u root -p      然后直接输入密码即可 密码是在运行时设置的</span></h2><h2><span id="8grant-all-privileges-on-to-root-给用于授予权限">8.grant all privileges on <em>.</em>  to ‘root‘@’%’ ;   给用于授予权限</span></h2><p> GRANT ALL PRIVILEGES ON <em>.</em>  ‘root’@’%’ identified by ‘123123’ WITH GRANT OPTION;  这是网上流传较多的写法。实际上会报错的(本人试验了确实报错，比如像mysql5.7以下的通常是好使的，像现在比较高的版本就不好使了,比如我这个版本是8.0.15)</p><a id="more"></a><h2><span id="9flush-privileges-刷新权限">9.flush privileges;  刷新权限</span></h2><p>遇见一个错误mysql 1251</p><p>解决办法按照如下做法即可解决，然后就可以利用mysql客户端(如sqlyog或其它工具)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;password&apos; PASSWORD EXPIRE NEVER; #修改加密规则 </span><br><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;; #更新一下用户的密码 </span><br><span class="line">FLUSH PRIVILEGES; #刷新权限</span><br></pre></td></tr></table></figure></p><p>‘root’   为你自己定义的用户名</p><p>‘localhost’ 指的是用户开放的IP，可以是’localhost’(仅本机访问，相当于127.0.0.1)，可以是具体的’<em>.</em>.<em>.</em>‘(具体某一IP)，也可以是 ‘%’ (所有IP均可访问)</p><p>‘password’ 是你想使用的用户密码</p><p>参考资料:<br>docker部署mysql 实现远程连接:<a href="https://blog.csdn.net/weixin_42459563/article/details/80924634" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42459563/article/details/80924634</a><br>Navicat连接Mysql8.0.11出现1251错误:<a href="https://blog.csdn.net/qq_36068954/article/details/80175755" target="_blank" rel="noopener">https://blog.csdn.net/qq_36068954/article/details/80175755</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js之mysql增删改查</title>
      <link href="/2019/03/27/Node-js%E4%B9%8Bmysql%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
      <url>/2019/03/27/Node-js%E4%B9%8Bmysql%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h2><span id="1安装库">1.安装库</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure><h2><span id="2编写dbjs用作公共模块">2.编写db.js(用作公共模块)</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//连接MySQL数据库</span><br><span class="line">var mysql = require(&quot;mysql&quot;);</span><br><span class="line"></span><br><span class="line">var pool = mysql.createPool(&#123;</span><br><span class="line">    host:&quot;127.0.0.1&quot;,</span><br><span class="line">    user:&quot;root&quot;,</span><br><span class="line">    password:&quot;123456&quot;,</span><br><span class="line">    database:&quot;wordpress&quot;,</span><br><span class="line">port:3306</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function query(sql,callback)&#123;</span><br><span class="line">    pool.getConnection(function(err,connection)&#123;</span><br><span class="line">        connection.query(sql, function (err,rows) &#123;</span><br><span class="line">            callback(err,rows);</span><br><span class="line">            connection.release();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.query = query;</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="3编写userjs与数据库交互并对外开放接口">3.编写user.js(与数据库交互并对外开放接口)</span></h2><p>顺便说下req.params、req.body、req.query的应用</p><p>req.body通常用于解析post请求数据</p><p>req.query通常用于解析get请求数据,如<a href="http://wwww.youcongtech.com/blog/user?username=youcong" target="_blank" rel="noopener">http://wwww.youcongtech.com/blog/user?username=youcong</a></p><p>req.params通常用于解析rest请求方式，如<a href="http://www.youcongtech.com/blog/user/youcong" target="_blank" rel="noopener">http://www.youcongtech.com/blog/user/youcong</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line">var URL = require(&apos;url&apos;);</span><br><span class="line">var db = require(&apos;./db&apos;);</span><br><span class="line">var jsonData = require(&apos;./jsonData&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">//定义一个post输出接口</span><br><span class="line">router.post(&apos;/post&apos;, function(req, res) &#123;</span><br><span class="line"></span><br><span class="line">    var obj = &#123;</span><br><span class="line">        a: 1,</span><br><span class="line">        b: 2</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    res.json(obj); //以json格式输出</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//增删改查</span><br><span class="line"></span><br><span class="line">//查询所有信息</span><br><span class="line">router.get(&apos;/queryAll&apos;, function(req, res, next) &#123;</span><br><span class="line">    </span><br><span class="line">  var userLogin = req.userLogin</span><br><span class="line">  </span><br><span class="line">  var querySql = &apos;SELECT * FROM wp_users&apos;;</span><br><span class="line">  </span><br><span class="line">  db.query(querySql,function (err, rows) &#123;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        if(err)&#123;</span><br><span class="line">          console.log(&apos;[SELECT ERROR] - &apos;,err.message);</span><br><span class="line">          return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //把搜索值输出</span><br><span class="line">       res.send(rows);</span><br><span class="line">   console.log(&apos;The solution is: &apos;, rows[0].ID);</span><br><span class="line">   </span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//添加用户信息</span><br><span class="line">router.post(&quot;/add&quot;,function(req,res)&#123;</span><br><span class="line">var params = URL.parse(req.url, true).query;</span><br><span class="line">  </span><br><span class="line">var addSql = &quot;INSERT INTO wp_users (user_login) VALUES(&apos;&quot;+params.userLogin+&quot;&apos;)&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    var addSqlParams = [params.userLogin];</span><br><span class="line"> </span><br><span class="line"> db.query(addSql,function(err,rows)&#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            res.send(&quot;添加失败 &quot; + err);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            res.send(jsonData.addInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//更新用户信息</span><br><span class="line">router.put(&quot;/update&quot;,function(req,res,next)&#123;</span><br><span class="line"> </span><br><span class="line"> var params = URL.parse(req.url, true).query;</span><br><span class="line"> </span><br><span class="line"> var displayName = params.displayName;</span><br><span class="line"> </span><br><span class="line"> var id = params.id;</span><br><span class="line"></span><br><span class="line"> var sql = &quot;update wp_users set display_name = &apos;&quot;+ displayName +&quot;&apos; where ID = &quot; + id;</span><br><span class="line"> </span><br><span class="line">  db.query(sql,function(err,rows)&#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            res.send(&quot;修改失败 &quot; + err);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            res.send(jsonData.updateInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//根据ID获取用户信息</span><br><span class="line">router.get(&quot;/getById/:id&quot;,function(req,res)&#123;</span><br><span class="line"></span><br><span class="line">var id = req.params.id;</span><br><span class="line"></span><br><span class="line">var sql = &apos;select * from wp_users where ID = &apos;+id;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">   db.query(sql,function (err, result) &#123;</span><br><span class="line">  </span><br><span class="line">        if(err)&#123;</span><br><span class="line">          console.log(&apos;[SELECT ERROR] - &apos;,err.message);</span><br><span class="line">          return;</span><br><span class="line">        &#125;   </span><br><span class="line"></span><br><span class="line">   console.log(result);</span><br><span class="line">   res.send(result);</span><br><span class="line">   </span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//删除用户信息</span><br><span class="line">router.delete(&apos;/delete/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"> var id = req.params.id;</span><br><span class="line">  </span><br><span class="line">  var delSql = &apos;delete from wp_users where id = &apos;+id;</span><br><span class="line">  </span><br><span class="line">  db.query(delSql,function (err, result) &#123;</span><br><span class="line">  </span><br><span class="line">        if(err)&#123;</span><br><span class="line">          console.log(&apos;[INSERT ERROR] - &apos;,err.message);</span><br><span class="line">          return;</span><br><span class="line">        &#125;   </span><br><span class="line">    res.send(jsonData.deleteInfo);</span><br><span class="line">   </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><h2><span id="4不要忘记在appjs配置路由">4.不要忘记在app.js配置路由</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var usersRouter = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line">app.use(&apos;/users&apos;, usersRouter);</span><br></pre></td></tr></table></figure><p>参考资料如下:<br>node.js取参四种方法req.body,req.params,req.param,req.body:<a href="https://www.cnblogs.com/jkingdom/p/8065202.html" target="_blank" rel="noopener">https://www.cnblogs.com/jkingdom/p/8065202.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js获取时间</title>
      <link href="/2019/03/27/node-js%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4/"/>
      <url>/2019/03/27/node-js%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h2><span id="1nodejs安装时间库">1.Node.js安装时间库</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g silly-datetime 或 npm install silly-datetime</span><br></pre></td></tr></table></figure><h2><span id="2使用代码">2.使用代码</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var sd = require(&apos;silly-datetime&apos;);</span><br><span class="line">var time=sd.format(new Date(), &apos;YYYY-MM-DD HH:mm&apos;);</span><br><span class="line">console.log(time);</span><br></pre></td></tr></table></figure><p>展示效果如下:<br><img src="/2019/03/27/node-js获取时间/date.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js api文档生成</title>
      <link href="/2019/03/25/node-js-api%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/"/>
      <url>/2019/03/25/node-js-api%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>ApiDoc官网地址为:<a href="http://apidocjs.com/" target="_blank" rel="noopener">http://apidocjs.com/</a><br>在Java中有Swagger及其升级版的Swagger2+Springfox自动生成接口管理文档。而在Node.js中则可以利用ApiDoc生成接口文档。<br><a id="more"></a><br>参考官网其实步骤，也很简单，也就如下几步。</p><h2><span id="一-安装库">一、安装库</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i apidoc -g   #全局安装</span><br></pre></td></tr></table></figure><h2><span id="二-配置packagejson">二、配置package.json</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;mock-github-api&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;Mock API server for Github&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;node index&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;repository&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;https://github.com/mzabriskie/mock-github-api&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;Matt Zabriskie&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;bugs&quot;: &#123;</span><br><span class="line">    &quot;url&quot;: &quot;https://github.com/mzabriskie/mock-github-api/issues&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;homepage&quot;: &quot;https://github.com/mzabriskie/mock-github-api&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;@octokit/app&quot;: &quot;^2.2.1&quot;,</span><br><span class="line">    &quot;apidoc&quot;: &quot;^0.17.7&quot;,</span><br><span class="line">    &quot;color&quot;: &quot;^0.11.3&quot;,</span><br><span class="line">    &quot;connect-multiparty&quot;: &quot;^2.2.0&quot;,</span><br><span class="line">    &quot;cors&quot;: &quot;^2.7.1&quot;,</span><br><span class="line">    &quot;cos-nodejs-sdk-v5&quot;: &quot;^2.5.6&quot;,</span><br><span class="line">    &quot;express&quot;: &quot;^4.14.0&quot;,</span><br><span class="line">    &quot;faker&quot;: &quot;^3.1.0&quot;,</span><br><span class="line">    &quot;https&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">    &quot;multer&quot;: &quot;^1.4.1&quot;,</span><br><span class="line">    &quot;multiparty&quot;: &quot;^4.2.1&quot;,</span><br><span class="line">    &quot;mysql&quot;: &quot;^2.16.0&quot;,</span><br><span class="line">    &quot;octokit&quot;: &quot;^1.0.0-hello-world&quot;,</span><br><span class="line">    &quot;redis&quot;: &quot;^2.8.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">&quot;apidoc&quot;: &#123;  </span><br><span class="line">    &quot;title&quot;: &quot;接口文档&quot;, </span><br><span class="line">    &quot;url&quot;: &quot;http://localhost:3000&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="三-在public目录下创建apidoc目录">三、在public目录下创建apidoc目录</span></h2><h2><span id="四-使用命令生成apidoc文档">四、使用命令生成apidoc文档</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apidoc -i routes/ -o public/apidoc/</span><br></pre></td></tr></table></figure><p>访问地址:<a href="http://localhost:3000/apidoc/index.html" target="_blank" rel="noopener">http://localhost:3000/apidoc/index.html</a><br>效果图如下所示:<br><img src="/2019/03/25/node-js-api文档生成/api.png" alt=""></p><p>源码地址为:<a href="https://github.com/developers-youcong/mock-github-api" target="_blank" rel="noopener">https://github.com/developers-youcong/mock-github-api</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON.stringify()和JSON.parse()的作用</title>
      <link href="/2019/03/22/JSON-stringify-%E5%92%8CJSON-parse-%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
      <url>/2019/03/22/JSON-stringify-%E5%92%8CJSON-parse-%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>(1)JSON.stringify() 从一个对象中解析出字符串</p><p>JSON.stringify({“a”:”1”,”b”:”2”})</p><p>结果是：”{“a”:”1”,”b”:”2”}”</p><p>(2)JSON.parse()从一个字符串中解析出JSON对象</p><p>var str = ‘{“a”:”1”,”b”:”2”}’;</p><p>JSON.parse(str);</p><p>结果是：Object{a:”1”,b:”2”}</p><p>应用场景:</p><p>针对(1)，比如后台Java对应的RequestMapping参数列表中的参数为一个对象时，前台多个传输需要经过JSON.stringify()处理，否则会出现参数解析异常。</p><p>针对(2)，比如向后台请求，后台返回一大堆字符串，这时前台页面渲染需要将其以对象的形式展现，这时可以用到JSON.parse()。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql备份命令</title>
      <link href="/2019/03/21/mysql%E5%A4%87%E4%BB%BD%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/03/21/mysql%E5%A4%87%E4%BB%BD%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>mysql备份命令如下:<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">备份多个数据库可以使用如下命令:</span><br><span class="line">mysqldump -uroot -p123456 --databases test1 test2 test3 &gt; /home/test/dump.sql;</span><br><span class="line"></span><br><span class="line">恢复备份:</span><br><span class="line">source dump.sql 在mysql命令行中输入该命令即可恢复</span><br><span class="line"></span><br><span class="line">备份整个数据库:</span><br><span class="line"> mysqldump -uroot -123456 -A &gt; all.sql</span><br><span class="line"></span><br><span class="line">备份整个数据库结构:</span><br><span class="line"> mysqldump -uroot -p123456 -P3306 -A -d &gt; all_002.sql</span><br><span class="line"> </span><br><span class="line">备份单个数据库结构及其数据</span><br><span class="line">mysqldump -uroot -p123456 -P3306 test &gt; all_003.sql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">备份单个数据库结构及其数据</span><br><span class="line">mysqldump -uroot -p123456 -P3306 test -d &gt; all_004.sql</span><br><span class="line">备份单个数据库数据</span><br><span class="line">mysqldump -uroot -p123456 -P3306 test -t &gt; all_005.sql</span><br></pre></td></tr></table></figure></p><p>通常情况下，备份数据库的结构和数据，在实际生产环境中用的比较多，对于大数据时代而言，数据是至关重要的，通过数据分析便可发现用户某些行为，从而开辟市场</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js获取访问IP、地区、、当前操作浏览器</title>
      <link href="/2019/03/21/js%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AEIP%E3%80%81%E5%9C%B0%E5%8C%BA%E3%80%81%E3%80%81%E5%BD%93%E5%89%8D%E6%93%8D%E4%BD%9C%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
      <url>/2019/03/21/js%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AEIP%E3%80%81%E5%9C%B0%E5%8C%BA%E3%80%81%E3%80%81%E5%BD%93%E5%89%8D%E6%93%8D%E4%BD%9C%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>js获取IP、地区、当前操作浏览器有什么用呢？</p><p>我的回答是用处很多，比如现在的异地登录和对用户常用浏览器做数据分析等。</p><a id="more"></a><p>源代码如下:<br>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;http://pv.sohu.com/cityjson?ie=utf-8&quot;&gt;&lt;/script&gt; </span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;  </span><br><span class="line">        document.write(&apos;IP地址:&apos; + returnCitySN[&quot;cip&quot;] + &apos;, CID:&apos; + returnCitySN[&quot;cid&quot;] + &apos;, 地区:&apos; + returnCitySN[&quot;cname&quot;]+&quot;,浏览器版本:&quot;+getBrowserInfo());</span><br><span class="line"></span><br><span class="line">function getBrowserInfo()</span><br><span class="line">&#123;</span><br><span class="line">    var agent = navigator.userAgent.toLowerCase() ;</span><br><span class="line"></span><br><span class="line">    var regStr_ie = /msie [\d.]+;/gi ;</span><br><span class="line">    var regStr_ff = /firefox\/[\d.]+/gi</span><br><span class="line">    var regStr_chrome = /chrome\/[\d.]+/gi ;</span><br><span class="line">    var regStr_saf = /safari\/[\d.]+/gi ;</span><br><span class="line">    </span><br><span class="line">    //IE</span><br><span class="line">    if(agent.indexOf(&quot;msie&quot;) &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        return agent.match(regStr_ie) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //firefox</span><br><span class="line">    if(agent.indexOf(&quot;firefox&quot;) &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        return agent.match(regStr_ff) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //Chrome</span><br><span class="line">    if(agent.indexOf(&quot;chrome&quot;) &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        return agent.match(regStr_chrome) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //Safari</span><br><span class="line">    if(agent.indexOf(&quot;safari&quot;) &gt; 0 &amp;&amp; agent.indexOf(&quot;chrome&quot;) &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        return agent.match(regStr_saf) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt; </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>展示效果如下:<br><img src="/2019/03/21/js获取访问IP、地区、、当前操作浏览器/js01.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Uncaught ReferenceError: layer is not defined</title>
      <link href="/2019/03/19/Uncaught-ReferenceError-layer-is-not-defined/"/>
      <url>/2019/03/19/Uncaught-ReferenceError-layer-is-not-defined/</url>
      
        <content type="html"><![CDATA[<p>错误详细信息,如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught ReferenceError: layer is not defined&apos;</span><br></pre></td></tr></table></figure></p><p>关键词就是not defined 未定义，那么解决方案就是给它定义。<br><a id="more"></a><br>原来的问题代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">layer.confirm(&apos;确认要退出吗？&apos;, &#123;</span><br><span class="line">           btn : [ &apos;确定&apos;, &apos;取消&apos; ]//按钮</span><br><span class="line">       &#125;, function(index) &#123;</span><br><span class="line">       </span><br><span class="line">           layer.close(index);</span><br><span class="line">           //此处请求后台程序，下方是成功后的前台处理……</span><br><span class="line">           var index = layer.load(0,&#123;shade: [0.7, &apos;#393D49&apos;]&#125;, &#123;shadeClose: true&#125;); //0代表加载的风格，支持0-2</span><br><span class="line">           </span><br><span class="line">           delete_cookie(&quot;userId&quot;, &quot;/&quot;);</span><br><span class="line"></span><br><span class="line">        window.location.href = &quot;index.html&quot;;</span><br><span class="line"></span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></p><p>这样在我的博客首页是可以生效的，不会出现未定义。但是当我将其抽象为一个函数的时候，其它地方就不行了。</p><p>通过声明定义后，代码就变成如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">layui.use(&apos;layer&apos;,function () &#123; </span><br><span class="line">       </span><br><span class="line">       layer.confirm(&apos;确认要退出吗？&apos;, &#123;</span><br><span class="line">           btn : [ &apos;确定&apos;, &apos;取消&apos; ]//按钮</span><br><span class="line">       &#125;, function(index) &#123;</span><br><span class="line">       </span><br><span class="line">           layer.close(index);</span><br><span class="line">           //此处请求后台程序，下方是成功后的前台处理……</span><br><span class="line">           var index = layer.load(0,&#123;shade: [0.7, &apos;#393D49&apos;]&#125;, &#123;shadeClose: true&#125;); //0代表加载的风格，支持0-2</span><br><span class="line">           </span><br><span class="line">           delete_cookie(&quot;userId&quot;, &quot;/&quot;);</span><br><span class="line"></span><br><span class="line">        window.location.href = &quot;index.html&quot;;</span><br><span class="line"></span><br><span class="line">       &#125;);</span><br><span class="line">       </span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></p><p>当时我在想引入layer.js来解决这个问题，但是仔细一看这并不是问题的关键所在。<br>解决问题，在于更好的理解问题，当然了，把握关键词也是很重要的(事半功倍)。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Error: listen EADDRINUSE :::3000</title>
      <link href="/2019/03/19/Error-listen-EADDRINUSE-3000/"/>
      <url>/2019/03/19/Error-listen-EADDRINUSE-3000/</url>
      
        <content type="html"><![CDATA[<p>错误详细信息如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">events.js:183</span><br><span class="line"></span><br><span class="line">      throw er; // Unhandled &apos;error&apos; event</span><br><span class="line"></span><br><span class="line">      ^</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Error: listen EADDRINUSE :::3000</span><br><span class="line"></span><br><span class="line">    at Server.setupListenHandle [as _listen2] (net.js:1360:14)</span><br><span class="line"></span><br><span class="line">    at listenInCluster (net.js:1401:12)</span><br><span class="line"></span><br><span class="line">    at Server.listen (net.js:1485:7)</span><br><span class="line"></span><br><span class="line">    at Function.listen (E:\VsCode\mock-github-api\node_modules\express\lib\appli                                                                                                                                  cation.js:618:24)</span><br><span class="line"></span><br><span class="line">    at Object.&lt;anonymous&gt; (E:\VsCode\mock-github-api\index.js:180:5)</span><br><span class="line"></span><br><span class="line">    at Module._compile (module.js:653:30)</span><br><span class="line"></span><br><span class="line">    at Object.Module._extensions..js (module.js:664:10)</span><br><span class="line"></span><br><span class="line">    at Module.load (module.js:566:32)</span><br><span class="line"></span><br><span class="line">    at tryModuleLoad (module.js:506:12)</span><br><span class="line"></span><br><span class="line">    at Function.Module._load (module.js:498:3)</span><br><span class="line"></span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line"></span><br><span class="line">npm ERR! errno 1</span><br><span class="line"></span><br><span class="line">npm ERR! mock-github-api@1.0.0 start: `node index`</span><br><span class="line"></span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line"></span><br><span class="line">npm ERR!</span><br><span class="line"></span><br><span class="line">npm ERR! Failed at the mock-github-api@1.0.0 start script.</span><br><span class="line"></span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional log                                                                                                                                  ging output above.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line"></span><br><span class="line">npm ERR!     D:\Program Files\nodejs\node_cache\_logs\2019-03-19T06_44_19_978Z-d                                                                                                                                  ebug.log</span><br></pre></td></tr></table></figure><a id="more"></a><p>关键信息:listen EADDRINUSE :::3000</p><p>其实就是端口被占，主要修改的地方是app.listen(4000),我在这里将其改为4000,问题就迎刃而解。</p><p>当然了，接下来还可能会出现这个问题，最直接的解决办法是快捷键ctrl+shift+esc打开进程管理，并找到对应的进程，将其杀死，如图所示:<br><img src="/2019/03/19/Error-listen-EADDRINUSE-3000/process.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3.6在linux持久运行django</title>
      <link href="/2019/03/19/python3-6%E5%9C%A8linux%E6%8C%81%E4%B9%85%E8%BF%90%E8%A1%8Cdjango/"/>
      <url>/2019/03/19/python3-6%E5%9C%A8linux%E6%8C%81%E4%B9%85%E8%BF%90%E8%A1%8Cdjango/</url>
      
        <content type="html"><![CDATA[<p>最近线上运行一个OnlineJudgeServer的项目，通过python manage.py runserver 0.0.0.0:8090运行，如果关闭当前窗口，实际就相当于关闭了这个进程。<br><a id="more"></a><br>之前说过通过nuhub可以实现在Linux持久运行的目的。</p><p>如果你的nohub出现 nohub命令找不到，那么你可以执行如下这个命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/nohup python manage.py runserver 0.0.0.0:8090 &gt; system.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><p>但是由于python版本不一样，对应的django也会存在差异，报了些错误,主要是关于djaon版本问题(与Python版本也有关)。</p><p>最后通过如下命令解决该问题:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/nohup python3.6 manage.py runserver 0.0.0.0:8090 &gt; system.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js读取某个目录下的所有文件夹名字并将其写入到json文件</title>
      <link href="/2019/03/19/Node-js%E8%AF%BB%E5%8F%96%E6%9F%90%E4%B8%AA%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E5%A4%B9%E5%90%8D%E5%AD%97%E5%B9%B6%E5%B0%86%E5%85%B6%E5%86%99%E5%85%A5%E5%88%B0json%E6%96%87%E4%BB%B6/"/>
      <url>/2019/03/19/Node-js%E8%AF%BB%E5%8F%96%E6%9F%90%E4%B8%AA%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E5%A4%B9%E5%90%8D%E5%AD%97%E5%B9%B6%E5%B0%86%E5%85%B6%E5%86%99%E5%85%A5%E5%88%B0json%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>针对解决的问题是，有些时候我们需要读取某个文件并将其写入到对应的json文件(xml文件也行，不过目前用json很多，json是主流)。<br><a id="more"></a><br>源码如下:<br>index.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">let components = []</span><br><span class="line">const files = fs.readdirSync(&apos;./&apos;)</span><br><span class="line">files.forEach(function (item, index) &#123;</span><br><span class="line">    let stat = fs.lstatSync(&quot;./&quot; + item)</span><br><span class="line">    if (stat.isDirectory() === true) &#123; </span><br><span class="line">      components.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(components);</span><br><span class="line"></span><br><span class="line">let str = JSON.stringify(components)</span><br><span class="line"> </span><br><span class="line"> fs.writeFile(&apos;./extension.json&apos;,str,function(err)&#123;</span><br><span class="line"> if (err) &#123;res.status(500).send(&apos;Server is error...&apos;)&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>控制台输出对应的数据:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[ &apos;file&apos;,</span><br><span class="line">  &apos;LearningDemo&apos;,</span><br><span class="line">  &apos;VsCode&apos;,</span><br><span class="line">  &apos;VsCode文件备份&apos;,</span><br><span class="line">  &apos;WeChatApp&apos;,</span><br><span class="line">  &apos;业务管理文档&apos;,</span><br><span class="line">  &apos;技术管理文档&apos;,</span><br><span class="line">  &apos;阿里云服务器备份&apos; ]</span><br></pre></td></tr></table></figure></p><p>参考资料如下:<br>nodejs写入json文件，格式化输出json的方法:<a href="http://www.cnblogs.com/threeEyes/p/10023827.html" target="_blank" rel="noopener">http://www.cnblogs.com/threeEyes/p/10023827.html</a><br>利用nodejs对本地json文件进行增删改查:<a href="https://blog.csdn.net/zhaoxiang66/article/details/79894209" target="_blank" rel="noopener">https://blog.csdn.net/zhaoxiang66/article/details/79894209</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL安装和使用</title>
      <link href="/2019/03/16/PostgreSQL%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/03/16/PostgreSQL%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>青岛OJ系统用的关系型数据库是PostgreSQL,为此对PostgreSQL大致了解下。</p><p>今天的主要话题围绕下面两个方面:</p><ul><li>PostgreSQL安装</li><li>PostgreSQL使用</li></ul><a id="more"></a><h2><span id="一-postgresql安装以ubuntu1604为例">一、PostgreSQL安装(以Ubuntu16.04为例)</span></h2><h4><span id="1安装命令">1.安装命令</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install postgresql</span><br></pre></td></tr></table></figure><h4><span id="2修改-etcpostgresql95mainpostgresqlconf">2.修改 /etc/postgresql/9.5/main/postgresql.conf</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">将下面 listen_addresses = &apos;localhost&apos;注释去掉并改为  listen_addresses = &apos;*&apos;</span><br><span class="line"># - Connection Settings -</span><br><span class="line">#listen_addresses = &apos;localhost&apos;          </span><br><span class="line"># what IP address(es) to listen on;                </span><br><span class="line"># comma-separated list of addresses;     </span><br><span class="line"># defaults to &apos;localhost&apos;; use &apos;*&apos; for all</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">将下面password_encryption = on 注释打开</span><br><span class="line">#password_encryption = on</span><br></pre></td></tr></table></figure><h4><span id="3切换用户su-postgres">3.切换用户su - postgres</span></h4><h4><span id="4通过psql-命令进入postgresql客户端">4.通过psql 命令进入postgresql客户端</span></h4><h4><span id="5修改用户密码">5.修改用户密码</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER postgres PASSWORD &apos;youcongtech&apos;;</span><br></pre></td></tr></table></figure><h4><span id="6vim-etcpostgresql95mainpg_hbaconf-修改-host-all-all-1921681024-md5-中的ip为00000">6.vim /etc/postgresql/9.5/main/pg_hba.conf 修改 host all all 192.168.1.0/24 md5 中的ip,为：0.0.0.0/0</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># TYPE DATABASE  USER    CIDR-ADDRESS     METHOD</span><br><span class="line"># &quot;local&quot; is for Unix domain socket connections only</span><br><span class="line">local all    all               trust</span><br><span class="line"># IPv4 local connections:</span><br><span class="line">host  all    all    127.0.0.1/32     trust</span><br><span class="line">host  all    all    192.168.126.0/24    md5</span><br><span class="line"># IPv6 local connections:</span><br><span class="line">host  all    all    ::1/128       trust</span><br></pre></td></tr></table></figure><p>windows安装PostgreSQL:<a href="https://www.cnblogs.com/sharpest/p/6225028.html" target="_blank" rel="noopener">https://www.cnblogs.com/sharpest/p/6225028.html</a></p><h2><span id="二-postgresql使用">二、PostgreSQL使用</span></h2><p>PostgreSQL官方网站:<a href="https://www.postgresql.org/" target="_blank" rel="noopener">https://www.postgresql.org/</a><br>PostgreSQL中文教程:<a href="https://www.yiibai.com/postgresql/" target="_blank" rel="noopener">https://www.yiibai.com/postgresql/</a></p><h4><span id="1介绍postgresql">1.介绍PostgreSQL</span></h4><p>PostgreSQL是一个功能强大的开源对象关系数据库系统，它使用和扩展了SQL语言，并结合了许多安全存储和扩展最复杂数据工作负载的功能。PostgreSQL的起源可以追溯到1986年，作为加州大学伯克利分校POSTGRES项目的一部分，并在核心平台上进行30多年的积极开发。<br>PostgreSQL凭借其经过验证的架构，可靠性、数据完整性，强大的功能集，可扩展性以及软件背后的开源社区的奉献精神赢得了良好的声誉，以始终如一地提供高性能和创新的解决方案。PostgreSQL在所有主要操作系统上运行，自2001年以来一直是符合ACID标准的，并且具有强大的附加功能，例如流行的PostGIS地址空间数据库扩展器。毫无疑问，PostgerSQL已成为许多人和组织首选的开源关系数据库。</p><h4><span id="为什么要使用postgresql">为什么要使用PostgreSQL</span></h4><p>PostgreSQL提供了许多功能，旨在帮助开发人员构建应用程序，管理员保护数据完整性并构建容错环境，并帮助您管理数据，无论数据集有多大或多小。除了免费和开源之外，PostgeSQL还具有高度可扩展性。例如，您可以定义自己的数据类型，构建自定义函数，甚至可以编写来自不同编程语言的代码，而无需重新编译数据库。<br>PostgreSQL试图符合SQL标准，在这种标准中，这种一致性不会与传统特性相矛盾，或者可能导致糟糕的架构决策。支持SQL标准所需的许多功能，但有时语法或功能略有不同。随着时间的推移，可以预期进一步向一致性迈进。从2018年10月发布的版本11开始，PostgreSQL符合SQL:2011核心一致性的179个强制性功能中的至少160个，在撰写本文时，没有任何关系数据库符合此标准的完全符合性。</p><p>下面是PostgreSQL中各种功能的无穷无尽的功能，每个主要版本都添加更多功能:</p><h5><span id="数据类型">数据类型</span></h5><p>基元：整数，数字，字符串，布尔值<br>结构化：日期/时间，数组，范围，UUID<br>文档：JSON / JSONB，XML，键值（Hstore）<br>几何：点，线，圆，多边形<br>自定义：复合，自定义类型</p><h5><span id="数据的完整性">数据的完整性</span></h5><p>独一无二，不是空的<br>主键<br>外键<br>排除约束<br>显式锁定，咨询锁定</p><h5><span id="并发性性能">并发性，性能</span></h5><p>索引：B树，多列，表达式，部分<br>高级索引：GiST，SP-Gist，KNN Gist，GIN，BRIN，覆盖索引，布隆过滤器<br>复杂的查询计划器/优化器，仅索引扫描，多列统计<br>交易，嵌套交易（通过保存点）<br>多版本并发控制（MVCC）<br>读取查询的并行化和构建B树索引<br>表分区<br>SQL标准中定义的所有事务隔离级别，包括Serializable<br>即时（JIT）表达式汇编</p><h5><span id="可靠性灾难恢复">可靠性，灾难恢复</span></h5><p>预写日志（WAL）<br>复制：异步，同步，逻辑<br>时间点恢复（PITR），主动备用<br>表空间</p><h5><span id="安全">安全</span></h5><p>身份验证：GSSAPI，SSPI，LDAP，SCRAM-SHA-256，证书等<br>强大的访问控制系统<br>列和行级安全性</p><h5><span id="可扩展性">可扩展性</span></h5><p>存储的功能和程序<br>程序语言：PL / PGSQL，Perl，Python（以及更多）<br>外部数据包装器：使用标准SQL接口连接到其他数据库或流<br>许多提供附加功能的扩展，包括PostGIS</p><h5><span id="国际化文本搜索">国际化，文本搜索</span></h5><p>支持国际字符集，例如通过ICU校对<br>全文检索<br>您可以在PostgreSQL 文档中发现更多功能。此外，PostgreSQL具有高度可扩展性：许多功能（如索引）都定义了API，因此您可以使用PostgreSQL构建以解决您的挑战。</p><p>事实证明，PostgreSQL在可管理的大量数据和可容纳的并发用户数量方面具有高度可扩展性。生产环境中有活跃的PostgreSQL集群可管理数TB的数据，以及管理PB级的专用系统。</p><p>本文参考资料:<br><a href="https://www.jianshu.com/p/dda94c4ffd52" target="_blank" rel="noopener">Ubuntu 16.04 安装使用PostgreSQL最佳指南</a><br><a href="https://www.postgresql.org/" target="_blank" rel="noopener">PostgreSQL官网</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm run dev 在Linux上持久运行</title>
      <link href="/2019/03/16/npm-run-dev-%E5%9C%A8Linux%E4%B8%8A%E6%8C%81%E4%B9%85%E8%BF%90%E8%A1%8C/"/>
      <url>/2019/03/16/npm-run-dev-%E5%9C%A8Linux%E4%B8%8A%E6%8C%81%E4%B9%85%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>关于node.js应用程序如何持久运行，我在<a href="https://developers-youcong.github.io/2019/03/05/node-js%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%A8%8B%E5%BA%8F%E5%9C%A8Linux%E4%B8%8A%E6%8C%81%E4%B9%85%E8%BF%90%E8%A1%8C/">node.js服务端程序在Linux上持久运行</a>用过。</p><p>这次主要是针对是一个vue.js应用程序。<br><a id="more"></a><br>vue.js应用程序通常运行命令是npm run dev。如果是在命令行输入该命令，则会出现如下信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DONE  Compiled successfully in 1140ms                                                                          15:13:02</span><br><span class="line"></span><br><span class="line">I  Your application is running here: http://0.0.0.0:8081</span><br></pre></td></tr></table></figure></p><p>假定如果关闭当前窗口则发现进程随之关闭，那么如何保证其持久运行，不会因为关闭窗口造成进程关闭，还是需要用到nohub这个Linux命令。</p><p>关于这个命令我在<a href="https://developers-youcong.github.io/2019/02/23/springboot%E6%89%93%E6%88%90%E7%9A%84jar%E5%8C%85%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E4%B8%8A%E6%8C%81%E4%B9%85%E8%BF%90%E8%A1%8C/">springboot打成的jar包如何在Linux上持久运行</a>用过</p><p>该vue.js应用程序同样适用。</p><p>如果想记录日志，请按照如下执行(一定要在package.json同级目录或者是当前项目根目录):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch my.log</span><br><span class="line">chmod u+w my.log</span><br><span class="line">nohup npm run dev &gt; my.log 2&gt;my.log &amp;</span><br></pre></td></tr></table></figure><p>如果不想记录日志，如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup npm run dev &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></p><p>参考资料:<br><a href="https://blog.csdn.net/chanlingmai5374/article/details/80762983?utm_source=blogxgwz7" target="_blank" rel="noopener">让npm run dev在Linux后台 持久运行</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js截取url参数</title>
      <link href="/2019/03/16/js%E6%88%AA%E5%8F%96url%E5%8F%82%E6%95%B0/"/>
      <url>/2019/03/16/js%E6%88%AA%E5%8F%96url%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>举例说明，比如<a href="http://localhost:2019/blog/getCommentListInfo?postId=1" target="_blank" rel="noopener">http://localhost:2019/blog/getCommentListInfo?postId=1</a><br>如何获取postId=1这个参数值呢？<br><a id="more"></a><br>很简单通过下面代码即可获取，如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">window.onload = function() &#123;</span><br><span class="line"></span><br><span class="line">var postId = getUrlParms(&quot;postId&quot;);</span><br><span class="line"></span><br><span class="line">getByIdCommentInfo(postId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//获取地址栏参数，name:参数名称</span><br><span class="line">function getUrlParms(name) &#123;</span><br><span class="line">var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;);</span><br><span class="line">var r = window.location.search.substr(1).match(reg);</span><br><span class="line">if(r != null)</span><br><span class="line">return unescape(r[2]);</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参考资料:<br>js获取url传递参数，js获取url?号后面的参数:<a href="https://www.cnblogs.com/karila/p/5991340.html" target="_blank" rel="noopener">https://www.cnblogs.com/karila/p/5991340.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>express框架之跨域请求</title>
      <link href="/2019/03/13/express%E6%A1%86%E6%9E%B6%E4%B9%8B%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
      <url>/2019/03/13/express%E6%A1%86%E6%9E%B6%E4%B9%8B%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<p>express.js跨域请求代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.all(&apos;*&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;X-Requested-With&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Methods&quot;,&quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class="line">    res.header(&quot;X-Powered-By&quot;,&apos; 3.2.1&apos;)</span><br><span class="line">    res.header(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>按照上面的代码，即可解决跨域问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js之Cookie</title>
      <link href="/2019/03/13/node-js%E4%B9%8BCookie/"/>
      <url>/2019/03/13/node-js%E4%B9%8BCookie/</url>
      
        <content type="html"><![CDATA[<p>最近还是用node.js比较多，今天正好遇见一个问题，还是关于Cookie。<br><a id="more"></a><br>node.js中如何实现cookie(以express框架为例):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"> </span><br><span class="line">var express = require(&quot;express&quot;);</span><br><span class="line">var cookieParser = require(&quot;cookie-parser&quot;);</span><br><span class="line">var util = require(&quot;util&quot;);</span><br><span class="line"> </span><br><span class="line">var app = express();</span><br><span class="line">app.use(cookieParser());</span><br><span class="line"> </span><br><span class="line">app.get(&quot;/test&quot;,function (req, res) &#123;</span><br><span class="line">    console.log(&quot;Cookies: &quot; + util.inspect(req.cookies));</span><br><span class="line"></span><br><span class="line">res.send(&quot;cookie&quot;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(8081);</span><br></pre></td></tr></table></figure></p><p>控制台输出结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookies: &#123; Hm_lvt_2edaee7dab677cdec491683758d1e378: &apos;1552046206,1552134942,1552485731&apos;,</span><br><span class="line">  Hm_lpvt_2edaee7dab677cdec491683758d1e378: &apos;1552485731&apos;,</span><br><span class="line">  add: [ null, null, null, null, null, null, null ] &#125;</span><br></pre></td></tr></table></figure></p><p>如果不使用express的话，那么原生node.js是如何实现的呢？代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">http.createServer(function (req, res) &#123;</span><br><span class="line"></span><br><span class="line">    // 获得客户端的Cookie</span><br><span class="line"></span><br><span class="line">    var Cookies = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    req.headers.cookie &amp;&amp; req.headers.cookie.split(&apos;;&apos;).forEach(function( Cookie ) &#123;</span><br><span class="line"></span><br><span class="line">        var parts = Cookie.split(&apos;=&apos;);</span><br><span class="line"></span><br><span class="line">        Cookies[ parts[ 0 ].trim() ] = ( parts[ 1 ] || &apos;&apos; ).trim();</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    console.log(Cookies)</span><br><span class="line"></span><br><span class="line">    // 向客户端设置一个Cookie</span><br><span class="line"></span><br><span class="line">    res.writeHead(200, &#123;</span><br><span class="line"></span><br><span class="line">        &apos;Set-Cookie&apos;: &apos;myCookie=test&apos;,</span><br><span class="line"></span><br><span class="line">        &apos;Content-Type&apos;: &apos;text/plain&apos;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    res.end(&apos;Hello World\n&apos;);</span><br><span class="line"></span><br><span class="line">&#125;).listen(8000);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">console.log(&apos;Server running at http://127.0.0.1:8000/&apos;);</span><br></pre></td></tr></table></figure></p><p>‘<br>cookie并不是万能的，相反它有一定的安全隐患，为此node.js有一种cookie签名实现，源码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line">const cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line"></span><br><span class="line">//随机生成的字符串</span><br><span class="line">var signStr = &apos;xadsafeowirw&apos;</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//需要将密匙传给cookieParser, 在接收数据的时候，进行解析。</span><br><span class="line">app.use(cookieParser(signStr));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, function (req, res) &#123;</span><br><span class="line">    //将密匙字符串赋值给req.secret,可以省略，在上面cookieparser()时会自动对secret赋值</span><br><span class="line">    req.secret=signStr;</span><br><span class="line"></span><br><span class="line">    //返回给浏览器的cookie, 这就是传说中的种cookie了</span><br><span class="line">    //如果需要开启签名，第三个参数对象signed 设置为true.</span><br><span class="line">    //由于cookie的大小限制4k，而签名后的cookie体积会增加，所以重要的cookie才签名</span><br><span class="line">    res.cookie(&apos;cookiename&apos;, &apos;youcong&apos;, &#123;signed: true, maxAge: 3600&#125;)</span><br><span class="line"></span><br><span class="line">    //有没有签名的cookie，获取方式不一样。</span><br><span class="line">    console.log(&apos;无签名&apos;, req.cookies);</span><br><span class="line">    console.log(&apos;带签名&apos;,req.signedCookies);</span><br><span class="line">    res.send(&apos;ok&apos;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(8090);</span><br></pre></td></tr></table></figure></p><p>顺便再补充一下node.js的session实现,代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line">const cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">const cookieSession = require(&apos;cookie-session&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(cookieParser());</span><br><span class="line"></span><br><span class="line">//cookieSession 必须放在cookieParser后面</span><br><span class="line">app.use(cookieSession(&#123;</span><br><span class="line">    //session的秘钥，防止session劫持。 这个秘钥会被循环使用，秘钥越长，数量越多，破解难度越高。</span><br><span class="line">    keys: [&apos;aaa&apos;, &apos;bbb&apos;, &apos;ccc&apos;],</span><br><span class="line">    //session过期时间，不易太长。php默认20分钟</span><br><span class="line">    maxAge: 60*60,</span><br><span class="line">    //可以改变浏览器cookie的名字</span><br><span class="line">    name: &apos;session&apos;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, function (req, res) &#123;</span><br><span class="line"></span><br><span class="line">    //假设使用count记录用户访问的次数</span><br><span class="line">   if(req.session[&apos;count&apos;] == null) &#123;</span><br><span class="line">       req.session[&apos;count&apos;] = 1;</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">       req.session[&apos;count&apos;]++;</span><br><span class="line">   &#125;</span><br><span class="line">   console.log(req.session[&apos;count&apos;])</span><br><span class="line">    res.send(&apos;ok&apos;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(8090)</span><br></pre></td></tr></table></figure></p><p>参考资料如下:<br>node.js操作Cookie，让你清楚了解cookie存入过程:<a href="https://blog.csdn.net/sinat_18474835/article/details/79987282" target="_blank" rel="noopener">https://blog.csdn.net/sinat_18474835/article/details/79987282</a><br>Node.js学习（15）-Cookie:<a href="https://blog.csdn.net/sunhuansheng/article/details/82356129" target="_blank" rel="noopener">https://blog.csdn.net/sunhuansheng/article/details/82356129</a><br>node学习之cookie和session:<a href="https://www.cnblogs.com/lijinwen/p/7898159.html" target="_blank" rel="noopener">https://www.cnblogs.com/lijinwen/p/7898159.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery和js之Cookie实现</title>
      <link href="/2019/03/13/jQuery%E5%92%8Cjs%E4%B9%8BCookie%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/03/13/jQuery%E5%92%8Cjs%E4%B9%8BCookie%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>Web开发者的朋友们基本上都知道，jQuery是对js的封装。今天之所以想讲解这个问题，主要是因为Cookie用的还是比较多，应用场景除了老生常谈的购物车，还有就是用户状态(以我之前开发的一个项目除了session和token外，还有一个加密cookie，双重保护，确保系统安全)。<br><a id="more"></a></p><h2><span id="一-js中的cookie增加-获取-删除操作">一、js中的Cookie增加、获取、删除操作</span></h2><h3><span id="1添加cookie保存cookie">1.添加Cookie(保存Cookie)</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function setCookie(c_name,value,expiredays)&#123;</span><br><span class="line">    var cookieStr = &quot;&quot;;</span><br><span class="line">    var exdate=new Date();</span><br><span class="line">    exdate.setDate(exdate.getDate()+expiredays);</span><br><span class="line">    document.cookie = c_name+ &quot;=&quot; +escape(value)+</span><br><span class="line">    ((expiredays==null) ? &quot;&quot; : &quot;; expires=&quot;+exdate.toGMTString())+&quot;;path=/&quot;;</span><br><span class="line">&#125;//由于cookie存在域的概念，且在这里要不区分域，获取cookie的值，所以在这里使用的是统一的路径 path=/ ；</span><br></pre></td></tr></table></figure><h3><span id="2获取cookie">2.获取Cookie</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function getCookie(c_name)&#123;</span><br><span class="line">    if (document.cookie.length&gt;0)&#123; </span><br><span class="line">        console.log(document.cookie);</span><br><span class="line">        c_start=document.cookie.indexOf(c_name + &quot;=&quot;);</span><br><span class="line">        if (c_start!=-1)&#123; </span><br><span class="line">            c_start=c_start + c_name.length+1; </span><br><span class="line">            c_end=document.cookie.indexOf(&quot;;&quot;,c_start);</span><br><span class="line">            if (c_end==-1) c_end=document.cookie.length;</span><br><span class="line">            return unescape(document.cookie.substring(c_start,c_end));</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    return &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="3删除cookie">3.删除Cookie</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function delete_cookie( name, path, domain ) &#123;</span><br><span class="line">  if( get_cookie( name ) ) &#123;</span><br><span class="line">    document.cookie = name + &quot;=&quot; +</span><br><span class="line">      ((path) ? &quot;;path=&quot;+path:&quot;&quot;)+</span><br><span class="line">      ((domain)?&quot;;domain=&quot;+domain:&quot;&quot;) +</span><br><span class="line">      &quot;;expires=Thu, 01 Jan 1970 00:00:01 GMT&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="二-jquery如何操作cookie">二、jQuery如何操作Cookie</span></h2><p>前提必须要有jQuery.min.js和jQuery.cookie.js。<br>jQuery.cookie.js下载:<a href="http://plugins.jquery.com/cookie/" target="_blank" rel="noopener">http://plugins.jquery.com/cookie/</a></p><h3><span id="1jquery添加cookie">1.jQuery添加Cookie</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.cookie(&apos;the_cookie&apos;, &apos;the_value&apos;, &#123; expires: 7 &#125;);</span><br></pre></td></tr></table></figure><h3><span id="2jquery获取cookie">2.jQuery获取Cookie</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.cookie(&apos;the_cookie&apos;);</span><br></pre></td></tr></table></figure><h3><span id="3jquery删除cookie">3.jQuery删除Cookie</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.cookie(&apos;the_cookie&apos;, null);</span><br></pre></td></tr></table></figure><p>js和jQuery对比，两者效果明显，从中也能体现框架化繁为简的特性。</p><p>注意事项:<br>有的浏览器禁用Cookie会看不到Cookie信息，比如Google。上面的例子是没有问题的，如果你发现在你本地运行不出来，该导入的库也导入了还是没有效果，也不报错，这个时候你就需要看看是不是浏览器禁用Cookie了。</p><p>本文参考资料:<br>jQuery之操作Cookie:<a href="https://www.cnblogs.com/s313139232/p/7839037.html" target="_blank" rel="noopener">https://www.cnblogs.com/s313139232/p/7839037.html</a><br>js中Cookie操作:<a href="https://www.cnblogs.com/springlight/p/5953153.html" target="_blank" rel="noopener">https://www.cnblogs.com/springlight/p/5953153.html</a><br>关于js操作Cookie(包含Cookie相关的基础知识):<a href="https://blog.csdn.net/web_yzm/article/details/81669772" target="_blank" rel="noopener">https://blog.csdn.net/web_yzm/article/details/81669772</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之静态资源放行</title>
      <link href="/2019/03/13/SpringBoot%E4%B9%8B%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%94%BE%E8%A1%8C/"/>
      <url>/2019/03/13/SpringBoot%E4%B9%8B%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%94%BE%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>为了提高开发效率，编写对应的代码生成器。代码生成器主要有两个方面，一个是在线Web，另外一个是运行某个类。</p><p>使用的技术是SpringBoot+MyBatis-Plus+MySQL+JDK8。</p><p>在编写在线代码生成器的时候，正好遇到一个小问题，那就是静态资源无法访问。</p><p>以SSM(Spring+SpringMVC+MyBatis/MyBatis-Plus)框架来说，通常要想对静态资源放行，最简单直接的办法是使用*.do。</p><a id="more"></a><p>如果你不想使用*.do，那么可以尝试下面两种方法？</p><h2><span id="第一种方法">第一种方法</span></h2><p>在spring-mvc.xml中配置如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;mvc:default-servlet-handler/&gt;</span><br></pre></td></tr></table></figure><p>光这样还不够，如果是不起作用，你还需要在web.xml配置如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 静态资源文件的引入 --&gt;</span><br><span class="line"></span><br><span class="line"> &lt;servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">  &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line"></span><br><span class="line">  &lt;url-pattern&gt;*.js&lt;/url-pattern&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line"> &lt;servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">  &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line"></span><br><span class="line">  &lt;url-pattern&gt;*.css&lt;/url-pattern&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line"> &lt;servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">  &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line"></span><br><span class="line">  &lt;url-pattern&gt;*.png&lt;/url-pattern&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">  &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line"></span><br><span class="line">  &lt;url-pattern&gt;*.jpg&lt;/url-pattern&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><h2><span id="第二种方法">第二种方法</span></h2><p>对指定目录放行，通常也是修改spring-mvc.xml,请参考:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 对指定目录下的静态资源放行 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;mvc:resources location=&quot;/images/&quot; mapping=&quot;/images/**&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;mvc:resources location=&quot;/css/&quot; mapping=&quot;/css/**&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;mvc:resources location=&quot;/js/&quot; mapping=&quot;/js/**&quot;/&gt;</span><br></pre></td></tr></table></figure><p>如果是使用SpringBoot的话，该如何配置静态资源放行呢？</p><p>一般情况下，SpringBoot+模板语言(jsp+freemarker等)开发。</p><p>但是有部分开发者为了实现前后端分离(这是一种变相的分离)，将静态资源放在src/main/resources目录下。</p><p>放在这个目录下是无法访问的，如果要想访问，需要配置。</p><p>WebConfig.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package com.acs.springboot.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import org.springframework.http.CacheControl;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@ControllerAdvice</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line"></span><br><span class="line">public class WebConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line"></span><br><span class="line">    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line"></span><br><span class="line">        //静态资源放行</span><br><span class="line"></span><br><span class="line">    registry.addResourceHandler(&quot;/view/**&quot;).addResourceLocations(&quot;classpath:/view/&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图如下:</p><p><img src="/2019/03/13/SpringBoot之静态资源放行/server01.png" alt=""></p><p><img src="/2019/03/13/SpringBoot之静态资源放行/server02.png" alt=""></p><p>参考(均来自我个人的博客园):</p><p>JavaWeb在线代码生成器:<a href="https://www.cnblogs.com/youcong/p/9494892.html" target="_blank" rel="noopener">https://www.cnblogs.com/youcong/p/9494892.html</a></p><p>MP实战系列(六)之代码生成器讲解:<a href="https://blog.csdn.net/suijiarui/article/details/51360980" target="_blank" rel="noopener">https://blog.csdn.net/suijiarui/article/details/51360980</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StringRedisTemplate操作Redis</title>
      <link href="/2019/03/09/StringRedisTemplate%E6%93%8D%E4%BD%9CRedis/"/>
      <url>/2019/03/09/StringRedisTemplate%E6%93%8D%E4%BD%9CRedis/</url>
      
        <content type="html"><![CDATA[<p>在说到StringRedisTemplate操作Redis数据的时候，我们顺便谈谈StringRedisTemplate和RedisTemplate的区别。</p><h2><span id="一-stringredistemplate和redistemplate的区别">一、StringRedisTemplate和RedisTemplate的区别</span></h2><p>区别如下:<br>1.两者关系是StringRedisTemplate继承RedisTemplate。</p><p>从StringRedisTemplate源码即可看出，如下图所示:<br><img src="/2019/03/09/StringRedisTemplate操作Redis/example01.png" alt=""></p><p>2.两者的数据是不共通的，也就是说StringRedisTemplate只能管理StringRedisTemplate里面的数据，RedisTemplate只能管理RedisTemplate中的数据。</p><p>3.使用的序列化类不同。<br>使用的序列化哪里不同?如下所示:<br>(1)RedisTemplate使用的是JdkSerializationRedisSerializer 存入数据会将数据先序列化成字节组然后再存入Redis数据库。<br>(2)StringRedisTemplate使用的是StringRedisSerializer。</p><a id="more"></a><p>使用时注意事项:<br>(1)当你的Redis数据库里面本来存的是字符串数据或者是你要存取的数据就是字符串类型数据的时候，那么你就使用StringRedisTemplate即可;<br>(2)但是如果你的数据是复杂的对象类型，而取出的时候又不想做任何数据转换，直接从Redis里面取出一个对象，那么使用RedisTemplate是更好的选择;<br>(3)RedisTemplate中存取数据都是字节数组。当Redis职工存入的数据是可读形式而非字节数组时，使用RedisTemplate取值的时候会无法获取导出数据，获得的值为null。可以使用StringRedisTemplate试试;</p><h2><span id="二-redistemplate定义了5种数据结构操作">二、RedisTemplate定义了5种数据结构操作</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.opsForValue();//操作字符串</span><br><span class="line">redisTemplate.opsForHash();//操作hash</span><br><span class="line">redisTemplate.opsForList();//操作list</span><br><span class="line">redisTemplate.opsForSet();//操作set</span><br><span class="line">redisTemplate.opsForZSet();//操作有序set</span><br></pre></td></tr></table></figure><h2><span id="三-stringredistemplate常用操作">三、StringRedisTemplate常用操作</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">stringRedisTemplate.opsForValue().set(&quot;test&quot;, &quot;100&quot;,60*10,TimeUnit.SECONDS);//向redis里存入数据和设置缓存时间  </span><br><span class="line"></span><br><span class="line">stringRedisTemplate.boundValueOps(&quot;test&quot;).increment(-1);//val做-1操作</span><br><span class="line"></span><br><span class="line">stringRedisTemplate.opsForValue().get(&quot;test&quot;)//根据key获取缓存中的val</span><br><span class="line"></span><br><span class="line">stringRedisTemplate.boundValueOps(&quot;test&quot;).increment(1);//val +1</span><br><span class="line"></span><br><span class="line">stringRedisTemplate.getExpire(&quot;test&quot;)//根据key获取过期时间</span><br><span class="line"></span><br><span class="line">stringRedisTemplate.getExpire(&quot;test&quot;,TimeUnit.SECONDS)//根据key获取过期时间并换算成指定单位 </span><br><span class="line"></span><br><span class="line">stringRedisTemplate.delete(&quot;test&quot;);//根据key删除缓存</span><br><span class="line"></span><br><span class="line">stringRedisTemplate.hasKey(&quot;546545&quot;);//检查key是否存在，返回boolean值 </span><br><span class="line"></span><br><span class="line">stringRedisTemplate.opsForSet().add(&quot;red_123&quot;, &quot;1&quot;,&quot;2&quot;,&quot;3&quot;);//向指定key中存放set集合</span><br><span class="line"></span><br><span class="line">stringRedisTemplate.expire(&quot;red_123&quot;,1000 , TimeUnit.MILLISECONDS);//设置过期时间</span><br><span class="line"></span><br><span class="line">stringRedisTemplate.opsForSet().isMember(&quot;red_123&quot;, &quot;1&quot;)//根据key查看集合中是否存在指定数据</span><br><span class="line"></span><br><span class="line">stringRedisTemplate.opsForSet().members(&quot;red_123&quot;);//根据key获取set集合</span><br></pre></td></tr></table></figure><p>单测示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package cn.test;</span><br><span class="line"></span><br><span class="line">import static org.junit.Assert.*;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line">import com.blog.springboot.Application;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest(classes = Application.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="line">public class PracticeJunitTest &#123;</span><br><span class="line">@Autowired</span><br><span class="line">    private StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testConnectionRedis() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">stringRedisTemplate.opsForValue().set(&quot;youcong&quot;, &quot;ok&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(stringRedisTemplate.opsForValue().get(&quot;youcong&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参考链接如下:<br><a href="http://www.cnblogs.com/slowcity/p/9002660.html" target="_blank" rel="noopener">StringRedisTemplate操作redis数据</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Could not get a resource from the pool 错误解决</title>
      <link href="/2019/03/09/Could-not-get-a-resource-from-the-pool-%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
      <url>/2019/03/09/Could-not-get-a-resource-from-the-pool-%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>错误关键信息:Could not get a resource from the pool</p><p>通常原因是因为远程服务器上的redis没有配置好。</p><p>解决方案如下:<br>(1)将redis.conf中的bind:127.0.0.1注释掉;<br>(2)将redis.conf中的protected-mode yes改为protected-mode no</p><p>按照上述的解决方案是可以解决这个问题的。但是以SpringBoot为例，这样做仍然无法解决问题，原因是因为application.yml中的redis配置有误造成的。</p><a id="more"></a><p>按照如下配置即可解决问题:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: 192.168.126.128</span><br><span class="line">    port: 2019</span><br><span class="line">    password: youcongtech</span><br><span class="line">    database: 0</span><br><span class="line">    lettuce:</span><br><span class="line">      pool:</span><br><span class="line">        max-active: 32</span><br><span class="line">        max-wait: 300ms</span><br><span class="line">        max-idle: 16</span><br><span class="line">        min-idle: 8</span><br></pre></td></tr></table></figure></p><p>之所以这样配置是因为使用的是spring-boot-starter-data-redis这个maven依赖。当然了，如果你不想这样配置的话大可自己写一个Jedis，不过通常Maven已经提供了，不必自己动手造轮子。</p><p>详情可参考如下:<br>Java连接Redis之redis的增删改查:<a href="https://www.cnblogs.com/youcong/p/8098881.html" target="_blank" rel="noopener">https://www.cnblogs.com/youcong/p/8098881.html</a></p><p>如果你还没有安装过Redis可以参考我的这篇文章<a href="https://www.cnblogs.com/youcong/p/8044625.html" target="_blank" rel="noopener">Redis的安装和客户端使用注意事项</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大型网站技术架构演化</title>
      <link href="/2019/03/08/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8C%96/"/>
      <url>/2019/03/08/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-大型网站软件系统的特点">一、大型网站软件系统的特点</span></h2><h4><span id="1高并发-大流量">1.高并发、大流量</span></h4><h5><span id="a什么是高并发">a.什么是高并发?</span></h5><p>高并发是互联网分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计保证系统能够同时并行处理多个请求。</p><a id="more"></a><h5><span id="b高并发的衡量指标有哪些">b.高并发的衡量指标有哪些?</span></h5><p>(1)响应时间:系统对请求做出响应。例如系统处理一个HTTP请求需要200ms,这个200ms就是系统的响应时间。</p><p>(2)吞吐量:单位时间内处理的请求数量。</p><p>(3)QPS：每秒响应请求数。在互联网领域，这个指标和吞吐量区分的不那么明显。</p><p>(4)并发用户数:同时承载正常使用系统功能的用户数量。例如一个通讯系统，在线量一定程度上代表系统的并发用户数，比如腾讯QQ。</p><h5><span id="c什么是大流量">c.什么是大流量</span></h5><p>大流量这个词，顾名思义表示很多流量，这个很多可以用一千万，一亿或者百亿等来衡量。</p><p>以流量来说，这个词有比较多的含义，如:</p><p>(1)它可以表示手机无线网数据;</p><p>(2)网店或网站的访问量;</p><p>(3)流体通过量，如水流量等;</p><p>在这里主要指网站的流量(包含网站访问量)。</p><h5><span id="d那么网站流量指标有哪些呢">d.那么网站流量指标有哪些呢</span></h5><p>主要指标包括:</p><p>(1)独立访问者数量;</p><p>(2)重复访问者数量;</p><p>(3)页面浏览数;</p><p>(4)每个访问者的页面浏览数;</p><p>(5)用户在网站的停留时间;</p><p>(6)用户来源网站(又叫”引导网站”);</p><p>(7)用户所使用的搜索引擎及其关键字;</p><h4><span id="2高可用系统需要不间断提供服务">2.高可用:系统需要不间断提供服务</span></h4><h5><span id="a什么是高可用">a.什么是高可用</span></h5><p>高可用是分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计减少系统不能提供正常服务的时间。</p><p>假设系统一直能够提供服务，我们说系统的可用性是100%。</p><p>如果系统每运行100个时间单位，会有1个时间单位无法提供服务，系统的年停机时间为8.76个小时。</p><h5><span id="b如何保障系统的高可用">b.如何保障系统的高可用</span></h5><p>我们都知道，单点是系统高可用的大敌，应该尽量在系统设计的过程中避免单点。方法论上，高可用保证的原则是“集群化”，或者叫“冗余”:只有一个单点挂了服务会受影响，如果有冗余备份，挂了还有其它backup能够顶上。</p><p>那么什么是单点呢？</p><p>你可以理解为所有的服务都在一个服务器上。</p><p>为什么要避免单点？</p><p>假定所有的服务在一个服务器上，如果该服务器因为某种原因挂掉了，那么所有的服务都会收到影响，从而会增长系统不能提供正常服务的时间。</p><h4><span id="3海量数据又称大数据">3.海量数据(又称“大数据”)</span></h4><p>什么是是海量数据？海量数据又称大数据。对于大数据，研究机构给出了这样的定义:大数据是需要新处理模式才能具有更强的决策力、洞察力和流程化能力的海量、高增长率和多样化的信息资产。</p><p>从技术上看，大数据与云计算的关系就像一昧硬币的正反面。大数据必然无法用单台计算机进行处理，必须采用分布式架构。其特色在于可对海量数据进行分布式数据挖掘，但必须依托云计算的分布式处理、分布式数据库以及云存储、虚拟化技术。</p><h5><span id="大数据的特点">大数据的特点</span></h5><p>(1)数据体量大，从TB级跃升到PB级别。</p><p>(2)数据类型繁多，比如网络日志、视频、图片、地理位置等。</p><p>(3)处理速度快。</p><p>(4)数据价值大。</p><h4><span id="4用户分布广泛网络情况复杂">4.用户分布广泛，网络情况复杂</span></h4><p>许多大型互联网都是为全球用户提供服务的，用户分布范围广，各地网络情况千差万别。在国内，还有各个运营商网络互通难的问题。<br>以在我老家的时候，联通的网络不好，移动的网络好，导致使用联通的用户使用软件受制于网络信号差而无法使用。</p><h4><span id="5安全环境恶劣">5.安全环境恶劣</span></h4><p>由于互联网的开放性，使得互联网站更容易受到攻击，大型网站几乎每天都会被黑客攻击。以GitHub为例，无时无刻不在遭受到攻击。</p><h4><span id="6需求快速变更发布频繁">6.需求快速变更，发布频繁</span></h4><p>和传统软件的版本发布频率不一样，互联网产品为了快速适应市场，满足用户需求，其产品发布频率是极高的。</p><h4><span id="7渐进式发展几乎所有的大网站都是从一个小网站开始的">7.渐进式发展:几乎所有的大网站都是从一个小网站开始的</span></h4><p>以最早期的淘宝来说，也是从单体应用来的。据说早期的架构是Linux+Apache+MySQL+PHP(LAMP)。<br>FaceBook是伯克扎克同学在哈佛大学的宿舍里开发的；Google的第一台服务器部署在斯坦福大学的实验室;阿里巴巴则是在马云家的客厅里诞生。<br>好的互联网产品都是慢慢运营出来的，不是一开始就开发好的，这也正好与网站架构的发展演化过程对应。</p><h2><span id="二-大型网站架构演化发展历程">二、大型网站架构演化发展历程</span></h2><h4><span id="1初始阶段的网络架构应用程序-数据库-文件等所有资源都在一台服务器上单体应用">1.初始阶段的网络架构:应用程序、数据库、文件等所有资源都在一台服务器上(单体应用)</span></h4><p><img src="/2019/03/08/大型网站技术架构演化/server01.png" alt=""></p><h4><span id="2应用服务和数据库分离网站使用三台服务器应用服务器-文件服务器-数据库服务器">2.应用服务和数据库分离:网站使用三台服务器:应用服务器、文件服务器、数据库服务器</span></h4><p><img src="/2019/03/08/大型网站技术架构演化/server02.png" alt=""></p><p>一般情况下有这么几种形式？</p><p>(1)nginx+tomcat+ftp+mysql/oracle;</p><p>(2)nginx+tomcat+vsftp+mysql/oracle;</p><p>(3)apache+tomcat+ftp+mysql/oracle;</p><p>(4)nginx+tomcat;</p><p>(5)docker容器实践思路(又称容器化);</p><p>当然了，上述列出的仅仅是冰山一角，有部分公司拥有自己研发的DB或者应用服务器。</p><h4><span id="3使用缓存改善网站性能使用缓存后数据库访问压力得到有效缓解">3.使用缓存改善网站性能:使用缓存后数据库访问压力得到有效缓解</span></h4><p><img src="/2019/03/08/大型网站技术架构演化/server03.png" alt=""></p><h5><span id="a那么在什么样的情况应该使用缓存">a.那么在什么样的情况应该使用缓存?</span></h5><p>(1)经常变化的数据，但是不需要立刻进行持久化的;</p><p>(2)经常被大量读取，很少进行更新操作;</p><p>(3)大量的数据库IO操作;</p><p>(4)通用的页面，如JS、CSS、图片等;</p><p>(5) 统计和计算需要暂存的信息，需要加快计算的;</p><h5><span id="bjava常用的缓存框架有哪些呢">b.Java常用的缓存框架有哪些呢？</span></h5><p>一般情况下，用Redis或者Memcache，当然了，有的时候也会用ehcache，关于Java常用的缓存框架代码示例和介绍可参考该篇文章:<a href="https://www.cnblogs.com/chinway/p/5534636.html" target="_blank" rel="noopener">https://www.cnblogs.com/chinway/p/5534636.html</a></p><h4><span id="4使用服务器集群改善网站的并发处理能力通过负载均衡调度器将请求分配到集群中的服务器上">4.使用服务器集群改善网站的并发处理能力:通过负载均衡调度器将请求分配到集群中的服务器上</span></h4><p><img src="/2019/03/08/大型网站技术架构演化/server04.png" alt=""></p><p>这种方式又可以称作“中心化”，所有的请求全部经过Nginx，由Nginx分发请求到不同的应用服务器上面(根据权重进行分配)。</p><h4><span id="5数据库读写分离应用服务器在写数据的时候访问主数据库主数据通过主从复制机制将数据更新同步到从数据库这样当服务器读数据的时候就可以通过从数据库了">5.数据库读写分离:应用服务器在写数据的时候访问主数据库，主数据通过主从复制机制将数据更新同步到从数据库，这样当服务器读数据的时候就可以通过从数据库了</span></h4><p><img src="/2019/03/08/大型网站技术架构演化/server05.png" alt=""></p><h4><span id="6使用反向代理和cdn加速网络响应">6.使用反向代理和CDN加速网络响应</span></h4><p>关于CDN可以参考我的这篇文章:<a href="https://www.cnblogs.com/youcong/p/9607448.html" target="_blank" rel="noopener">谈谈CDN</a></p><p>不过觉得还是要贴一下图，这样会有一个感性的认识。</p><p><img src="/2019/03/08/大型网站技术架构演化/server06.png" alt=""></p><h5><span id="什么是反向代理呢">什么是反向代理呢？</span></h5><p>反向代理是指以代理服务器来接收internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><h4><span id="7使用分布式文件系统和分布式数据库系统">7.使用分布式文件系统和分布式数据库系统</span></h4><p><img src="/2019/03/08/大型网站技术架构演化/server07.png" alt=""></p><h5><span id="分布式文件系统有哪些">分布式文件系统有哪些？</span></h5><p>主要有MFS、Ceph、GlusterFS、Lustre等</p><p>关于它们的区别可参考:</p><p><a href="https://www.cnblogs.com/zhiguo/p/3334993.html" target="_blank" rel="noopener">分布式文件系统MFS、Ceph、GlusterFS、Lustre的对比</a></p><h4><span id="8使用nosql和搜索引擎">8.使用NoSQL和搜索引擎</span></h4><p><img src="/2019/03/08/大型网站技术架构演化/server08.png" alt=""></p><p>应用比较多的NoSQL,比如Memcache、Redis、MongoDB等。</p><p>搜索引擎，以solr和elasticsearch比较多。</p><h4><span id="9业务拆分">9.业务拆分</span></h4><p>关于业务拆分可参考我的这篇博文<a href="https://www.cnblogs.com/youcong/p/9688300.html" target="_blank" rel="noopener">业务拆分的思考</a></p><h4><span id="10分布式服务">10.分布式服务</span></h4><p>可以去看看分布式服务架构这本书或是去看看国外相关专业人士的论文或文章。</p><p>分布式服务架构:原理、设计与实战电子书下载地址为:<a href="https://pan.baidu.com/s/1hK3vlIHX0SgbD4NNKx_zTg" target="_blank" rel="noopener">https://pan.baidu.com/s/1hK3vlIHX0SgbD4NNKx_zTg</a></p><h2><span id="三-大型网站演化的价值观">三、大型网站演化的价值观</span></h2><p>(1)大型网站架构核心价值是随网站所需灵活应付;</p><p>(2)驱动网站技术发展的主要力量是网站发展业务;</p><p>大型网站的核心价值不是从无到有二搭建一个大型网站，而是能够伴随小型网站业务逐步发展，慢慢演化成一个大型网站，网站的架构选择尽量满足网站用户增加需求。</p><h2><span id="四-网站架构设计误区">四、网站架构设计误区</span></h2><p>误区如下所示:</p><p>(1)一昧追随大公司方案;</p><p>(2)为了技术而技术;</p><p>(3)企图用技术解决所有问题;</p><p>参考资料如下:</p><p>什么是高并发:<a href="https://blog.csdn.net/DreamWeaver_zhou/article/details/78587580" target="_blank" rel="noopener">https://blog.csdn.net/DreamWeaver_zhou/article/details/78587580</a></p><p>什么是高可用:<a href="http://www.cnblogs.com/shizhiyi/p/7750530.html" target="_blank" rel="noopener">http://www.cnblogs.com/shizhiyi/p/7750530.html</a></p><p>什么是海量数据？它具有哪些特征？:<a href="http://www.znjj.tv/news/3322.html" target="_blank" rel="noopener">http://www.znjj.tv/news/3322.html</a></p><p>在什么情况使用Java缓存:<a href="https://flychao88.iteye.com/blog/1532335" target="_blank" rel="noopener">https://flychao88.iteye.com/blog/1532335</a></p><p>8张图读懂大型网站技术架构:<a href="https://github.com/Snailclimb/JavaGuide/blob/master/%E6%9E%B6%E6%9E%84/8%20%E5%BC%A0%E5%9B%BE%E8%AF%BB%E6%87%82%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84.md" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide/blob/master/%E6%9E%B6%E6%9E%84/8%20%E5%BC%A0%E5%9B%BE%E8%AF%BB%E6%87%82%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84.md</a></p><p>《大型网站技术架构:核心原理与案例分析》第一章概述第一节大型网站架构演化</p>]]></content>
      
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js之十大Web框架</title>
      <link href="/2019/03/07/node-js%E4%B9%8B%E5%8D%81%E5%A4%A7Web%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/03/07/node-js%E4%B9%8B%E5%8D%81%E5%A4%A7Web%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>之前接触过Node.js是因为好奇大前端越来越能干了，连我后台的饭碗都要抢了，太嚣张了，于是我想打压打压它，然后就这样接触它了。<br>再到后来是因为Settings-Sync插件二次开发，我需要用node.js造一个mock server，而当时在开源项目上找到一个模拟github rest api的node.js服务端程序，然后我就在此基础上开发。从工作中学习有应用场景有目的性，果然还是学的要快很多。</p><p>今天之所以要说一说node.js的十大Web框架，主要是觉得以后针对VsCode开发或者是我自己的项目，用Node.js可能会比较多，比如我将我的博客系统一步一步完善，我想尝试微服务的很多种实践方式，其实很多企业用微服务，还有一个原因就是不受编程语言的制约。</p><p>大前提:框架无优劣之分，只有在某个应用场景是否更适合和更好。<br><a id="more"></a></p><h2><span id="一-nodejs开发框架sailjs">一、Node.js开发框架Sail.js</span></h2><p>Sail.js官网地址为:<a href="https://sailsjs.com/" target="_blank" rel="noopener">https://sailsjs.com/</a><br>github地址:<a href="https://github.com/balderdashy/sails" target="_blank" rel="noopener">https://github.com/balderdashy/sails</a></p><p>Sails可以轻松构建自定义的企业级Node.js应用程序</p><p>在几周内而不是几个月内构建实用的，生产就绪的Node.js应用程序。Sails是Node.js最流行的MVC框架，旨在模拟Ruby on Rails等框架的熟悉MVC模式，但支持现代应用程序的需求:具有可扩展性，面向服务的体系结构的数据驱动API。</p><p>优点如下:<br>(1)100%JavaScript<br>在Sails自上构建意味着你的应用程序完全使用JavaScript编写，从这里可以看出浏览器兼容性良好;<br>(2)任何数据库<br>Sails捆绑了一个功能强大的ORM，即Waterline，它提供了一个简单的数据访问层，无论你使用什么数据库，它都能正常工作;<br>(3)自动生成的Rest API<br>Sails附带的蓝图有助于在不编写任何代码的情况下快速启动应用程序的后端;<br>(4)前端不可知<br>Sails与任何前端兼容:Angular、React、IOS、Android、Windows Phone，自定义硬件或其他完全兼容;<br>(5)轻松WebSocket集成<br>由于Sails会为您转换传入的套接字消息，因此它们会自动与Sails应用中的每个路由兼容;<br>(6)专业支持<br>Sails提供商业支持，以加速开发并确保代码职工的最佳实践;</p><h2><span id="二-nodejs服务端框架-hapijs">二、Node.js服务端框架 Hapi.js</span></h2><p>官网地址为:<a href="https://hapijs.com/" target="_blank" rel="noopener">https://hapijs.com/</a></p><p>如何创建一个Hapi.js?请参考如下步骤(均来自官网示例)：<br>1.初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>2.安装库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hapi --save</span><br></pre></td></tr></table></figure><p>3.编写js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">const Hapi=require(&apos;hapi&apos;);</span><br><span class="line"></span><br><span class="line">// Create a server with a host and port</span><br><span class="line">const server=Hapi.server(&#123;</span><br><span class="line">    host:&apos;localhost&apos;,</span><br><span class="line">    port:8000</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Add the route</span><br><span class="line">server.route(&#123;</span><br><span class="line">    method:&apos;GET&apos;,</span><br><span class="line">    path:&apos;/hello&apos;,</span><br><span class="line">    handler:function(request,h) &#123;</span><br><span class="line"></span><br><span class="line">        return&apos;hello world&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Start the server</span><br><span class="line">const start =  async function() &#123;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        await server.start();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        process.exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(&apos;Server running at:&apos;, server.info.uri);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">start();</span><br></pre></td></tr></table></figure><p>4.运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h2><span id="三-nodejs-高性能封装-expressjs">三、Node.js 高性能封装 Express.js</span></h2><p>关于这个可以参考我的这篇博客:<a href="https://developers-youcong.github.io/2019/02/22/node-js%E4%B9%8Bexpress%E6%A1%86%E6%9E%B6/">https://developers-youcong.github.io/2019/02/22/node-js%E4%B9%8Bexpress%E6%A1%86%E6%9E%B6/</a></p><h2><span id="四-nodejs-web框架-krakenjs">四、Node.js Web框架 Kraken.js</span></h2><p>Kraken 基于 express 构建，实现对环境变量的感知、动态配置、高级中间件和应用生命周期的事件通知。</p><p>官网地址为:<a href="http://krakenjs.com/" target="_blank" rel="noopener">http://krakenjs.com/</a></p><p>示例例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var express = require(&apos;express&apos;),</span><br><span class="line">    kraken = require(&apos;kraken-js&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line">app.use(kraken());</span><br><span class="line">app.listen(8000);</span><br></pre></td></tr></table></figure></p><h2><span id="五-web应用构建平台-meteor">五、Web应用构建平台 Meteor</span></h2><p>Meteor是一组新的技术用于构建高质量的Web应用，提供很多现成的包，可直接在浏览器或者云平台运行。<br>官网地址为:<a href="https://www.meteor.com/" target="_blank" rel="noopener">https://www.meteor.com/</a></p><p>优点如下:<br>(1)使用更少的代码运送更多<br>由于集成的JS堆栈从数据库扩展到最终用户的屏幕，因此可以在10行中完成1000行.</p><p>(2)为任何设备构建应用程序<br>无论是针对Web、IOS、Android还是桌面进行开发，都使用相同的代码。热门推送新功能，无需应用商店批准或者强制用户下载新的原生应用.</p><p>(3)集成已有的技术<br>使用流行的框架和工具，开箱即用。专注于构建功能，而不是自己将不同的组件连接在一起。</p><h2><span id="六-全栈javascript-开发架构-meanjs">六、全栈JavaScript 开发架构 Mean.js</span></h2><p>官网地址为:<a href="http://meanjs.org/" target="_blank" rel="noopener">http://meanjs.org/</a></p><p>1.什么是Mean.js</p><p>MEAN.JS是一个全栈JavaScript的解决方案，可帮助您使用MongoDB、Express、Angular和Node.js构建快速，健壮且可维护的生产Web应用程序.</p><p>2.为何选择Mean.js<br>Mean.js将帮助你入门并避免无用的笨拙工作和常见陷阱，同时保持你的应用程序井然有序。我们目标是创建和维护一个简单易读的开源解决方案，你可以使用它并信任它。</p><p>3.入门<br>入门请参考官方文档:<a href="http://meanjs.org/docs.html" target="_blank" rel="noopener">http://meanjs.org/docs.html</a></p><h2><span id="七-nodejs的web框架-koajs">七、Node.js的Web框架 Koa.js</span></h2><p>Koa是下一代的Node.js的Web框架。由Express团队设计。旨在提供一个更小型、更富有表现力、更可靠的Web应用和API的开发基础。<br>Koa可以通过生成器摆脱回调，极大地改进错误处理。Koa核心不绑定任何中间件，但提供了优雅的一组可以快速愉悦地编写服务器应用的方法。<br>关于koa可参考:<a href="https://www.npmjs.com/package/koa" target="_blank" rel="noopener">https://www.npmjs.com/package/koa</a></p><h2><span id="八-nodejs-cms-和-web-应用程序平台-keystonejs">八、Node.js CMS 和 Web 应用程序平台 KeystoneJS</span></h2><p>KeystoneJS，以 Express 和 MongoDB 为基础搭建的 Node.js CMS 和 Web 应用程序平台。</p><p>官网地址为:<a href="https://keystonejs.com/" target="_blank" rel="noopener">https://keystonejs.com/</a></p><p>具有以下特性：</p><p>Express.js 和 MongoDB：Keystone 会为你配置 express（node.js 上的 Web 服务器），用 Mongoose（领先的 ODM 包）连接你的 MongoDB 数据库</p><p>动态路由：Keystone 从设置 MV* 程序的最佳实践入手，让你管理模板、视图和路由变得更容易</p><p>数据库域：ID、String、Boolean、Date 和 Number 是数据库的构件。Keystone 以它们为基础实现了在现实工作中更实用的域类型，比如 name、email、password、address、image 和 relationship (及其它)</p><p>自动生成管理员界面：不管你在搭建应用程序，或者在生产环境中作为数据库内容管理系统时是否用它，Keystone 的管理员界面都能节省你的时间，让你管理数据更容易</p><p>编码更简单：有时即便做的事情简单，异步代码也会变得复杂。Keystone让简单的事情（比如在视图中显示之前加载数据）保持简单</p><p>表单处理：要验证表单、上次图片或用一行代码更新数据库？基于你已经定义的数据模型，Keystone 可以做到</p><p>会话管理：Keystone 自带了会话管理和认证功能，包括密码域的自动加密</p><p>发送 Email：借助 Keystone，你的应用程序可以轻松地设置、预览和发送基于模板的 email。它还集成了 Mandrill (Mailchimp 卓越的事务性 email 发送服务)</p><h2><span id="九-nodejs-框架组件-flatironjs">九、Node.js 框架组件 flatiron.js</span></h2><p>flatiron 是一款 Node.js 和浏览器的框架组件，是一款构建现代化 web 应用适应性很强的框架。flatiron 提供比 Rails 类组件有更丰富配置的框架组件，允许开发者自己添加他们想要的功能组件。<br>可参考地址为:<a href="https://www.npmjs.com/package/flatiron" target="_blank" rel="noopener">https://www.npmjs.com/package/flatiron</a></p><h2><span id="十-基于-nodejs-的-api-框架-loopback">十、基于 Node.js 的 API 框架 LoopBack</span></h2><p>LoopBack 是基于 Node.js 的一个开源的 API 框架，可以让 Node.js 应用方便的跟各种设备通过 API 进行互联。<br>可参考地址为:<a href="https://loopback.io/" target="_blank" rel="noopener">https://loopback.io/</a></p><p>本文主要参考除引入的官网外还参考<a href="https://my.oschina.net/editorial-story/blog/956498" target="_blank" rel="noopener">Node.js十大Web框架</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript之Map</title>
      <link href="/2019/03/07/javascript%E4%B9%8Bmap/"/>
      <url>/2019/03/07/javascript%E4%B9%8Bmap/</url>
      
        <content type="html"><![CDATA[<p>javascript中的map，我用的不是特别多，倒是Java中的Map或HashMap，经常用。</p><p>顺便围绕几个方面介绍一下map？</p><h2><span id="1map对象">1.Map对象</span></h2><p>Map对象是一种有对应键值对的对象，JS的Object也是键值对的对象。</p><p>ES6中的Map相对Object对象有几个区别?<br>(1)Object对象有原型，也就是说它有默认的key值在对象上面，除非我们使用Object.create(null)创建一个没有原型的对象;<br>(2)在Object中，只能把String和Symbol作为key值，但是在Map中，key值可以是任何基本类型(String,Number,Boolean,undefined,NaN…),或者对象(Map,Set,Object,Function,Symbol,null…);<br>(3)通过Map中的size属性，可以很方便地获取Map长度，要获取Object的长度，你只能用别的方法;</p><p>Map实例对象的key值可以为一个数组或者一个对象，或者一个函数，比较随意，而且Map对象实例中数据的排序是根据用户push的顺序进行排序的，而Object实例中key,value的顺序则有些规律(它们会先排数字开头的值，然后才是字符串开头的key值);</p><h2><span id="2map实例属性">2.Map实例属性</span></h2><p>map.size这个属性和数组的length功能一样，都表示当前实例的长度。</p><h2><span id="3map实例的方法">3.Map实例的方法</span></h2><p>clear() 删除所有的键值对;<br>delete(key) 删除指定键;<br>entries() 返回一个迭代器，迭代器按照对象的插入顺序返回[key,value];<br>forEach(callback,context) 循环执行函数并把键值对作为参数，context为执行函数的上下文this;<br>get(key) 返回Map对象key相对的value值;<br>has(key) 返回布尔值，判断Map对象是否存在指定的key;<br>keys() 返回一个迭代器，迭代器按照插入的顺序返回每一个key元素;<br>set(key,value) 给Map对象设置key/value键值对，返回这个Map对象(相对于JavaScript的Set，Set对象添加元素的方法叫add,而Map对象添加元素的方法为set)<br>iterator 和entireds()方法一样，返回一个迭代器，迭代器按照对象的插入顺序返回[key,value]</p><a id="more"></a><p>代码示例如下(这段与后台交互的代码，主要是为了测试):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=&quot;jquery-1.8.0.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url:&quot;http://localhost:2019/comments/recentsComments&quot;,</span><br><span class="line">    type:&quot;GET&quot;,</span><br><span class="line">    contentType: &apos;application/json;charset=utf-8&apos;,</span><br><span class="line">    dataType : &apos;json&apos;,</span><br><span class="line">    success:function(data)&#123;</span><br><span class="line"> </span><br><span class="line">    console.log(data.code);</span><br><span class="line"></span><br><span class="line">    var m = new Map();</span><br><span class="line"></span><br><span class="line">    m.set(&quot;data&quot;,data.list);</span><br><span class="line"></span><br><span class="line">    console.log(m.get(&quot;data&quot;));</span><br><span class="line"></span><br><span class="line">    &#125;,error:function()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>本文主要参考链接如下所示:<br>ES6新特性:JavaScript中的Map和WeakMap对象:<a href="https://www.cnblogs.com/diligenceday/p/5484130.html" target="_blank" rel="noopener">https://www.cnblogs.com/diligenceday/p/5484130.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot实现跨域请求</title>
      <link href="/2019/03/07/springboot%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
      <url>/2019/03/07/springboot%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<p>之所以需要用到跨域请求，目的在于现在的Java项目，几乎基本上都前后端分离，除一些较老的维护项目外(通常是单体或者是maven多模块形式，不过本质上还是将前端放在webapps下)。</p><p>SpringBoot实现跨域其实和Spring是一样，区别不大，如果要说区别的话，Spring需要在对应的xml文件中配置bean，而SpringBoot则通过注解的方式。</p><p>Spring配置跨域请求可参考我的这篇文章:<a href="https://www.cnblogs.com/youcong/p/9676433.html" target="_blank" rel="noopener">https://www.cnblogs.com/youcong/p/9676433.html</a></p><a id="more"></a><p>示例代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.springboot.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;  </span><br><span class="line">import org.springframework.context.annotation.Configuration;  </span><br><span class="line">import org.springframework.web.cors.CorsConfiguration;  </span><br><span class="line">import org.springframework.web.cors.UrlBasedCorsConfigurationSource;  </span><br><span class="line">import org.springframework.web.filter.CorsFilter;  </span><br><span class="line"></span><br><span class="line">@Configuration  </span><br><span class="line">public class CorsConfig &#123;  </span><br><span class="line">    private CorsConfiguration buildConfig() &#123;  </span><br><span class="line">        CorsConfiguration corsConfiguration = new CorsConfiguration();  </span><br><span class="line">        corsConfiguration.addAllowedOrigin(&quot;*&quot;); // 1允许任何域名使用</span><br><span class="line">        corsConfiguration.addAllowedHeader(&quot;*&quot;); // 2允许任何头</span><br><span class="line">        corsConfiguration.addAllowedMethod(&quot;*&quot;); // 3允许任何方法（post、get等） </span><br><span class="line">        return corsConfiguration;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Bean  </span><br><span class="line">    public CorsFilter corsFilter() &#123;  </span><br><span class="line">        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();  </span><br><span class="line">        source.registerCorsConfiguration(&quot;/**&quot;, buildConfig()); // 4  </span><br><span class="line">        return new CorsFilter(source);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>本文主要参考链接为:<br>SpringBoot跨域配置:<a href="https://www.cnblogs.com/nananana/p/8492185.html" target="_blank" rel="noopener">https://www.cnblogs.com/nananana/p/8492185.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js如何引用其它js文件</title>
      <link href="/2019/03/07/node-js%E5%A6%82%E4%BD%95%E5%BC%95%E7%94%A8%E5%85%B6%E5%AE%83js%E6%96%87%E4%BB%B6/"/>
      <url>/2019/03/07/node-js%E5%A6%82%E4%BD%95%E5%BC%95%E7%94%A8%E5%85%B6%E5%AE%83js%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>以Java来说，比如要实现第三方存储，我可能需要导入对应的库，以maven为例，使用腾讯云或者七牛云、阿里云，我需要导入对应的maven依赖。<br>再比如，有些时候我们封装某个类，而那个类不在该包下，我们需要导包(就是指定那个类的路径，如果路径不对，则可能出现找不到这个类之类的错误，通常对应的IDE会提示错误)。</p><p>其实，node.js也是这样的。最近在开发node.js的时候，难免也会遇到需要引入其它js文件。今天我以一个简单示例来说一说node.js如何引用其它js文件。<br><a id="more"></a><br>test01.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function hello()&#123;</span><br><span class="line"></span><br><span class="line">console.log(&quot;hello&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hello2()&#123;</span><br><span class="line"></span><br><span class="line">console.log(&quot;hello2&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;hello,hello2&#125;</span><br></pre></td></tr></table></figure></p><p>test02.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var test01 = require( &quot;./test01&quot; );</span><br><span class="line"></span><br><span class="line">test01.hello();</span><br><span class="line"></span><br><span class="line">test01.hello2();</span><br></pre></td></tr></table></figure></p><p>通过命令行运行node test02.js 正常会分别输出hello、hello2。</p><p>require是什么意思呢？<br>其实就跟我们Java开发导包一样的意思，在Java中是import，其实node.js也可以import式导包。</p><p>那么node.js中的require和import导包有什么区别呢？<br>(1)require导包位置任意，而import导包必须在文件的最开始;<br>(2)遵循的规范不同，require/exports是CommonJS的一部分，而import/export是ES6的规范;<br>(3)出现时间不同，CommonJS作为node.js的规范，一直沿用至今，主要是因为npm善CommonJS的类库众多，以及CommonJS和ES6之间的差异，Node.js无法直接兼容ES6。所以现阶段require/exports仍然是必要且必须的;<br>(4)形式不同，require/exports的用法只有以下三种简单写法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line">— — — — — — — — — — — — — — </span><br><span class="line">exports.fs = fs;</span><br><span class="line">module.exports = fs;</span><br></pre></td></tr></table></figure></p><p>而import/exports的写法就多种多样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import fs from &apos;fs&apos;;</span><br><span class="line">import &#123;default as fs&#125; from &apos;fs&apos;;</span><br><span class="line">import * as fs from &apos;fs&apos;;</span><br><span class="line">import &#123;readFile&#125; from &apos;fs&apos;;</span><br><span class="line">import &#123;readFile as read&#125; from &apos;fs&apos;;</span><br><span class="line">import fs, &#123;readFile&#125; from &apos;fs&apos;;</span><br><span class="line">— — — — — — — — — — — — — — — — — — — — </span><br><span class="line">export default fs;</span><br><span class="line">export const fs;</span><br><span class="line">export function readFile;</span><br><span class="line">export &#123;readFile, read&#125;;</span><br><span class="line">export * from &apos;fs&apos;;</span><br></pre></td></tr></table></figure></p><p>(5)本质上不同，主要体现:<br>a.CommonJS还是ES6 Module 输出都可以看成是一个具备多个属性或者方法的对象;<br>b.default是ES6 Module所独有的关键字，export default fs 输出默认的接口对象，import fs from ‘fs’可直接导入这个对象;<br>c.ES6 Module 中导入模块的属性或者方法是强绑定的，包括基础类型，而CommonJS则普通的值传递或者引用传递;</p><p>本文参考链接如下所示:<br>node.js如何引用其它js文件:<a href="https://www.cnblogs.com/wuotto/p/9640312.html" target="_blank" rel="noopener">https://www.cnblogs.com/wuotto/p/9640312.html</a><br>关于require/import的区别:<a href="https://www.jianshu.com/p/fd39e16feb60" target="_blank" rel="noopener">https://www.jianshu.com/p/fd39e16feb60</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins忘记管理员密码之解决方案</title>
      <link href="/2019/03/07/jenkins%E5%BF%98%E8%AE%B0%E7%AE%A1%E7%90%86%E5%91%98%E5%AF%86%E7%A0%81%E4%B9%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/03/07/jenkins%E5%BF%98%E8%AE%B0%E7%AE%A1%E7%90%86%E5%91%98%E5%AF%86%E7%A0%81%E4%B9%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>jenkins忘记管理员密码怎么办？</p><p>通常有这么几种解决方案，如下所示:</p><a id="more"></a><p>(1)进入对应的用户目录文件夹，以ubuntu16.04为例，jenkins安装目录为/var/lib/jenkins<br>进入到该目录，通过ls或ll命令可以显示对应的所有文件夹，找到其中的users文件夹，进入对应的用户里面，修改config.xml中的passwordHash<br>通过关键字hudson.security.HudsonPrivateSecurityRealm_-Details即可找到。如果找不到你可以采用方案(2)解决该问题;</p><p>(2)还是以ubuntu为了，进入/var/lib/jenkins目录，修改config.xml中的useSecurity将其改为false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mode&gt;NORMAL&lt;/mode&gt;</span><br><span class="line">&lt;useSecurity&gt;false&lt;/useSecurity&gt; //默认为true</span><br><span class="line">&lt;authorizationStrategy class=&quot;hudson.security.AuthorizationStrategy$Unsecured&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>最后通过service jenkins restart重启jenkins，请按照如下步骤依次操作:<br>依次点击页面中的系统管理-&gt;全局安全配置-&gt;勾选启用安全-&gt;选择jenkins专有用户数据库，点击保存-&gt;再次点击系统管理-&gt;管理用户，配置管理员账号密码即可</p><p>就这样愉快地解决了问题。</p><p>参考链接如下所示:<br>Jenkins忘记密码解决方案:<a href="https://www.cnblogs.com/kazihuo/p/9328107.html" target="_blank" rel="noopener">https://www.cnblogs.com/kazihuo/p/9328107.html</a><br>Jenkins 忘记admin密码拯救方法:<a href="https://www.cnblogs.com/huangenai/p/7416322.html" target="_blank" rel="noopener">https://www.cnblogs.com/huangenai/p/7416322.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis之一对多</title>
      <link href="/2019/03/06/mybatis%E4%B9%8B%E4%B8%80%E5%AF%B9%E5%A4%9A/"/>
      <url>/2019/03/06/mybatis%E4%B9%8B%E4%B8%80%E5%AF%B9%E5%A4%9A/</url>
      
        <content type="html"><![CDATA[<p>今天主要话题围绕这么几个方面？</p><ul><li>mybatis一对多示例</li><li>sql优化策略<a id="more"></a><h2><span id="一-mybatis之一对多">一、mybatis之一对多</span></h2>在说一对多之前，顺便说一下一对一。</li></ul><p>一对一，常见的例子，比如以常见的班级例子来说，一个班主任只属于一个班级(排除某个班主任能力超群可兼任多个班级).</p><p>例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; </span><br><span class="line">&lt;!DOCTYPE mapper    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;    </span><br><span class="line">    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; </span><br><span class="line">&lt;!--  为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样保证了namespace的值是唯一的--&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.yc.mybatis.test.classMapper&quot;&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;!-- </span><br><span class="line">         方式一：嵌套结果：使用嵌套结果映射来处理重复的联合结果的子集</span><br><span class="line">                 封装联表查询的数据(去除重复的数据)</span><br><span class="line">         select * from class c, teacher t where c.teacher_id=t.t_id and c.c_id=1</span><br><span class="line">     --&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;select id=&quot;getClass&quot; parameterType=&quot;int&quot; resultMap=&quot;getClassMap&quot;&gt;</span><br><span class="line">        select * from class c, teacher t  where c.teacher_id = t.t_id and c.teacher_id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- resultMap:映射实体类和字段之间的一一对应的关系 --&gt;</span><br><span class="line">    &lt;resultMap type=&quot;Classes&quot; id=&quot;getClassMap&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;id&quot; column=&quot;c_id&quot;/&gt;   </span><br><span class="line">        &lt;result property=&quot;name&quot; column=&quot;c_name&quot;/&gt;</span><br><span class="line">        &lt;association property=&quot;teacher&quot; javaType=&quot;Teacher&quot;&gt;   </span><br><span class="line">            &lt;id property=&quot;id&quot; column=&quot;t_id&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;name&quot; column=&quot;t_name&quot;/&gt;</span><br><span class="line">        &lt;/association&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    </span><br><span class="line">     &lt;!-- </span><br><span class="line">         方式二：嵌套查询：通过执行另外一个SQL映射语句来返回预期的复杂类型</span><br><span class="line">         SELECT * FROM class WHERE c_id=1;</span><br><span class="line">         SELECT * FROM teacher WHERE t_id=1   //1 是上一个查询得到的teacher_id的值</span><br><span class="line">         property:别名(属性名)    column：列名 --&gt;</span><br><span class="line">          &lt;!-- 把teacher的字段设置进去 --&gt;</span><br><span class="line">    &lt;select id=&quot;getClass1&quot; parameterType=&quot;int&quot; resultMap=&quot;getClassMap1&quot;&gt;</span><br><span class="line">        select * from class where c_id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;resultMap type=&quot;Classes&quot; id=&quot;getClassMap1&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;id&quot; column=&quot;c_id&quot;/&gt;   </span><br><span class="line">        &lt;result property=&quot;name&quot; column=&quot;c_name&quot;/&gt;</span><br><span class="line">        &lt;association property=&quot;teacher&quot; column=&quot;teacher_id&quot; select=&quot;getTeacher&quot;/&gt;   </span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;select id=&quot;getTeacher&quot; parameterType=&quot;int&quot; resultType=&quot;Teacher&quot;&gt;</span><br><span class="line">        select t_id id,t_name name from teacher where t_id =#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>顺便对association标签的属性进行解释:<br>property:对象属性名称<br>javaType:对象属性类型<br>column:所对应的外键字段名称</p><p>一对多，以我博客为例，比如今天我写的一个近期评论的接口就是一个一对多的体现(一个评论者可以对应多篇文章，相反，多篇文章也能对应一个评论者，从中可以体现一对多，多对一，甚至多对多的关系)</p><p>关于一对一、一对多或者多对多，可以参考<a href="https://www.cnblogs.com/yaobolove/p/5444046.html" target="_blank" rel="noopener">Mybatis 一对一，一对多，多对一，多对多的理解</a></p><p>话不多说，看xml代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.blog.springboot.dao.CommentsDao&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 通用查询映射结果 --&gt;</span><br><span class="line">    &lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;com.blog.springboot.entity.Comments&quot;&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;id column=&quot;comment_ID&quot; property=&quot;commentId&quot; /&gt;</span><br><span class="line">        &lt;result column=&quot;comment_post_ID&quot; property=&quot;commentPostId&quot; /&gt;</span><br><span class="line">        &lt;result column=&quot;comment_author&quot; property=&quot;commentAuthor&quot; /&gt;</span><br><span class="line">        &lt;result column=&quot;comment_author_email&quot; property=&quot;commentAuthorEmail&quot; /&gt;</span><br><span class="line">        &lt;result column=&quot;comment_author_url&quot; property=&quot;commentAuthorUrl&quot; /&gt;</span><br><span class="line">        &lt;result column=&quot;comment_author_IP&quot; property=&quot;commentAuthorIp&quot; /&gt;</span><br><span class="line">        &lt;result column=&quot;comment_date&quot; property=&quot;commentDate&quot; /&gt;</span><br><span class="line">        &lt;result column=&quot;comment_date_gmt&quot; property=&quot;commentDateGmt&quot; /&gt;</span><br><span class="line">        &lt;result column=&quot;comment_content&quot; property=&quot;commentContent&quot; /&gt;</span><br><span class="line">        &lt;result column=&quot;comment_karma&quot; property=&quot;commentKarma&quot; /&gt;</span><br><span class="line">        &lt;result column=&quot;comment_approved&quot; property=&quot;commentApproved&quot; /&gt;</span><br><span class="line">        &lt;result column=&quot;comment_agent&quot; property=&quot;commentAgent&quot; /&gt;</span><br><span class="line">        &lt;result column=&quot;comment_type&quot; property=&quot;commentType&quot; /&gt;</span><br><span class="line">        &lt;result column=&quot;comment_parent&quot; property=&quot;commentParent&quot; /&gt;</span><br><span class="line">        &lt;result column=&quot;user_id&quot; property=&quot;userId&quot; /&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;collection property=&quot;posts&quot; ofType=&quot;Posts&quot;&gt;</span><br><span class="line">        &lt;result column=&quot;post_title&quot; property=&quot;postTitle&quot;/&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 通用查询结果列 --&gt;</span><br><span class="line">    &lt;sql id=&quot;Base_Column_List&quot;&gt;</span><br><span class="line">        comment_ID AS commentId, comment_post_ID AS commentPostId, comment_author AS commentAuthor, comment_author_email AS commentAuthorEmail, comment_author_url AS commentAuthorUrl, comment_author_IP AS commentAuthorIp, comment_date AS commentDate, comment_date_gmt AS commentDateGmt, comment_content AS commentContent, comment_karma AS commentKarma, comment_approved AS commentApproved, comment_agent AS commentAgent, comment_type AS commentType, comment_parent AS commentParent, user_id AS userId</span><br><span class="line">    &lt;/sql&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;select id=&quot;recentComments&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line">    SELECT comments.comment_author,posts.post_title FROM wp_comments AS comments LEFT JOIN wp_posts AS posts ON(comments.comment_post_ID=posts.ID) WHERE comments.comment_approved=&apos;0&apos; AND posts.post_status=&apos;publish&apos; ORDER BY comments.comment_date_gmt DESC LIMIT 0,5</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>相关属性我就不做多的解释，关于MyBatis相关的教程，除了参考官网之外，还可以参考我的博客系列文章，地址为:<a href="https://www.cnblogs.com/youcong/category/1144041.html" target="_blank" rel="noopener">https://www.cnblogs.com/youcong/category/1144041.html</a></p><p>关于ofType还是要说的，如果你的mybatis-config.xml或者是springboot中的application.yml或application.properties没有配置对应的别名，那么请将类的完整路径填写上去，假定我没有做出相关的配置的话，那么我需要这么写 ofType=”com.blog.springboot.entity.Posts”。</p><p>collection的property要包含在com.blog.springboot.entity.Comments类里面</p><p>我贴出我的Comments类，大家可以做一个参考:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.springboot.entity;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.activerecord.Model;</span><br><span class="line">import com.baomidou.mybatisplus.annotations.TableField;</span><br><span class="line">import com.baomidou.mybatisplus.annotations.TableId;</span><br><span class="line">import com.baomidou.mybatisplus.annotations.TableName;</span><br><span class="line">import com.baomidou.mybatisplus.enums.IdType;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * </span><br><span class="line"> * &lt;/p&gt;</span><br><span class="line"> *</span><br><span class="line"> * @author youcong</span><br><span class="line"> * @since 2019-02-12</span><br><span class="line"> */</span><br><span class="line">@TableName(&quot;wp_comments&quot;)</span><br><span class="line">public class Comments extends Model&lt;Comments&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    @TableId(value = &quot;comment_ID&quot;, type = IdType.AUTO)</span><br><span class="line">    private Long commentId;</span><br><span class="line">    @TableField(&quot;comment_post_ID&quot;)</span><br><span class="line">    private Long commentPostId;</span><br><span class="line">    @TableField(&quot;comment_author&quot;)</span><br><span class="line">    private String commentAuthor;</span><br><span class="line">    @TableField(&quot;comment_author_email&quot;)</span><br><span class="line">    private String commentAuthorEmail;</span><br><span class="line">    @TableField(&quot;comment_author_url&quot;)</span><br><span class="line">    private String commentAuthorUrl;</span><br><span class="line">    @TableField(&quot;comment_author_IP&quot;)</span><br><span class="line">    private String commentAuthorIp;</span><br><span class="line">    @TableField(&quot;comment_date&quot;)</span><br><span class="line">    private Date commentDate;</span><br><span class="line">    @TableField(&quot;comment_date_gmt&quot;)</span><br><span class="line">    private Date commentDateGmt;</span><br><span class="line">    @TableField(&quot;comment_content&quot;)</span><br><span class="line">    private String commentContent;</span><br><span class="line">    @TableField(&quot;comment_karma&quot;)</span><br><span class="line">    private Integer commentKarma;</span><br><span class="line">    @TableField(&quot;comment_approved&quot;)</span><br><span class="line">    private String commentApproved;</span><br><span class="line">    @TableField(&quot;comment_agent&quot;)</span><br><span class="line">    private String commentAgent;</span><br><span class="line">    @TableField(&quot;comment_type&quot;)</span><br><span class="line">    private String commentType;</span><br><span class="line">    @TableField(&quot;comment_parent&quot;)</span><br><span class="line">    private Long commentParent;</span><br><span class="line">    @TableField(&quot;user_id&quot;)</span><br><span class="line">    private Long userId;</span><br><span class="line">    </span><br><span class="line">    @TableField(exist=false)</span><br><span class="line">    private List&lt;Posts&gt; posts;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    public List&lt;Posts&gt; getPosts() &#123;</span><br><span class="line">return posts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setPosts(List&lt;Posts&gt; posts) &#123;</span><br><span class="line">this.posts = posts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Long getCommentId() &#123;</span><br><span class="line">        return commentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCommentId(Long commentId) &#123;</span><br><span class="line">        this.commentId = commentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Long getCommentPostId() &#123;</span><br><span class="line">        return commentPostId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCommentPostId(Long commentPostId) &#123;</span><br><span class="line">        this.commentPostId = commentPostId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCommentAuthor() &#123;</span><br><span class="line">        return commentAuthor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCommentAuthor(String commentAuthor) &#123;</span><br><span class="line">        this.commentAuthor = commentAuthor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCommentAuthorEmail() &#123;</span><br><span class="line">        return commentAuthorEmail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCommentAuthorEmail(String commentAuthorEmail) &#123;</span><br><span class="line">        this.commentAuthorEmail = commentAuthorEmail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCommentAuthorUrl() &#123;</span><br><span class="line">        return commentAuthorUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCommentAuthorUrl(String commentAuthorUrl) &#123;</span><br><span class="line">        this.commentAuthorUrl = commentAuthorUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCommentAuthorIp() &#123;</span><br><span class="line">        return commentAuthorIp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCommentAuthorIp(String commentAuthorIp) &#123;</span><br><span class="line">        this.commentAuthorIp = commentAuthorIp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getCommentDate() &#123;</span><br><span class="line">        return commentDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCommentDate(Date commentDate) &#123;</span><br><span class="line">        this.commentDate = commentDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getCommentDateGmt() &#123;</span><br><span class="line">        return commentDateGmt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCommentDateGmt(Date commentDateGmt) &#123;</span><br><span class="line">        this.commentDateGmt = commentDateGmt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCommentContent() &#123;</span><br><span class="line">        return commentContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCommentContent(String commentContent) &#123;</span><br><span class="line">        this.commentContent = commentContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getCommentKarma() &#123;</span><br><span class="line">        return commentKarma;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCommentKarma(Integer commentKarma) &#123;</span><br><span class="line">        this.commentKarma = commentKarma;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCommentApproved() &#123;</span><br><span class="line">        return commentApproved;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCommentApproved(String commentApproved) &#123;</span><br><span class="line">        this.commentApproved = commentApproved;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCommentAgent() &#123;</span><br><span class="line">        return commentAgent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCommentAgent(String commentAgent) &#123;</span><br><span class="line">        this.commentAgent = commentAgent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCommentType() &#123;</span><br><span class="line">        return commentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCommentType(String commentType) &#123;</span><br><span class="line">        this.commentType = commentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Long getCommentParent() &#123;</span><br><span class="line">        return commentParent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCommentParent(Long commentParent) &#123;</span><br><span class="line">        this.commentParent = commentParent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Long getUserId() &#123;</span><br><span class="line">        return userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserId(Long userId) &#123;</span><br><span class="line">        this.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Serializable pkVal() &#123;</span><br><span class="line">        return this.commentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Comments&#123;&quot; +</span><br><span class="line">        &quot;, commentId=&quot; + commentId +</span><br><span class="line">        &quot;, commentPostId=&quot; + commentPostId +</span><br><span class="line">        &quot;, commentAuthor=&quot; + commentAuthor +</span><br><span class="line">        &quot;, commentAuthorEmail=&quot; + commentAuthorEmail +</span><br><span class="line">        &quot;, commentAuthorUrl=&quot; + commentAuthorUrl +</span><br><span class="line">        &quot;, commentAuthorIp=&quot; + commentAuthorIp +</span><br><span class="line">        &quot;, commentDate=&quot; + commentDate +</span><br><span class="line">        &quot;, commentDateGmt=&quot; + commentDateGmt +</span><br><span class="line">        &quot;, commentContent=&quot; + commentContent +</span><br><span class="line">        &quot;, commentKarma=&quot; + commentKarma +</span><br><span class="line">        &quot;, commentApproved=&quot; + commentApproved +</span><br><span class="line">        &quot;, commentAgent=&quot; + commentAgent +</span><br><span class="line">        &quot;, commentType=&quot; + commentType +</span><br><span class="line">        &quot;, commentParent=&quot; + commentParent +</span><br><span class="line">        &quot;, userId=&quot; + userId +</span><br><span class="line">        &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也许大家发现我的mybatis与你们的mybatis不一样，实际上我用的是mybatis-plus，mybatis-plus可以说跟mybatis几乎没有什么区别，我多次强调过，mybatis-plus是mybatis的增强版，意味着mybatis原有的功能，mybatis-plus可以毫无顾忌的拿来即用。</p><p>关于mybatis-plus的学习教程，感兴趣的朋友可以参考我的这篇博客(包含从入门到使用):<a href="https://www.cnblogs.com/youcong/category/1213059.html" target="_blank" rel="noopener">https://www.cnblogs.com/youcong/category/1213059.html</a></p><h2><span id="sql优化策略">sql优化策略</span></h2><p>sql优化的策略有很多，大家可以参考如下:</p><p>(1)任何地方都不要使用select <em> from table_name，请使用具体的字段列表代替”</em>“ ，不要返回用不到的任何字段;<br>(2)对查询进行优化，应尽量避免全表扫描，首先应考虑在where及order by涉及的列建立索引;<br>(3)应尽量避免在where子句中使用or来连接条件，否则将导致引擎放弃使用索引而进行全表扫描;<br>(4)应尽量避免在where子句中使用!=或&lt;&gt;操作符，否则将导致引擎放弃使用索引而进行全表扫描;<br>(5)int和not in慎用，否则会导致全表扫描;<br>(6)应尽量避免在where子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描;<br>(7)很多时候使用exists代替in是一个好的选择;<br>(8)尽量使用数字型字段，若只含数值信息的字段设计为字符型，这将会降低查询和连接的性能，并会增加存储开销,这是因为引擎在处理查询和连接时会逐个比较字符串职工的每一个字符，而对于数字型而言只需要比较一次就够了;<br>(9)尽可能使用varchar代替char，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些;</p><p>当然远远不止这么多，知识的海洋是无穷的，探索的乐趣亦如此。</p><p>关于sql优化思路，大家可以参考<a href="https://www.cnblogs.com/wcwen1990/p/7204739.html" target="_blank" rel="noopener">SQL优化思路大全</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis错误之org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)</title>
      <link href="/2019/03/05/mybatis%E9%94%99%E8%AF%AF%E4%B9%8Borg-apache-ibatis-binding-BindingException-Invalid-bound-statement-not-found/"/>
      <url>/2019/03/05/mybatis%E9%94%99%E8%AF%AF%E4%B9%8Borg-apache-ibatis-binding-BindingException-Invalid-bound-statement-not-found/</url>
      
        <content type="html"><![CDATA[<p>玩了MyBatis差不多有两年了，中间也玩过MyBatis-Plus,这个MyBatis-Plus其实与MyBatis的区别并不大。今天写博客业务代码的时候，犯一个初学者犯过的错误。<br><a id="more"></a><br>错误信息如下:<br>org.apache.ibatis.binding.BindingException: Invalid bound statement<br>  (not found)</p><p>通常原因是因为Mapper interface和xml文件的定义对不上，通常需要检查包名、namespace、函数名等。</p><p>出现这个错误的原因是我太过相信自我了，觉得自觉没有错，于是手打，结果就是一个单词写错了。</p><p>看代码示例:</p><p>xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;resentPosts&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line"> SELECT post_title FROM `wp_posts` WHERE post_status = &apos;publish&apos; ORDER BY post_modified DESC LIMIT 0,5 </span><br><span class="line"> &lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>dao(interface):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//近期文章</span><br><span class="line">public List&lt;Posts&gt; recentPosts();</span><br></pre></td></tr></table></figure></p><p>大家很容易会看出select标签中的id与dao中的接口函数名不对应。这就是问题的根源，改成一样的，如下(即可解决问题)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;recentPosts&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line">  SELECT post_title FROM `wp_posts` WHERE post_status = &apos;publish&apos; ORDER BY post_modified DESC LIMIT 0,5 </span><br><span class="line">  &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>最后说一句，遇到问题不要慌，找到问题关键信息，复制到百度上/谷歌或者stackoverflow即可找到答案。</p><p>太阳底下没有新鲜事儿，你遇到过的，说不定别人也遇到过。</p><p>参考链接:<a href="https://www.cnblogs.com/lfm601508022/p/InvalidBoundStatement.html" target="_blank" rel="noopener">https://www.cnblogs.com/lfm601508022/p/InvalidBoundStatement.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js服务端程序在Linux上持久运行</title>
      <link href="/2019/03/05/node-js%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%A8%8B%E5%BA%8F%E5%9C%A8Linux%E4%B8%8A%E6%8C%81%E4%B9%85%E8%BF%90%E8%A1%8C/"/>
      <url>/2019/03/05/node-js%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%A8%8B%E5%BA%8F%E5%9C%A8Linux%E4%B8%8A%E6%8C%81%E4%B9%85%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>如果要想在服务端部署node.js程序，让其持久化运行，就不能单单使用npm start命令运行，当然了，这样运行是毫无问题的，但是当关闭xshell窗口或者是关闭进程的时候(其实关闭xshell窗口相当于默认关闭进程)，就无法访问对应的node.js服务端程序了。</p><p>那么该如何才能持久访问呢？</p><p>其实也就两步<br><a id="more"></a></p><h4><span id="第一步安装forever">第一步安装forever</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install forever 或者 npminstall -g forever</span><br></pre></td></tr></table></figure><h4><span id="第二步运行对应的js">第二步运行对应的js</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forver start index.js</span><br></pre></td></tr></table></figure><h5><span id="注意你可能会遇到如下错误">注意(你可能会遇到如下错误):</span></h5><p>错误信息:<br>forever: command not found</p><p>原因:以Windows来说，通常这种错误是因为没有配置好环境变量，解决方案也很简单就是配置好环境变量或者是使用绝对路径</p><p>解决方式(Linux演示，这里我使用绝对路径):</p><h5><span id="如何找到绝对路径呢">如何找到绝对路径呢？</span></h5><p>通过该命令可以获取node.js的安装模块,npm list -g –depth 0<br>├── <a href="mailto:ali-oss@6.1.0" target="_blank" rel="noopener">ali-oss@6.1.0</a><br>├── <a href="mailto:forever@0.15.3" target="_blank" rel="noopener">forever@0.15.3</a><br>└── <a href="mailto:npm@6.4.1" target="_blank" rel="noopener">npm@6.4.1</a></p><p>再通过关键字搜索 find / -name forever<br>/home/youcong/mock-github-api/node_modules/forever<br>/home/youcong/mock-github-api/node_modules/forever/lib/forever<br>/home/youcong/mock-github-api/node_modules/forever/bin/forever<br>/home/youcong/mock-github-api/node_modules/.bin/forever<br>/home/youcong/nodejs/lib/node_modules/forever<br>/home/youcong/nodejs/lib/node_modules/forever/lib/forever<br>/home/youcong/nodejs/lib/node_modules/forever/bin/forever<br>/home/youcong/nodejs/bin/forever</p><p>最后通过/home/youcong/mock-github-api/node_modules/forever/bin/forever start index.js 即可实现node.js服务端程序在Linux上持久运行。</p><h5><span id="forever常用命令">forever常用命令</span></h5><p>forever start app.js //启动程序</p><p>forever stop app.js //关闭程序</p><p>forever start -l forever.log -o out.log -e err.log app.js //启动程序并输出日志</p><p>forever restart app.js //重启程序</p><p>forever list //查看正在运行的进程</p><h6><span id="参考链接">参考链接:</span></h6><p>forever:command not found:<a href="https://blog.csdn.net/xgbm_k/article/details/78132293" target="_blank" rel="noopener">https://blog.csdn.net/xgbm_k/article/details/78132293</a><br>node.js在Linux上如何持久运行:<a href="https://blog.csdn.net/shakdy/article/details/82938679" target="_blank" rel="noopener">https://blog.csdn.net/shakdy/article/details/82938679</a><br>node.js后台运行方法:<a href="https://blog.csdn.net/zdyueguanyun/article/details/79043483" target="_blank" rel="noopener">https://blog.csdn.net/zdyueguanyun/article/details/79043483</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js读写文件</title>
      <link href="/2019/03/04/node-js%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/"/>
      <url>/2019/03/04/node-js%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>关于node.js的读写操作，应用场景有很多。<br>比如其中这样的一个场景，如何获取全局的token。<br>这就涉及到写和读操作了。<br><a id="more"></a><br>写操作:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">function storeToken(token)&#123;</span><br><span class="line"></span><br><span class="line">fs.writeFile(&apos;D://youcongtech//token.txt&apos;,token.slice(10),&apos;utf8&apos;,function(error)&#123;</span><br><span class="line"></span><br><span class="line">if(error)&#123;</span><br><span class="line">console.log(error);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">console.log(&apos;write success&apos;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>读操作:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">function readToken()&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fs.readFile(&apos;D://youcongtech//token.txt&apos;, function (err, data) &#123;</span><br><span class="line">if (err) &#123;</span><br><span class="line">return console.error(err);</span><br><span class="line">&#125;</span><br><span class="line">console.log(data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过上述两个示例代码，就可以达到存取token的目的，这样一来就不必担心如何获取token问题。<br>当然了，问题的解决方式不止这一个，其实还可以用redis来存储token。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript之传输加密</title>
      <link href="/2019/03/04/javascript%E4%B9%8B%E4%BC%A0%E8%BE%93%E5%8A%A0%E5%AF%86/"/>
      <url>/2019/03/04/javascript%E4%B9%8B%E4%BC%A0%E8%BE%93%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>为什么要使用javascript加密呢？<br>服务端加密远远不够，客户端或者浏览器端也需要加密，以此保证传输信息过程的安全。</p><p>今天就我工作中说说这么几种加密算法及其对应的应用场景，如下所示:</p><ul><li>base64</li><li>md5</li><li>des</li></ul><a id="more"></a><h3><span id="一-base64">一、Base64</span></h3><p>Base64通常可以用于Cookie加密，比如每个用户通过相关操作，对应的用户和数据库信息会有对应的更新，为了保证对应的用户在web端看到的信息一致，我们使用Cookie，而Cookie如果是明文的话，不是特别安全，因此我们采用Base64对其进行加密。</p><p>示例代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;base64加密解密&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 创建Base64对象</span><br><span class="line">var Base64 = &#123;</span><br><span class="line"> _keyStr: &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;,</span><br><span class="line"> encode: function(e) &#123;</span><br><span class="line">  var t = &quot;&quot;;</span><br><span class="line">  var n, r, i, s, o, u, a;</span><br><span class="line">  var f = 0;</span><br><span class="line">  e = Base64._utf8_encode(e);</span><br><span class="line">  while (f &lt; e.length) &#123;</span><br><span class="line">   n = e.charCodeAt(f++);</span><br><span class="line">   r = e.charCodeAt(f++);</span><br><span class="line">   i = e.charCodeAt(f++);</span><br><span class="line">   s = n &gt;&gt; 2;</span><br><span class="line">   o = (n &amp; 3) &lt;&lt; 4 | r &gt;&gt; 4;</span><br><span class="line">   u = (r &amp; 15) &lt;&lt; 2 | i &gt;&gt; 6;</span><br><span class="line">   a = i &amp; 63;</span><br><span class="line">   if (isNaN(r)) &#123;</span><br><span class="line">    u = a = 64</span><br><span class="line">   &#125; else if (isNaN(i)) &#123;</span><br><span class="line">    a = 64</span><br><span class="line">   &#125;</span><br><span class="line">   t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a)</span><br><span class="line">  &#125;</span><br><span class="line">  return t</span><br><span class="line"> &#125;,</span><br><span class="line"> decode: function(e) &#123;</span><br><span class="line">  var t = &quot;&quot;;</span><br><span class="line">  var n, r, i;</span><br><span class="line">  var s, o, u, a;</span><br><span class="line">  var f = 0;</span><br><span class="line">  e=e.replace(/[^A-Za-z0-9+/=]/g,&quot;&quot;);</span><br><span class="line">  while (f &lt; e.length) &#123;</span><br><span class="line">   s = this._keyStr.indexOf(e.charAt(f++));</span><br><span class="line">   o = this._keyStr.indexOf(e.charAt(f++));</span><br><span class="line">   u = this._keyStr.indexOf(e.charAt(f++));</span><br><span class="line">   a = this._keyStr.indexOf(e.charAt(f++));</span><br><span class="line">   n = s &lt;&lt; 2 | o &gt;&gt; 4;</span><br><span class="line">   r = (o &amp; 15) &lt;&lt; 4 | u &gt;&gt; 2;</span><br><span class="line">   i = (u &amp; 3) &lt;&lt; 6 | a;</span><br><span class="line">   t = t + String.fromCharCode(n);</span><br><span class="line">   if (u != 64) &#123;</span><br><span class="line">    t = t + String.fromCharCode(r)</span><br><span class="line">   &#125;</span><br><span class="line">   if (a != 64) &#123;</span><br><span class="line">    t = t + String.fromCharCode(i)</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  t = Base64._utf8_decode(t);</span><br><span class="line">  return t</span><br><span class="line"> &#125;,</span><br><span class="line"> _utf8_encode: function(e) &#123;</span><br><span class="line">  e = e.replace(/rn/g, &quot;n&quot;);</span><br><span class="line">  var t = &quot;&quot;;</span><br><span class="line">  for (var n = 0; n &lt; e.length; n++) &#123;</span><br><span class="line">   var r = e.charCodeAt(n);</span><br><span class="line">   if (r &lt; 128) &#123;</span><br><span class="line">    t += String.fromCharCode(r)</span><br><span class="line">   &#125; else if (r &gt; 127 &amp;&amp; r &lt; 2048) &#123;</span><br><span class="line">    t += String.fromCharCode(r &gt;&gt; 6 | 192);</span><br><span class="line">    t += String.fromCharCode(r &amp; 63 | 128)</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">    t += String.fromCharCode(r &gt;&gt; 12 | 224);</span><br><span class="line">    t += String.fromCharCode(r &gt;&gt; 6 &amp; 63 | 128);</span><br><span class="line">    t += String.fromCharCode(r &amp; 63 | 128)</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return t</span><br><span class="line"> &#125;,</span><br><span class="line"> _utf8_decode: function(e) &#123;</span><br><span class="line">  var t = &quot;&quot;;</span><br><span class="line">  var n = 0;</span><br><span class="line">  var r = c1 = c2 = 0;</span><br><span class="line">  while (n &lt; e.length) &#123;</span><br><span class="line">   r = e.charCodeAt(n);</span><br><span class="line">   if (r &lt; 128) &#123;</span><br><span class="line">    t += String.fromCharCode(r);</span><br><span class="line">    n++</span><br><span class="line">   &#125; else if (r &gt; 191 &amp;&amp; r &lt; 224) &#123;</span><br><span class="line">    c2 = e.charCodeAt(n + 1);</span><br><span class="line">    t += String.fromCharCode((r &amp; 31) &lt;&lt; 6 | c2 &amp; 63);</span><br><span class="line">    n += 2</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">    c2 = e.charCodeAt(n + 1);</span><br><span class="line">    c3 = e.charCodeAt(n + 2);</span><br><span class="line">    t += String.fromCharCode((r &amp; 15) &lt;&lt; 12 | (c2 &amp; 63) &lt;&lt; 6 | c3 &amp; 63);</span><br><span class="line">    n += 3</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return t</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 定义字符串</span><br><span class="line">var string = &apos;http://www.youcongtech.com!&apos;;</span><br><span class="line">// 加密</span><br><span class="line">var encodedString = Base64.encode(string);</span><br><span class="line">console.log(encodedString);</span><br><span class="line">// 解密</span><br><span class="line">var decodedString = Base64.decode(encodedString);</span><br><span class="line">console.log(decodedString);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3><span id="二-md5">二、MD5</span></h3><h4><span id="1mdt算法特点">1.MDT算法特点</span></h4><p>(1)压缩性:任意长度的数据，算出的MD5值长度都是固定的;<br>(2)容易计算:从原数据计算出MD5值很容易;<br>(3)抗修改性:对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别;<br>(4)弱抗碰撞:已知原数据和其MD5值，想找到一个具有相同MD5值的数据(既伪造数据)是非常困难的;<br>(5)强抗碰撞:想找到两个不同的数据，使它们具有相同的MD5值，是非常困难的;</p><p>根据以上特点衍生出来可以供我们使用的特性:<br>(1)方便存储:MD5加密处理都是32位的字符串，能够给定固定大小的空间存储、传输、验证;<br>(2)文件加密:MD5算法运用在文件加密上很有优势，因为只需要32位字符串就能对一个巨大的文件进行验证完整性;<br>(3)不可逆:MD5加密出来只会截取末尾32位，具有良好的安全性，如果是对于参数加密很难伪造MD5;<br>(4)加密损耗低:MD5算法加密对于性能的消耗微乎其微(据说0.001毫秒)</p><h4><span id="2md5算法的实际应用">2.MD5算法的实际应用</span></h4><p>(1)用户密码<br>对于用户密码加密最高境界就是:别人获得你数据库的用户资料，别人也没有办法获知密码。<br>一般常用的规则比如:MD5(用户名+用户密码)+MD5(KEY+项目名+公司名)这样可以避免和别人碰库，不排除别人可能用MD5算法来攻击你的服务器。当然了，你还可以多包几层，可以MD5和其它加密算法混合使用(比如DES等)。</p><p>(2)请求参数校验<br>对于服务器而言，排除系统问题，最大的问题就是害怕请求被拦截，拦截修改之后就有很多漏洞的可能性。通常为了避免被拦截，会对请求参数进行校验，就算拦截了请求参数修改了，只要模拟不出MD5加密出来的值，服务器的过滤器会直接将其拦截。</p><p>(3)文件校验<br>对于一些图片或者是一些比较小的文件来说，可以不用MD5算法校验，基本上都是一次请求就完成了上传，而且显示的时候也不需要验证图片的不完整性。<br>如果有一个5MB的文件，客户端将其分割成5份1MB的文件，文件在上传的时候，上传两个MD5值，一个是当前上传的1MB文件流的MD5，另一个是拼接之后的MD5，通过这样的方式也能保证文件的完整性。<br>示例代码如下:</p><p>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src=&quot;md5.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var code = &quot;123456&quot;;</span><br><span class="line">        var username = &quot;123456&quot;;</span><br><span class="line">        var password = &quot;123456&quot;;</span><br><span class="line">        var str1 = hex_md5(&quot;123456&quot;);</span><br><span class="line">        var str2 = b64_md5(&quot;123456&quot;);</span><br><span class="line">        var str3 = str_md5(&quot;123456&quot;);</span><br><span class="line">        var str4 = hex_hmac_md5(code,code);</span><br><span class="line">        var str5 = b64_hmac_md5(username,username);</span><br><span class="line">        var str6 = str_hmac_md5(password,password);</span><br><span class="line">        console.log(str1);            // e10adc3949ba59abbe56e057f20f883e</span><br><span class="line">        console.log(str2);            // 4QrcOUm6Wau+VuBX8g+IPg</span><br><span class="line">        console.log(str3);            // áÜ9IºY«¾VàWò&gt;</span><br><span class="line">        console.log(str4);            // 30ce71a73bdd908c3955a90e8f7429ef</span><br><span class="line">        console.log(str5);            // MM5xpzvdkIw5VakOj3Qp7w</span><br><span class="line">        console.log(str6);            // 0Îq§;Ý9U©t)ï</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>md5.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message</span><br><span class="line"> * Digest Algorithm, as defined in RFC 1321.</span><br><span class="line"> * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.</span><br><span class="line"> * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet</span><br><span class="line"> * Distributed under the BSD License</span><br><span class="line"> * See http://pajhome.org.uk/crypt/md5 for more info.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Configurable variables. You may need to tweak these to be compatible with</span><br><span class="line"> * the server-side, but the defaults work in most cases.</span><br><span class="line"> */</span><br><span class="line">var hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */</span><br><span class="line">var b64pad  = &quot;&quot;; /* base-64 pad character. &quot;=&quot; for strict RFC compliance   */</span><br><span class="line">var chrsz   = 8;  /* bits per input character. 8 - ASCII; 16 - Unicode      */</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * These are the functions you&apos;ll usually want to call</span><br><span class="line"> * They take string arguments and return either hex or base-64 encoded strings</span><br><span class="line"> */</span><br><span class="line">function hex_md5(s)&#123; return binl2hex(core_md5(str2binl(s), s.length * chrsz));&#125;</span><br><span class="line">function b64_md5(s)&#123; return binl2b64(core_md5(str2binl(s), s.length * chrsz));&#125;</span><br><span class="line">function str_md5(s)&#123; return binl2str(core_md5(str2binl(s), s.length * chrsz));&#125;</span><br><span class="line">function hex_hmac_md5(key, data) &#123; return binl2hex(core_hmac_md5(key, data)); &#125;</span><br><span class="line">function b64_hmac_md5(key, data) &#123; return binl2b64(core_hmac_md5(key, data)); &#125;</span><br><span class="line">function str_hmac_md5(key, data) &#123; return binl2str(core_hmac_md5(key, data)); &#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Perform a simple self-test to see if the VM is working</span><br><span class="line"> */</span><br><span class="line">function md5_vm_test()</span><br><span class="line">&#123;</span><br><span class="line">  return hex_md5(&quot;abc&quot;) == &quot;900150983cd24fb0d6963f7d28e17f72&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Calculate the MD5 of an array of little-endian words, and a bit length</span><br><span class="line"> */</span><br><span class="line">function core_md5(x, len)</span><br><span class="line">&#123;</span><br><span class="line">  /* append padding */</span><br><span class="line">  x[len &gt;&gt; 5] |= 0x80 &lt;&lt; ((len) % 32);</span><br><span class="line">  x[(((len + 64) &gt;&gt;&gt; 9) &lt;&lt; 4) + 14] = len;</span><br><span class="line"></span><br><span class="line">  var a =  1732584193;</span><br><span class="line">  var b = -271733879;</span><br><span class="line">  var c = -1732584194;</span><br><span class="line">  var d =  271733878;</span><br><span class="line"></span><br><span class="line">  for(var i = 0; i &lt; x.length; i += 16)</span><br><span class="line">  &#123;</span><br><span class="line">    var olda = a;</span><br><span class="line">    var oldb = b;</span><br><span class="line">    var oldc = c;</span><br><span class="line">    var oldd = d;</span><br><span class="line"></span><br><span class="line">    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);</span><br><span class="line">    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);</span><br><span class="line">    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);</span><br><span class="line">    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);</span><br><span class="line">    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);</span><br><span class="line">    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);</span><br><span class="line">    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);</span><br><span class="line">    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);</span><br><span class="line">    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);</span><br><span class="line">    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);</span><br><span class="line">    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);</span><br><span class="line">    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);</span><br><span class="line">    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);</span><br><span class="line">    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);</span><br><span class="line">    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);</span><br><span class="line">    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);</span><br><span class="line"></span><br><span class="line">    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);</span><br><span class="line">    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);</span><br><span class="line">    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);</span><br><span class="line">    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);</span><br><span class="line">    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);</span><br><span class="line">    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);</span><br><span class="line">    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);</span><br><span class="line">    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);</span><br><span class="line">    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);</span><br><span class="line">    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);</span><br><span class="line">    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);</span><br><span class="line">    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);</span><br><span class="line">    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);</span><br><span class="line">    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);</span><br><span class="line">    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);</span><br><span class="line">    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);</span><br><span class="line"></span><br><span class="line">    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);</span><br><span class="line">    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);</span><br><span class="line">    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);</span><br><span class="line">    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);</span><br><span class="line">    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);</span><br><span class="line">    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);</span><br><span class="line">    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);</span><br><span class="line">    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);</span><br><span class="line">    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);</span><br><span class="line">    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);</span><br><span class="line">    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);</span><br><span class="line">    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);</span><br><span class="line">    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);</span><br><span class="line">    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);</span><br><span class="line">    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);</span><br><span class="line">    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);</span><br><span class="line"></span><br><span class="line">    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);</span><br><span class="line">    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);</span><br><span class="line">    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);</span><br><span class="line">    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);</span><br><span class="line">    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);</span><br><span class="line">    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);</span><br><span class="line">    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);</span><br><span class="line">    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);</span><br><span class="line">    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);</span><br><span class="line">    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);</span><br><span class="line">    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);</span><br><span class="line">    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);</span><br><span class="line">    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);</span><br><span class="line">    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);</span><br><span class="line">    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);</span><br><span class="line">    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);</span><br><span class="line"></span><br><span class="line">    a = safe_add(a, olda);</span><br><span class="line">    b = safe_add(b, oldb);</span><br><span class="line">    c = safe_add(c, oldc);</span><br><span class="line">    d = safe_add(d, oldd);</span><br><span class="line">  &#125;</span><br><span class="line">  return Array(a, b, c, d);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * These functions implement the four basic operations the algorithm uses.</span><br><span class="line"> */</span><br><span class="line">function md5_cmn(q, a, b, x, s, t)</span><br><span class="line">&#123;</span><br><span class="line">  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);</span><br><span class="line">&#125;</span><br><span class="line">function md5_ff(a, b, c, d, x, s, t)</span><br><span class="line">&#123;</span><br><span class="line">  return md5_cmn((b &amp; c) | ((~b) &amp; d), a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line">function md5_gg(a, b, c, d, x, s, t)</span><br><span class="line">&#123;</span><br><span class="line">  return md5_cmn((b &amp; d) | (c &amp; (~d)), a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line">function md5_hh(a, b, c, d, x, s, t)</span><br><span class="line">&#123;</span><br><span class="line">  return md5_cmn(b ^ c ^ d, a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line">function md5_ii(a, b, c, d, x, s, t)</span><br><span class="line">&#123;</span><br><span class="line">  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Calculate the HMAC-MD5, of a key and some data</span><br><span class="line"> */</span><br><span class="line">function core_hmac_md5(key, data)</span><br><span class="line">&#123;</span><br><span class="line">  var bkey = str2binl(key);</span><br><span class="line">  if(bkey.length &gt; 16) bkey = core_md5(bkey, key.length * chrsz);</span><br><span class="line"></span><br><span class="line">  var ipad = Array(16), opad = Array(16);</span><br><span class="line">  for(var i = 0; i &lt; 16; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    ipad[i] = bkey[i] ^ 0x36363636;</span><br><span class="line">    opad[i] = bkey[i] ^ 0x5C5C5C5C;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var hash = core_md5(ipad.concat(str2binl(data)), 512 + data.length * chrsz);</span><br><span class="line">  return core_md5(opad.concat(hash), 512 + 128);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Add integers, wrapping at 2^32. This uses 16-bit operations internally</span><br><span class="line"> * to work around bugs in some JS interpreters.</span><br><span class="line"> */</span><br><span class="line">function safe_add(x, y)</span><br><span class="line">&#123;</span><br><span class="line">  var lsw = (x &amp; 0xFFFF) + (y &amp; 0xFFFF);</span><br><span class="line">  var msw = (x &gt;&gt; 16) + (y &gt;&gt; 16) + (lsw &gt;&gt; 16);</span><br><span class="line">  return (msw &lt;&lt; 16) | (lsw &amp; 0xFFFF);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Bitwise rotate a 32-bit number to the left.</span><br><span class="line"> */</span><br><span class="line">function bit_rol(num, cnt)</span><br><span class="line">&#123;</span><br><span class="line">  return (num &lt;&lt; cnt) | (num &gt;&gt;&gt; (32 - cnt));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Convert a string to an array of little-endian words</span><br><span class="line"> * If chrsz is ASCII, characters &gt;255 have their hi-byte silently ignored.</span><br><span class="line"> */</span><br><span class="line">function str2binl(str)</span><br><span class="line">&#123;</span><br><span class="line">  var bin = Array();</span><br><span class="line">  var mask = (1 &lt;&lt; chrsz) - 1;</span><br><span class="line">  for(var i = 0; i &lt; str.length * chrsz; i += chrsz)</span><br><span class="line">    bin[i&gt;&gt;5] |= (str.charCodeAt(i / chrsz) &amp; mask) &lt;&lt; (i%32);</span><br><span class="line">  return bin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Convert an array of little-endian words to a string</span><br><span class="line"> */</span><br><span class="line">function binl2str(bin)</span><br><span class="line">&#123;</span><br><span class="line">  var str = &quot;&quot;;</span><br><span class="line">  var mask = (1 &lt;&lt; chrsz) - 1;</span><br><span class="line">  for(var i = 0; i &lt; bin.length * 32; i += chrsz)</span><br><span class="line">    str += String.fromCharCode((bin[i&gt;&gt;5] &gt;&gt;&gt; (i % 32)) &amp; mask);</span><br><span class="line">  return str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Convert an array of little-endian words to a hex string.</span><br><span class="line"> */</span><br><span class="line">function binl2hex(binarray)</span><br><span class="line">&#123;</span><br><span class="line">  var hex_tab = hexcase ? &quot;0123456789ABCDEF&quot; : &quot;0123456789abcdef&quot;;</span><br><span class="line">  var str = &quot;&quot;;</span><br><span class="line">  for(var i = 0; i &lt; binarray.length * 4; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    str += hex_tab.charAt((binarray[i&gt;&gt;2] &gt;&gt; ((i%4)*8+4)) &amp; 0xF) +</span><br><span class="line">           hex_tab.charAt((binarray[i&gt;&gt;2] &gt;&gt; ((i%4)*8  )) &amp; 0xF);</span><br><span class="line">  &#125;</span><br><span class="line">  return str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Convert an array of little-endian words to a base-64 string</span><br><span class="line"> */</span><br><span class="line">function binl2b64(binarray)</span><br><span class="line">&#123;</span><br><span class="line">  var tab = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;;</span><br><span class="line">  var str = &quot;&quot;;</span><br><span class="line">  for(var i = 0; i &lt; binarray.length * 4; i += 3)</span><br><span class="line">  &#123;</span><br><span class="line">    var triplet = (((binarray[i   &gt;&gt; 2] &gt;&gt; 8 * ( i   %4)) &amp; 0xFF) &lt;&lt; 16)</span><br><span class="line">                | (((binarray[i+1 &gt;&gt; 2] &gt;&gt; 8 * ((i+1)%4)) &amp; 0xFF) &lt;&lt; 8 )</span><br><span class="line">                |  ((binarray[i+2 &gt;&gt; 2] &gt;&gt; 8 * ((i+2)%4)) &amp; 0xFF);</span><br><span class="line">    for(var j = 0; j &lt; 4; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      if(i * 8 + j * 6 &gt; binarray.length * 32) str += b64pad;</span><br><span class="line">      else str += tab.charAt((triplet &gt;&gt; 6*(3-j)) &amp; 0x3F);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3><span id="三-des加密">三、DES加密</span></h3><p>DES是一种典型的块加密方法:将固定长度的明文通过一系列复杂的操作变成同样长度的密文，块的长度为64位。<br>同时，DES使用的密钥来自定义变换过程，因此算法认为只有持有加密所用的密钥的用户才能解密密文。DES的密钥表明上是64位，实际有效密钥长度为56位，其余8位可以用于奇偶校验。</p><p>DES现在已经不被视为一种安全的加密算法，主要原因是它使用的56位密钥过短。</p><p>为了提供实用所需的安全性，可以使用DES的派生算法，3DES来进行加密(虽然3DES也存在理论上的攻击方法)</p><p>示例(DES加密和解密):<br>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;des.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function getResult()&#123;</span><br><span class="line">//待加密字符串</span><br><span class="line">var str = document.getElementById(&quot;str&quot;).innerHTML;</span><br><span class="line">//第一个参数必须；第二个、第三个参数可选</span><br><span class="line">var key1 = &quot;youcongtech&quot;;</span><br><span class="line">var key2 = &quot;test001&quot;;</span><br><span class="line">var key3 = &quot;test002&quot;; </span><br><span class="line">//加密方法</span><br><span class="line">var  enResult = strEnc(str,key1,key2,key3);</span><br><span class="line">//解密方法</span><br><span class="line">var deResult = strDec(enResult,key1,key2,key3);</span><br><span class="line">//展示结果</span><br><span class="line">document.getElementById(&quot;enStr&quot;).innerHTML = enResult; </span><br><span class="line">document.getElementById(&quot;dnStr&quot;).innerHTML = deResult; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;获取加密结果与解密结果&quot; onclick=&quot;getResult()&quot; /&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td align=&quot;left&quot;&gt;字符串：&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;&lt;span id=&quot;str&quot;&gt;admin&lt;/span&gt;&lt;/td&gt; </span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;  </span><br><span class="line">  &lt;td&gt;加密key：&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;key1=&lt;span id=&quot;key1&quot;&gt;1&lt;/span&gt;;key2=&lt;span id=&quot;key2&quot;&gt;2&lt;/span&gt;;key3=&lt;span id=&quot;key3&quot;&gt;3&lt;/span&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td align=&quot;left&quot;&gt;加密结果：&lt;/td&gt;</span><br><span class="line">  &lt;td align=&quot;left&quot;&gt;&lt;label id = &quot;enStr&quot;&gt;&lt;/label&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td align=&quot;left&quot;&gt;解密结果： &lt;/td&gt;</span><br><span class="line">  &lt;td align=&quot;left&quot;&gt;&lt;label id = &quot;dnStr&quot;&gt;&lt;/label&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>des.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* DES加密/解密</span><br><span class="line">* @Copyright Copyright (c) 2006</span><br><span class="line">* @author Guapo</span><br><span class="line">* @see DESCore</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* encrypt the string to string made up of hex</span><br><span class="line">* return the encrypted string</span><br><span class="line">*/</span><br><span class="line">function strEnc(data,firstKey,secondKey,thirdKey)&#123;</span><br><span class="line"></span><br><span class="line"> var leng = data.length;</span><br><span class="line"> var encData = &quot;&quot;;</span><br><span class="line"> var firstKeyBt,secondKeyBt,thirdKeyBt,firstLength,secondLength,thirdLength;</span><br><span class="line"> if(firstKey != null &amp;&amp; firstKey != &quot;&quot;)&#123;    </span><br><span class="line">   firstKeyBt = getKeyBytes(firstKey);</span><br><span class="line">   firstLength = firstKeyBt.length;</span><br><span class="line"> &#125;</span><br><span class="line"> if(secondKey != null &amp;&amp; secondKey != &quot;&quot;)&#123;</span><br><span class="line">   secondKeyBt = getKeyBytes(secondKey);</span><br><span class="line">   secondLength = secondKeyBt.length;</span><br><span class="line"> &#125;</span><br><span class="line"> if(thirdKey != null &amp;&amp; thirdKey != &quot;&quot;)&#123;</span><br><span class="line">   thirdKeyBt = getKeyBytes(thirdKey);</span><br><span class="line">   thirdLength = thirdKeyBt.length;</span><br><span class="line"> &#125;  </span><br><span class="line"> </span><br><span class="line"> if(leng &gt; 0)&#123;</span><br><span class="line">   if(leng &lt; 4)&#123;</span><br><span class="line">     var bt = strToBt(data);      </span><br><span class="line">     var encByte ;</span><br><span class="line">     if(firstKey != null &amp;&amp; firstKey !=&quot;&quot; &amp;&amp; secondKey != null &amp;&amp; secondKey != &quot;&quot; &amp;&amp; thirdKey != null &amp;&amp; thirdKey != &quot;&quot;)&#123;</span><br><span class="line">       var tempBt;</span><br><span class="line">       var x,y,z;</span><br><span class="line">       tempBt = bt;        </span><br><span class="line">       for(x = 0;x &lt; firstLength ;x ++)&#123;</span><br><span class="line">         tempBt = enc(tempBt,firstKeyBt[x]);</span><br><span class="line">       &#125;</span><br><span class="line">       for(y = 0;y &lt; secondLength ;y ++)&#123;</span><br><span class="line">         tempBt = enc(tempBt,secondKeyBt[y]);</span><br><span class="line">       &#125;</span><br><span class="line">       for(z = 0;z &lt; thirdLength ;z ++)&#123;</span><br><span class="line">         tempBt = enc(tempBt,thirdKeyBt[z]);</span><br><span class="line">       &#125;        </span><br><span class="line">       encByte = tempBt;        </span><br><span class="line">     &#125;else&#123;</span><br><span class="line">       if(firstKey != null &amp;&amp; firstKey !=&quot;&quot; &amp;&amp; secondKey != null &amp;&amp; secondKey != &quot;&quot;)&#123;</span><br><span class="line">         var tempBt;</span><br><span class="line">         var x,y;</span><br><span class="line">         tempBt = bt;</span><br><span class="line">         for(x = 0;x &lt; firstLength ;x ++)&#123;</span><br><span class="line">           tempBt = enc(tempBt,firstKeyBt[x]);</span><br><span class="line">         &#125;</span><br><span class="line">         for(y = 0;y &lt; secondLength ;y ++)&#123;</span><br><span class="line">           tempBt = enc(tempBt,secondKeyBt[y]);</span><br><span class="line">         &#125;</span><br><span class="line">         encByte = tempBt;</span><br><span class="line">       &#125;else&#123;</span><br><span class="line">         if(firstKey != null &amp;&amp; firstKey !=&quot;&quot;)&#123;            </span><br><span class="line">           var tempBt;</span><br><span class="line">           var x = 0;</span><br><span class="line">           tempBt = bt;            </span><br><span class="line">           for(x = 0;x &lt; firstLength ;x ++)&#123;</span><br><span class="line">             tempBt = enc(tempBt,firstKeyBt[x]);</span><br><span class="line">           &#125;</span><br><span class="line">           encByte = tempBt;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;        </span><br><span class="line">     &#125;</span><br><span class="line">     encData = bt64ToHex(encByte);</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">     var iterator = parseInt(leng/4);</span><br><span class="line">     var remainder = leng%4;</span><br><span class="line">     var i=0;      </span><br><span class="line">     for(i = 0;i &lt; iterator;i++)&#123;</span><br><span class="line">       var tempData = data.substring(i*4+0,i*4+4);</span><br><span class="line">       var tempByte = strToBt(tempData);</span><br><span class="line">       var encByte ;</span><br><span class="line">       if(firstKey != null &amp;&amp; firstKey !=&quot;&quot; &amp;&amp; secondKey != null &amp;&amp; secondKey != &quot;&quot; &amp;&amp; thirdKey != null &amp;&amp; thirdKey != &quot;&quot;)&#123;</span><br><span class="line">         var tempBt;</span><br><span class="line">         var x,y,z;</span><br><span class="line">         tempBt = tempByte;</span><br><span class="line">         for(x = 0;x &lt; firstLength ;x ++)&#123;</span><br><span class="line">           tempBt = enc(tempBt,firstKeyBt[x]);</span><br><span class="line">         &#125;</span><br><span class="line">         for(y = 0;y &lt; secondLength ;y ++)&#123;</span><br><span class="line">           tempBt = enc(tempBt,secondKeyBt[y]);</span><br><span class="line">         &#125;</span><br><span class="line">         for(z = 0;z &lt; thirdLength ;z ++)&#123;</span><br><span class="line">           tempBt = enc(tempBt,thirdKeyBt[z]);</span><br><span class="line">         &#125;</span><br><span class="line">         encByte = tempBt;</span><br><span class="line">       &#125;else&#123;</span><br><span class="line">         if(firstKey != null &amp;&amp; firstKey !=&quot;&quot; &amp;&amp; secondKey != null &amp;&amp; secondKey != &quot;&quot;)&#123;</span><br><span class="line">           var tempBt;</span><br><span class="line">           var x,y;</span><br><span class="line">           tempBt = tempByte;</span><br><span class="line">           for(x = 0;x &lt; firstLength ;x ++)&#123;</span><br><span class="line">             tempBt = enc(tempBt,firstKeyBt[x]);</span><br><span class="line">           &#125;</span><br><span class="line">           for(y = 0;y &lt; secondLength ;y ++)&#123;</span><br><span class="line">             tempBt = enc(tempBt,secondKeyBt[y]);</span><br><span class="line">           &#125;</span><br><span class="line">           encByte = tempBt;</span><br><span class="line">         &#125;else&#123;</span><br><span class="line">           if(firstKey != null &amp;&amp; firstKey !=&quot;&quot;)&#123;                      </span><br><span class="line">             var tempBt;</span><br><span class="line">             var x;</span><br><span class="line">             tempBt = tempByte;</span><br><span class="line">             for(x = 0;x &lt; firstLength ;x ++)&#123;                </span><br><span class="line">               tempBt = enc(tempBt,firstKeyBt[x]);</span><br><span class="line">             &#125;</span><br><span class="line">             encByte = tempBt;              </span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       encData += bt64ToHex(encByte);</span><br><span class="line">     &#125;      </span><br><span class="line">     if(remainder &gt; 0)&#123;</span><br><span class="line">       var remainderData = data.substring(iterator*4+0,leng);</span><br><span class="line">       var tempByte = strToBt(remainderData);</span><br><span class="line">       var encByte ;</span><br><span class="line">       if(firstKey != null &amp;&amp; firstKey !=&quot;&quot; &amp;&amp; secondKey != null &amp;&amp; secondKey != &quot;&quot; &amp;&amp; thirdKey != null &amp;&amp; thirdKey != &quot;&quot;)&#123;</span><br><span class="line">         var tempBt;</span><br><span class="line">         var x,y,z;</span><br><span class="line">         tempBt = tempByte;</span><br><span class="line">         for(x = 0;x &lt; firstLength ;x ++)&#123;</span><br><span class="line">           tempBt = enc(tempBt,firstKeyBt[x]);</span><br><span class="line">         &#125;</span><br><span class="line">         for(y = 0;y &lt; secondLength ;y ++)&#123;</span><br><span class="line">           tempBt = enc(tempBt,secondKeyBt[y]);</span><br><span class="line">         &#125;</span><br><span class="line">         for(z = 0;z &lt; thirdLength ;z ++)&#123;</span><br><span class="line">           tempBt = enc(tempBt,thirdKeyBt[z]);</span><br><span class="line">         &#125;</span><br><span class="line">         encByte = tempBt;</span><br><span class="line">       &#125;else&#123;</span><br><span class="line">         if(firstKey != null &amp;&amp; firstKey !=&quot;&quot; &amp;&amp; secondKey != null &amp;&amp; secondKey != &quot;&quot;)&#123;</span><br><span class="line">           var tempBt;</span><br><span class="line">           var x,y;</span><br><span class="line">           tempBt = tempByte;</span><br><span class="line">           for(x = 0;x &lt; firstLength ;x ++)&#123;</span><br><span class="line">             tempBt = enc(tempBt,firstKeyBt[x]);</span><br><span class="line">           &#125;</span><br><span class="line">           for(y = 0;y &lt; secondLength ;y ++)&#123;</span><br><span class="line">             tempBt = enc(tempBt,secondKeyBt[y]);</span><br><span class="line">           &#125;</span><br><span class="line">           encByte = tempBt;</span><br><span class="line">         &#125;else&#123;</span><br><span class="line">           if(firstKey != null &amp;&amp; firstKey !=&quot;&quot;)&#123;            </span><br><span class="line">             var tempBt;</span><br><span class="line">             var x;</span><br><span class="line">             tempBt = tempByte;</span><br><span class="line">             for(x = 0;x &lt; firstLength ;x ++)&#123;</span><br><span class="line">               tempBt = enc(tempBt,firstKeyBt[x]);</span><br><span class="line">             &#125;</span><br><span class="line">             encByte = tempBt;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       encData += bt64ToHex(encByte);</span><br><span class="line">     &#125;                </span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return encData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* decrypt the encrypted string to the original string </span><br><span class="line">*</span><br><span class="line">* return  the original string  </span><br><span class="line">*/</span><br><span class="line">function strDec(data,firstKey,secondKey,thirdKey)&#123;</span><br><span class="line"> var leng = data.length;</span><br><span class="line"> var decStr = &quot;&quot;;</span><br><span class="line"> var firstKeyBt,secondKeyBt,thirdKeyBt,firstLength,secondLength,thirdLength;</span><br><span class="line"> if(firstKey != null &amp;&amp; firstKey != &quot;&quot;)&#123;    </span><br><span class="line">   firstKeyBt = getKeyBytes(firstKey);</span><br><span class="line">   firstLength = firstKeyBt.length;</span><br><span class="line"> &#125;</span><br><span class="line"> if(secondKey != null &amp;&amp; secondKey != &quot;&quot;)&#123;</span><br><span class="line">   secondKeyBt = getKeyBytes(secondKey);</span><br><span class="line">   secondLength = secondKeyBt.length;</span><br><span class="line"> &#125;</span><br><span class="line"> if(thirdKey != null &amp;&amp; thirdKey != &quot;&quot;)&#123;</span><br><span class="line">   thirdKeyBt = getKeyBytes(thirdKey);</span><br><span class="line">   thirdLength = thirdKeyBt.length;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> var iterator = parseInt(leng/16);</span><br><span class="line"> var i=0;  </span><br><span class="line"> for(i = 0;i &lt; iterator;i++)&#123;</span><br><span class="line">   var tempData = data.substring(i*16+0,i*16+16);    </span><br><span class="line">   var strByte = hexToBt64(tempData);    </span><br><span class="line">   var intByte = new Array(64);</span><br><span class="line">   var j = 0;</span><br><span class="line">   for(j = 0;j &lt; 64; j++)&#123;</span><br><span class="line">     intByte[j] = parseInt(strByte.substring(j,j+1));</span><br><span class="line">   &#125;    </span><br><span class="line">   var decByte;</span><br><span class="line">   if(firstKey != null &amp;&amp; firstKey !=&quot;&quot; &amp;&amp; secondKey != null &amp;&amp; secondKey != &quot;&quot; &amp;&amp; thirdKey != null &amp;&amp; thirdKey != &quot;&quot;)&#123;</span><br><span class="line">     var tempBt;</span><br><span class="line">     var x,y,z;</span><br><span class="line">     tempBt = intByte;</span><br><span class="line">     for(x = thirdLength - 1;x &gt;= 0;x --)&#123;</span><br><span class="line">       tempBt = dec(tempBt,thirdKeyBt[x]);</span><br><span class="line">     &#125;</span><br><span class="line">     for(y = secondLength - 1;y &gt;= 0;y --)&#123;</span><br><span class="line">       tempBt = dec(tempBt,secondKeyBt[y]);</span><br><span class="line">     &#125;</span><br><span class="line">     for(z = firstLength - 1;z &gt;= 0 ;z --)&#123;</span><br><span class="line">       tempBt = dec(tempBt,firstKeyBt[z]);</span><br><span class="line">     &#125;</span><br><span class="line">     decByte = tempBt;</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">     if(firstKey != null &amp;&amp; firstKey !=&quot;&quot; &amp;&amp; secondKey != null &amp;&amp; secondKey != &quot;&quot;)&#123;</span><br><span class="line">       var tempBt;</span><br><span class="line">       var x,y,z;</span><br><span class="line">       tempBt = intByte;</span><br><span class="line">       for(x = secondLength - 1;x &gt;= 0 ;x --)&#123;</span><br><span class="line">         tempBt = dec(tempBt,secondKeyBt[x]);</span><br><span class="line">       &#125;</span><br><span class="line">       for(y = firstLength - 1;y &gt;= 0 ;y --)&#123;</span><br><span class="line">         tempBt = dec(tempBt,firstKeyBt[y]);</span><br><span class="line">       &#125;</span><br><span class="line">       decByte = tempBt;</span><br><span class="line">     &#125;else&#123;</span><br><span class="line">       if(firstKey != null &amp;&amp; firstKey !=&quot;&quot;)&#123;</span><br><span class="line">         var tempBt;</span><br><span class="line">         var x,y,z;</span><br><span class="line">         tempBt = intByte;</span><br><span class="line">         for(x = firstLength - 1;x &gt;= 0 ;x --)&#123;</span><br><span class="line">           tempBt = dec(tempBt,firstKeyBt[x]);</span><br><span class="line">         &#125;</span><br><span class="line">         decByte = tempBt;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   decStr += byteToString(decByte);</span><br><span class="line"> &#125;      </span><br><span class="line"> return decStr;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">* chang the string into the bit array</span><br><span class="line">* </span><br><span class="line">* return bit array(it&apos;s length % 64 = 0)</span><br><span class="line">*/</span><br><span class="line">function getKeyBytes(key)&#123;</span><br><span class="line"> var keyBytes = new Array();</span><br><span class="line"> var leng = key.length;</span><br><span class="line"> var iterator = parseInt(leng/4);</span><br><span class="line"> var remainder = leng%4;</span><br><span class="line"> var i = 0;</span><br><span class="line"> for(i = 0;i &lt; iterator; i ++)&#123;</span><br><span class="line">   keyBytes[i] = strToBt(key.substring(i*4+0,i*4+4));</span><br><span class="line"> &#125;</span><br><span class="line"> if(remainder &gt; 0)&#123;</span><br><span class="line">   keyBytes[i] = strToBt(key.substring(i*4+0,leng));</span><br><span class="line"> &#125;    </span><br><span class="line"> return keyBytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* chang the string(it&apos;s length &lt;= 4) into the bit array</span><br><span class="line">* </span><br><span class="line">* return bit array(it&apos;s length = 64)</span><br><span class="line">*/</span><br><span class="line">function strToBt(str)&#123;  </span><br><span class="line"> var leng = str.length;</span><br><span class="line"> var bt = new Array(64);</span><br><span class="line"> if(leng &lt; 4)&#123;</span><br><span class="line">   var i=0,j=0,p=0,q=0;</span><br><span class="line">   for(i = 0;i&lt;leng;i++)&#123;</span><br><span class="line">     var k = str.charCodeAt(i);</span><br><span class="line">     for(j=0;j&lt;16;j++)&#123;      </span><br><span class="line">       var pow=1,m=0;</span><br><span class="line">       for(m=15;m&gt;j;m--)&#123;</span><br><span class="line">         pow *= 2;</span><br><span class="line">       &#125;        </span><br><span class="line">       bt[16*i+j]=parseInt(k/pow)%2;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   for(p = leng;p&lt;4;p++)&#123;</span><br><span class="line">     var k = 0;</span><br><span class="line">     for(q=0;q&lt;16;q++)&#123;      </span><br><span class="line">       var pow=1,m=0;</span><br><span class="line">       for(m=15;m&gt;q;m--)&#123;</span><br><span class="line">         pow *= 2;</span><br><span class="line">       &#125;        </span><br><span class="line">       bt[16*p+q]=parseInt(k/pow)%2;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;  </span><br><span class="line"> &#125;else&#123;</span><br><span class="line">   for(i = 0;i&lt;4;i++)&#123;</span><br><span class="line">     var k = str.charCodeAt(i);</span><br><span class="line">     for(j=0;j&lt;16;j++)&#123;      </span><br><span class="line">       var pow=1;</span><br><span class="line">       for(m=15;m&gt;j;m--)&#123;</span><br><span class="line">         pow *= 2;</span><br><span class="line">       &#125;        </span><br><span class="line">       bt[16*i+j]=parseInt(k/pow)%2;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;  </span><br><span class="line"> &#125;</span><br><span class="line"> return bt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* chang the bit(it&apos;s length = 4) into the hex</span><br><span class="line">* </span><br><span class="line">* return hex</span><br><span class="line">*/</span><br><span class="line">function bt4ToHex(binary) &#123;</span><br><span class="line"> var hex;</span><br><span class="line"> switch (binary) &#123;</span><br><span class="line">   case &quot;0000&quot; : hex = &quot;0&quot;; break;</span><br><span class="line">   case &quot;0001&quot; : hex = &quot;1&quot;; break;</span><br><span class="line">   case &quot;0010&quot; : hex = &quot;2&quot;; break;</span><br><span class="line">   case &quot;0011&quot; : hex = &quot;3&quot;; break;</span><br><span class="line">   case &quot;0100&quot; : hex = &quot;4&quot;; break;</span><br><span class="line">   case &quot;0101&quot; : hex = &quot;5&quot;; break;</span><br><span class="line">   case &quot;0110&quot; : hex = &quot;6&quot;; break;</span><br><span class="line">   case &quot;0111&quot; : hex = &quot;7&quot;; break;</span><br><span class="line">   case &quot;1000&quot; : hex = &quot;8&quot;; break;</span><br><span class="line">   case &quot;1001&quot; : hex = &quot;9&quot;; break;</span><br><span class="line">   case &quot;1010&quot; : hex = &quot;A&quot;; break;</span><br><span class="line">   case &quot;1011&quot; : hex = &quot;B&quot;; break;</span><br><span class="line">   case &quot;1100&quot; : hex = &quot;C&quot;; break;</span><br><span class="line">   case &quot;1101&quot; : hex = &quot;D&quot;; break;</span><br><span class="line">   case &quot;1110&quot; : hex = &quot;E&quot;; break;</span><br><span class="line">   case &quot;1111&quot; : hex = &quot;F&quot;; break;</span><br><span class="line"> &#125;</span><br><span class="line"> return hex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* chang the hex into the bit(it&apos;s length = 4)</span><br><span class="line">* </span><br><span class="line">* return the bit(it&apos;s length = 4)</span><br><span class="line">*/</span><br><span class="line">function hexToBt4(hex) &#123;</span><br><span class="line"> var binary;</span><br><span class="line"> switch (hex) &#123;</span><br><span class="line">   case &quot;0&quot; : binary = &quot;0000&quot;; break;</span><br><span class="line">   case &quot;1&quot; : binary = &quot;0001&quot;; break;</span><br><span class="line">   case &quot;2&quot; : binary = &quot;0010&quot;; break;</span><br><span class="line">   case &quot;3&quot; : binary = &quot;0011&quot;; break;</span><br><span class="line">   case &quot;4&quot; : binary = &quot;0100&quot;; break;</span><br><span class="line">   case &quot;5&quot; : binary = &quot;0101&quot;; break;</span><br><span class="line">   case &quot;6&quot; : binary = &quot;0110&quot;; break;</span><br><span class="line">   case &quot;7&quot; : binary = &quot;0111&quot;; break;</span><br><span class="line">   case &quot;8&quot; : binary = &quot;1000&quot;; break;</span><br><span class="line">   case &quot;9&quot; : binary = &quot;1001&quot;; break;</span><br><span class="line">   case &quot;A&quot; : binary = &quot;1010&quot;; break;</span><br><span class="line">   case &quot;B&quot; : binary = &quot;1011&quot;; break;</span><br><span class="line">   case &quot;C&quot; : binary = &quot;1100&quot;; break;</span><br><span class="line">   case &quot;D&quot; : binary = &quot;1101&quot;; break;</span><br><span class="line">   case &quot;E&quot; : binary = &quot;1110&quot;; break;</span><br><span class="line">   case &quot;F&quot; : binary = &quot;1111&quot;; break;</span><br><span class="line"> &#125;</span><br><span class="line"> return binary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* chang the bit(it&apos;s length = 64) into the string</span><br><span class="line">* </span><br><span class="line">* return string</span><br><span class="line">*/</span><br><span class="line">function byteToString(byteData)&#123;</span><br><span class="line"> var str=&quot;&quot;;</span><br><span class="line"> for(i = 0;i&lt;4;i++)&#123;</span><br><span class="line">   var count=0;</span><br><span class="line">   for(j=0;j&lt;16;j++)&#123;        </span><br><span class="line">     var pow=1;</span><br><span class="line">     for(m=15;m&gt;j;m--)&#123;</span><br><span class="line">       pow*=2;</span><br><span class="line">     &#125;              </span><br><span class="line">     count+=byteData[16*i+j]*pow;</span><br><span class="line">   &#125;        </span><br><span class="line">   if(count != 0)&#123;</span><br><span class="line">     str+=String.fromCharCode(count);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function bt64ToHex(byteData)&#123;</span><br><span class="line"> var hex = &quot;&quot;;</span><br><span class="line"> for(i = 0;i&lt;16;i++)&#123;</span><br><span class="line">   var bt = &quot;&quot;;</span><br><span class="line">   for(j=0;j&lt;4;j++)&#123;    </span><br><span class="line">     bt += byteData[i*4+j];</span><br><span class="line">   &#125;    </span><br><span class="line">   hex+=bt4ToHex(bt);</span><br><span class="line"> &#125;</span><br><span class="line"> return hex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hexToBt64(hex)&#123;</span><br><span class="line"> var binary = &quot;&quot;;</span><br><span class="line"> for(i = 0;i&lt;16;i++)&#123;</span><br><span class="line">   binary+=hexToBt4(hex.substring(i,i+1));</span><br><span class="line"> &#125;</span><br><span class="line"> return binary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* the 64 bit des core arithmetic</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">function enc(dataByte,keyByte)&#123;  </span><br><span class="line"> var keys = generateKeys(keyByte);    </span><br><span class="line"> var ipByte   = initPermute(dataByte);  </span><br><span class="line"> var ipLeft   = new Array(32);</span><br><span class="line"> var ipRight  = new Array(32);</span><br><span class="line"> var tempLeft = new Array(32);</span><br><span class="line"> var i = 0,j = 0,k = 0,m = 0, n = 0;</span><br><span class="line"> for(k = 0;k &lt; 32;k ++)&#123;</span><br><span class="line">   ipLeft[k] = ipByte[k];</span><br><span class="line">   ipRight[k] = ipByte[32+k];</span><br><span class="line"> &#125;    </span><br><span class="line"> for(i = 0;i &lt; 16;i ++)&#123;</span><br><span class="line">   for(j = 0;j &lt; 32;j ++)&#123;</span><br><span class="line">     tempLeft[j] = ipLeft[j];</span><br><span class="line">     ipLeft[j] = ipRight[j];      </span><br><span class="line">   &#125;  </span><br><span class="line">   var key = new Array(48);</span><br><span class="line">   for(m = 0;m &lt; 48;m ++)&#123;</span><br><span class="line">     key[m] = keys[i][m];</span><br><span class="line">   &#125;</span><br><span class="line">   var  tempRight = xor(pPermute(sBoxPermute(xor(expandPermute(ipRight),key))), tempLeft);      </span><br><span class="line">   for(n = 0;n &lt; 32;n ++)&#123;</span><br><span class="line">     ipRight[n] = tempRight[n];</span><br><span class="line">   &#125;  </span><br><span class="line">   </span><br><span class="line"> &#125;  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> var finalData =new Array(64);</span><br><span class="line"> for(i = 0;i &lt; 32;i ++)&#123;</span><br><span class="line">   finalData[i] = ipRight[i];</span><br><span class="line">   finalData[32+i] = ipLeft[i];</span><br><span class="line"> &#125;</span><br><span class="line"> return finallyPermute(finalData);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function dec(dataByte,keyByte)&#123;  </span><br><span class="line"> var keys = generateKeys(keyByte);    </span><br><span class="line"> var ipByte   = initPermute(dataByte);  </span><br><span class="line"> var ipLeft   = new Array(32);</span><br><span class="line"> var ipRight  = new Array(32);</span><br><span class="line"> var tempLeft = new Array(32);</span><br><span class="line"> var i = 0,j = 0,k = 0,m = 0, n = 0;</span><br><span class="line"> for(k = 0;k &lt; 32;k ++)&#123;</span><br><span class="line">   ipLeft[k] = ipByte[k];</span><br><span class="line">   ipRight[k] = ipByte[32+k];</span><br><span class="line"> &#125;  </span><br><span class="line"> for(i = 15;i &gt;= 0;i --)&#123;</span><br><span class="line">   for(j = 0;j &lt; 32;j ++)&#123;</span><br><span class="line">     tempLeft[j] = ipLeft[j];</span><br><span class="line">     ipLeft[j] = ipRight[j];      </span><br><span class="line">   &#125;  </span><br><span class="line">   var key = new Array(48);</span><br><span class="line">   for(m = 0;m &lt; 48;m ++)&#123;</span><br><span class="line">     key[m] = keys[i][m];</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   var  tempRight = xor(pPermute(sBoxPermute(xor(expandPermute(ipRight),key))), tempLeft);      </span><br><span class="line">   for(n = 0;n &lt; 32;n ++)&#123;</span><br><span class="line">     ipRight[n] = tempRight[n];</span><br><span class="line">   &#125;  </span><br><span class="line"> &#125;  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> var finalData =new Array(64);</span><br><span class="line"> for(i = 0;i &lt; 32;i ++)&#123;</span><br><span class="line">   finalData[i] = ipRight[i];</span><br><span class="line">   finalData[32+i] = ipLeft[i];</span><br><span class="line"> &#125;</span><br><span class="line"> return finallyPermute(finalData);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function initPermute(originalData)&#123;</span><br><span class="line"> var ipByte = new Array(64);</span><br><span class="line"> for (i = 0, m = 1, n = 0; i &lt; 4; i++, m += 2, n += 2) &#123;</span><br><span class="line">   for (j = 7, k = 0; j &gt;= 0; j--, k++) &#123;</span><br><span class="line">     ipByte[i * 8 + k] = originalData[j * 8 + m];</span><br><span class="line">     ipByte[i * 8 + k + 32] = originalData[j * 8 + n];</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;    </span><br><span class="line"> return ipByte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function expandPermute(rightData)&#123;  </span><br><span class="line"> var epByte = new Array(48);</span><br><span class="line"> for (i = 0; i &lt; 8; i++) &#123;</span><br><span class="line">   if (i == 0) &#123;</span><br><span class="line">     epByte[i * 6 + 0] = rightData[31];</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">     epByte[i * 6 + 0] = rightData[i * 4 - 1];</span><br><span class="line">   &#125;</span><br><span class="line">   epByte[i * 6 + 1] = rightData[i * 4 + 0];</span><br><span class="line">   epByte[i * 6 + 2] = rightData[i * 4 + 1];</span><br><span class="line">   epByte[i * 6 + 3] = rightData[i * 4 + 2];</span><br><span class="line">   epByte[i * 6 + 4] = rightData[i * 4 + 3];</span><br><span class="line">   if (i == 7) &#123;</span><br><span class="line">     epByte[i * 6 + 5] = rightData[0];</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">     epByte[i * 6 + 5] = rightData[i * 4 + 4];</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;      </span><br><span class="line"> return epByte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function xor(byteOne,byteTwo)&#123;  </span><br><span class="line"> var xorByte = new Array(byteOne.length);</span><br><span class="line"> for(i = 0;i &lt; byteOne.length; i ++)&#123;      </span><br><span class="line">   xorByte[i] = byteOne[i] ^ byteTwo[i];</span><br><span class="line"> &#125;  </span><br><span class="line"> return xorByte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function sBoxPermute(expandByte)&#123;</span><br><span class="line"> </span><br><span class="line">   var sBoxByte = new Array(32);</span><br><span class="line">   var binary = &quot;&quot;;</span><br><span class="line">   var s1 = [</span><br><span class="line">       [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],</span><br><span class="line">       [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],</span><br><span class="line">       [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],</span><br><span class="line">       [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 ]];</span><br><span class="line"></span><br><span class="line">       /* Table - s2 */</span><br><span class="line">   var s2 = [</span><br><span class="line">       [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],</span><br><span class="line">       [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],</span><br><span class="line">       [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],</span><br><span class="line">       [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 ]];</span><br><span class="line"></span><br><span class="line">       /* Table - s3 */</span><br><span class="line">   var s3= [</span><br><span class="line">       [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],</span><br><span class="line">       [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],</span><br><span class="line">       [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],</span><br><span class="line">       [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 ]];</span><br><span class="line">       /* Table - s4 */</span><br><span class="line">   var s4 = [</span><br><span class="line">       [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],</span><br><span class="line">       [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],</span><br><span class="line">       [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],</span><br><span class="line">       [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 ]];</span><br><span class="line"></span><br><span class="line">       /* Table - s5 */</span><br><span class="line">   var s5 = [</span><br><span class="line">       [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],</span><br><span class="line">       [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],</span><br><span class="line">       [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],</span><br><span class="line">       [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 ]];</span><br><span class="line"></span><br><span class="line">       /* Table - s6 */</span><br><span class="line">   var s6 = [</span><br><span class="line">       [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],</span><br><span class="line">       [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],</span><br><span class="line">       [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],</span><br><span class="line">       [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 ]];</span><br><span class="line"></span><br><span class="line">       /* Table - s7 */</span><br><span class="line">   var s7 = [</span><br><span class="line">       [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],</span><br><span class="line">       [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],</span><br><span class="line">       [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],</span><br><span class="line">       [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]];</span><br><span class="line"></span><br><span class="line">       /* Table - s8 */</span><br><span class="line">   var s8 = [</span><br><span class="line">       [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],</span><br><span class="line">       [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],</span><br><span class="line">       [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],</span><br><span class="line">       [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]];</span><br><span class="line">   </span><br><span class="line">   for(m=0;m&lt;8;m++)&#123;</span><br><span class="line">   var i=0,j=0;</span><br><span class="line">   i = expandByte[m*6+0]*2+expandByte[m*6+5];</span><br><span class="line">   j = expandByte[m * 6 + 1] * 2 * 2 * 2 </span><br><span class="line">     + expandByte[m * 6 + 2] * 2* 2 </span><br><span class="line">     + expandByte[m * 6 + 3] * 2 </span><br><span class="line">     + expandByte[m * 6 + 4];</span><br><span class="line">   switch (m) &#123;</span><br><span class="line">     case 0 :</span><br><span class="line">       binary = getBoxBinary(s1[i][j]);</span><br><span class="line">       break;</span><br><span class="line">     case 1 :</span><br><span class="line">       binary = getBoxBinary(s2[i][j]);</span><br><span class="line">       break;</span><br><span class="line">     case 2 :</span><br><span class="line">       binary = getBoxBinary(s3[i][j]);</span><br><span class="line">       break;</span><br><span class="line">     case 3 :</span><br><span class="line">       binary = getBoxBinary(s4[i][j]);</span><br><span class="line">       break;</span><br><span class="line">     case 4 :</span><br><span class="line">       binary = getBoxBinary(s5[i][j]);</span><br><span class="line">       break;</span><br><span class="line">     case 5 :</span><br><span class="line">       binary = getBoxBinary(s6[i][j]);</span><br><span class="line">       break;</span><br><span class="line">     case 6 :</span><br><span class="line">       binary = getBoxBinary(s7[i][j]);</span><br><span class="line">       break;</span><br><span class="line">     case 7 :</span><br><span class="line">       binary = getBoxBinary(s8[i][j]);</span><br><span class="line">       break;</span><br><span class="line">   &#125;      </span><br><span class="line">   sBoxByte[m*4+0] = parseInt(binary.substring(0,1));</span><br><span class="line">   sBoxByte[m*4+1] = parseInt(binary.substring(1,2));</span><br><span class="line">   sBoxByte[m*4+2] = parseInt(binary.substring(2,3));</span><br><span class="line">   sBoxByte[m*4+3] = parseInt(binary.substring(3,4));</span><br><span class="line"> &#125;</span><br><span class="line"> return sBoxByte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function pPermute(sBoxByte)&#123;</span><br><span class="line"> var pBoxPermute = new Array(32);</span><br><span class="line"> pBoxPermute[ 0] = sBoxByte[15]; </span><br><span class="line"> pBoxPermute[ 1] = sBoxByte[ 6]; </span><br><span class="line"> pBoxPermute[ 2] = sBoxByte[19]; </span><br><span class="line"> pBoxPermute[ 3] = sBoxByte[20]; </span><br><span class="line"> pBoxPermute[ 4] = sBoxByte[28]; </span><br><span class="line"> pBoxPermute[ 5] = sBoxByte[11]; </span><br><span class="line"> pBoxPermute[ 6] = sBoxByte[27]; </span><br><span class="line"> pBoxPermute[ 7] = sBoxByte[16]; </span><br><span class="line"> pBoxPermute[ 8] = sBoxByte[ 0]; </span><br><span class="line"> pBoxPermute[ 9] = sBoxByte[14]; </span><br><span class="line"> pBoxPermute[10] = sBoxByte[22]; </span><br><span class="line"> pBoxPermute[11] = sBoxByte[25]; </span><br><span class="line"> pBoxPermute[12] = sBoxByte[ 4]; </span><br><span class="line"> pBoxPermute[13] = sBoxByte[17]; </span><br><span class="line"> pBoxPermute[14] = sBoxByte[30]; </span><br><span class="line"> pBoxPermute[15] = sBoxByte[ 9]; </span><br><span class="line"> pBoxPermute[16] = sBoxByte[ 1]; </span><br><span class="line"> pBoxPermute[17] = sBoxByte[ 7]; </span><br><span class="line"> pBoxPermute[18] = sBoxByte[23]; </span><br><span class="line"> pBoxPermute[19] = sBoxByte[13]; </span><br><span class="line"> pBoxPermute[20] = sBoxByte[31]; </span><br><span class="line"> pBoxPermute[21] = sBoxByte[26]; </span><br><span class="line"> pBoxPermute[22] = sBoxByte[ 2]; </span><br><span class="line"> pBoxPermute[23] = sBoxByte[ 8]; </span><br><span class="line"> pBoxPermute[24] = sBoxByte[18]; </span><br><span class="line"> pBoxPermute[25] = sBoxByte[12]; </span><br><span class="line"> pBoxPermute[26] = sBoxByte[29]; </span><br><span class="line"> pBoxPermute[27] = sBoxByte[ 5]; </span><br><span class="line"> pBoxPermute[28] = sBoxByte[21]; </span><br><span class="line"> pBoxPermute[29] = sBoxByte[10]; </span><br><span class="line"> pBoxPermute[30] = sBoxByte[ 3]; </span><br><span class="line"> pBoxPermute[31] = sBoxByte[24];    </span><br><span class="line"> return pBoxPermute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function finallyPermute(endByte)&#123;    </span><br><span class="line"> var fpByte = new Array(64);  </span><br><span class="line"> fpByte[ 0] = endByte[39]; </span><br><span class="line"> fpByte[ 1] = endByte[ 7]; </span><br><span class="line"> fpByte[ 2] = endByte[47]; </span><br><span class="line"> fpByte[ 3] = endByte[15]; </span><br><span class="line"> fpByte[ 4] = endByte[55]; </span><br><span class="line"> fpByte[ 5] = endByte[23]; </span><br><span class="line"> fpByte[ 6] = endByte[63]; </span><br><span class="line"> fpByte[ 7] = endByte[31]; </span><br><span class="line"> fpByte[ 8] = endByte[38]; </span><br><span class="line"> fpByte[ 9] = endByte[ 6]; </span><br><span class="line"> fpByte[10] = endByte[46]; </span><br><span class="line"> fpByte[11] = endByte[14]; </span><br><span class="line"> fpByte[12] = endByte[54]; </span><br><span class="line"> fpByte[13] = endByte[22]; </span><br><span class="line"> fpByte[14] = endByte[62]; </span><br><span class="line"> fpByte[15] = endByte[30]; </span><br><span class="line"> fpByte[16] = endByte[37]; </span><br><span class="line"> fpByte[17] = endByte[ 5]; </span><br><span class="line"> fpByte[18] = endByte[45]; </span><br><span class="line"> fpByte[19] = endByte[13]; </span><br><span class="line"> fpByte[20] = endByte[53]; </span><br><span class="line"> fpByte[21] = endByte[21]; </span><br><span class="line"> fpByte[22] = endByte[61]; </span><br><span class="line"> fpByte[23] = endByte[29]; </span><br><span class="line"> fpByte[24] = endByte[36]; </span><br><span class="line"> fpByte[25] = endByte[ 4]; </span><br><span class="line"> fpByte[26] = endByte[44]; </span><br><span class="line"> fpByte[27] = endByte[12]; </span><br><span class="line"> fpByte[28] = endByte[52]; </span><br><span class="line"> fpByte[29] = endByte[20]; </span><br><span class="line"> fpByte[30] = endByte[60]; </span><br><span class="line"> fpByte[31] = endByte[28]; </span><br><span class="line"> fpByte[32] = endByte[35]; </span><br><span class="line"> fpByte[33] = endByte[ 3]; </span><br><span class="line"> fpByte[34] = endByte[43]; </span><br><span class="line"> fpByte[35] = endByte[11]; </span><br><span class="line"> fpByte[36] = endByte[51]; </span><br><span class="line"> fpByte[37] = endByte[19]; </span><br><span class="line"> fpByte[38] = endByte[59]; </span><br><span class="line"> fpByte[39] = endByte[27]; </span><br><span class="line"> fpByte[40] = endByte[34]; </span><br><span class="line"> fpByte[41] = endByte[ 2]; </span><br><span class="line"> fpByte[42] = endByte[42]; </span><br><span class="line"> fpByte[43] = endByte[10]; </span><br><span class="line"> fpByte[44] = endByte[50]; </span><br><span class="line"> fpByte[45] = endByte[18]; </span><br><span class="line"> fpByte[46] = endByte[58]; </span><br><span class="line"> fpByte[47] = endByte[26]; </span><br><span class="line"> fpByte[48] = endByte[33]; </span><br><span class="line"> fpByte[49] = endByte[ 1]; </span><br><span class="line"> fpByte[50] = endByte[41]; </span><br><span class="line"> fpByte[51] = endByte[ 9]; </span><br><span class="line"> fpByte[52] = endByte[49]; </span><br><span class="line"> fpByte[53] = endByte[17]; </span><br><span class="line"> fpByte[54] = endByte[57]; </span><br><span class="line"> fpByte[55] = endByte[25]; </span><br><span class="line"> fpByte[56] = endByte[32]; </span><br><span class="line"> fpByte[57] = endByte[ 0]; </span><br><span class="line"> fpByte[58] = endByte[40]; </span><br><span class="line"> fpByte[59] = endByte[ 8]; </span><br><span class="line"> fpByte[60] = endByte[48]; </span><br><span class="line"> fpByte[61] = endByte[16]; </span><br><span class="line"> fpByte[62] = endByte[56]; </span><br><span class="line"> fpByte[63] = endByte[24];</span><br><span class="line"> return fpByte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getBoxBinary(i) &#123;</span><br><span class="line"> var binary = &quot;&quot;;</span><br><span class="line"> switch (i) &#123;</span><br><span class="line">   case 0 :binary = &quot;0000&quot;;break;</span><br><span class="line">   case 1 :binary = &quot;0001&quot;;break;</span><br><span class="line">   case 2 :binary = &quot;0010&quot;;break;</span><br><span class="line">   case 3 :binary = &quot;0011&quot;;break;</span><br><span class="line">   case 4 :binary = &quot;0100&quot;;break;</span><br><span class="line">   case 5 :binary = &quot;0101&quot;;break;</span><br><span class="line">   case 6 :binary = &quot;0110&quot;;break;</span><br><span class="line">   case 7 :binary = &quot;0111&quot;;break;</span><br><span class="line">   case 8 :binary = &quot;1000&quot;;break;</span><br><span class="line">   case 9 :binary = &quot;1001&quot;;break;</span><br><span class="line">   case 10 :binary = &quot;1010&quot;;break;</span><br><span class="line">   case 11 :binary = &quot;1011&quot;;break;</span><br><span class="line">   case 12 :binary = &quot;1100&quot;;break;</span><br><span class="line">   case 13 :binary = &quot;1101&quot;;break;</span><br><span class="line">   case 14 :binary = &quot;1110&quot;;break;</span><br><span class="line">   case 15 :binary = &quot;1111&quot;;break;</span><br><span class="line"> &#125;</span><br><span class="line"> return binary;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">* generate 16 keys for xor</span><br><span class="line">*</span><br><span class="line">*/</span><br><span class="line">function generateKeys(keyByte)&#123;    </span><br><span class="line"> var key   = new Array(56);</span><br><span class="line"> var keys = new Array();  </span><br><span class="line"> </span><br><span class="line"> keys[ 0] = new Array();</span><br><span class="line"> keys[ 1] = new Array();</span><br><span class="line"> keys[ 2] = new Array();</span><br><span class="line"> keys[ 3] = new Array();</span><br><span class="line"> keys[ 4] = new Array();</span><br><span class="line"> keys[ 5] = new Array();</span><br><span class="line"> keys[ 6] = new Array();</span><br><span class="line"> keys[ 7] = new Array();</span><br><span class="line"> keys[ 8] = new Array();</span><br><span class="line"> keys[ 9] = new Array();</span><br><span class="line"> keys[10] = new Array();</span><br><span class="line"> keys[11] = new Array();</span><br><span class="line"> keys[12] = new Array();</span><br><span class="line"> keys[13] = new Array();</span><br><span class="line"> keys[14] = new Array();</span><br><span class="line"> keys[15] = new Array();  </span><br><span class="line"> var loop = [1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1];</span><br><span class="line"></span><br><span class="line"> for(i=0;i&lt;7;i++)&#123;</span><br><span class="line">   for(j=0,k=7;j&lt;8;j++,k--)&#123;</span><br><span class="line">     key[i*8+j]=keyByte[8*k+i];</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;    </span><br><span class="line"> </span><br><span class="line"> var i = 0;</span><br><span class="line"> for(i = 0;i &lt; 16;i ++)&#123;</span><br><span class="line">   var tempLeft=0;</span><br><span class="line">   var tempRight=0;</span><br><span class="line">   for(j = 0; j &lt; loop[i];j ++)&#123;          </span><br><span class="line">     tempLeft = key[0];</span><br><span class="line">     tempRight = key[28];</span><br><span class="line">     for(k = 0;k &lt; 27 ;k ++)&#123;</span><br><span class="line">       key[k] = key[k+1];</span><br><span class="line">       key[28+k] = key[29+k];</span><br><span class="line">     &#125;  </span><br><span class="line">     key[27]=tempLeft;</span><br><span class="line">     key[55]=tempRight;</span><br><span class="line">   &#125;</span><br><span class="line">   var tempKey = new Array(48);</span><br><span class="line">   tempKey[ 0] = key[13];</span><br><span class="line">   tempKey[ 1] = key[16];</span><br><span class="line">   tempKey[ 2] = key[10];</span><br><span class="line">   tempKey[ 3] = key[23];</span><br><span class="line">   tempKey[ 4] = key[ 0];</span><br><span class="line">   tempKey[ 5] = key[ 4];</span><br><span class="line">   tempKey[ 6] = key[ 2];</span><br><span class="line">   tempKey[ 7] = key[27];</span><br><span class="line">   tempKey[ 8] = key[14];</span><br><span class="line">   tempKey[ 9] = key[ 5];</span><br><span class="line">   tempKey[10] = key[20];</span><br><span class="line">   tempKey[11] = key[ 9];</span><br><span class="line">   tempKey[12] = key[22];</span><br><span class="line">   tempKey[13] = key[18];</span><br><span class="line">   tempKey[14] = key[11];</span><br><span class="line">   tempKey[15] = key[ 3];</span><br><span class="line">   tempKey[16] = key[25];</span><br><span class="line">   tempKey[17] = key[ 7];</span><br><span class="line">   tempKey[18] = key[15];</span><br><span class="line">   tempKey[19] = key[ 6];</span><br><span class="line">   tempKey[20] = key[26];</span><br><span class="line">   tempKey[21] = key[19];</span><br><span class="line">   tempKey[22] = key[12];</span><br><span class="line">   tempKey[23] = key[ 1];</span><br><span class="line">   tempKey[24] = key[40];</span><br><span class="line">   tempKey[25] = key[51];</span><br><span class="line">   tempKey[26] = key[30];</span><br><span class="line">   tempKey[27] = key[36];</span><br><span class="line">   tempKey[28] = key[46];</span><br><span class="line">   tempKey[29] = key[54];</span><br><span class="line">   tempKey[30] = key[29];</span><br><span class="line">   tempKey[31] = key[39];</span><br><span class="line">   tempKey[32] = key[50];</span><br><span class="line">   tempKey[33] = key[44];</span><br><span class="line">   tempKey[34] = key[32];</span><br><span class="line">   tempKey[35] = key[47];</span><br><span class="line">   tempKey[36] = key[43];</span><br><span class="line">   tempKey[37] = key[48];</span><br><span class="line">   tempKey[38] = key[38];</span><br><span class="line">   tempKey[39] = key[55];</span><br><span class="line">   tempKey[40] = key[33];</span><br><span class="line">   tempKey[41] = key[52];</span><br><span class="line">   tempKey[42] = key[45];</span><br><span class="line">   tempKey[43] = key[41];</span><br><span class="line">   tempKey[44] = key[49];</span><br><span class="line">   tempKey[45] = key[35];</span><br><span class="line">   tempKey[46] = key[28];</span><br><span class="line">   tempKey[47] = key[31];</span><br><span class="line">   switch(i)&#123;</span><br><span class="line">     case 0: for(m=0;m &lt; 48 ;m++)&#123; keys[ 0][m] = tempKey[m]; &#125; break;</span><br><span class="line">     case 1: for(m=0;m &lt; 48 ;m++)&#123; keys[ 1][m] = tempKey[m]; &#125; break;</span><br><span class="line">     case 2: for(m=0;m &lt; 48 ;m++)&#123; keys[ 2][m] = tempKey[m]; &#125; break;</span><br><span class="line">     case 3: for(m=0;m &lt; 48 ;m++)&#123; keys[ 3][m] = tempKey[m]; &#125; break;</span><br><span class="line">     case 4: for(m=0;m &lt; 48 ;m++)&#123; keys[ 4][m] = tempKey[m]; &#125; break;</span><br><span class="line">     case 5: for(m=0;m &lt; 48 ;m++)&#123; keys[ 5][m] = tempKey[m]; &#125; break;</span><br><span class="line">     case 6: for(m=0;m &lt; 48 ;m++)&#123; keys[ 6][m] = tempKey[m]; &#125; break;</span><br><span class="line">     case 7: for(m=0;m &lt; 48 ;m++)&#123; keys[ 7][m] = tempKey[m]; &#125; break;</span><br><span class="line">     case 8: for(m=0;m &lt; 48 ;m++)&#123; keys[ 8][m] = tempKey[m]; &#125; break;</span><br><span class="line">     case 9: for(m=0;m &lt; 48 ;m++)&#123; keys[ 9][m] = tempKey[m]; &#125; break;</span><br><span class="line">     case 10: for(m=0;m &lt; 48 ;m++)&#123; keys[10][m] = tempKey[m]; &#125; break;</span><br><span class="line">     case 11: for(m=0;m &lt; 48 ;m++)&#123; keys[11][m] = tempKey[m]; &#125; break;</span><br><span class="line">     case 12: for(m=0;m &lt; 48 ;m++)&#123; keys[12][m] = tempKey[m]; &#125; break;</span><br><span class="line">     case 13: for(m=0;m &lt; 48 ;m++)&#123; keys[13][m] = tempKey[m]; &#125; break;</span><br><span class="line">     case 14: for(m=0;m &lt; 48 ;m++)&#123; keys[14][m] = tempKey[m]; &#125; break;</span><br><span class="line">     case 15: for(m=0;m &lt; 48 ;m++)&#123; keys[15][m] = tempKey[m]; &#125; break;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return keys;  </span><br><span class="line">&#125;</span><br><span class="line">//end-------------------------------------------------------------------------------------------------------------</span><br><span class="line">/*</span><br><span class="line">function test() &#123;</span><br><span class="line"> </span><br><span class="line"> var msg = &quot;abcdefgh&quot;;</span><br><span class="line"> var bt = strToBt(msg);</span><br><span class="line"> </span><br><span class="line"> var key = &quot;12345678&quot;;</span><br><span class="line"> var keyB = strToBt(key);</span><br><span class="line">   </span><br><span class="line"> var encByte = enc(bt,keyB);</span><br><span class="line">     </span><br><span class="line"> var enchex  = bt64ToHex(encByte);  </span><br><span class="line"> endata.value=enchex;</span><br><span class="line"> </span><br><span class="line"> var encStr = hexToBt64(enchex);</span><br><span class="line"> alert(&quot;encStr=&quot;+encStr);</span><br><span class="line"> var eByte = new Array();</span><br><span class="line"> for(m=0;m&lt;encStr.length;m++)&#123;</span><br><span class="line">   eByte[m] = parseInt(encStr.substring(m,m+1));</span><br><span class="line"> &#125;</span><br><span class="line"> var decbyte= dec(eByte,keyB)</span><br><span class="line"> var decmsg= byteToString(decbyte);</span><br><span class="line"> alert(&quot;decbyte=&quot;+decbyte);</span><br><span class="line"> alert(&quot;decmsg=&quot;+decmsg);  </span><br><span class="line">&#125;*/</span><br></pre></td></tr></table></figure></p><p>DES.java(对应的Java代码):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.springboot.utils;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * DES加密/解密</span><br><span class="line"> * </span><br><span class="line"> * @Copyright Copyright (c) 2015</span><br><span class="line"> * @author liuyazhuang</span><br><span class="line"> * @see DESCore</span><br><span class="line"> */</span><br><span class="line">public class Des &#123;</span><br><span class="line">    public Des() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Des desObj = new Des();</span><br><span class="line">        String key1 = &quot;1&quot;;</span><br><span class="line">        String key2 = &quot;2&quot;;</span><br><span class="line">        String key3 = &quot;3&quot;;</span><br><span class="line">        String data = &quot;admin&quot;;</span><br><span class="line">        String str = desObj.strEnc(data, key1, key2, key3);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        String dec = desObj.strDec(str, key1, key2, key3);</span><br><span class="line">        System.out.println(dec);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * DES加密/解密</span><br><span class="line">     * </span><br><span class="line">     * @Copyright Copyright (c) 2015</span><br><span class="line">     * @author liuyazhuang</span><br><span class="line">     * @see DESCore</span><br><span class="line">     */</span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">     * encrypt the string to string made up of hex return the encrypted string</span><br><span class="line">     */</span><br><span class="line">    public String strEnc(String data, String firstKey, String secondKey,</span><br><span class="line">            String thirdKey) &#123;</span><br><span class="line"> </span><br><span class="line">        int leng = data.length();</span><br><span class="line">        String encData = &quot;&quot;;</span><br><span class="line">        List firstKeyBt = null, secondKeyBt = null, thirdKeyBt = null;</span><br><span class="line">        int firstLength = 0, secondLength = 0, thirdLength = 0;</span><br><span class="line">        if (firstKey != null &amp;&amp; firstKey != &quot;&quot;) &#123;</span><br><span class="line">            firstKeyBt = getKeyBytes(firstKey);</span><br><span class="line">            firstLength = firstKeyBt.size();</span><br><span class="line">        &#125;</span><br><span class="line">        if (secondKey != null &amp;&amp; secondKey != &quot;&quot;) &#123;</span><br><span class="line">            secondKeyBt = getKeyBytes(secondKey);</span><br><span class="line">            secondLength = secondKeyBt.size();</span><br><span class="line">        &#125;</span><br><span class="line">        if (thirdKey != null &amp;&amp; thirdKey != &quot;&quot;) &#123;</span><br><span class="line">            thirdKeyBt = getKeyBytes(thirdKey);</span><br><span class="line">            thirdLength = thirdKeyBt.size();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        if (leng &gt; 0) &#123;</span><br><span class="line">            if (leng &lt; 4) &#123;</span><br><span class="line">                int[] bt = strToBt(data);</span><br><span class="line">                int[] encByte = null;</span><br><span class="line">                if (firstKey != null &amp;&amp; firstKey != &quot;&quot; &amp;&amp; secondKey != null</span><br><span class="line">                        &amp;&amp; secondKey != &quot;&quot; &amp;&amp; thirdKey != null</span><br><span class="line">                        &amp;&amp; thirdKey != &quot;&quot;) &#123;</span><br><span class="line">                    int[] tempBt;</span><br><span class="line">                    int x, y, z;</span><br><span class="line">                    tempBt = bt;</span><br><span class="line">                    for (x = 0; x &lt; firstLength; x++) &#123;</span><br><span class="line">                        tempBt = enc(tempBt, (int[]) firstKeyBt.get(x));</span><br><span class="line">                    &#125;</span><br><span class="line">                    for (y = 0; y &lt; secondLength; y++) &#123;</span><br><span class="line">                        tempBt = enc(tempBt, (int[]) secondKeyBt.get(y));</span><br><span class="line">                    &#125;</span><br><span class="line">                    for (z = 0; z &lt; thirdLength; z++) &#123;</span><br><span class="line">                        tempBt = enc(tempBt, (int[]) thirdKeyBt.get(z));</span><br><span class="line">                    &#125;</span><br><span class="line">                    encByte = tempBt;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    if (firstKey != null &amp;&amp; firstKey != &quot;&quot; &amp;&amp; secondKey != null</span><br><span class="line">                            &amp;&amp; secondKey != &quot;&quot;) &#123;</span><br><span class="line">                        int[] tempBt;</span><br><span class="line">                        int x, y;</span><br><span class="line">                        tempBt = bt;</span><br><span class="line">                        for (x = 0; x &lt; firstLength; x++) &#123;</span><br><span class="line">                            tempBt = enc(tempBt, (int[]) firstKeyBt.get(x));</span><br><span class="line">                        &#125;</span><br><span class="line">                        for (y = 0; y &lt; secondLength; y++) &#123;</span><br><span class="line">                            tempBt = enc(tempBt, (int[]) secondKeyBt.get(y));</span><br><span class="line">                        &#125;</span><br><span class="line">                        encByte = tempBt;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        if (firstKey != null &amp;&amp; firstKey != &quot;&quot;) &#123;</span><br><span class="line">                            int[] tempBt;</span><br><span class="line">                            int x = 0;</span><br><span class="line">                            tempBt = bt;</span><br><span class="line">                            for (x = 0; x &lt; firstLength; x++) &#123;</span><br><span class="line">                                tempBt = enc(tempBt, (int[]) firstKeyBt.get(x));</span><br><span class="line">                            &#125;</span><br><span class="line">                            encByte = tempBt;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                encData = bt64ToHex(encByte);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                int iterator = (leng / 4);</span><br><span class="line">                int remainder = leng % 4;</span><br><span class="line">                int i = 0;</span><br><span class="line">                for (i = 0; i &lt; iterator; i++) &#123;</span><br><span class="line">                    String tempData = data.substring(i * 4 + 0, i * 4 + 4);</span><br><span class="line">                    int[] tempByte = strToBt(tempData);</span><br><span class="line">                    int[] encByte = null;</span><br><span class="line">                    if (firstKey != null &amp;&amp; firstKey != &quot;&quot; &amp;&amp; secondKey != null</span><br><span class="line">                            &amp;&amp; secondKey != &quot;&quot; &amp;&amp; thirdKey != null</span><br><span class="line">                            &amp;&amp; thirdKey != &quot;&quot;) &#123;</span><br><span class="line">                        int[] tempBt;</span><br><span class="line">                        int x, y, z;</span><br><span class="line">                        tempBt = tempByte;</span><br><span class="line">                        for (x = 0; x &lt; firstLength; x++) &#123;</span><br><span class="line">                            tempBt = enc(tempBt, (int[]) firstKeyBt.get(x));</span><br><span class="line">                        &#125;</span><br><span class="line">                        for (y = 0; y &lt; secondLength; y++) &#123;</span><br><span class="line">                            tempBt = enc(tempBt, (int[]) secondKeyBt.get(y));</span><br><span class="line">                        &#125;</span><br><span class="line">                        for (z = 0; z &lt; thirdLength; z++) &#123;</span><br><span class="line">                            tempBt = enc(tempBt, (int[]) thirdKeyBt.get(z));</span><br><span class="line">                        &#125;</span><br><span class="line">                        encByte = tempBt;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        if (firstKey != null &amp;&amp; firstKey != &quot;&quot;</span><br><span class="line">                                &amp;&amp; secondKey != null &amp;&amp; secondKey != &quot;&quot;) &#123;</span><br><span class="line">                            int[] tempBt;</span><br><span class="line">                            int x, y;</span><br><span class="line">                            tempBt = tempByte;</span><br><span class="line">                            for (x = 0; x &lt; firstLength; x++) &#123;</span><br><span class="line">                                tempBt = enc(tempBt, (int[]) firstKeyBt.get(x));</span><br><span class="line">                            &#125;</span><br><span class="line">                            for (y = 0; y &lt; secondLength; y++) &#123;</span><br><span class="line">                                tempBt = enc(tempBt, (int[]) secondKeyBt.get(y));</span><br><span class="line">                            &#125;</span><br><span class="line">                            encByte = tempBt;</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            if (firstKey != null &amp;&amp; firstKey != &quot;&quot;) &#123;</span><br><span class="line">                                int[] tempBt;</span><br><span class="line">                                int x;</span><br><span class="line">                                tempBt = tempByte;</span><br><span class="line">                                for (x = 0; x &lt; firstLength; x++) &#123;</span><br><span class="line">                                    tempBt = enc(tempBt, (int[]) firstKeyBt</span><br><span class="line">                                            .get(x));</span><br><span class="line">                                &#125;</span><br><span class="line">                                encByte = tempBt;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    encData += bt64ToHex(encByte);</span><br><span class="line">                &#125;</span><br><span class="line">                if (remainder &gt; 0) &#123;</span><br><span class="line">                    String remainderData = data.substring(iterator * 4 + 0,</span><br><span class="line">                            leng);</span><br><span class="line">                    int[] tempByte = strToBt(remainderData);</span><br><span class="line">                    int[] encByte = null;</span><br><span class="line">                    if (firstKey != null &amp;&amp; firstKey != &quot;&quot; &amp;&amp; secondKey != null</span><br><span class="line">                            &amp;&amp; secondKey != &quot;&quot; &amp;&amp; thirdKey != null</span><br><span class="line">                            &amp;&amp; thirdKey != &quot;&quot;) &#123;</span><br><span class="line">                        int[] tempBt;</span><br><span class="line">                        int x, y, z;</span><br><span class="line">                        tempBt = tempByte;</span><br><span class="line">                        for (x = 0; x &lt; firstLength; x++) &#123;</span><br><span class="line">                            tempBt = enc(tempBt, (int[]) firstKeyBt.get(x));</span><br><span class="line">                        &#125;</span><br><span class="line">                        for (y = 0; y &lt; secondLength; y++) &#123;</span><br><span class="line">                            tempBt = enc(tempBt, (int[]) secondKeyBt.get(y));</span><br><span class="line">                        &#125;</span><br><span class="line">                        for (z = 0; z &lt; thirdLength; z++) &#123;</span><br><span class="line">                            tempBt = enc(tempBt, (int[]) thirdKeyBt.get(z));</span><br><span class="line">                        &#125;</span><br><span class="line">                        encByte = tempBt;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        if (firstKey != null &amp;&amp; firstKey != &quot;&quot;</span><br><span class="line">                                &amp;&amp; secondKey != null &amp;&amp; secondKey != &quot;&quot;) &#123;</span><br><span class="line">                            int[] tempBt;</span><br><span class="line">                            int x, y;</span><br><span class="line">                            tempBt = tempByte;</span><br><span class="line">                            for (x = 0; x &lt; firstLength; x++) &#123;</span><br><span class="line">                                tempBt = enc(tempBt, (int[]) firstKeyBt.get(x));</span><br><span class="line">                            &#125;</span><br><span class="line">                            for (y = 0; y &lt; secondLength; y++) &#123;</span><br><span class="line">                                tempBt = enc(tempBt, (int[]) secondKeyBt.get(y));</span><br><span class="line">                            &#125;</span><br><span class="line">                            encByte = tempBt;</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            if (firstKey != null &amp;&amp; firstKey != &quot;&quot;) &#123;</span><br><span class="line">                                int[] tempBt;</span><br><span class="line">                                int x;</span><br><span class="line">                                tempBt = tempByte;</span><br><span class="line">                                for (x = 0; x &lt; firstLength; x++) &#123;</span><br><span class="line">                                    tempBt = enc(tempBt, (int[]) firstKeyBt</span><br><span class="line">                                            .get(x));</span><br><span class="line">                                &#125;</span><br><span class="line">                                encByte = tempBt;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    encData += bt64ToHex(encByte);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return encData;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">     * decrypt the encrypted string to the original string</span><br><span class="line">     * return the original string</span><br><span class="line">     */</span><br><span class="line">    public String strDec(String data, String firstKey, String secondKey,</span><br><span class="line">            String thirdKey) &#123;</span><br><span class="line">        int leng = data.length();</span><br><span class="line">        String decStr = &quot;&quot;;</span><br><span class="line">        List firstKeyBt = null, secondKeyBt = null, thirdKeyBt = null;</span><br><span class="line">        int firstLength = 0, secondLength = 0, thirdLength = 0;</span><br><span class="line">        if (firstKey != null &amp;&amp; firstKey != &quot;&quot;) &#123;</span><br><span class="line">            firstKeyBt = getKeyBytes(firstKey);</span><br><span class="line">            firstLength = firstKeyBt.size();</span><br><span class="line">        &#125;</span><br><span class="line">        if (secondKey != null &amp;&amp; secondKey != &quot;&quot;) &#123;</span><br><span class="line">            secondKeyBt = getKeyBytes(secondKey);</span><br><span class="line">            secondLength = secondKeyBt.size();</span><br><span class="line">        &#125;</span><br><span class="line">        if (thirdKey != null &amp;&amp; thirdKey != &quot;&quot;) &#123;</span><br><span class="line">            thirdKeyBt = getKeyBytes(thirdKey);</span><br><span class="line">            thirdLength = thirdKeyBt.size();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        int iterator = leng / 16;</span><br><span class="line">        int i = 0;</span><br><span class="line">        for (i = 0; i &lt; iterator; i++) &#123;</span><br><span class="line">            String tempData = data.substring(i * 16 + 0, i * 16 + 16);</span><br><span class="line">            String strByte = hexToBt64(tempData);</span><br><span class="line">            int[] intByte = new int[64];</span><br><span class="line">            int j = 0;</span><br><span class="line">            for (j = 0; j &lt; 64; j++) &#123;</span><br><span class="line">                intByte[j] = Integer.parseInt(strByte.substring(j, j + 1));</span><br><span class="line">            &#125;</span><br><span class="line">            int[] decByte = null;</span><br><span class="line">            if (firstKey != null &amp;&amp; firstKey != &quot;&quot; &amp;&amp; secondKey != null</span><br><span class="line">                    &amp;&amp; secondKey != &quot;&quot; &amp;&amp; thirdKey != null &amp;&amp; thirdKey != &quot;&quot;) &#123;</span><br><span class="line">                int[] tempBt;</span><br><span class="line">                int x, y, z;</span><br><span class="line">                tempBt = intByte;</span><br><span class="line">                for (x = thirdLength - 1; x &gt;= 0; x--) &#123;</span><br><span class="line">                    tempBt = dec(tempBt, (int[]) thirdKeyBt.get(x));</span><br><span class="line">                &#125;</span><br><span class="line">                for (y = secondLength - 1; y &gt;= 0; y--) &#123;</span><br><span class="line">                    tempBt = dec(tempBt, (int[]) secondKeyBt.get(y));</span><br><span class="line">                &#125;</span><br><span class="line">                for (z = firstLength - 1; z &gt;= 0; z--) &#123;</span><br><span class="line">                    tempBt = dec(tempBt, (int[]) firstKeyBt.get(z));</span><br><span class="line">                &#125;</span><br><span class="line">                decByte = tempBt;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (firstKey != null &amp;&amp; firstKey != &quot;&quot; &amp;&amp; secondKey != null</span><br><span class="line">                        &amp;&amp; secondKey != &quot;&quot;) &#123;</span><br><span class="line">                    int[] tempBt;</span><br><span class="line">                    int x, y, z;</span><br><span class="line">                    tempBt = intByte;</span><br><span class="line">                    for (x = secondLength - 1; x &gt;= 0; x--) &#123;</span><br><span class="line">                        tempBt = dec(tempBt, (int[]) secondKeyBt.get(x));</span><br><span class="line">                    &#125;</span><br><span class="line">                    for (y = firstLength - 1; y &gt;= 0; y--) &#123;</span><br><span class="line">                        tempBt = dec(tempBt, (int[]) firstKeyBt.get(y));</span><br><span class="line">                    &#125;</span><br><span class="line">                    decByte = tempBt;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    if (firstKey != null &amp;&amp; firstKey != &quot;&quot;) &#123;</span><br><span class="line">                        int[] tempBt;</span><br><span class="line">                        int x, y, z;</span><br><span class="line">                        tempBt = intByte;</span><br><span class="line">                        for (x = firstLength - 1; x &gt;= 0; x--) &#123;</span><br><span class="line">                            tempBt = dec(tempBt, (int[]) firstKeyBt.get(x));</span><br><span class="line">                        &#125;</span><br><span class="line">                        decByte = tempBt;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            decStr += byteToString(decByte);</span><br><span class="line">        &#125;</span><br><span class="line">        return decStr;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">     * chang the string into the bit array</span><br><span class="line">     * </span><br><span class="line">     * return bit array(it&apos;s length % 64 = 0)</span><br><span class="line">     */</span><br><span class="line">    public List getKeyBytes(String key) &#123;</span><br><span class="line">        List keyBytes = new ArrayList();</span><br><span class="line">        int leng = key.length();</span><br><span class="line">        int iterator = (leng / 4);</span><br><span class="line">        int remainder = leng % 4;</span><br><span class="line">        int i = 0;</span><br><span class="line">        for (i = 0; i &lt; iterator; i++) &#123;</span><br><span class="line">            keyBytes.add(i, strToBt(key.substring(i * 4 + 0, i * 4 + 4)));</span><br><span class="line">        &#125;</span><br><span class="line">        if (remainder &gt; 0) &#123;</span><br><span class="line">            // keyBytes[i] = strToBt(key.substring(i*4+0,leng));</span><br><span class="line">            keyBytes.add(i, strToBt(key.substring(i * 4 + 0, leng)));</span><br><span class="line">        &#125;</span><br><span class="line">        return keyBytes;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">     * chang the string(it&apos;s length &lt;= 4) into the bit array</span><br><span class="line">     * </span><br><span class="line">     * return bit array(it&apos;s length = 64)</span><br><span class="line">     */</span><br><span class="line">    public int[] strToBt(String str) &#123;</span><br><span class="line">        int leng = str.length();</span><br><span class="line">        int[] bt = new int[64];</span><br><span class="line">        if (leng &lt; 4) &#123;</span><br><span class="line">            int i = 0, j = 0, p = 0, q = 0;</span><br><span class="line">            for (i = 0; i &lt; leng; i++) &#123;</span><br><span class="line">                int k = str.charAt(i);</span><br><span class="line">                for (j = 0; j &lt; 16; j++) &#123;</span><br><span class="line">                    int pow = 1, m = 0;</span><br><span class="line">                    for (m = 15; m &gt; j; m--) &#123;</span><br><span class="line">                        pow *= 2;</span><br><span class="line">                    &#125;</span><br><span class="line">                    // bt.set(16*i+j,&quot;&quot;+(k/pow)%2));</span><br><span class="line">                    bt[16 * i + j] = (k / pow) % 2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            for (p = leng; p &lt; 4; p++) &#123;</span><br><span class="line">                int k = 0;</span><br><span class="line">                for (q = 0; q &lt; 16; q++) &#123;</span><br><span class="line">                    int pow = 1, m = 0;</span><br><span class="line">                    for (m = 15; m &gt; q; m--) &#123;</span><br><span class="line">                        pow *= 2;</span><br><span class="line">                    &#125;</span><br><span class="line">                    // bt[16*p+q]=parseInt(k/pow)%2;</span><br><span class="line">                    // bt.add(16*p+q,&quot;&quot;+((k/pow)%2));</span><br><span class="line">                    bt[16 * p + q] = (k / pow) % 2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            for (int i = 0; i &lt; 4; i++) &#123;</span><br><span class="line">                int k = str.charAt(i);</span><br><span class="line">                for (int j = 0; j &lt; 16; j++) &#123;</span><br><span class="line">                    int pow = 1;</span><br><span class="line">                    for (int m = 15; m &gt; j; m--) &#123;</span><br><span class="line">                        pow *= 2;</span><br><span class="line">                    &#125;</span><br><span class="line">                    // bt[16*i+j]=parseInt(k/pow)%2;</span><br><span class="line">                    // bt.add(16*i+j,&quot;&quot;+((k/pow)%2));</span><br><span class="line">                    bt[16 * i + j] = (k / pow) % 2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return bt;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">     * chang the bit(it&apos;s length = 4) into the hex</span><br><span class="line">     * </span><br><span class="line">     * return hex</span><br><span class="line">     */</span><br><span class="line">    public String bt4ToHex(String binary) &#123;</span><br><span class="line">        String hex = &quot;&quot;;</span><br><span class="line">        if (binary.equalsIgnoreCase(&quot;0000&quot;)) &#123;</span><br><span class="line">            hex = &quot;0&quot;;</span><br><span class="line">        &#125; else if (binary.equalsIgnoreCase(&quot;0001&quot;)) &#123;</span><br><span class="line">            hex = &quot;1&quot;;</span><br><span class="line">        &#125; else if (binary.equalsIgnoreCase(&quot;0010&quot;)) &#123;</span><br><span class="line">            hex = &quot;2&quot;;</span><br><span class="line">        &#125; else if (binary.equalsIgnoreCase(&quot;0011&quot;)) &#123;</span><br><span class="line">            hex = &quot;3&quot;;</span><br><span class="line">        &#125; else if (binary.equalsIgnoreCase(&quot;0100&quot;)) &#123;</span><br><span class="line">            hex = &quot;4&quot;;</span><br><span class="line">        &#125; else if (binary.equalsIgnoreCase(&quot;0101&quot;)) &#123;</span><br><span class="line">            hex = &quot;5&quot;;</span><br><span class="line">        &#125; else if (binary.equalsIgnoreCase(&quot;0110&quot;)) &#123;</span><br><span class="line">            hex = &quot;6&quot;;</span><br><span class="line">        &#125; else if (binary.equalsIgnoreCase(&quot;0111&quot;)) &#123;</span><br><span class="line">            hex = &quot;7&quot;;</span><br><span class="line">        &#125; else if (binary.equalsIgnoreCase(&quot;1000&quot;)) &#123;</span><br><span class="line">            hex = &quot;8&quot;;</span><br><span class="line">        &#125; else if (binary.equalsIgnoreCase(&quot;1001&quot;)) &#123;</span><br><span class="line">            hex = &quot;9&quot;;</span><br><span class="line">        &#125; else if (binary.equalsIgnoreCase(&quot;1010&quot;)) &#123;</span><br><span class="line">            hex = &quot;A&quot;;</span><br><span class="line">        &#125; else if (binary.equalsIgnoreCase(&quot;1011&quot;)) &#123;</span><br><span class="line">            hex = &quot;B&quot;;</span><br><span class="line">        &#125; else if (binary.equalsIgnoreCase(&quot;1100&quot;)) &#123;</span><br><span class="line">            hex = &quot;C&quot;;</span><br><span class="line">        &#125; else if (binary.equalsIgnoreCase(&quot;1101&quot;)) &#123;</span><br><span class="line">            hex = &quot;D&quot;;</span><br><span class="line">        &#125; else if (binary.equalsIgnoreCase(&quot;1110&quot;)) &#123;</span><br><span class="line">            hex = &quot;E&quot;;</span><br><span class="line">        &#125; else if (binary.equalsIgnoreCase(&quot;1111&quot;)) &#123;</span><br><span class="line">            hex = &quot;F&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        return hex;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">     * chang the hex into the bit(it&apos;s length = 4)</span><br><span class="line">     * </span><br><span class="line">     * return the bit(it&apos;s length = 4)</span><br><span class="line">     */</span><br><span class="line">    public String hexToBt4(String hex) &#123;</span><br><span class="line">        String binary = &quot;&quot;;</span><br><span class="line">        if (hex.equalsIgnoreCase(&quot;0&quot;)) &#123;</span><br><span class="line">            binary = &quot;0000&quot;;</span><br><span class="line">        &#125; else if (hex.equalsIgnoreCase(&quot;1&quot;)) &#123;</span><br><span class="line">            binary = &quot;0001&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        if (hex.equalsIgnoreCase(&quot;2&quot;)) &#123;</span><br><span class="line">            binary = &quot;0010&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        if (hex.equalsIgnoreCase(&quot;3&quot;)) &#123;</span><br><span class="line">            binary = &quot;0011&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        if (hex.equalsIgnoreCase(&quot;4&quot;)) &#123;</span><br><span class="line">            binary = &quot;0100&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        if (hex.equalsIgnoreCase(&quot;5&quot;)) &#123;</span><br><span class="line">            binary = &quot;0101&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        if (hex.equalsIgnoreCase(&quot;6&quot;)) &#123;</span><br><span class="line">            binary = &quot;0110&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        if (hex.equalsIgnoreCase(&quot;7&quot;)) &#123;</span><br><span class="line">            binary = &quot;0111&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        if (hex.equalsIgnoreCase(&quot;8&quot;)) &#123;</span><br><span class="line">            binary = &quot;1000&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        if (hex.equalsIgnoreCase(&quot;9&quot;)) &#123;</span><br><span class="line">            binary = &quot;1001&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        if (hex.equalsIgnoreCase(&quot;A&quot;)) &#123;</span><br><span class="line">            binary = &quot;1010&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        if (hex.equalsIgnoreCase(&quot;B&quot;)) &#123;</span><br><span class="line">            binary = &quot;1011&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        if (hex.equalsIgnoreCase(&quot;C&quot;)) &#123;</span><br><span class="line">            binary = &quot;1100&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        if (hex.equalsIgnoreCase(&quot;D&quot;)) &#123;</span><br><span class="line">            binary = &quot;1101&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        if (hex.equalsIgnoreCase(&quot;E&quot;)) &#123;</span><br><span class="line">            binary = &quot;1110&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        if (hex.equalsIgnoreCase(&quot;F&quot;)) &#123;</span><br><span class="line">            binary = &quot;1111&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return binary;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">     * chang the bit(it&apos;s length = 64) into the string</span><br><span class="line">     * </span><br><span class="line">     * return string</span><br><span class="line">     */</span><br><span class="line">    public String byteToString(int[] byteData) &#123;</span><br><span class="line">        String str = &quot;&quot;;</span><br><span class="line">        for (int i = 0; i &lt; 4; i++) &#123;</span><br><span class="line">            int count = 0;</span><br><span class="line">            for (int j = 0; j &lt; 16; j++) &#123;</span><br><span class="line">                int pow = 1;</span><br><span class="line">                for (int m = 15; m &gt; j; m--) &#123;</span><br><span class="line">                    pow *= 2;</span><br><span class="line">                &#125;</span><br><span class="line">                count += byteData[16 * i + j] * pow;</span><br><span class="line">            &#125;</span><br><span class="line">            if (count != 0) &#123;</span><br><span class="line">                str += &quot;&quot; + (char) (count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return str;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String bt64ToHex(int[] byteData) &#123;</span><br><span class="line">        String hex = &quot;&quot;;</span><br><span class="line">        for (int i = 0; i &lt; 16; i++) &#123;</span><br><span class="line">            String bt = &quot;&quot;;</span><br><span class="line">            for (int j = 0; j &lt; 4; j++) &#123;</span><br><span class="line">                bt += byteData[i * 4 + j];</span><br><span class="line">            &#125;</span><br><span class="line">            hex += bt4ToHex(bt);</span><br><span class="line">        &#125;</span><br><span class="line">        return hex;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String hexToBt64(String hex) &#123;</span><br><span class="line">        String binary = &quot;&quot;;</span><br><span class="line">        for (int i = 0; i &lt; 16; i++) &#123;</span><br><span class="line">            binary += hexToBt4(hex.substring(i, i + 1));</span><br><span class="line">        &#125;</span><br><span class="line">        return binary;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">     * the 64 bit des core arithmetic</span><br><span class="line">     */</span><br><span class="line"> </span><br><span class="line">    public int[] enc(int[] dataByte, int[] keyByte) &#123;</span><br><span class="line">        int[][] keys = generateKeys(keyByte);</span><br><span class="line">        int[] ipByte = initPermute(dataByte);</span><br><span class="line">        int[] ipLeft = new int[32];</span><br><span class="line">        int[] ipRight = new int[32];</span><br><span class="line">        int[] tempLeft = new int[32];</span><br><span class="line">        int i = 0, j = 0, k = 0, m = 0, n = 0;</span><br><span class="line">        for (k = 0; k &lt; 32; k++) &#123;</span><br><span class="line">            ipLeft[k] = ipByte[k];</span><br><span class="line">            ipRight[k] = ipByte[32 + k];</span><br><span class="line">        &#125;</span><br><span class="line">        for (i = 0; i &lt; 16; i++) &#123;</span><br><span class="line">            for (j = 0; j &lt; 32; j++) &#123;</span><br><span class="line">                tempLeft[j] = ipLeft[j];</span><br><span class="line">                ipLeft[j] = ipRight[j];</span><br><span class="line">            &#125;</span><br><span class="line">            int[] key = new int[48];</span><br><span class="line">            for (m = 0; m &lt; 48; m++) &#123;</span><br><span class="line">                key[m] = keys[i][m];</span><br><span class="line">            &#125;</span><br><span class="line">            int[] tempRight = xor(pPermute(sBoxPermute(xor(</span><br><span class="line">                    expandPermute(ipRight), key))), tempLeft);</span><br><span class="line">            for (n = 0; n &lt; 32; n++) &#123;</span><br><span class="line">                ipRight[n] = tempRight[n];</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        int[] finalData = new int[64];</span><br><span class="line">        for (i = 0; i &lt; 32; i++) &#123;</span><br><span class="line">            finalData[i] = ipRight[i];</span><br><span class="line">            finalData[32 + i] = ipLeft[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return finallyPermute(finalData);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public int[] dec(int[] dataByte, int[] keyByte) &#123;</span><br><span class="line">        int[][] keys = generateKeys(keyByte);</span><br><span class="line">        int[] ipByte = initPermute(dataByte);</span><br><span class="line">        int[] ipLeft = new int[32];</span><br><span class="line">        int[] ipRight = new int[32];</span><br><span class="line">        int[] tempLeft = new int[32];</span><br><span class="line">        int i = 0, j = 0, k = 0, m = 0, n = 0;</span><br><span class="line">        for (k = 0; k &lt; 32; k++) &#123;</span><br><span class="line">            ipLeft[k] = ipByte[k];</span><br><span class="line">            ipRight[k] = ipByte[32 + k];</span><br><span class="line">        &#125;</span><br><span class="line">        for (i = 15; i &gt;= 0; i--) &#123;</span><br><span class="line">            for (j = 0; j &lt; 32; j++) &#123;</span><br><span class="line">                tempLeft[j] = ipLeft[j];</span><br><span class="line">                ipLeft[j] = ipRight[j];</span><br><span class="line">            &#125;</span><br><span class="line">            int[] key = new int[48];</span><br><span class="line">            for (m = 0; m &lt; 48; m++) &#123;</span><br><span class="line">                key[m] = keys[i][m];</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            int[] tempRight = xor(pPermute(sBoxPermute(xor(</span><br><span class="line">                    expandPermute(ipRight), key))), tempLeft);</span><br><span class="line">            for (n = 0; n &lt; 32; n++) &#123;</span><br><span class="line">                ipRight[n] = tempRight[n];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        int[] finalData = new int[64];</span><br><span class="line">        for (i = 0; i &lt; 32; i++) &#123;</span><br><span class="line">            finalData[i] = ipRight[i];</span><br><span class="line">            finalData[32 + i] = ipLeft[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return finallyPermute(finalData);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public int[] initPermute(int[] originalData) &#123;</span><br><span class="line">        int[] ipByte = new int[64];</span><br><span class="line">        int i = 0, m = 1, n = 0, j, k;</span><br><span class="line">        for (i = 0, m = 1, n = 0; i &lt; 4; i++, m += 2, n += 2) &#123;</span><br><span class="line">            for (j = 7, k = 0; j &gt;= 0; j--, k++) &#123;</span><br><span class="line">                ipByte[i * 8 + k] = originalData[j * 8 + m];</span><br><span class="line">                ipByte[i * 8 + k + 32] = originalData[j * 8 + n];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ipByte;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public int[] expandPermute(int[] rightData) &#123;</span><br><span class="line">        int[] epByte = new int[48];</span><br><span class="line">        int i, j;</span><br><span class="line">        for (i = 0; i &lt; 8; i++) &#123;</span><br><span class="line">            if (i == 0) &#123;</span><br><span class="line">                epByte[i * 6 + 0] = rightData[31];</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                epByte[i * 6 + 0] = rightData[i * 4 - 1];</span><br><span class="line">            &#125;</span><br><span class="line">            epByte[i * 6 + 1] = rightData[i * 4 + 0];</span><br><span class="line">            epByte[i * 6 + 2] = rightData[i * 4 + 1];</span><br><span class="line">            epByte[i * 6 + 3] = rightData[i * 4 + 2];</span><br><span class="line">            epByte[i * 6 + 4] = rightData[i * 4 + 3];</span><br><span class="line">            if (i == 7) &#123;</span><br><span class="line">                epByte[i * 6 + 5] = rightData[0];</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                epByte[i * 6 + 5] = rightData[i * 4 + 4];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return epByte;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public int[] xor(int[] byteOne, int[] byteTwo) &#123;</span><br><span class="line">        // var xorByte = new Array(byteOne.length);</span><br><span class="line">        // for(int i = 0;i &lt; byteOne.length; i ++)&#123;</span><br><span class="line">        // xorByte[i] = byteOne[i] ^ byteTwo[i];</span><br><span class="line">        // &#125;</span><br><span class="line">        // return xorByte;</span><br><span class="line">        int[] xorByte = new int[byteOne.length];</span><br><span class="line">        for (int i = 0; i &lt; byteOne.length; i++) &#123;</span><br><span class="line">            xorByte[i] = byteOne[i] ^ byteTwo[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return xorByte;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public int[] sBoxPermute(int[] expandByte) &#123;</span><br><span class="line"> </span><br><span class="line">        // var sBoxByte = new Array(32);</span><br><span class="line">        int[] sBoxByte = new int[32];</span><br><span class="line">        String binary = &quot;&quot;;</span><br><span class="line">        int[][] s1 = &#123;</span><br><span class="line">                &#123; 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7 &#125;,</span><br><span class="line">                &#123; 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8 &#125;,</span><br><span class="line">                &#123; 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0 &#125;,</span><br><span class="line">                &#123; 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 &#125; &#125;;</span><br><span class="line"> </span><br><span class="line">        /* Table - s2 */</span><br><span class="line">        int[][] s2 = &#123;</span><br><span class="line">                &#123; 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10 &#125;,</span><br><span class="line">                &#123; 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5 &#125;,</span><br><span class="line">                &#123; 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15 &#125;,</span><br><span class="line">                &#123; 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 &#125; &#125;;</span><br><span class="line"> </span><br><span class="line">        /* Table - s3 */</span><br><span class="line">        int[][] s3 = &#123;</span><br><span class="line">                &#123; 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8 &#125;,</span><br><span class="line">                &#123; 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1 &#125;,</span><br><span class="line">                &#123; 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7 &#125;,</span><br><span class="line">                &#123; 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 &#125; &#125;;</span><br><span class="line">        /* Table - s4 */</span><br><span class="line">        int[][] s4 = &#123;</span><br><span class="line">                &#123; 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15 &#125;,</span><br><span class="line">                &#123; 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9 &#125;,</span><br><span class="line">                &#123; 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4 &#125;,</span><br><span class="line">                &#123; 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 &#125; &#125;;</span><br><span class="line"> </span><br><span class="line">        /* Table - s5 */</span><br><span class="line">        int[][] s5 = &#123;</span><br><span class="line">                &#123; 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9 &#125;,</span><br><span class="line">                &#123; 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6 &#125;,</span><br><span class="line">                &#123; 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14 &#125;,</span><br><span class="line">                &#123; 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 &#125; &#125;;</span><br><span class="line"> </span><br><span class="line">        /* Table - s6 */</span><br><span class="line">        int[][] s6 = &#123;</span><br><span class="line">                &#123; 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11 &#125;,</span><br><span class="line">                &#123; 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8 &#125;,</span><br><span class="line">                &#123; 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6 &#125;,</span><br><span class="line">                &#123; 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 &#125; &#125;;</span><br><span class="line"> </span><br><span class="line">        /* Table - s7 */</span><br><span class="line">        int[][] s7 = &#123;</span><br><span class="line">                &#123; 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1 &#125;,</span><br><span class="line">                &#123; 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6 &#125;,</span><br><span class="line">                &#123; 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2 &#125;,</span><br><span class="line">                &#123; 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 &#125; &#125;;</span><br><span class="line"> </span><br><span class="line">        /* Table - s8 */</span><br><span class="line">        int[][] s8 = &#123;</span><br><span class="line">                &#123; 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7 &#125;,</span><br><span class="line">                &#123; 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2 &#125;,</span><br><span class="line">                &#123; 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8 &#125;,</span><br><span class="line">                &#123; 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 &#125; &#125;;</span><br><span class="line"> </span><br><span class="line">        for (int m = 0; m &lt; 8; m++) &#123;</span><br><span class="line">            int i = 0, j = 0;</span><br><span class="line">            i = expandByte[m * 6 + 0] * 2 + expandByte[m * 6 + 5];</span><br><span class="line">            j = expandByte[m * 6 + 1] * 2 * 2 * 2 + expandByte[m * 6 + 2] * 2</span><br><span class="line">                    * 2 + expandByte[m * 6 + 3] * 2 + expandByte[m * 6 + 4];</span><br><span class="line">            switch (m) &#123;</span><br><span class="line">            case 0:</span><br><span class="line">                binary = getBoxBinary(s1[i][j]);</span><br><span class="line">                break;</span><br><span class="line">            case 1:</span><br><span class="line">                binary = getBoxBinary(s2[i][j]);</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">                binary = getBoxBinary(s3[i][j]);</span><br><span class="line">                break;</span><br><span class="line">            case 3:</span><br><span class="line">                binary = getBoxBinary(s4[i][j]);</span><br><span class="line">                break;</span><br><span class="line">            case 4:</span><br><span class="line">                binary = getBoxBinary(s5[i][j]);</span><br><span class="line">                break;</span><br><span class="line">            case 5:</span><br><span class="line">                binary = getBoxBinary(s6[i][j]);</span><br><span class="line">                break;</span><br><span class="line">            case 6:</span><br><span class="line">                binary = getBoxBinary(s7[i][j]);</span><br><span class="line">                break;</span><br><span class="line">            case 7:</span><br><span class="line">                binary = getBoxBinary(s8[i][j]);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            sBoxByte[m * 4 + 0] = Integer.parseInt(binary.substring(0, 1));</span><br><span class="line">            sBoxByte[m * 4 + 1] = Integer.parseInt(binary.substring(1, 2));</span><br><span class="line">            sBoxByte[m * 4 + 2] = Integer.parseInt(binary.substring(2, 3));</span><br><span class="line">            sBoxByte[m * 4 + 3] = Integer.parseInt(binary.substring(3, 4));</span><br><span class="line">        &#125;</span><br><span class="line">        return sBoxByte;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public int[] pPermute(int[] sBoxByte) &#123;</span><br><span class="line">        int[] pBoxPermute = new int[32];</span><br><span class="line">        pBoxPermute[0] = sBoxByte[15];</span><br><span class="line">        pBoxPermute[1] = sBoxByte[6];</span><br><span class="line">        pBoxPermute[2] = sBoxByte[19];</span><br><span class="line">        pBoxPermute[3] = sBoxByte[20];</span><br><span class="line">        pBoxPermute[4] = sBoxByte[28];</span><br><span class="line">        pBoxPermute[5] = sBoxByte[11];</span><br><span class="line">        pBoxPermute[6] = sBoxByte[27];</span><br><span class="line">        pBoxPermute[7] = sBoxByte[16];</span><br><span class="line">        pBoxPermute[8] = sBoxByte[0];</span><br><span class="line">        pBoxPermute[9] = sBoxByte[14];</span><br><span class="line">        pBoxPermute[10] = sBoxByte[22];</span><br><span class="line">        pBoxPermute[11] = sBoxByte[25];</span><br><span class="line">        pBoxPermute[12] = sBoxByte[4];</span><br><span class="line">        pBoxPermute[13] = sBoxByte[17];</span><br><span class="line">        pBoxPermute[14] = sBoxByte[30];</span><br><span class="line">        pBoxPermute[15] = sBoxByte[9];</span><br><span class="line">        pBoxPermute[16] = sBoxByte[1];</span><br><span class="line">        pBoxPermute[17] = sBoxByte[7];</span><br><span class="line">        pBoxPermute[18] = sBoxByte[23];</span><br><span class="line">        pBoxPermute[19] = sBoxByte[13];</span><br><span class="line">        pBoxPermute[20] = sBoxByte[31];</span><br><span class="line">        pBoxPermute[21] = sBoxByte[26];</span><br><span class="line">        pBoxPermute[22] = sBoxByte[2];</span><br><span class="line">        pBoxPermute[23] = sBoxByte[8];</span><br><span class="line">        pBoxPermute[24] = sBoxByte[18];</span><br><span class="line">        pBoxPermute[25] = sBoxByte[12];</span><br><span class="line">        pBoxPermute[26] = sBoxByte[29];</span><br><span class="line">        pBoxPermute[27] = sBoxByte[5];</span><br><span class="line">        pBoxPermute[28] = sBoxByte[21];</span><br><span class="line">        pBoxPermute[29] = sBoxByte[10];</span><br><span class="line">        pBoxPermute[30] = sBoxByte[3];</span><br><span class="line">        pBoxPermute[31] = sBoxByte[24];</span><br><span class="line">        return pBoxPermute;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public int[] finallyPermute(int[] endByte) &#123;</span><br><span class="line">        int[] fpByte = new int[64];</span><br><span class="line">        fpByte[0] = endByte[39];</span><br><span class="line">        fpByte[1] = endByte[7];</span><br><span class="line">        fpByte[2] = endByte[47];</span><br><span class="line">        fpByte[3] = endByte[15];</span><br><span class="line">        fpByte[4] = endByte[55];</span><br><span class="line">        fpByte[5] = endByte[23];</span><br><span class="line">        fpByte[6] = endByte[63];</span><br><span class="line">        fpByte[7] = endByte[31];</span><br><span class="line">        fpByte[8] = endByte[38];</span><br><span class="line">        fpByte[9] = endByte[6];</span><br><span class="line">        fpByte[10] = endByte[46];</span><br><span class="line">        fpByte[11] = endByte[14];</span><br><span class="line">        fpByte[12] = endByte[54];</span><br><span class="line">        fpByte[13] = endByte[22];</span><br><span class="line">        fpByte[14] = endByte[62];</span><br><span class="line">        fpByte[15] = endByte[30];</span><br><span class="line">        fpByte[16] = endByte[37];</span><br><span class="line">        fpByte[17] = endByte[5];</span><br><span class="line">        fpByte[18] = endByte[45];</span><br><span class="line">        fpByte[19] = endByte[13];</span><br><span class="line">        fpByte[20] = endByte[53];</span><br><span class="line">        fpByte[21] = endByte[21];</span><br><span class="line">        fpByte[22] = endByte[61];</span><br><span class="line">        fpByte[23] = endByte[29];</span><br><span class="line">        fpByte[24] = endByte[36];</span><br><span class="line">        fpByte[25] = endByte[4];</span><br><span class="line">        fpByte[26] = endByte[44];</span><br><span class="line">        fpByte[27] = endByte[12];</span><br><span class="line">        fpByte[28] = endByte[52];</span><br><span class="line">        fpByte[29] = endByte[20];</span><br><span class="line">        fpByte[30] = endByte[60];</span><br><span class="line">        fpByte[31] = endByte[28];</span><br><span class="line">        fpByte[32] = endByte[35];</span><br><span class="line">        fpByte[33] = endByte[3];</span><br><span class="line">        fpByte[34] = endByte[43];</span><br><span class="line">        fpByte[35] = endByte[11];</span><br><span class="line">        fpByte[36] = endByte[51];</span><br><span class="line">        fpByte[37] = endByte[19];</span><br><span class="line">        fpByte[38] = endByte[59];</span><br><span class="line">        fpByte[39] = endByte[27];</span><br><span class="line">        fpByte[40] = endByte[34];</span><br><span class="line">        fpByte[41] = endByte[2];</span><br><span class="line">        fpByte[42] = endByte[42];</span><br><span class="line">        fpByte[43] = endByte[10];</span><br><span class="line">        fpByte[44] = endByte[50];</span><br><span class="line">        fpByte[45] = endByte[18];</span><br><span class="line">        fpByte[46] = endByte[58];</span><br><span class="line">        fpByte[47] = endByte[26];</span><br><span class="line">        fpByte[48] = endByte[33];</span><br><span class="line">        fpByte[49] = endByte[1];</span><br><span class="line">        fpByte[50] = endByte[41];</span><br><span class="line">        fpByte[51] = endByte[9];</span><br><span class="line">        fpByte[52] = endByte[49];</span><br><span class="line">        fpByte[53] = endByte[17];</span><br><span class="line">        fpByte[54] = endByte[57];</span><br><span class="line">        fpByte[55] = endByte[25];</span><br><span class="line">        fpByte[56] = endByte[32];</span><br><span class="line">        fpByte[57] = endByte[0];</span><br><span class="line">        fpByte[58] = endByte[40];</span><br><span class="line">        fpByte[59] = endByte[8];</span><br><span class="line">        fpByte[60] = endByte[48];</span><br><span class="line">        fpByte[61] = endByte[16];</span><br><span class="line">        fpByte[62] = endByte[56];</span><br><span class="line">        fpByte[63] = endByte[24];</span><br><span class="line">        return fpByte;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getBoxBinary(int i) &#123;</span><br><span class="line">        String binary = &quot;&quot;;</span><br><span class="line">        switch (i) &#123;</span><br><span class="line">        case 0:</span><br><span class="line">            binary = &quot;0000&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 1:</span><br><span class="line">            binary = &quot;0001&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 2:</span><br><span class="line">            binary = &quot;0010&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 3:</span><br><span class="line">            binary = &quot;0011&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 4:</span><br><span class="line">            binary = &quot;0100&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 5:</span><br><span class="line">            binary = &quot;0101&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 6:</span><br><span class="line">            binary = &quot;0110&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 7:</span><br><span class="line">            binary = &quot;0111&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 8:</span><br><span class="line">            binary = &quot;1000&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 9:</span><br><span class="line">            binary = &quot;1001&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 10:</span><br><span class="line">            binary = &quot;1010&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 11:</span><br><span class="line">            binary = &quot;1011&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 12:</span><br><span class="line">            binary = &quot;1100&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 13:</span><br><span class="line">            binary = &quot;1101&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 14:</span><br><span class="line">            binary = &quot;1110&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 15:</span><br><span class="line">            binary = &quot;1111&quot;;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        return binary;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">     * generate 16 keys for xor</span><br><span class="line">     * </span><br><span class="line">     */</span><br><span class="line">    public int[][] generateKeys(int[] keyByte) &#123;</span><br><span class="line">        int[] key = new int[56];</span><br><span class="line">        int[][] keys = new int[16][48];</span><br><span class="line"> </span><br><span class="line">        // keys[ 0] = new Array();</span><br><span class="line">        // keys[ 1] = new Array();</span><br><span class="line">        // keys[ 2] = new Array();</span><br><span class="line">        // keys[ 3] = new Array();</span><br><span class="line">        // keys[ 4] = new Array();</span><br><span class="line">        // keys[ 5] = new Array();</span><br><span class="line">        // keys[ 6] = new Array();</span><br><span class="line">        // keys[ 7] = new Array();</span><br><span class="line">        // keys[ 8] = new Array();</span><br><span class="line">        // keys[ 9] = new Array();</span><br><span class="line">        // keys[10] = new Array();</span><br><span class="line">        // keys[11] = new Array();</span><br><span class="line">        // keys[12] = new Array();</span><br><span class="line">        // keys[13] = new Array();</span><br><span class="line">        // keys[14] = new Array();</span><br><span class="line">        // keys[15] = new Array();</span><br><span class="line">        int[] loop = new int[] &#123; 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 &#125;;</span><br><span class="line"> </span><br><span class="line">        for (int i = 0; i &lt; 7; i++) &#123;</span><br><span class="line">            for (int j = 0, k = 7; j &lt; 8; j++, k--) &#123;</span><br><span class="line">                key[i * 8 + j] = keyByte[8 * k + i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        int i = 0;</span><br><span class="line">        for (i = 0; i &lt; 16; i++) &#123;</span><br><span class="line">            int tempLeft = 0;</span><br><span class="line">            int tempRight = 0;</span><br><span class="line">            for (int j = 0; j &lt; loop[i]; j++) &#123;</span><br><span class="line">                tempLeft = key[0];</span><br><span class="line">                tempRight = key[28];</span><br><span class="line">                for (int k = 0; k &lt; 27; k++) &#123;</span><br><span class="line">                    key[k] = key[k + 1];</span><br><span class="line">                    key[28 + k] = key[29 + k];</span><br><span class="line">                &#125;</span><br><span class="line">                key[27] = tempLeft;</span><br><span class="line">                key[55] = tempRight;</span><br><span class="line">            &#125;</span><br><span class="line">            // var tempKey = new Array(48);</span><br><span class="line">            int[] tempKey = new int[48];</span><br><span class="line">            tempKey[0] = key[13];</span><br><span class="line">            tempKey[1] = key[16];</span><br><span class="line">            tempKey[2] = key[10];</span><br><span class="line">            tempKey[3] = key[23];</span><br><span class="line">            tempKey[4] = key[0];</span><br><span class="line">            tempKey[5] = key[4];</span><br><span class="line">            tempKey[6] = key[2];</span><br><span class="line">            tempKey[7] = key[27];</span><br><span class="line">            tempKey[8] = key[14];</span><br><span class="line">            tempKey[9] = key[5];</span><br><span class="line">            tempKey[10] = key[20];</span><br><span class="line">            tempKey[11] = key[9];</span><br><span class="line">            tempKey[12] = key[22];</span><br><span class="line">            tempKey[13] = key[18];</span><br><span class="line">            tempKey[14] = key[11];</span><br><span class="line">            tempKey[15] = key[3];</span><br><span class="line">            tempKey[16] = key[25];</span><br><span class="line">            tempKey[17] = key[7];</span><br><span class="line">            tempKey[18] = key[15];</span><br><span class="line">            tempKey[19] = key[6];</span><br><span class="line">            tempKey[20] = key[26];</span><br><span class="line">            tempKey[21] = key[19];</span><br><span class="line">            tempKey[22] = key[12];</span><br><span class="line">            tempKey[23] = key[1];</span><br><span class="line">            tempKey[24] = key[40];</span><br><span class="line">            tempKey[25] = key[51];</span><br><span class="line">            tempKey[26] = key[30];</span><br><span class="line">            tempKey[27] = key[36];</span><br><span class="line">            tempKey[28] = key[46];</span><br><span class="line">            tempKey[29] = key[54];</span><br><span class="line">            tempKey[30] = key[29];</span><br><span class="line">            tempKey[31] = key[39];</span><br><span class="line">            tempKey[32] = key[50];</span><br><span class="line">            tempKey[33] = key[44];</span><br><span class="line">            tempKey[34] = key[32];</span><br><span class="line">            tempKey[35] = key[47];</span><br><span class="line">            tempKey[36] = key[43];</span><br><span class="line">            tempKey[37] = key[48];</span><br><span class="line">            tempKey[38] = key[38];</span><br><span class="line">            tempKey[39] = key[55];</span><br><span class="line">            tempKey[40] = key[33];</span><br><span class="line">            tempKey[41] = key[52];</span><br><span class="line">            tempKey[42] = key[45];</span><br><span class="line">            tempKey[43] = key[41];</span><br><span class="line">            tempKey[44] = key[49];</span><br><span class="line">            tempKey[45] = key[35];</span><br><span class="line">            tempKey[46] = key[28];</span><br><span class="line">            tempKey[47] = key[31];</span><br><span class="line">            int m;</span><br><span class="line">            switch (i) &#123;</span><br><span class="line">            case 0:</span><br><span class="line">                for (m = 0; m &lt; 48; m++) &#123;</span><br><span class="line">                    keys[0][m] = tempKey[m];</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case 1:</span><br><span class="line">                for (m = 0; m &lt; 48; m++) &#123;</span><br><span class="line">                    keys[1][m] = tempKey[m];</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">                for (m = 0; m &lt; 48; m++) &#123;</span><br><span class="line">                    keys[2][m] = tempKey[m];</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case 3:</span><br><span class="line">                for (m = 0; m &lt; 48; m++) &#123;</span><br><span class="line">                    keys[3][m] = tempKey[m];</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case 4:</span><br><span class="line">                for (m = 0; m &lt; 48; m++) &#123;</span><br><span class="line">                    keys[4][m] = tempKey[m];</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case 5:</span><br><span class="line">                for (m = 0; m &lt; 48; m++) &#123;</span><br><span class="line">                    keys[5][m] = tempKey[m];</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case 6:</span><br><span class="line">                for (m = 0; m &lt; 48; m++) &#123;</span><br><span class="line">                    keys[6][m] = tempKey[m];</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case 7:</span><br><span class="line">                for (m = 0; m &lt; 48; m++) &#123;</span><br><span class="line">                    keys[7][m] = tempKey[m];</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case 8:</span><br><span class="line">                for (m = 0; m &lt; 48; m++) &#123;</span><br><span class="line">                    keys[8][m] = tempKey[m];</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case 9:</span><br><span class="line">                for (m = 0; m &lt; 48; m++) &#123;</span><br><span class="line">                    keys[9][m] = tempKey[m];</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case 10:</span><br><span class="line">                for (m = 0; m &lt; 48; m++) &#123;</span><br><span class="line">                    keys[10][m] = tempKey[m];</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case 11:</span><br><span class="line">                for (m = 0; m &lt; 48; m++) &#123;</span><br><span class="line">                    keys[11][m] = tempKey[m];</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case 12:</span><br><span class="line">                for (m = 0; m &lt; 48; m++) &#123;</span><br><span class="line">                    keys[12][m] = tempKey[m];</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case 13:</span><br><span class="line">                for (m = 0; m &lt; 48; m++) &#123;</span><br><span class="line">                    keys[13][m] = tempKey[m];</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case 14:</span><br><span class="line">                for (m = 0; m &lt; 48; m++) &#123;</span><br><span class="line">                    keys[14][m] = tempKey[m];</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case 15:</span><br><span class="line">                for (m = 0; m &lt; 48; m++) &#123;</span><br><span class="line">                    keys[15][m] = tempKey[m];</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return keys;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>示例(DES3加密和解密):<br>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;DES3&lt;/title&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;DES3.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">var str= &quot;123456.&quot;;</span><br><span class="line">var key = &quot;qXSdHWfbSZaaLeHBRhLgxBiG&quot;;</span><br><span class="line">//alert(decrypt_3des);</span><br><span class="line">var des3en = DES3.encrypt(key,str);</span><br><span class="line">document.write(&quot;&lt;/br&gt;des3加密:&lt;/br&gt;&quot;+des3en);</span><br><span class="line">document.write(&quot;&lt;/br&gt;des3解密:&lt;/br&gt;&quot;+DES3.decrypt(key,des3en));</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p><p>DES3.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line"> * DES 加密算法 </span><br><span class="line"> * </span><br><span class="line"> * 该函数接受一个 8 字节字符串作为普通 DES 算法的密钥（也就是 64 位，但是算法只使用 56 位），或者接受一个 24 字节字符串作为 3DES </span><br><span class="line"> * 算法的密钥；第二个参数是要加密或解密的信息字符串；第三个布尔值参数用来说明信息是加密还是解密；接下来的可选参数 mode 如果是 0 表示 ECB </span><br><span class="line"> * 模式，1 表示 CBC 模式，默认是 ECB 模式；最后一个可选项是一个 8 字节的输入向量字符串（在 ECB 模式下不使用）。返回的密文是字符串。 </span><br><span class="line"> * </span><br><span class="line"> * 参数： &lt;br&gt; </span><br><span class="line"> * key: 8字节字符串作为普通 DES 算法的密钥,或 24 字节字符串作为 3DES &lt;br&gt; </span><br><span class="line"> * message： 加密或解密的信息字符串&lt;br&gt; </span><br><span class="line"> * encrypt: 布尔值参数用来说明信息是加密还是解密&lt;br&gt; </span><br><span class="line"> * mode: 1:CBC模式，0:ECB模式(默认)&lt;br&gt; </span><br><span class="line"> * iv:&lt;br&gt; </span><br><span class="line"> * padding: 可选项, 8字节的输入向量字符串（在 ECB 模式下不使用） </span><br><span class="line"> */</span><br><span class="line">//this takes the key, the message, and whether to encrypt or decrypt</span><br><span class="line">function des (key, message, encrypt, mode, iv, padding) &#123;</span><br><span class="line">  if(encrypt) //如果是加密的话，首先转换编码</span><br><span class="line">    message = unescape(encodeURIComponent(message));</span><br><span class="line">  //declaring this locally speeds things up a bit</span><br><span class="line">  var spfunction1 = new Array (0x1010400,0,0x10000,0x1010404,0x1010004,0x10404,0x4,0x10000,0x400,0x1010400,0x1010404,0x400,0x1000404,0x1010004,0x1000000,0x4,0x404,0x1000400,0x1000400,0x10400,0x10400,0x1010000,0x1010000,0x1000404,0x10004,0x1000004,0x1000004,0x10004,0,0x404,0x10404,0x1000000,0x10000,0x1010404,0x4,0x1010000,0x1010400,0x1000000,0x1000000,0x400,0x1010004,0x10000,0x10400,0x1000004,0x400,0x4,0x1000404,0x10404,0x1010404,0x10004,0x1010000,0x1000404,0x1000004,0x404,0x10404,0x1010400,0x404,0x1000400,0x1000400,0,0x10004,0x10400,0,0x1010004);</span><br><span class="line">  var spfunction2 = new Array (-0x7fef7fe0,-0x7fff8000,0x8000,0x108020,0x100000,0x20,-0x7fefffe0,-0x7fff7fe0,-0x7fffffe0,-0x7fef7fe0,-0x7fef8000,-0x80000000,-0x7fff8000,0x100000,0x20,-0x7fefffe0,0x108000,0x100020,-0x7fff7fe0,0,-0x80000000,0x8000,0x108020,-0x7ff00000,0x100020,-0x7fffffe0,0,0x108000,0x8020,-0x7fef8000,-0x7ff00000,0x8020,0,0x108020,-0x7fefffe0,0x100000,-0x7fff7fe0,-0x7ff00000,-0x7fef8000,0x8000,-0x7ff00000,-0x7fff8000,0x20,-0x7fef7fe0,0x108020,0x20,0x8000,-0x80000000,0x8020,-0x7fef8000,0x100000,-0x7fffffe0,0x100020,-0x7fff7fe0,-0x7fffffe0,0x100020,0x108000,0,-0x7fff8000,0x8020,-0x80000000,-0x7fefffe0,-0x7fef7fe0,0x108000);</span><br><span class="line">  var spfunction3 = new Array (0x208,0x8020200,0,0x8020008,0x8000200,0,0x20208,0x8000200,0x20008,0x8000008,0x8000008,0x20000,0x8020208,0x20008,0x8020000,0x208,0x8000000,0x8,0x8020200,0x200,0x20200,0x8020000,0x8020008,0x20208,0x8000208,0x20200,0x20000,0x8000208,0x8,0x8020208,0x200,0x8000000,0x8020200,0x8000000,0x20008,0x208,0x20000,0x8020200,0x8000200,0,0x200,0x20008,0x8020208,0x8000200,0x8000008,0x200,0,0x8020008,0x8000208,0x20000,0x8000000,0x8020208,0x8,0x20208,0x20200,0x8000008,0x8020000,0x8000208,0x208,0x8020000,0x20208,0x8,0x8020008,0x20200);</span><br><span class="line">  var spfunction4 = new Array (0x802001,0x2081,0x2081,0x80,0x802080,0x800081,0x800001,0x2001,0,0x802000,0x802000,0x802081,0x81,0,0x800080,0x800001,0x1,0x2000,0x800000,0x802001,0x80,0x800000,0x2001,0x2080,0x800081,0x1,0x2080,0x800080,0x2000,0x802080,0x802081,0x81,0x800080,0x800001,0x802000,0x802081,0x81,0,0,0x802000,0x2080,0x800080,0x800081,0x1,0x802001,0x2081,0x2081,0x80,0x802081,0x81,0x1,0x2000,0x800001,0x2001,0x802080,0x800081,0x2001,0x2080,0x800000,0x802001,0x80,0x800000,0x2000,0x802080);</span><br><span class="line">  var spfunction5 = new Array (0x100,0x2080100,0x2080000,0x42000100,0x80000,0x100,0x40000000,0x2080000,0x40080100,0x80000,0x2000100,0x40080100,0x42000100,0x42080000,0x80100,0x40000000,0x2000000,0x40080000,0x40080000,0,0x40000100,0x42080100,0x42080100,0x2000100,0x42080000,0x40000100,0,0x42000000,0x2080100,0x2000000,0x42000000,0x80100,0x80000,0x42000100,0x100,0x2000000,0x40000000,0x2080000,0x42000100,0x40080100,0x2000100,0x40000000,0x42080000,0x2080100,0x40080100,0x100,0x2000000,0x42080000,0x42080100,0x80100,0x42000000,0x42080100,0x2080000,0,0x40080000,0x42000000,0x80100,0x2000100,0x40000100,0x80000,0,0x40080000,0x2080100,0x40000100);</span><br><span class="line">  var spfunction6 = new Array (0x20000010,0x20400000,0x4000,0x20404010,0x20400000,0x10,0x20404010,0x400000,0x20004000,0x404010,0x400000,0x20000010,0x400010,0x20004000,0x20000000,0x4010,0,0x400010,0x20004010,0x4000,0x404000,0x20004010,0x10,0x20400010,0x20400010,0,0x404010,0x20404000,0x4010,0x404000,0x20404000,0x20000000,0x20004000,0x10,0x20400010,0x404000,0x20404010,0x400000,0x4010,0x20000010,0x400000,0x20004000,0x20000000,0x4010,0x20000010,0x20404010,0x404000,0x20400000,0x404010,0x20404000,0,0x20400010,0x10,0x4000,0x20400000,0x404010,0x4000,0x400010,0x20004010,0,0x20404000,0x20000000,0x400010,0x20004010);</span><br><span class="line">  var spfunction7 = new Array (0x200000,0x4200002,0x4000802,0,0x800,0x4000802,0x200802,0x4200800,0x4200802,0x200000,0,0x4000002,0x2,0x4000000,0x4200002,0x802,0x4000800,0x200802,0x200002,0x4000800,0x4000002,0x4200000,0x4200800,0x200002,0x4200000,0x800,0x802,0x4200802,0x200800,0x2,0x4000000,0x200800,0x4000000,0x200800,0x200000,0x4000802,0x4000802,0x4200002,0x4200002,0x2,0x200002,0x4000000,0x4000800,0x200000,0x4200800,0x802,0x200802,0x4200800,0x802,0x4000002,0x4200802,0x4200000,0x200800,0,0x2,0x4200802,0,0x200802,0x4200000,0x800,0x4000002,0x4000800,0x800,0x200002);</span><br><span class="line">  var spfunction8 = new Array (0x10001040,0x1000,0x40000,0x10041040,0x10000000,0x10001040,0x40,0x10000000,0x40040,0x10040000,0x10041040,0x41000,0x10041000,0x41040,0x1000,0x40,0x10040000,0x10000040,0x10001000,0x1040,0x41000,0x40040,0x10040040,0x10041000,0x1040,0,0,0x10040040,0x10000040,0x10001000,0x41040,0x40000,0x41040,0x40000,0x10041000,0x1000,0x40,0x10040040,0x1000,0x41040,0x10001000,0x40,0x10000040,0x10040000,0x10040040,0x10000000,0x40000,0x10001040,0,0x10041040,0x40040,0x10000040,0x10040000,0x10001000,0x10001040,0,0x10041040,0x41000,0x41000,0x1040,0x1040,0x40040,0x10000000,0x10041000);</span><br><span class="line">  //create the 16 or 48 subkeys we will need</span><br><span class="line">  var keys = des_createKeys (key);</span><br><span class="line">  var m=0, i, j, temp, temp2, right1, right2, left, right, looping;</span><br><span class="line">  var cbcleft, cbcleft2, cbcright, cbcright2</span><br><span class="line">  var endloop, loopinc;</span><br><span class="line">  var len = message.length;</span><br><span class="line">  var chunk = 0;</span><br><span class="line">  //set up the loops for single and triple des</span><br><span class="line">  var iterations = keys.length == 32 ? 3 : 9; //single or triple des</span><br><span class="line">  if (iterations == 3) &#123;looping = encrypt ? new Array (0, 32, 2) : new Array (30, -2, -2);&#125;</span><br><span class="line">  else &#123;looping = encrypt ? new Array (0, 32, 2, 62, 30, -2, 64, 96, 2) : new Array (94, 62, -2, 32, 64, 2, 30, -2, -2);&#125;</span><br><span class="line">  //pad the message depending on the padding parameter</span><br><span class="line">  if (padding == 2) message += &quot;    &quot;; //pad the message with spaces</span><br><span class="line">  else if (padding == 1) &#123;</span><br><span class="line">    if(encrypt) &#123;</span><br><span class="line">      temp = 8-(len%8);</span><br><span class="line">      message += String.fromCharCode(temp,temp,temp,temp,temp,temp,temp,temp);</span><br><span class="line">      if (temp===8) len+=8;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; //PKCS7 padding</span><br><span class="line">  else if (!padding) message += &quot;\0\0\0\0\0\0\0\0&quot;; //pad the message out with null bytes</span><br><span class="line">  //store the result here</span><br><span class="line">  var result = &quot;&quot;;</span><br><span class="line">  var tempresult = &quot;&quot;;</span><br><span class="line">  if (mode == 1) &#123; //CBC mode</span><br><span class="line">    cbcleft = (iv.charCodeAt(m++) &lt;&lt; 24) | (iv.charCodeAt(m++) &lt;&lt; 16) | (iv.charCodeAt(m++) &lt;&lt; 8) | iv.charCodeAt(m++);</span><br><span class="line">    cbcright = (iv.charCodeAt(m++) &lt;&lt; 24) | (iv.charCodeAt(m++) &lt;&lt; 16) | (iv.charCodeAt(m++) &lt;&lt; 8) | iv.charCodeAt(m++);</span><br><span class="line">    m=0;</span><br><span class="line">  &#125;</span><br><span class="line">  //loop through each 64 bit chunk of the message</span><br><span class="line">  while (m &lt; len) &#123;</span><br><span class="line">    left = (message.charCodeAt(m++) &lt;&lt; 24) | (message.charCodeAt(m++) &lt;&lt; 16) | (message.charCodeAt(m++) &lt;&lt; 8) | message.charCodeAt(m++);</span><br><span class="line">    right = (message.charCodeAt(m++) &lt;&lt; 24) | (message.charCodeAt(m++) &lt;&lt; 16) | (message.charCodeAt(m++) &lt;&lt; 8) | message.charCodeAt(m++);</span><br><span class="line">    //for Cipher Block Chaining mode, xor the message with the previous result</span><br><span class="line">    if (mode == 1) &#123;if (encrypt) &#123;left ^= cbcleft; right ^= cbcright;&#125; else &#123;cbcleft2 = cbcleft; cbcright2 = cbcright; cbcleft = left; cbcright = right;&#125;&#125;</span><br><span class="line">    //first each 64 but chunk of the message must be permuted according to IP</span><br><span class="line">    temp = ((left &gt;&gt;&gt; 4) ^ right) &amp; 0x0f0f0f0f; right ^= temp; left ^= (temp &lt;&lt; 4);</span><br><span class="line">    temp = ((left &gt;&gt;&gt; 16) ^ right) &amp; 0x0000ffff; right ^= temp; left ^= (temp &lt;&lt; 16);</span><br><span class="line">    temp = ((right &gt;&gt;&gt; 2) ^ left) &amp; 0x33333333; left ^= temp; right ^= (temp &lt;&lt; 2);</span><br><span class="line">    temp = ((right &gt;&gt;&gt; 8) ^ left) &amp; 0x00ff00ff; left ^= temp; right ^= (temp &lt;&lt; 8);</span><br><span class="line">    temp = ((left &gt;&gt;&gt; 1) ^ right) &amp; 0x55555555; right ^= temp; left ^= (temp &lt;&lt; 1);</span><br><span class="line">    left = ((left &lt;&lt; 1) | (left &gt;&gt;&gt; 31));</span><br><span class="line">    right = ((right &lt;&lt; 1) | (right &gt;&gt;&gt; 31));</span><br><span class="line">    //do this either 1 or 3 times for each chunk of the message</span><br><span class="line">    for (j=0; j&lt;iterations; j+=3) &#123;</span><br><span class="line">      endloop = looping[j+1];</span><br><span class="line">      loopinc = looping[j+2];</span><br><span class="line">      //now go through and perform the encryption or decryption</span><br><span class="line">      for (i=looping[j]; i!=endloop; i+=loopinc) &#123; //for efficiency</span><br><span class="line">        right1 = right ^ keys[i];</span><br><span class="line">        right2 = ((right &gt;&gt;&gt; 4) | (right &lt;&lt; 28)) ^ keys[i+1];</span><br><span class="line">        //the result is attained by passing these bytes through the S selection functions</span><br><span class="line">        temp = left;</span><br><span class="line">        left = right;</span><br><span class="line">        right = temp ^ (spfunction2[(right1 &gt;&gt;&gt; 24) &amp; 0x3f] | spfunction4[(right1 &gt;&gt;&gt; 16) &amp; 0x3f]</span><br><span class="line">          | spfunction6[(right1 &gt;&gt;&gt; 8) &amp; 0x3f] | spfunction8[right1 &amp; 0x3f]</span><br><span class="line">          | spfunction1[(right2 &gt;&gt;&gt; 24) &amp; 0x3f] | spfunction3[(right2 &gt;&gt;&gt; 16) &amp; 0x3f]</span><br><span class="line">          | spfunction5[(right2 &gt;&gt;&gt; 8) &amp; 0x3f] | spfunction7[right2 &amp; 0x3f]);</span><br><span class="line">      &#125;</span><br><span class="line">      temp = left; left = right; right = temp; //unreverse left and right</span><br><span class="line">    &#125; //for either 1 or 3 iterations</span><br><span class="line">    //move then each one bit to the right</span><br><span class="line">    left = ((left &gt;&gt;&gt; 1) | (left &lt;&lt; 31));</span><br><span class="line">    right = ((right &gt;&gt;&gt; 1) | (right &lt;&lt; 31));</span><br><span class="line">    //now perform IP-1, which is IP in the opposite direction</span><br><span class="line">    temp = ((left &gt;&gt;&gt; 1) ^ right) &amp; 0x55555555; right ^= temp; left ^= (temp &lt;&lt; 1);</span><br><span class="line">    temp = ((right &gt;&gt;&gt; 8) ^ left) &amp; 0x00ff00ff; left ^= temp; right ^= (temp &lt;&lt; 8);</span><br><span class="line">    temp = ((right &gt;&gt;&gt; 2) ^ left) &amp; 0x33333333; left ^= temp; right ^= (temp &lt;&lt; 2);</span><br><span class="line">    temp = ((left &gt;&gt;&gt; 16) ^ right) &amp; 0x0000ffff; right ^= temp; left ^= (temp &lt;&lt; 16);</span><br><span class="line">    temp = ((left &gt;&gt;&gt; 4) ^ right) &amp; 0x0f0f0f0f; right ^= temp; left ^= (temp &lt;&lt; 4);</span><br><span class="line">    //for Cipher Block Chaining mode, xor the message with the previous result</span><br><span class="line">    if (mode == 1) &#123;if (encrypt) &#123;cbcleft = left; cbcright = right;&#125; else &#123;left ^= cbcleft2; right ^= cbcright2;&#125;&#125;</span><br><span class="line">    tempresult += String.fromCharCode ((left&gt;&gt;&gt;24), ((left&gt;&gt;&gt;16) &amp; 0xff), ((left&gt;&gt;&gt;8) &amp; 0xff), (left &amp; 0xff), (right&gt;&gt;&gt;24), ((right&gt;&gt;&gt;16) &amp; 0xff), ((right&gt;&gt;&gt;8) &amp; 0xff), (right &amp; 0xff));</span><br><span class="line">    chunk += 8;</span><br><span class="line">    if (chunk == 512) &#123;result += tempresult; tempresult = &quot;&quot;; chunk = 0;&#125;</span><br><span class="line">  &#125; //for every 8 characters, or 64 bits in the message</span><br><span class="line">  //return the result as an array</span><br><span class="line">  result += tempresult;</span><br><span class="line">  result = result.replace(/\0*$/g, &quot;&quot;);</span><br><span class="line">  if(!encrypt ) &#123; //如果是解密的话，解密结束后对PKCS7 padding进行解码，并转换成utf-8编码</span><br><span class="line">    if(padding === 1) &#123; //PKCS7 padding解码</span><br><span class="line">      var len = result.length, paddingChars = 0;</span><br><span class="line">      len &amp;&amp; (paddingChars = result.charCodeAt(len-1));</span><br><span class="line">      (paddingChars &lt;= 8) &amp;&amp; (result = result.substring(0, len - paddingChars));</span><br><span class="line">    &#125;</span><br><span class="line">    //转换成UTF-8编码</span><br><span class="line">    result = decodeURIComponent(escape(result));</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125; //end of des</span><br><span class="line">//des_createKeys</span><br><span class="line">//this takes as input a 64 bit key (even though only 56 bits are used)</span><br><span class="line">//as an array of 2 integers, and returns 16 48 bit keys</span><br><span class="line">function des_createKeys (key) &#123;</span><br><span class="line">  //declaring this locally speeds things up a bit</span><br><span class="line">  var pc2bytes0 = new Array (0,0x4,0x20000000,0x20000004,0x10000,0x10004,0x20010000,0x20010004,0x200,0x204,0x20000200,0x20000204,0x10200,0x10204,0x20010200,0x20010204);</span><br><span class="line">  var pc2bytes1 = new Array (0,0x1,0x100000,0x100001,0x4000000,0x4000001,0x4100000,0x4100001,0x100,0x101,0x100100,0x100101,0x4000100,0x4000101,0x4100100,0x4100101);</span><br><span class="line">  var pc2bytes2 = new Array (0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808,0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808);</span><br><span class="line">  var pc2bytes3 = new Array (0,0x200000,0x8000000,0x8200000,0x2000,0x202000,0x8002000,0x8202000,0x20000,0x220000,0x8020000,0x8220000,0x22000,0x222000,0x8022000,0x8222000);</span><br><span class="line">  var pc2bytes4 = new Array (0,0x40000,0x10,0x40010,0,0x40000,0x10,0x40010,0x1000,0x41000,0x1010,0x41010,0x1000,0x41000,0x1010,0x41010);</span><br><span class="line">  var pc2bytes5 = new Array (0,0x400,0x20,0x420,0,0x400,0x20,0x420,0x2000000,0x2000400,0x2000020,0x2000420,0x2000000,0x2000400,0x2000020,0x2000420);</span><br><span class="line">  var pc2bytes6 = new Array (0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002,0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002);</span><br><span class="line">  var pc2bytes7 = new Array (0,0x10000,0x800,0x10800,0x20000000,0x20010000,0x20000800,0x20010800,0x20000,0x30000,0x20800,0x30800,0x20020000,0x20030000,0x20020800,0x20030800);</span><br><span class="line">  var pc2bytes8 = new Array (0,0x40000,0,0x40000,0x2,0x40002,0x2,0x40002,0x2000000,0x2040000,0x2000000,0x2040000,0x2000002,0x2040002,0x2000002,0x2040002);</span><br><span class="line">  var pc2bytes9 = new Array (0,0x10000000,0x8,0x10000008,0,0x10000000,0x8,0x10000008,0x400,0x10000400,0x408,0x10000408,0x400,0x10000400,0x408,0x10000408);</span><br><span class="line">  var pc2bytes10 = new Array (0,0x20,0,0x20,0x100000,0x100020,0x100000,0x100020,0x2000,0x2020,0x2000,0x2020,0x102000,0x102020,0x102000,0x102020);</span><br><span class="line">  var pc2bytes11 = new Array (0,0x1000000,0x200,0x1000200,0x200000,0x1200000,0x200200,0x1200200,0x4000000,0x5000000,0x4000200,0x5000200,0x4200000,0x5200000,0x4200200,0x5200200);</span><br><span class="line">  var pc2bytes12 = new Array (0,0x1000,0x8000000,0x8001000,0x80000,0x81000,0x8080000,0x8081000,0x10,0x1010,0x8000010,0x8001010,0x80010,0x81010,0x8080010,0x8081010);</span><br><span class="line">  var pc2bytes13 = new Array (0,0x4,0x100,0x104,0,0x4,0x100,0x104,0x1,0x5,0x101,0x105,0x1,0x5,0x101,0x105);</span><br><span class="line">  //how many iterations (1 for des, 3 for triple des)</span><br><span class="line">  var iterations = key.length &gt; 8 ? 3 : 1; //changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys</span><br><span class="line">  //stores the return keys</span><br><span class="line">  var keys = new Array (32 * iterations);</span><br><span class="line">  //now define the left shifts which need to be done</span><br><span class="line">  var shifts = new Array (0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0);</span><br><span class="line">  //other variables</span><br><span class="line">  var lefttemp, righttemp, m=0, n=0, temp;</span><br><span class="line">  for (var j=0; j&lt;iterations; j++) &#123; //either 1 or 3 iterations</span><br><span class="line">    var left = (key.charCodeAt(m++) &lt;&lt; 24) | (key.charCodeAt(m++) &lt;&lt; 16) | (key.charCodeAt(m++) &lt;&lt; 8) | key.charCodeAt(m++);</span><br><span class="line">    var right = (key.charCodeAt(m++) &lt;&lt; 24) | (key.charCodeAt(m++) &lt;&lt; 16) | (key.charCodeAt(m++) &lt;&lt; 8) | key.charCodeAt(m++);</span><br><span class="line">    temp = ((left &gt;&gt;&gt; 4) ^ right) &amp; 0x0f0f0f0f; right ^= temp; left ^= (temp &lt;&lt; 4);</span><br><span class="line">    temp = ((right &gt;&gt;&gt; -16) ^ left) &amp; 0x0000ffff; left ^= temp; right ^= (temp &lt;&lt; -16);</span><br><span class="line">    temp = ((left &gt;&gt;&gt; 2) ^ right) &amp; 0x33333333; right ^= temp; left ^= (temp &lt;&lt; 2);</span><br><span class="line">    temp = ((right &gt;&gt;&gt; -16) ^ left) &amp; 0x0000ffff; left ^= temp; right ^= (temp &lt;&lt; -16);</span><br><span class="line">    temp = ((left &gt;&gt;&gt; 1) ^ right) &amp; 0x55555555; right ^= temp; left ^= (temp &lt;&lt; 1);</span><br><span class="line">    temp = ((right &gt;&gt;&gt; 8) ^ left) &amp; 0x00ff00ff; left ^= temp; right ^= (temp &lt;&lt; 8);</span><br><span class="line">    temp = ((left &gt;&gt;&gt; 1) ^ right) &amp; 0x55555555; right ^= temp; left ^= (temp &lt;&lt; 1);</span><br><span class="line">    //the right side needs to be shifted and to get the last four bits of the left side</span><br><span class="line">    temp = (left &lt;&lt; 8) | ((right &gt;&gt;&gt; 20) &amp; 0x000000f0);</span><br><span class="line">    //left needs to be put upside down</span><br><span class="line">    left = (right &lt;&lt; 24) | ((right &lt;&lt; 8) &amp; 0xff0000) | ((right &gt;&gt;&gt; 8) &amp; 0xff00) | ((right &gt;&gt;&gt; 24) &amp; 0xf0);</span><br><span class="line">    right = temp;</span><br><span class="line">    //now go through and perform these shifts on the left and right keys</span><br><span class="line">    for (var i=0; i &lt; shifts.length; i++) &#123;</span><br><span class="line">      //shift the keys either one or two bits to the left</span><br><span class="line">      if (shifts[i]) &#123;left = (left &lt;&lt; 2) | (left &gt;&gt;&gt; 26); right = (right &lt;&lt; 2) | (right &gt;&gt;&gt; 26);&#125;</span><br><span class="line">      else &#123;left = (left &lt;&lt; 1) | (left &gt;&gt;&gt; 27); right = (right &lt;&lt; 1) | (right &gt;&gt;&gt; 27);&#125;</span><br><span class="line">      left &amp;= -0xf; right &amp;= -0xf;</span><br><span class="line">      //now apply PC-2, in such a way that E is easier when encrypting or decrypting</span><br><span class="line">      //this conversion will look like PC-2 except only the last 6 bits of each byte are used</span><br><span class="line">      //rather than 48 consecutive bits and the order of lines will be according to</span><br><span class="line">      //how the S selection functions will be applied: S2, S4, S6, S8, S1, S3, S5, S7</span><br><span class="line">      lefttemp = pc2bytes0[left &gt;&gt;&gt; 28] | pc2bytes1[(left &gt;&gt;&gt; 24) &amp; 0xf]</span><br><span class="line">        | pc2bytes2[(left &gt;&gt;&gt; 20) &amp; 0xf] | pc2bytes3[(left &gt;&gt;&gt; 16) &amp; 0xf]</span><br><span class="line">        | pc2bytes4[(left &gt;&gt;&gt; 12) &amp; 0xf] | pc2bytes5[(left &gt;&gt;&gt; 8) &amp; 0xf]</span><br><span class="line">        | pc2bytes6[(left &gt;&gt;&gt; 4) &amp; 0xf];</span><br><span class="line">      righttemp = pc2bytes7[right &gt;&gt;&gt; 28] | pc2bytes8[(right &gt;&gt;&gt; 24) &amp; 0xf]</span><br><span class="line">        | pc2bytes9[(right &gt;&gt;&gt; 20) &amp; 0xf] | pc2bytes10[(right &gt;&gt;&gt; 16) &amp; 0xf]</span><br><span class="line">        | pc2bytes11[(right &gt;&gt;&gt; 12) &amp; 0xf] | pc2bytes12[(right &gt;&gt;&gt; 8) &amp; 0xf]</span><br><span class="line">        | pc2bytes13[(right &gt;&gt;&gt; 4) &amp; 0xf];</span><br><span class="line">      temp = ((righttemp &gt;&gt;&gt; 16) ^ lefttemp) &amp; 0x0000ffff;</span><br><span class="line">      keys[n++] = lefttemp ^ temp; keys[n++] = righttemp ^ (temp &lt;&lt; 16);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; //for each iterations</span><br><span class="line">  //return the keys we&apos;ve created</span><br><span class="line">  return keys;</span><br><span class="line">&#125; //end of des_createKeys</span><br><span class="line">function genkey(key, start, end) &#123;</span><br><span class="line">  //8 byte / 64 bit Key (DES) or 192 bit Key</span><br><span class="line">  return &#123;key:pad(key.slice(start, end)),vector: 1&#125;;</span><br><span class="line">&#125;</span><br><span class="line">function pad(key) &#123;</span><br><span class="line">  for (var i = key.length; i&lt;24; i++) &#123;</span><br><span class="line">    key+=&quot;0&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  return key;</span><br><span class="line">&#125;</span><br><span class="line">var des3iv = &apos;12345678&apos;;</span><br><span class="line"></span><br><span class="line">var DES3 = &#123;</span><br><span class="line">  //3DES加密，CBC/PKCS5Padding</span><br><span class="line">  encrypt:function(key,input)&#123;</span><br><span class="line">    var genKey = genkey(key, 0, 24);</span><br><span class="line">    return btoa(des(genKey.key, input, 1, 1, des3iv, 1));</span><br><span class="line">  &#125;,</span><br><span class="line">  ////3DES解密，CBC/PKCS5Padding</span><br><span class="line">  decrypt:function(key,input)&#123;</span><br><span class="line">    var genKey = genkey(key, 0, 24); </span><br><span class="line">    return des(genKey.key, atob(input), 0, 1, des3iv, 1); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>参考链接:<br>MD5算法的必要性以及实际应用:<a href="http://www.jiamisoft.com/blog/23015-qdgs.html" target="_blank" rel="noopener">http://www.jiamisoft.com/blog/23015-qdgs.html</a><br>DES、AES、RSA、MD5加密算法辨析与应用场景:<a href="https://blog.csdn.net/kegebo_h/article/details/78056536" target="_blank" rel="noopener">https://blog.csdn.net/kegebo_h/article/details/78056536</a><br>md5.js加密:<a href="https://www.cnblogs.com/CooLLYP/p/8628467.html" target="_blank" rel="noopener">https://www.cnblogs.com/CooLLYP/p/8628467.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python实现机器人聊天</title>
      <link href="/2019/03/01/Python%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%81%8A%E5%A4%A9/"/>
      <url>/2019/03/01/Python%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%81%8A%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>今天午休的时候，无意之中看了一篇博客，名字叫Python实现机器人，感觉挺有的意思的。<br><a id="more"></a><br>于是用其写了一个简单的Python聊天，源码如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import aiml</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">def get_module_dir(name):</span><br><span class="line"> print(&quot;module&quot;, sys.modules[name])</span><br><span class="line"> path = getattr(sys.modules[name], &apos;__file__&apos;, None)</span><br><span class="line"> print(path)</span><br><span class="line"> if not path:</span><br><span class="line">  raise AttributeError(&apos;module %s has not attribute __file__&apos; % name)</span><br><span class="line"> return os.path.dirname(os.path.abspath(path))</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">alice_path = get_module_dir(&apos;aiml&apos;) + &apos;\\botdata\\alice&apos;</span><br><span class="line"> </span><br><span class="line">os.chdir(alice_path)  # 切换到语料库所在工作目录</span><br><span class="line"> </span><br><span class="line">alice = aiml.Kernel()  # 创建机器人alice对象</span><br><span class="line">alice.learn(&quot;startup.xml&quot;) # 加载...\\botdata\\alice\\startup.xml</span><br><span class="line">alice.respond(&apos;LOAD ALICE&apos;) # 加载...\\botdata\\alice目录下的语料库</span><br><span class="line">  </span><br><span class="line">while True:</span><br><span class="line"> message = input(&quot;Enter your message &gt;&gt; &quot;)</span><br><span class="line"> if(&quot;exit&quot; == message):</span><br><span class="line">  exit()</span><br><span class="line"> response = alice.respond(message) # 机器人应答</span><br><span class="line"> print(response)</span><br></pre></td></tr></table></figure></p><p>注意:如果出现某某模块找不到的时候，记得使用pip安装对应的模块。</p><p>效果图如下所示:<br><img src="/2019/03/01/Python实现机器人聊天/rebot01.png" alt=""></p><p>唯一美中不足的是英文，不过没关系，国内有图灵机器人。</p><p>代码如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">from urllib.request import urlopen,Request</span><br><span class="line">from urllib.error import URLError</span><br><span class="line">from urllib.parse import urlencode</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">class TuringChatMode(object):</span><br><span class="line">    &quot;&quot;&quot;this mode base on turing robot&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        # API接口地址</span><br><span class="line">        self.turing_url = &apos;http://www.tuling123.com/openapi/api?&apos;</span><br><span class="line"></span><br><span class="line">    def get_turing_text(self,text):</span><br><span class="line">        &apos;&apos;&apos; 请求方式:   HTTP POST</span><br><span class="line">            请求参数:   参数      是否必须        长度          说明</span><br><span class="line">                        key        必须          32           APIkey</span><br><span class="line">                        info       必须          1-32         请求内容，编码方式为&quot;utf-8&quot;</span><br><span class="line">                        userid     必须          32           MAC地址或ID</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        turing_url_data = dict(</span><br><span class="line">            key = &apos;fcbf9efe277e493993e889eabca5b331&apos;,</span><br><span class="line">            info = text,</span><br><span class="line">            userid = &apos;60-14-B3-BA-E1-4D&apos;,</span><br><span class="line"></span><br><span class="line">        )</span><br><span class="line">        # print(&quot;The things to Request is:&quot;,self.turing_url + urlencode(turing_url_data))</span><br><span class="line">        self.request = Request(self.turing_url + urlencode(turing_url_data))</span><br><span class="line">        # print(&quot;The result of Request is:&quot;,self.request)</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            w_data = urlopen(self.request)</span><br><span class="line">            # print(&quot;Type of the data from urlopen:&quot;,type(w_data))</span><br><span class="line">            # print(&quot;The data from urlopen is:&quot;,w_data)</span><br><span class="line">        except URLError:</span><br><span class="line">            raise IndexError(&quot;No internet connection available to transfer txt data&quot;)</span><br><span class="line">            # 如果发生网络错误，断言提示没有可用的网络连接来传输文本信息</span><br><span class="line">        except:</span><br><span class="line">            raise KeyError(&quot;Server wouldn&apos;t respond (invalid key or quota has been maxed out)&quot;)</span><br><span class="line">            # 其他情况断言提示服务相应次数已经达到上限</span><br><span class="line"></span><br><span class="line">        response_text = w_data.read().decode(&apos;utf-8&apos;)</span><br><span class="line">        # print(&quot;Type of the response_text :&quot;,type(response_text))</span><br><span class="line">        # print(&quot;response_text :&quot;,response_text)</span><br><span class="line"></span><br><span class="line">        json_result = json.loads(response_text)</span><br><span class="line">        # print(&quot;Type of the json_result :&quot;,type(json_result))</span><br><span class="line">        return json_result[&apos;text&apos;]</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    print(&quot;Now u can type in something &amp; input q to quit&quot;)</span><br><span class="line"></span><br><span class="line">    turing = TuringChatMode()</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        msg = input(&quot;\nMaster:&quot;)</span><br><span class="line">        if msg == &apos;q&apos;:</span><br><span class="line">            exit(&quot;u r quit the chat !&quot;)         # 设定输入q，退出聊天。</span><br><span class="line">        else:</span><br><span class="line">            turing_data = turing.get_turing_text(msg)</span><br><span class="line">            print(&quot;Robot:&quot;,turing_data)</span><br></pre></td></tr></table></figure></p><p>效果图如下:<br><img src="/2019/03/01/Python实现机器人聊天/rebot02.png" alt=""></p><p>可能由于机器人智能太低了，有点答非所问。</p><p>更多精彩可以去图灵机器人官网了解:<a href="http://www.tuling123.com" target="_blank" rel="noopener">http://www.tuling123.com</a></p><p>编程的世界是有趣的，你去探索，你会发现很多有意思的事情。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js使用express框架进行文件上传</title>
      <link href="/2019/03/01/node-js%E4%BD%BF%E7%94%A8express%E6%A1%86%E6%9E%B6%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2019/03/01/node-js%E4%BD%BF%E7%94%A8express%E6%A1%86%E6%9E%B6%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>关于node.js使用express框架进行文件上传，主要来自于最近对Settings-Sync插件做的研究。<br>目前的研究算是取得的比较好的进展。<br>Settings-Sync中通过快捷键上传文件，其实主要还是请求后端接口。<br>于是我便使用node.js模拟一个服务，这个服务其实就相当于github api(Settings-Sync实际请求的接口，比如token验证，gist存储创建等都是来自github 对应的api)。<br><a id="more"></a><br>话不多说，直接代码贴起讲解:</p><h2><span id="1创建一个nodejs项目这里我以express框架为例">1.创建一个node.js项目(这里我以express框架为例)</span></h2><p>关于如何创建一个node.js项目我就不详细说，通常通过npm init就可以创建一个node.js项目了。<br>关于node.js项目详细教程，可以参考该篇文章<a href="https://www.jianshu.com/p/7b0a5d4491ba" target="_blank" rel="noopener">nodeJS入门——新建一个项目及代码详解</a><br>当然了，如果你是直接通过这篇文章操作，最先可能会报这个错误，错误信息如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;express&apos; 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br></pre></td></tr></table></figure><p>解决方式很简单，并不是npm install -g express就可以的，在此之前还需执行npm install -g express-generator</p><p>这条命令很好理解，你可以将其理解为你的express框架生成器，以Java中Maven来说，通常ide就把maven结构都弄好了，你只需在创建项目的时候，勾选maven即可，它会自己将所有相关项目包括配置文件一起生成。</p><p>虽然说我将地址贴出来，但是我觉得还是实际操作一遍，这样对此有一个感性认识(初学编程的人或者是已经有编程经验的人，是绝对不能忽略这一点的)。</p><p>流程如下:</p><h4><span id="a使用express命令创建express项目">a.使用express命令创建express项目</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express blog</span><br></pre></td></tr></table></figure><h5><span id="效果图如下">效果图如下:</span></h5><p><img src="/2019/03/01/node-js使用express框架进行文件上传/express01.png" alt=""></p><p>express非常有人性化，已经告诉你怎么进入blog项目及其安装相关的库依赖和启动了，你只需按照它的这个步骤，一步一步来就行了。</p><h4><span id="b目录结构分析">b.目录结构分析</span></h4><h5><span id="示意图如下所示">示意图如下所示:</span></h5><p><img src="/2019/03/01/node-js使用express框架进行文件上传/express02.png" alt=""><br>app.js:——启动文件，也可以说是主文件入口。<br>package.json——定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。npm install命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境。<br>node_modules——存放package.json中安装的模块，当你在package.json添加依赖的模块并安装后，存放在这个文件夹下<br>public——存放image、css、js等文件<br>routes——存放路由文件<br>views——存放视图文件或者说模板文件<br>bin——存放可执行文件</p><h2><span id="2使用express框架进行文件上传">2.使用express框架进行文件上传</span></h2><p>注意，目录结构如下所示(我主要是复用最近研究的mock-github-api):<br><img src="/2019/03/01/node-js使用express框架进行文件上传/express03.png" alt=""></p><h4><span id="a准备html文件">a.准备html文件</span></h4><p>public文件夹主要放置静态文件，如index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;文件上传&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;文件上传：&lt;/h3&gt;</span><br><span class="line">    选择一个文件上传: &lt;br /&gt;</span><br><span class="line">    &lt;form action=&quot;/gists&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;file&quot; name=&quot;content&quot; /&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;上传文件&quot; /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h4><span id="b编写相关的js">b.编写相关的js</span></h4><p>像upload.js属于路由，通常放置在routes文件夹下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var multer  = require(&apos;multer&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">var upload = multer(&#123;dest: &apos;upload_tmp/&apos;&#125;);</span><br><span class="line"></span><br><span class="line">router.post(&apos;/&apos;, upload.any(), function(req, res, next) &#123;</span><br><span class="line">    console.log(req.files[0]);  // 上传的文件信息</span><br><span class="line"></span><br><span class="line">    var des_file = &quot;./upload/&quot; + req.files[0].originalname;</span><br><span class="line">    fs.readFile( req.files[0].path, function (err, data) &#123;</span><br><span class="line">        fs.writeFile(des_file, data, function (err) &#123;</span><br><span class="line">            if( err )&#123;</span><br><span class="line">                console.log( err );</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                response = &#123;</span><br><span class="line">                    message:&apos;File uploaded successfully&apos;,</span><br><span class="line">                    filename:req.files[0].originalname</span><br><span class="line">                &#125;;</span><br><span class="line">                console.log( response );</span><br><span class="line">                res.end( JSON.stringify( response ) );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure></p><h4><span id="c上传文件及其效果">c.上传文件及其效果</span></h4><h5><span id="页面图">页面图:</span></h5><p><img src="/2019/03/01/node-js使用express框架进行文件上传/express04.png" alt=""></p><h5><span id="上传成功显示图">上传成功显示图:</span></h5><p><img src="/2019/03/01/node-js使用express框架进行文件上传/express05.png" alt=""></p><h5><span id="upload文件夹下会有对应的文件也就是你刚刚通过页面上传的文件">upload文件夹下会有对应的文件(也就是你刚刚通过页面上传的文件)</span></h5><p><img src="/2019/03/01/node-js使用express框架进行文件上传/express06.png" alt=""></p><p>最后例子中还有阿里云和腾讯云的图片存储，大家可以做一个参考。</p><p>源码地址为:<a href="https://github.com/developers-youcong/mock-github-api" target="_blank" rel="noopener">https://github.com/developers-youcong/mock-github-api</a></p><p>希望能够对大家有所启发和帮助</p><p>注意，可能遇到的问题:</p><p>问题一:静态资源需要放行，否则无法访问<br>在index.js补充这段代码即可解决这个问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)))</span><br></pre></td></tr></table></figure></p><p>问题二:socket hang up</p><p>我将var bodyParser = require(‘body-parser’)去除就解决了这个问题</p><p>参考链接如:<a href="https://blog.csdn.net/gsying1474/article/details/52200445" target="_blank" rel="noopener">https://blog.csdn.net/gsying1474/article/details/52200445</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx让所有的http地址重定向到https</title>
      <link href="/2019/03/01/nginx%E8%AE%A9%E6%89%80%E6%9C%89%E7%9A%84http%E5%9C%B0%E5%9D%80%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0https/"/>
      <url>/2019/03/01/nginx%E8%AE%A9%E6%89%80%E6%9C%89%E7%9A%84http%E5%9C%B0%E5%9D%80%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0https/</url>
      
        <content type="html"><![CDATA[<p>问:为什么让所有的http都重定向到https呢？<br>答:因为这样会使网站更安全些。<br><a id="more"></a><br>那么我是如何在nginx配置，让输入<a href="http://www.youcongtech.com或者youcongtech.com全部都重定向到https://www.youcongtech.com的呢？" target="_blank" rel="noopener">http://www.youcongtech.com或者youcongtech.com全部都重定向到https://www.youcongtech.com的呢？</a><br>其实我仅仅只是在nginx.conf配置文件中的server配置了如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^(.*)$  https://$host$1 permanent;</span><br></pre></td></tr></table></figure></p><p>这段配置的含义将所有的http请求通过rewrite重写到https上。</p><p>下面贴一下我的nginx.conf配置文件(主要重要的):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"> upstream  www.youcongtech.com&#123;</span><br><span class="line">         server   39.107.110.227:2019;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.youcongtech.com;</span><br><span class="line">        rewrite ^(.*)$  https://$host$1 permanent;</span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location ~ / &#123;</span><br><span class="line">            root /usr/local/nginx/html;</span><br><span class="line">            index index.html index.htm;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      server &#123;</span><br><span class="line">        listen 443;</span><br><span class="line">        server_name www.youcongtech.com;</span><br><span class="line">        ssl on;</span><br><span class="line">        index index.html;</span><br><span class="line">        ssl_certificate /usr/local/nginx/cert/18540291_www.youcongtech.com.pem;</span><br><span class="line">        ssl_certificate_key /usr/local/nginx/cert/18540291_www.youcongtech.com.key;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_set_header X-Forwarded-Host $host;</span><br><span class="line">                proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">                proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                proxy_set_header Host $http_host;</span><br><span class="line">                proxy_redirect off;</span><br><span class="line">                expires off;</span><br><span class="line">                sendfile off;</span><br><span class="line">                proxy_pass http://www.youcongtech.com;</span><br><span class="line">                root /usr/local/nginx/html;</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    location ~ ^/blog/(.*)&#123;</span><br><span class="line">                 proxy_set_header Host $host;</span><br><span class="line">                 proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                 proxy_pass http://www.youcongtech.com;    #转向tomcat处理</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面参数到底是什么意思，加或者不加到底会怎么样，关于nginx参数详解和更好的优化，后续会有详细的讲解，我会继续编写我的博客系统，并以此作为案例。<br>当然了，如果公司涉及这块比较多，后续我也会以公司案例来给大家讲解。</p><p>本文主要参考该地址:<a href="https://www.cnblogs.com/kevingrace/p/6187072.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevingrace/p/6187072.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置https</title>
      <link href="/2019/02/26/nginx%E9%85%8D%E7%BD%AEhttps/"/>
      <url>/2019/02/26/nginx%E9%85%8D%E7%BD%AEhttps/</url>
      
        <content type="html"><![CDATA[<p>其实nginx配置也差不太多，虽然差不太多，但还是有区别的。<br><a id="more"></a><br>假定你已经在阿里云完成了证书申请，接下来你就可以按照如下配置(主要是修改nginx.conf文件)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 443;</span><br><span class="line">        server_name www.youcongtech.com;</span><br><span class="line">        ssl on;</span><br><span class="line">        index index.html;</span><br><span class="line">        ssl_certificate /usr/local/nginx/cert/1854029_www.youcongtech.com.pem;</span><br><span class="line">        ssl_certificate_key /usr/local/nginx/cert/1854029_www.youcongtech.com.key;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_set_header X-Forwarded-Host $host;</span><br><span class="line">                proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">                proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                proxy_set_header Host $http_host;</span><br><span class="line">                proxy_redirect off;</span><br><span class="line">                expires off;</span><br><span class="line">                sendfile off;</span><br><span class="line">                proxy_pass http://www.youcongtech.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按照这样配置你不一定成功，可能会遇见下面的几个错误？</p><h2><span id="错误1">错误1</span></h2><p>错误信息:ubuntu error: SSL modules require the OpenSSL library.</p><p>解决办法:<br>执行该命令即可解决:sudo apt-get install openssl libssl-dev<br>参考链接为:<a href="https://yq.aliyun.com/articles/486172" target="_blank" rel="noopener">https://yq.aliyun.com/articles/486172</a></p><h2><span id="错误2">错误2</span></h2><p>错误信息:nginx: [emerg] unknown directive “ssl” in /usr/local/nginx/conf/nginx.conf:188</p><p>解决办法:<br>在Nginx解压目录执行该命令:./configure –with-http_ssl_module</p><p>参考链接为:<a href="https://blog.csdn.net/weiyangdong/article/details/80008543" target="_blank" rel="noopener">https://blog.csdn.net/weiyangdong/article/details/80008543</a></p><p>如果你对此还有疑问的话，可以参考这个链接:<a href="https://www.cnblogs.com/tianhei/p/7726505.html" target="_blank" rel="noopener">https://www.cnblogs.com/tianhei/p/7726505.html</a><br>这个链接会讲如何申请证书到配置https成功。</p><p>最后在浏览器输入:<a href="https://www.youcongtech.com" target="_blank" rel="noopener">https://www.youcongtech.com</a> 你会看到一个博客界面或者是一个Nginx欢迎页。<br>当然了，目前我的阿里云域名尚在认证中，过段时间就可以申请下来了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode源码编译运行打包使其由英文变为中文</title>
      <link href="/2019/02/25/vscode%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E6%89%93%E5%8C%85%E4%BD%BF%E5%85%B6%E7%94%B1%E8%8B%B1%E6%96%87%E5%8F%98%E4%B8%BA%E4%B8%AD%E6%96%87/"/>
      <url>/2019/02/25/vscode%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E6%89%93%E5%8C%85%E4%BD%BF%E5%85%B6%E7%94%B1%E8%8B%B1%E6%96%87%E5%8F%98%E4%B8%BA%E4%B8%AD%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p>vscode默认是英文，如果你想让其变为中文，可参考这个链接:<a href="https://blog.csdn.net/testcs_dn/article/details/75070415" target="_blank" rel="noopener">https://blog.csdn.net/testcs_dn/article/details/75070415</a></p><p>最近发现一个很奇怪的问题，vscode打包前和打包后存在很大的不同的，正常来说，比如我们开发项目，实际上来说，本地怎么样，线上就怎么样，当然了，也不排除一些线上导致的bug。</p><p>比如vscode源码已经启用了中文语言包插件，同时也修改了locale.json文件(将文件中的en改为zh-CN)，但是还是是英文，后来我转念一想，将这个中文语言包弄到打包好的插件放置处，最后发现居然可以了。</p><p>当然了，也存在一点问题，问题是绝大部分可以翻译为中文，少部分还是英文。<br><a id="more"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VsCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云配置tomcat https</title>
      <link href="/2019/02/25/%E9%98%BF%E9%87%8C%E4%BA%91%E9%85%8D%E7%BD%AEtomcat-https/"/>
      <url>/2019/02/25/%E9%98%BF%E9%87%8C%E4%BA%91%E9%85%8D%E7%BD%AEtomcat-https/</url>
      
        <content type="html"><![CDATA[<p>阿里云申请免费的SSL证书和配置https，可参考该篇博文:<a href="https://blog.csdn.net/baidu_19473529/article/details/70037976" target="_blank" rel="noopener">https://blog.csdn.net/baidu_19473529/article/details/70037976</a></p><p>虽然有现成的，不过我还是要做一个小小的总结记录一下。</p><p>由于我公司使用的tomcat主要是8.5,所以我以8.5配置作为讲解(总的来说，配置相差不大)</p><p>假定你已经在阿里云成功申请到免费的SSL证书，现在我们开始来配置。<br><a id="more"></a></p><h2><span id="1首先讲pfx文件放在tomcat的一个叫cert的文件夹tomcat实际上没有这个文件夹你可以选择手动创建一个">1.首先讲pfx文件放在tomcat的一个叫cert的文件夹(tomcat实际上没有这个文件夹，你可以选择手动创建一个)</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd tomcat8</span><br><span class="line">mkdir cert</span><br></pre></td></tr></table></figure><h2><span id="2修改serverxml">2.修改server.xml</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span><br><span class="line">               maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot;  scheme=&quot;https&quot;</span><br><span class="line">    secure=&quot;true&quot;</span><br><span class="line">               &gt;</span><br><span class="line">        &lt;SSLHostConfig&gt;</span><br><span class="line">             &lt;Certificate certificateKeystoreFile=&quot;cert/test.pfx&quot;</span><br><span class="line">                         certificateKeystoreType=&quot;PKCS12&quot; certificateKeystorePassword=&quot;1541231341210&quot; /&gt;</span><br><span class="line">        &lt;/SSLHostConfig&gt;</span><br><span class="line">    &lt;/Connector&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">               connectionTimeout=&quot;20000&quot;</span><br><span class="line">               redirectPort=&quot;443&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;443&quot; /&gt;</span><br></pre></td></tr></table></figure><h2><span id="3修改webxml">3.修改web.xml</span></h2><p>编辑web.xml，不加下面这段的话不能把http请求转为https<br>在该文件标签（一般在文件最末尾）后面加上这样一段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;login-config&gt;  </span><br><span class="line">    &lt;!-- Authorization setting for SSL --&gt;  </span><br><span class="line">    &lt;auth-method&gt;CLIENT-CERT&lt;/auth-method&gt;  </span><br><span class="line">    &lt;realm-name&gt;Client Cert Users-only Area&lt;/realm-name&gt;  </span><br><span class="line">&lt;/login-config&gt;  </span><br><span class="line">&lt;security-constraint&gt;  </span><br><span class="line">    &lt;!-- Authorization setting for SSL --&gt;  </span><br><span class="line">    &lt;web-resource-collection &gt;  </span><br><span class="line">        &lt;web-resource-name &gt;SSL&lt;/web-resource-name&gt;  </span><br><span class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  </span><br><span class="line">    &lt;/web-resource-collection&gt;  </span><br><span class="line">    &lt;user-data-constraint&gt;  </span><br><span class="line">        &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;  </span><br><span class="line">    &lt;/user-data-constraint&gt;  </span><br><span class="line">&lt;/security-constraint&gt;</span><br></pre></td></tr></table></figure></p><p>本文主要参考该篇博文<a href="https://blog.csdn.net/qq_35624642/article/details/83016813" target="_blank" rel="noopener">Tomcat8、9配置https SSL证书 阿里云的免费dv证书</a></p><p>另外为了调试方便，本地tomcat还需配置https,关于windowns配置https，可参考该篇博文<a href="https://blog.csdn.net/u014793522/article/details/54846973" target="_blank" rel="noopener">本地windows搭建https</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot打成的jar包如何在Linux上持久运行</title>
      <link href="/2019/02/23/springboot%E6%89%93%E6%88%90%E7%9A%84jar%E5%8C%85%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E4%B8%8A%E6%8C%81%E4%B9%85%E8%BF%90%E8%A1%8C/"/>
      <url>/2019/02/23/springboot%E6%89%93%E6%88%90%E7%9A%84jar%E5%8C%85%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E4%B8%8A%E6%8C%81%E4%B9%85%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-首先说说在没有springboot的时候项目是如何部署的">一、首先说说在没有springboot的时候，项目是如何部署的？</span></h2><h4><span id="1动态web项目">1.动态web项目</span></h4><p>动态web项目部署很方便，基本上上传文件到服务器的tomcat里面的webapps文件夹下即可完成部署。<br>当然了，这种做法的弊端是，如果是通过winscp来传输对于网速方面要求严格，不然的话网速一卡，很久传不过去，很耽误时间的，当然了，我一个同学他们公司用的就是动态web项目，部署的方式也正是采用这种方式，据说是公司制度定下的。原因我就没有细问过他。</p><p>当然了，有人会说，那我上传到服务器之前将其压缩成一个zip包，然后在Linux通过unzip命令解压。这种方式我以前也这么干过。<br>当我后来发现将动态web项目导出war包，直接通过winscp上传到tomcat对应的目录下，在当前目录就会产生一个文件夹，该文件夹主要是web相关的资源，还有就是java产生的编译文件class等。</p><p>由此可以推出动态web项目常规部署方式有这么几种?<br>a.直接上传到tomcat对应的目录下;<br>b.先打成zip包然后再传输到tomcat对应的目录下;<br>c.本地导出war包，然后在传输到tomcat对应的目录下;</p><p>其实a和b是一样的，c则是利用Eclipse的导出war功能来实现的。<br><a id="more"></a></p><h4><span id="2maven项目">2.maven项目</span></h4><p>maven项目的部署以war项目为例，直接通过mvn install 或者mvn clean package直接打包上传到服务器上，就即可完成部署。<br>当然了，还可以通过写一个脚本利用git clone的特性加上maven，也可以完成快速部署</p><p>来个小结:<br>现在使用动态web项目都是一些老公司维护一些老的项目，总而言之，现在大部分都在用mavne，当然，也不排除有一部分用grandle或ant等。<br>其实发现用maven以后除了有些时候导入依赖(依赖之间因版本冲突问题，为此我感到烦之外，其它都还好)。</p><p>说完这两种项目部署后，下面我再说springboot打包成jar，如何在Linux上持久运行。</p><h2><span id="二-springboot打成的jar如何在linux上持久运行">二、springboot打成的jar如何在Linux上持久运行</span></h2><p>首先呢？你本地要有一个springboot的项目，如果没有可以参考我的这篇博客写一个,<a href="https://www.cnblogs.com/youcong/p/8098861.html" target="_blank" rel="noopener">springboot入门程序</a></p><p>然后呢？你要有一个虚拟机搭建一个Linux服务器或者是远程服务器(阿里云或者腾讯云、百度云、美团云等)。</p><p>再然后，你还要有一个winscp，winscp官网地址为:<a href="https://winscp.net/eng/docs/lang:chs(你可以去官网下载)" target="_blank" rel="noopener">https://winscp.net/eng/docs/lang:chs(你可以去官网下载)</a></p><p>最后将springboot打包(确保本地运行没有问题)，利用winscp上传到Linux上。</p><p>通过该命令运行jar包:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar blog.jar &gt; system.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><p>会在本地有一个system.log文件产生，通过该文件你可以看到对应的日志输出。</p><p>下面我们对这条命令进行分析</p><p>nohub一般形式为如下:</p><p>nohub command &amp;</p><p>但是当你退出账户时，仍然会停止对应的进程。</p><p>所以这就需要你在后面添加 2&gt;&amp;1 &amp;(相当于正常退出，仍保持命令在后台运行)</p><p>上面这个command正好对上java -jar blog.jar &gt; system.log</p><p>“&gt;” 输出重定向，通常用于输出日志</p><p>本文主要参考该地址:<a href="https://www.cnblogs.com/createhappy/p/9375874.html" target="_blank" rel="noopener">https://www.cnblogs.com/createhappy/p/9375874.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将博客园的数据迁移到wordpress上面</title>
      <link href="/2019/02/23/%E5%A6%82%E4%BD%95%E5%B0%86%E5%8D%9A%E5%AE%A2%E5%9B%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E5%88%B0wordpress%E4%B8%8A%E9%9D%A2/"/>
      <url>/2019/02/23/%E5%A6%82%E4%BD%95%E5%B0%86%E5%8D%9A%E5%AE%A2%E5%9B%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E5%88%B0wordpress%E4%B8%8A%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>有些时候我不得不惊叹软件系统的强大。<br>比如如果不是今天我想着将博客园的数据迁移到wordpress上，也许我不会认识到wordpress的强大之处。<br>之所以导入是因为我觉得已经有现成的数据，我自己就不必造太多假数据，省事。<br>之前还想着如果实在不想就用python爬取数据将其存到数据库中，同时也还想着一个笨办法(传统的cv大法)。<br><a id="more"></a><br>从博客园迁移数据到wordpress对应的插件为:<a href="https://wordpress.org/plugins/cnblogs2wp/" target="_blank" rel="noopener">https://wordpress.org/plugins/cnblogs2wp/</a></p><p>如果你的wordpress本身存在某些问题，可以参考如下链接:<br>wordpress之插件安装和主题安装(包含常见问题):<a href="https://www.cnblogs.com/youcong/p/9245621.html" target="_blank" rel="noopener">https://www.cnblogs.com/youcong/p/9245621.html</a><br>如果是因为文件上传大小限制，可找到对应的php.ini修改<br>参考链接如:<a href="https://jingyan.baidu.com/article/c85b7a64570aad003bac95ad.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/c85b7a64570aad003bac95ad.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wordpress数据表分析</title>
      <link href="/2019/02/23/wordpress%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%88%86%E6%9E%90/"/>
      <url>/2019/02/23/wordpress%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>wordpress一共是有12个表的:<br>|wp_commentmeta        |<br>| wp_comments           |<br>| wp_links              |<br>| wp_options            |<br>| wp_postmeta           |<br>| wp_posts              |<br>| wp_term_relationships |<br>| wp_term_taxonomy      |<br>| wp_termmeta           |<br>| wp_terms              |<br>| wp_usermeta           |<br>| wp_users                 |</p><p>主要参考这篇文章:<a href="https://www.cnblogs.com/wordblog/p/6591499.html" target="_blank" rel="noopener">WordPress数据库及各表结构分析</a><br>另外没有搭建过wordpress的朋友们，可以参考我的这篇文章搭建wordpress和对wordpress有一个大致的了解，文章为<a href="https://www.cnblogs.com/youcong/p/9671294.html" target="_blank" rel="noopener">wordpress研究</a><br><a id="more"></a><br>十二个表对应的职能如下所示:</p><p>wp_commentmeta:存储评论的元数据<br>wp_comments:存储评论<br>wp_links:存储友情链接<br>wp_options:存储wordpress系统选项和插件、主题配置<br>wp_postmeta:存储文章(包括页面、上传文件、修订)的元数据<br>wp_posts:存储文章(包括页面、上传文件、修订)<br>wp_term_relationships:存储每个文章、链接和对应分类的关系<br>wp_term_taxonomy:存储每个目录、标签所对应的分类<br>wp_termmeta:存储网站分类和标签的属性<br>wp_terms:存储每个目录、标签<br>wp_usermeta:存储用户的元数据<br>wp_users:存储用户</p><h4><span id="wp_commentmeta">wp_commentmeta:</span></h4><p>meta_id:自增唯一ID<br>comment_id:对应评论ID<br>meta_key:键名<br>meta_value:键值</p><h4><span id="wp_comments">wp_comments</span></h4><p>comment_ID:自增唯一ID<br>comment_post_ID:对应文章ID<br>comment_author:评论者<br>comment_author_email:评论者邮箱<br>comment_author_url:评论者网址<br>comment_date:评论时间<br>comment_date_gmt:评论时间(GMT+0时间)<br>comment_content:评论正文<br>comment_karma:未知(通过搜索引擎查找，这个字段在wordpress中并没有起到作用)<br>comment_approved:评论是否被批准<br>comment_agent:评论者的USER_AGENT<br>comment_type:评论类型(<a href="https://baike.baidu.com/item/PingBack/6316909?fr=aladdin" target="_blank" rel="noopener">PingBack</a>/普通)<br>comment_parent:父评论ID<br>user_id:评论者用户ID(不一定存在，考虑到游客或者其它因素)</p><h4><span id="wp_links">wp_links</span></h4><p>link_id:自增唯一ID<br>link_url:链接URL<br>link_name:链接标题<br>link_image:链接图片<br>link_target:链接打开方式<br>link_description:链接描述<br>link_visible:是否可见(Y/N)<br>link_owner:添加者用户ID<br>link_rating:评分等级<br>link_updated:未知<br>link_rel:XFN关系(关于XFN关系，了解详情，请参考该篇博文:<a href="https://www.fujieace.com/wordpress/xfn.html" target="_blank" rel="noopener">https://www.fujieace.com/wordpress/xfn.html</a>)<br>link_notes:XFN注释<br>link_rss:链接RSS地址</p><h4><span id="wp_options">wp_options</span></h4><p>option_id:自增唯一ID<br>blog_id:博客ID，用于多用户博客，默认为0<br>option_name:键名<br>option_value:键值<br>authload:在WordPress载入时自动载入(yes/no)</p><h4><span id="wp_postmeta">wp_postmeta</span></h4><p>meta_id:自增唯一ID<br>post_id:对应文章ID<br>meta_key:键名<br>meta_value:键值</p><h4><span id="wp_posts">wp_posts</span></h4><p>ID:自增唯一ID<br>post_author:对应作者ID<br>post_date:发布时间<br>post_date_gmt:发布时间(GMT+0时间)<br>post_content:正文<br>post_title:标题<br>post_excerpt:摘录<br>post_status:文章状态(publish/auto-draft/inherit)<br>post_password:文章密码<br>post_name:文章缩略名<br>to_ping:ping的链接<br>pinged:已经PING过的链接<br>post_modified:修改时间<br>post_modified_gmt:修改时间(GMT+0时间)<br>post_content_filtered:未知<br>post_parent:父文章，主要用于page<br>guid:未知<br>menu_order:排序ID<br>post_type:文章类型(post/page等)<br>post_mime_type:MIME类型<br>comment_count:评论总数</p><h4><span id="wp_terms">wp_terms</span></h4><p>term_id:分类ID<br>name:分类名<br>slug:缩略名<br>term_group:未知</p><h4><span id="wp_term_relationships">wp_term_relationships</span></h4><p>object_id:对应文章ID/链接ID<br>term_taxonomy_id:对应分类方法ID<br>term_order:排序</p><h4><span id="wp_term_taxonomy">wp_term_taxonomy</span></h4><p>term_taxonomy_id:wp_term_taxonomy表ID<br>term_id:对应wp_terms表中的ID<br>taxonomy:表示分类系统(category/post_tag)<br>description:分类描述<br>parent:父分类ID<br>count:分类文章总数</p><h4><span id="wp_usermeta">wp_usermeta</span></h4><p>umeta_id:自增唯一ID<br>user_id:对应用户ID<br>meta_key:键名<br>meta_value:键值</p><h4><span id="wp_users">wp_users</span></h4><p>ID:自增唯一ID<br>user_login:登录名<br>user_pass:密码<br>user_nickname:昵称<br>user_email:邮箱<br>user_url:网址<br>user_registered:注册时间<br>user_status:用户状态<br>display_name:显示名称</p><p>通过上述我们知道了wordpress十二张表的含义了。但是我仍然不打算快速入手开发。<br>原因很简单，感性认识不够。<br>那么如何加深这个感性认识呢？<br>那就是使用。<br>我将把我在上面的使用写一个文档。</p><p>wordpress针对用户有这么几个角色设置(对应着权限):<br>管理员、订阅者、投稿者、作者、编辑等。</p><p>以我个人的理解如下:</p><p>管理员肯定是拥有绝对权限的。</p><p>订阅者，就好比我们订报纸，每天早上都会有邮政的人将报纸送到邮箱里，我们就可以拿起报纸阅读了。</p><p>投稿者:投稿者就更好理解了，写完稿子递交上去，如果稿子ok没有问题，就可以在对应的周刊上登记了。</p><p>作者:以我在博客园发布文章，博客园作为一个平台，我在上面可以随时编写文章然后发布，不需要经过任何人审批以后才能发布(当然了，发布首页给广大的朋友们看，还是需要经过审批的)</p><p>编辑:我觉得可以和阿里云云栖社区联系起来，我之前将博客园迁移到云栖社区，在该社区每次发布一篇文章需要经过人工审核，人工审核通过后才能给别人看到，这个编辑可以随意删除文章禁止文章发布。</p><p>关于wordpress权限含义可以参考这篇文章:<a href="https://baijiahao.baidu.com/s?id=1611569585137454290&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1611569585137454290&amp;wfr=spider&amp;for=pc</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈存储系统</title>
      <link href="/2019/02/23/%E8%B0%88%E8%B0%88%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/02/23/%E8%B0%88%E8%B0%88%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>文件存储是开发中常常用到的。下面我将对如下存储系统进行说明:</p><ul><li>阿里云OSS</li><li>ftp</li><li>Java常规存储</li></ul><h2><span id="一-阿里云oss">一、阿里云OSS</span></h2><p>阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。其数据设计持久性不低于99.999999999%，服务设计可用性不低于99.99%。具有与平台无关的RESTful API接口，您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p><p>您可以使用阿里云提供的API、SDK接口或者OSS迁移工具轻松地将海量数据移入或移出阿里云OSS。数据存储到阿里云OSS以后，您可以选择标准类型（Standard）的阿里云OSS服务作为移动应用、大型网站、图片分享或热点音视频的主要存储方式，也可以选择成本更低、存储期限更长的低频访问类型（Infrequent Access）和归档类型（Archive）的阿里云OSS服务作为不经常访问数据的备份和归档。<br>(引自官方文档，官方文档可参考:<a href="https://help.aliyun.com/video_detail/39708.html?spm=5176.10695662.1996646101.searchclickresult.6ce04d08gnXv2N" target="_blank" rel="noopener">https://help.aliyun.com/video_detail/39708.html?spm=5176.10695662.1996646101.searchclickresult.6ce04d08gnXv2N</a>)<br><a id="more"></a><br>使用步骤(均来自官方文档)</p><h3><span id="1加入maven依赖">1.加入Maven依赖</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3><span id="2编写上传类">2.编写上传类</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import java.io.ByteArrayInputStream;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line"></span><br><span class="line">import com.aliyun.oss.OSSClient;</span><br><span class="line">import com.aliyun.oss.model.GetObjectRequest;</span><br><span class="line"></span><br><span class="line">public class UploadOSS &#123;</span><br><span class="line">    //上传文件(以上传图片为例)</span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">// Endpoint以杭州为例，其它Region请按实际情况填写。</span><br><span class="line">String endpoint = &quot;http://oss-cn-beijing.aliyuncs.com&quot;;</span><br><span class="line">// 阿里云主账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM账号进行API访问或日常运维，请登录 https://ram.console.aliyun.com 创建RAM账号。</span><br><span class="line">String accessKeyId = &quot;访问密钥ID&quot;;</span><br><span class="line">String accessKeySecret = &quot;访问密钥&quot;;</span><br><span class="line">String bucketName = &quot;challenegertech&quot;;</span><br><span class="line">String objectName=&quot;AdminLTE.PNG&quot;;</span><br><span class="line">// 创建OSSClient实例。</span><br><span class="line">OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">// 上传文件流。</span><br><span class="line">InputStream inputStream = new FileInputStream(&quot;C://Users//eluzhu//Pictures//AdminLTE.PNG&quot;);</span><br><span class="line">ossClient.putObject(bucketName,objectName, inputStream);</span><br><span class="line"></span><br><span class="line">// 关闭OSSClient。</span><br><span class="line">ossClient.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或许有人问，不太明白上述参数是从那里获取到的，这里我建议去官方文档上面看，如下:<br><a href="https://help.aliyun.com/video_detail/39708.html?spm=5176.10695662.1996646101.searchclickresult.6ce04d08gnXv2N" target="_blank" rel="noopener">https://help.aliyun.com/video_detail/39708.html?spm=5176.10695662.1996646101.searchclickresult.6ce04d08gnXv2N</a></p><p>像腾讯云、百度云、七牛云等存储系统，其实和阿里云相差并不大，都可以用。我公司其中一个项目用到的存储系统就是腾讯云。像我之前研究的一个jeesite开源项目，其存储系统主要用的是七牛云。</p><p>关于腾讯云、百度云、七牛云详细对比，感兴趣的可以参考这篇文章<a href="http://www.chinaz.com/news/2017/0724/792857.shtml" target="_blank" rel="noopener">腾讯云、七牛云、阿里云存储对比</a></p><h2><span id="二-ftp">二、ftp</span></h2><p>由于我主要参考wordpress，所以关于存储那块，我也准备采用ftp的方式。<br>关于FTP服务搭建可以参考如下文章:<br><a href="http://https://www.cnblogs.com/youcong/p/7820050.html" target="_blank" rel="noopener">FTP服务搭建(以CentOS7为例)</a><br><a href="https://www.cnblogs.com/YangJieCheng/p/8252577.html" target="_blank" rel="noopener">FTP服务搭建(以Ubuntu16.04为例)</a></p><p>关于Java当中如何使用FTP上传下载文件，大家可以参考如下步骤:</p><h4><span id="1添加maven依赖">1.添加maven依赖</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-net&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-net&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4><span id="2添加配置类主要是ftp配置相关信息">2.添加配置类(主要是ftp配置相关信息)</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.springboot.config;</span><br><span class="line"></span><br><span class="line">public class FtpConfig &#123;</span><br><span class="line">private int port; //ftp端口</span><br><span class="line">private String ftpLoginName; //ftp服务器登录账户</span><br><span class="line">private String ftpLoginPwd; //ftp服务器登录密码</span><br><span class="line">private String hostName; //ftp主机ip</span><br><span class="line">private String basePath; //ftp文件基础路径</span><br><span class="line">private String baseImgUrl; //ftp前端界面图片访问路径</span><br><span class="line"></span><br><span class="line">public String getBasePath() &#123;</span><br><span class="line">    return basePath;</span><br><span class="line">&#125;</span><br><span class="line">public void setBasePath(String basePath) &#123;</span><br><span class="line">    this.basePath = basePath;</span><br><span class="line">&#125;</span><br><span class="line">public String getBaseImgUrl() &#123;</span><br><span class="line">    return baseImgUrl;</span><br><span class="line">&#125;</span><br><span class="line">public void setBaseImgUrl(String baseImgUrl) &#123;</span><br><span class="line">    this.baseImgUrl = baseImgUrl;</span><br><span class="line">&#125;</span><br><span class="line">public int getPort() &#123;</span><br><span class="line">    return port;</span><br><span class="line">&#125;</span><br><span class="line">public void setPort(int port) &#123;</span><br><span class="line">    this.port = port;</span><br><span class="line">&#125;</span><br><span class="line">public String getFtpLoginName() &#123;</span><br><span class="line">    return ftpLoginName;</span><br><span class="line">&#125;</span><br><span class="line">public void setFtpLoginName(String ftpLoginName) &#123;</span><br><span class="line">    this.ftpLoginName = ftpLoginName;</span><br><span class="line">&#125;</span><br><span class="line">public String getFtpLoginPwd() &#123;</span><br><span class="line">    return ftpLoginPwd;</span><br><span class="line">&#125;</span><br><span class="line">public void setFtpLoginPwd(String ftpLoginPwd) &#123;</span><br><span class="line">    this.ftpLoginPwd = ftpLoginPwd;</span><br><span class="line">&#125;</span><br><span class="line">public String getHostName() &#123;</span><br><span class="line">    return hostName;</span><br><span class="line">&#125;</span><br><span class="line">public void setHostName(String hostName) &#123;</span><br><span class="line">    this.hostName = hostName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="3添加工具类并编写main方法测试">3.添加工具类并编写main方法测试</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line">package com.blog.springboot.utils;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.net.SocketException;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.net.ftp.FTP;</span><br><span class="line">import org.apache.commons.net.ftp.FTPClient;</span><br><span class="line">import org.apache.commons.net.ftp.FTPFile;</span><br><span class="line">import org.apache.commons.net.ftp.FTPReply;</span><br><span class="line"></span><br><span class="line">import com.blog.springboot.controller.AbstractController;</span><br><span class="line"></span><br><span class="line">public class FtpUtils extends AbstractController&#123;</span><br><span class="line">    FTPClient ftpClient=new FTPClient();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * @param hostName ftp服务器主机名ip</span><br><span class="line">     * @param port  ftp服务器连接断口</span><br><span class="line">     * @param loginName  ftp服务器登录名</span><br><span class="line">     * @param loginPwd  ftp服务器登录密码</span><br><span class="line">     */</span><br><span class="line">    public void FtpLogin(String hostName,int port,String loginName,String loginPwd)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            ftpClient.connect(hostName, port);</span><br><span class="line">            ftpClient.login(loginName, loginPwd);</span><br><span class="line">            int reply=ftpClient.getReplyCode();   //判断ftp是否正确连接,返回状态码值在200~300之间表示正确连接</span><br><span class="line">            logger.info(&quot;reply:&quot;+reply);</span><br><span class="line">            if(!FTPReply.isPositiveCompletion(reply))&#123;</span><br><span class="line">                ftpClient.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (SocketException e) &#123;</span><br><span class="line">            logger.error(&quot;socket错误：&quot;,e);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            logger.error(&quot;io错误：&quot;,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 断开ftp连接</span><br><span class="line">     */</span><br><span class="line">    public void closeConnection()&#123;</span><br><span class="line">        if(ftpClient.isConnected())&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                ftpClient.disconnect();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                logger.error(&quot;io错误：&quot;,e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 修改文件名为uuid开头避免文件名重复</span><br><span class="line">     * @param fileName 获取上传的文件名</span><br><span class="line">     * @return 新的文件名</span><br><span class="line">     */</span><br><span class="line">    public String getFileSuffName(String fileName)&#123;</span><br><span class="line">        File file=new File(fileName);</span><br><span class="line">        String oldFileName=file.getName();</span><br><span class="line">        String suffixFileName=oldFileName.substring(oldFileName.lastIndexOf(&quot;.&quot;)+1);</span><br><span class="line"></span><br><span class="line">        String uuid=UUID.randomUUID().toString().replace(&quot;-&quot;,&quot;&quot;);</span><br><span class="line">        String newFileName=uuid+&quot;.&quot;+suffixFileName;</span><br><span class="line"></span><br><span class="line">        return newFileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 上传文件</span><br><span class="line">     * @param filePath 文件路径，如 2019/02/23</span><br><span class="line">     * @param basePath 基础路径  /home/ftpUpFile/</span><br><span class="line">     * @param is 文件流</span><br><span class="line">     * @param fileName 文件名称</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public boolean uploadFile(String filePath,String basePath,InputStream is,String fileName)&#123;</span><br><span class="line">        boolean flag=false;</span><br><span class="line">        try &#123;</span><br><span class="line">            if(!ftpClient.changeWorkingDirectory(basePath+filePath))&#123;</span><br><span class="line">                String[] dirs=filePath.split(&quot;/&quot;);</span><br><span class="line">                String tempPath=basePath;</span><br><span class="line">                for(String dir:dirs)&#123;</span><br><span class="line">                    if(null==dir || &quot;&quot;.equals(dir))continue;</span><br><span class="line">                    tempPath+=&quot;/&quot;+dir;</span><br><span class="line">                    if(!ftpClient.changeWorkingDirectory(tempPath))&#123;</span><br><span class="line">                        if(!ftpClient.makeDirectory(tempPath))&#123;</span><br><span class="line">                            return flag;</span><br><span class="line">                        &#125;else&#123;</span><br><span class="line">                            ftpClient.changeWorkingDirectory(tempPath);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);//设置文件为二进制流</span><br><span class="line">            if(!ftpClient.storeFile(fileName, is))&#123; //上传文件</span><br><span class="line">                return flag;</span><br><span class="line">            &#125;</span><br><span class="line">            is.close();</span><br><span class="line">            ftpClient.logout();</span><br><span class="line">            flag=true;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            logger.error(&quot;io错误：&quot;,e);</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            closeConnection();</span><br><span class="line">        &#125;</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Description: 从FTP服务器下载文件</span><br><span class="line">     * @param host FTP服务器hostname</span><br><span class="line">     * @param port FTP服务器端口</span><br><span class="line">     * @param username FTP登录账号</span><br><span class="line">     * @param password FTP登录密码</span><br><span class="line">     * @param remotePath FTP服务器上的相对路径</span><br><span class="line">     * @param fileName 要下载的文件名</span><br><span class="line">     * @param localPath 下载后保存到本地的路径</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public  boolean downloadFile(String remotePath,String fileName, String localPath) &#123;</span><br><span class="line">        boolean result = false;</span><br><span class="line">        try &#123;</span><br><span class="line">            ftpClient.changeWorkingDirectory(remotePath);// 转移到FTP服务器目录</span><br><span class="line">            FTPFile[] files = ftpClient.listFiles();</span><br><span class="line">            for (FTPFile ff : files) &#123;</span><br><span class="line">                if (ff.getName().equals(fileName)) &#123;</span><br><span class="line">                    File localFile = new File(localPath + &quot;/&quot; + ff.getName());</span><br><span class="line"></span><br><span class="line">                    OutputStream is = new FileOutputStream(localFile);</span><br><span class="line">                    ftpClient.retrieveFile(ff.getName(), is);</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ftpClient.logout();</span><br><span class="line">            result = true;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            closeConnection();</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws FileNotFoundException &#123;</span><br><span class="line">    FtpUtils f = new FtpUtils();</span><br><span class="line">    f.FtpLogin(&quot;192.168.126.130&quot;, 21, &quot;ftp&quot;, &quot;ftp.&quot;);</span><br><span class="line"></span><br><span class="line">    FileInputStream in=new FileInputStream(new File(&quot;C://Users//test//Downloads//AdminLTE.PNG&quot;));</span><br><span class="line">    f.uploadFile(&quot;image&quot;, &quot;/home/ftpuser/ftp&quot;, in, &quot;AdminLTE.PNG&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="三-java常规存储">三、Java常规存储</span></h2><p>常规存储，一般情况是存在tomcat某个文件夹下，或者是将文件以流的形式写入数据库对应的表中(通常不建议这么做，极大的损耗数据库的I/O流和存储容量)。<br>下面链接大家可以做个参考:<br>Java上传文件到tomcat:<a href="https://blog.csdn.net/qq_41463655/article/details/84145602" target="_blank" rel="noopener">https://blog.csdn.net/qq_41463655/article/details/84145602</a><br>Java常见三种上传文件方式(其中有包括流的方式):<a href="https://blog.csdn.net/weixin_39640122/article/details/80244527" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39640122/article/details/80244527</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js之express框架</title>
      <link href="/2019/02/22/node-js%E4%B9%8Bexpress%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/02/22/node-js%E4%B9%8Bexpress%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>之前学习过node.js接触过express框架，最近为了编写一个mock server正好用到了express。下面正好就跟大家介绍一下关于express。<br>今天的内容主要围绕这么几个方面?</p><ul><li>express框架初步介绍</li><li>express框架中的app.use和app.get/app.post</li><li>mock server 介绍</li><li>mock server的实现思路</li></ul><a id="more"></a><h2><span id="一-express框架初步介绍">一、express框架初步介绍</span></h2><p>关于express框架的介绍，这里我引用菜鸟教程的简介:<br>Express是一个简洁而灵活的node.js web框架，提供了一系列强大特性帮助你创建各种web应用，和丰富的HTTP工具。使用Express可以快速地搭建一个完整功能的网站。</p><h4><span id="1express框架的特性">1.express框架的特性</span></h4><p>（1）可以设置中间件来响应HTTP请求；<br>（2）定义了路由表用于执行不同大的HTTP请求动作；<br>（3）可以通过向模板传递参数来动态渲染HTML页面；</p><h4><span id="2安装express">2.安装express</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save或cnpm install express --save</span><br></pre></td></tr></table></figure><p>以下几个重要需要与express框架一起安装:<br>body-parser -node.js中间件，用于处理JSON，Raw，Text和URL编码的数据；<br>cookie-parser -这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并将它们转为对象；<br>multer - node.js中间件，用于处理enctype=“multipart/form-data”（设置表单mime编码)的表单数据；</p><p>安装命令如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br><span class="line">npm install cookie-parser --save</span><br><span class="line">npm install multer --save</span><br></pre></td></tr></table></figure></p><h4><span id="3express的入门程序">3.express的入门程序</span></h4><p>node_learning.js代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;, function (req, res) &#123;</span><br><span class="line">   res.send(&apos;Hello World&apos;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var server = app.listen(2019, function () &#123;</span><br><span class="line"></span><br><span class="line">  var host = server.address().address</span><br><span class="line">  var port = server.address().port</span><br><span class="line"></span><br><span class="line">  console.log(&quot;应用实例，访问地址为 http://127.0.0.1:2019&quot;, host, port)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2><span id="二-express框架中的appuse和appgetapppost">二、express框架中的app.use和app.get/app.post</span></h2><p>app.use和app.get/app.post其实区别如(引用一位朋友说的):<br>感兴趣的可以参考这个链接:<a href="https://blog.csdn.net/wthfeng/article/details/53366169" target="_blank" rel="noopener">作者做了试验测试过的</a><br>(1)app.use(path,callback)中的callback既可以是router对象又可以是函数<br>(2)app.get(path,callback)中的callback只能是函数</p><p>app.use和app.get/app.post实现几乎大同小异，代码示例如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">function testUser(req, res, next)&#123;</span><br><span class="line"></span><br><span class="line">    // req 参数可以接受一些请求的参数(req.query/req.body) 和 请求头信息</span><br><span class="line"></span><br><span class="line">    // res 用于响应信息</span><br><span class="line"></span><br><span class="line">    // 调用next()方法则进入下一个中间件</span><br><span class="line">res.send(&quot;测试用户&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function testLogin(req,res,next)&#123;</span><br><span class="line"></span><br><span class="line">res.send(&quot;测试登录&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var server = app.listen(2019, function () &#123;</span><br><span class="line"></span><br><span class="line">  var host = server.address().address</span><br><span class="line">  var port = server.address().port</span><br><span class="line"></span><br><span class="line">  console.log(&quot;应用实例，访问地址为 http://127.0.0.1:2019&quot;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//路径匹配</span><br><span class="line"></span><br><span class="line">app.use(&apos;/user&apos;,testUser);</span><br><span class="line"></span><br><span class="line">app.get(&apos;/login&apos;,testLogin);</span><br></pre></td></tr></table></figure></p><p>关于node.js的express框架就介绍这么多，最近本人因实现某个插件的功能而需要用到的，这与下面说的mock server有比较大的关系。</p><h2><span id="三-mock-server-介绍">三、mock server 介绍</span></h2><p>mock server 翻译过来的意思是模拟服务。<br>说到这我相信大家就很容易理解了。至于为什么要模拟服务？<br>比方说现今的业务系统很少有孤立存在的，它们或多或少使用其他公司提供的服务，这给我们联调和测试造成了比较大的麻烦，对于这种情况，常见的解决方案就是搭建一个mock server，模拟那些服务器，提供数据进行联调和测试(这句话，我引用自该链接<a href="https://www.cnblogs.com/fnng/p/7511539.html" target="_blank" rel="noopener">Mock Server 入门</a></p><p><img src="/2019/02/22/node-js之express框架/mock-server.png" alt="如图比较好解释mock-server的作用"></p><h2><span id="四-mock-server的实现思路">四、mock server的实现思路</span></h2><p>现在google或者being搜索mock server 实现思路肯定有很多，这里我就不再赘述。<br>这里我以我自己最近的vscode插件开发来说。<br>我最近的工作是针对Settings-Sync作二次开发<br>关于settings-sync插件，感兴趣的可以参考我的博客园<a href="https://www.cnblogs.com/youcong/p/10380501.html" target="_blank" rel="noopener">Settings-Sync源码阅读</a></p><p>如何实现一个mock server 替换github api地址并确保效果一致?</p><p>针对目前这个需求，我的实现思路如下:</p><p>第一，针对如何实现一个mock server ，可以复用已有，如mock-github-api(其本身是使用node.js的express框架);<br>第二，如何编写，可以按照express框架编写网络请求的方法，如app.get或app.use等;<br>第三，为了保持与githu api一致，我需要引入github rest api，如@octokit/rest;<br>参考api地址为:<a href="https://www.npmjs.com/package/@octokit/rest#authentication" target="_blank" rel="noopener">https://www.npmjs.com/package/@octokit/rest#authentication</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">示例一:</span><br><span class="line">  octokit.repos.listForOrg(&#123;</span><br><span class="line">  org: &apos;octokit&apos;,</span><br><span class="line">  type: &apos;public&apos;</span><br><span class="line">&#125;).then((&#123; data, status, headers &#125;) =&gt; &#123;</span><br><span class="line">  // handle data</span><br><span class="line">  //console.log(&quot;status:&quot;+JSON.stringify(headers));</span><br><span class="line">  //console.log(status);</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;)</span><br><span class="line">返回的octokit相关的api信息(信息太多了，就先简略)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">示例二:</span><br><span class="line">const clientWithAuth = new Octokit(&#123;</span><br><span class="line">    auth: &apos;token secret123&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">console.log(clientWithAuth)//查看详细信息</span><br><span class="line">console.log(JSON.stringify(clientWithAuth))//输出简要信息如下</span><br><span class="line">所示:</span><br><span class="line">返回的信息:</span><br><span class="line">&#123;&quot;log&quot;:&#123;&#125;,&quot;activity&quot;:&#123;&#125;,&quot;apps&quot;:&#123;&#125;,&quot;checks&quot;:&#123;&#125;,&quot;codesOfConduct&quot;:&#123;&#125;,&quot;emojis&quot;:&#123;&#125;,</span><br><span class="line">&quot;gists&quot;:&#123;&#125;,&quot;git&quot;:&#123;&#125;,&quot;gitignore&quot;:&#123;&#125;,&quot;interactions&quot;:&#123;&#125;,&quot;issues&quot;:&#123;&#125;,&quot;licenses&quot;:&#123;&#125;,</span><br><span class="line">&quot;markdown&quot;:&#123;&#125;,&quot;meta&quot;:&#123;&#125;,&quot;migrations&quot;:&#123;&#125;,&quot;oauthAuthorizations&quot;:&#123;&#125;,&quot;orgs&quot;:&#123;&#125;,</span><br><span class="line">&quot;projects&quot;:&#123;&#125;,&quot;pulls&quot;:&#123;&#125;,&quot;rateLimit&quot;:&#123;&#125;,&quot;reactions&quot;:&#123;&#125;,&quot;repos&quot;:&#123;&#125;,&quot;search&quot;:&#123;&#125;,</span><br><span class="line">&quot;teams&quot;:&#123;&#125;,&quot;users&quot;:&#123;&#125;,&quot;gitdata&quot;:&#123;&#125;,&quot;authorization&quot;:&#123;&#125;,&quot;pullRequests&quot;:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四，根据router.json(node_modules\@octokit\rest\plugins\rest-api-endpoints\routes.json)也就是octokit里面定义github rest api的地方(该文件定义了所需的所有的请求信息)，我可以仿照其编写对应的网络请求（美其名依样画葫芦）；</p><p>如果要用一句简单直接的话来概述，模仿github rest api编写一个mock server来替换github，只要接口定义保持一致就可以。<br>但是目前存在一个问题，我在此停滞不前。正在想办法解决这个问题。<br>这个问题是，我参考其对应的rest api文档写代码，但是其返回的信息却并没有我想要的，返回是一大堆没有用处的function之类的，而不是具体的信息。<br>但是以5why原则来看待这个问题：<br>为什么github api会返回一大堆function?</p><p>这些function有什么用?github api不会无缘无故返回没有用的东西</p><p>还有就是为什么console.log(clientWithAuth)返回详细信息，console.log(JSON.stringify(clientWithAuth))返回的却是简要信息呢？难道是因为非JSON数据吗？两者返回的都是JSON数据</p><p>我查找JSON.stringify()认为应该是这个原因:<br>JSON.stringify() 方法是将一个JavaScript值(对象或者数组)转换为一个 JSON字符串，如果指定了replacer是一个函数，则可以替换值，或者如果指定了replacer是一个数组，可选的仅包括指定的属性(参考地址为:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify</a>)</p><p>另外前面虽说不讲mock server的实现思路，但是还是要推荐一下一个开源实现框架 moco。</p><p>github仓库地址为:<a href="https://github.com/dreamhead/moco" target="_blank" rel="noopener">https://github.com/dreamhead/moco</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之加密</title>
      <link href="/2019/02/22/SpringBoot%E4%B9%8B%E5%8A%A0%E5%AF%86/"/>
      <url>/2019/02/22/SpringBoot%E4%B9%8B%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>最近利用闲暇时间写了一个博客系统，主要参考wordpress，主要目的是为了提高自己的技术能力。</p><p>写代码写了两年多，联系到之前在学校的时候写过的一个博客系统，发现工作中开发的系统，技术上基本一致，业务逻辑方面存在差异。</p><p>比如博客系统可能面对高并发的场景，比如某个时间段访问量，再比如博客系统为了最大程度吸引用户(换句话说，提高用户粘性)，在界面上美观，使用上更加方便。通常界面美观伴随着前端js库的增多，特别是一些非常好看的画面或者图像是极其消耗带宽的，带宽如果不给力的话，页面半天打不开，同样也对于用户而言体验不好。</p><p>只想表达一个意思，软件开发万变不离其宗，本质上基本都是一个CMS系统(也许这句话武断了)。</p><p>话不多说，今天我要讲的关于SpringBoot加密。</p><a id="more"></a><p>SSM框架和SpringBoot中加密是不一样的，比如在SSM框架中可以使用Druid进行加密(主要对数据库密码或者是其它重要配置信息加密)，但是在SpringBoot就不一定会适用。</p><p>关于Druid加密，可以参考我的博客园这篇文章:<a href="https://www.cnblogs.com/youcong/p/10140043.html" target="_blank" rel="noopener">Druid加密</a></p><p>SpringBoot使用jasypt-spring-boot-starter加密，具体步骤如下:</p><h2><span id="一-导入maven依赖注意我的springboot版本为159建议最好版本别相差太多否则会出现依赖冲突等问题">一、导入Maven依赖(注意，我的springboot版本为1.5.9，建议最好版本别相差太多，否则会出现依赖冲突等问题)</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">&lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">&lt;version&gt;1.16&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2><span id="二-编写测试类">二、编写测试类</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package cn.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;</span><br><span class="line"></span><br><span class="line">import org.jasypt.encryption.pbe.config.EnvironmentPBEConfig;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line">import org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.blog.springboot.Application;</span><br><span class="line"></span><br><span class="line">import com.blog.springboot.service.UsersService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import cn.hutool.core.util.RandomUtil;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line"></span><br><span class="line">@SpringBootTest(classes = Application.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="line"></span><br><span class="line">public class JunitTest &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"></span><br><span class="line">public void testEncrypt() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        StandardPBEStringEncryptor standardPBEStringEncryptor = new StandardPBEStringEncryptor();</span><br><span class="line"></span><br><span class="line">        EnvironmentPBEConfig config = new EnvironmentPBEConfig();</span><br><span class="line"></span><br><span class="line">        config.setAlgorithm(&quot;PBEWithMD5AndDES&quot;);          // 加密的算法，这个算法是默认的</span><br><span class="line"></span><br><span class="line">        config.setPassword(&quot;lyh&quot;);                        // 加密的密钥</span><br><span class="line"></span><br><span class="line">        standardPBEStringEncryptor.setConfig(config);</span><br><span class="line"></span><br><span class="line">        //加密用户信息</span><br><span class="line"></span><br><span class="line">        String plainText = &quot;youcong&quot;;</span><br><span class="line"></span><br><span class="line">        String encryptedText = standardPBEStringEncryptor.encrypt(plainText);</span><br><span class="line"></span><br><span class="line">        //加密密码信息</span><br><span class="line"></span><br><span class="line">        String Enpassword = &quot;youcong&quot;;</span><br><span class="line"></span><br><span class="line">        String EnpasswordText = standardPBEStringEncryptor.encrypt(Enpassword);</span><br><span class="line"></span><br><span class="line">        String db=&quot;wordpress&quot;;</span><br><span class="line"></span><br><span class="line">        String dbEnc = standardPBEStringEncryptor.encrypt(db);</span><br><span class="line"></span><br><span class="line">        //加密地址信息</span><br><span class="line"></span><br><span class="line">        String DBAUrl = &quot;jdbc:mysql://localhost:3306/blog?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&quot;;</span><br><span class="line"></span><br><span class="line">        String DBAUrlText = standardPBEStringEncryptor.encrypt(DBAUrl);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;用户:&quot;+encryptedText);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;密码:&quot;+EnpasswordText);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;地址:&quot;+DBAUrlText);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;db:&quot;+dbEnc);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="三-在springboot的配置文件添加如下配置这里我以applicationyml配置为例">三、在springboot的配置文件添加如下配置(这里我以application.yml配置为例)</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">jasypt:</span><br><span class="line"></span><br><span class="line">  encryptor:</span><br><span class="line"></span><br><span class="line">    password: lyh</span><br></pre></td></tr></table></figure><p>问:为什么要加这段？</p><p>答:这里的password对应的值lyh相当于密钥，主要用于解密。</p><p>你在单元测试中以什么作为加密，那么在yml中就以什么作为解密。</p><h2><span id="四-配置applicationyml中的数据源">四、配置application.yml中的数据源</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">datasource:</span><br><span class="line"></span><br><span class="line">  url: ENC(cY3NmQF349TpBB0z0KavaiEPNDux/mKEss0UFeA11VTFC545rHh6t1rLC46GlX1b2rm8s5lzX49JmzFE4odcSiPafGZfQvnsHl2yVlLWM3kJg5DvVI4D0l5na3RUPTio4uz1gG9nML1u9ceHuj/yPb1097ZZfbCUsLSyRoeWvhhKuPxAM5mvGLZh641ArtVfRchNcdVZ1W4=)</span><br><span class="line"></span><br><span class="line">  username: ENC(BcbIdbvEq4yN8kezH5mDjg==)</span><br><span class="line"></span><br><span class="line">  password: ENC(Isk3pYM71258wxWTQOt3Dg==)</span><br><span class="line"></span><br><span class="line">  db-name: ENC(CZcfw3ZJN6TVCVxkCW9Ey6z6iAuszHO8)</span><br><span class="line"></span><br><span class="line">  filters: log4j,wall,mergeStat1</span><br></pre></td></tr></table></figure><p>问:为什么要在数据源中添加ENC?</p><p>答:这个ENC相当于解密的标识符。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
